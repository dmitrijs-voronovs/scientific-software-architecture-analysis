id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:14831,Deployability,update,updatePlaneRecursive,14831,"rsive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Par",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:15051,Deployability,update,updatePlaneRecursive,15051,"ct,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection tha",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:20932,Deployability,update,updatePlaneRecursive,20932," PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. Parameters:; pathObjects - input objects to check; region - 2D region; minZ - minimum z for the region (inclusive); maxZ - maximum z for the region (exclusive); minT - minimum t for the region (inclusive); maxT - maximum t for the region (exclusive); ignoreIntersecting - if true, consider objects that overlap the region boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:20979,Deployability,update,updatePlaneRecursive,20979," PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. Parameters:; pathObjects - input objects to check; region - 2D region; minZ - minimum z for the region (inclusive); maxZ - maximum z for the region (exclusive); minT - minimum t for the region (inclusive); maxT - maximum t for the region (exclusive); ignoreIntersecting - if true, consider objects that overlap the region boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:21602,Deployability,update,updatePlane,21602," (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:21657,Deployability,update,updatePlaneRecursive,21657,"the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:21704,Deployability,update,updatePlaneRecursive,21704,"the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22100,Deployability,update,updatePlaneRecursive,22100,"ct, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22164,Deployability,update,updatePlane,22164,"r the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22202,Deployability,update,updatePlane,22202,"r the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22419,Deployability,update,updated,22419,"ate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22435,Deployability,update,updatePlaneRecursive,22435,"ate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22938,Deployability,update,updatePlaneRecursive,22938,"anged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can completely the ROI of a second object.; Returns false if either ROI is null. Parameters:; parentObject - ; childObject - ; Returns:. isAncestor; public static boolean isAncestor(PathObject pathObject,; PathObject possibleAncestor); Query if one object is the ancestor of another. Parameters:; pathObject - ; possibleAncestor - ; Returns:. getTMACoreObjects; public static List<TMACoreObject> getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores); Extract a list of TMA cores from an object hierarchy. If no cores are pre",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51169,Deployability,update,update,51169,"hObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51259,Deployability,update,update,51259,"hObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51480,Deployability,update,update,51480,"me type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an upd",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51570,Deployability,update,update,51570,"me type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an upd",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51717,Deployability,update,update,51717,"s are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Coll",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51942,Deployability,update,update,51942,"on as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap;",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52022,Deployability,toggle,toggleSelectedObjectsLocked,52022,"ers:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52070,Deployability,toggle,toggleSelectedObjectsLocked,52070,"ers:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52188,Deployability,update,update,52188,"ers:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52268,Deployability,toggle,toggleObjectsLocked,52268,"xtends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classific",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52308,Deployability,toggle,toggleObjectsLocked,52308,"xtends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classific",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52502,Deployability,update,update,52502,"t is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObjec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52592,Deployability,update,update,52592,"t is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObjec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:53887,Deployability,update,update,53887,"sificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap); Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). Parameters:; classificationMap - the map containing objects and the classifications that should be applied; Returns:; a collection containing all objects with classifications that were changed. This can be used to fire update events.; See Also:. createClassificationMap(Collection). getRepresentedPathClasses; public static Set<PathClass> getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls); Get a set of the represented path classes, i.e. those with at least 1 manually-labelled object. Parameters:; hierarchy - ; cls - ; Returns:. setIntensityClassification; public static PathClass setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds); Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins.; ; An IllegalArgumentException is thrown if < 1 or > 3 intensity thresholds are provided.; If the object does not have the required measurement, its PathClass will be set to its ; first 'non-intensity' ancestor PathClass.; ; Note that as of v0.3.0, all ignored classes (see PathClassTools.isIgnoredClass(PathClass) are ignored and therefore ; will not be 'intensity classi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:26519,Integrability,depend,depending,26519,"alibrated units. createTMAGrid; public static TMAGrid createTMAGrid(String hLabels,; String vLabels,; boolean rowFirst,; double diameterPixels,; ImageRegion region); Create a new regular TMAGrid, fit within a specified region.; ; For the label string format, see see parseTMALabelString(String). Parameters:; hLabels - a String representing horizontal labels; vLabels - a String representing vertical labels; rowFirst - true if the horizontal label should be added before the vertical label, false otherwise; diameterPixels - the diameter of each core, in pixels; region - bounding box and spacing for the grid (required); Returns:. relabelTMAGrid; public static boolean relabelTMAGrid(TMAGrid grid,; String labelsHorizontal,; String labelsVertical,; boolean rowFirst); Relabel a TMA grid. This will only be effective if enough labels are supplied for the full grid - otherwise no changes will be made.; ; For a TMA core at column c and row r, the label format will be 'Hc-Vr' or 'Hc-Vr', where H is the horizontal label and V the vertical label, ; depending upon the status of the 'rowFirst' flag.; ; An examples of label would be 'A-1', 'A-2', 'B-1', 'B-2' etc. Parameters:; grid - the TMA grid to relabel; labelsHorizontal - a String containing labels for each TMA column, separated by spaces, or a numeric or alphabetic range (e.g. 1-10, or A-G); labelsVertical - a String containing labels for each TMA row, separated by spaces, or a numeric or alphabetic range (e.g. 1-10, or A-G); rowFirst - true if the horizontal label should be added before the vertical label, false otherwise; Returns:; true if there were sufficient horizontal and vertical labels to label the entire grid, false otherwise. convertToPoints; public static void convertToPoints(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean preferNucleus,; boolean deleteObjects); Convert a collection of PathObjects to Point annotations, based on ROI centroids, and add the points to the hierarchy. Parameters",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:55529,Integrability,depend,depending,55529," using createClassificationMap(Collection). Parameters:; classificationMap - the map containing objects and the classifications that should be applied; Returns:; a collection containing all objects with classifications that were changed. This can be used to fire update events.; See Also:. createClassificationMap(Collection). getRepresentedPathClasses; public static Set<PathClass> getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls); Get a set of the represented path classes, i.e. those with at least 1 manually-labelled object. Parameters:; hierarchy - ; cls - ; Returns:. setIntensityClassification; public static PathClass setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds); Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins.; ; An IllegalArgumentException is thrown if < 1 or > 3 intensity thresholds are provided.; If the object does not have the required measurement, its PathClass will be set to its ; first 'non-intensity' ancestor PathClass.; ; Note that as of v0.3.0, all ignored classes (see PathClassTools.isIgnoredClass(PathClass) are ignored and therefore ; will not be 'intensity classified'. Parameters:; pathObject - the object to classify.; measurementName - the name of the measurement to use for thresholding.; thresholds - between 1 and 3 intensity thresholds, used to indicate negative/positive, or negative/1+/2+/3+; Returns:; the PathClass of the object after running this method. setIntensityClassifications; public static void setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds); Set the intensity classifications for the specified objects. Parameters:; pathObjects - ; measurementName - measurement to threshold; thresholds - either 1 or 3 thresholds, depending upon whether objects should be classified as Positive/Negative or Negative/1+/2+/3+. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:465,Modifiability,extend,extends,465,". PathObjectTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathObjectTools. java.lang.Object; qupath.lib.objects.PathObjectTools. public class PathObjectTools; extends Object; A collection of static methods to help work with PathObjects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PathObjectTools();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static void; addTMAGrid(ImageData<?> imageData,; String hLabels,; String vLabels,; boolean rowFirst,; double diameterCalibrated). Create a new regular TMAGrid and set it as active on the hierarchy for an image. static boolean; containsObject(PathObject parentObject,; PathObject childObject). Deprecated. static boolean; containsROI(ROI parentROI,; ROI childROI). Deprecated. static Collection<PathObject>; convertToPoints(Collection<PathObject> pathObjects,; boolean preferNucleus). Convert a collection of PathObjects to Point annotations, based on ROI centroids. static void; convertToPoints(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean preferNucleus,; boolean deleteObjects). Convert a collection of PathObjects to Point annotations, based on ROI centroids, and add the points to the hierarchy. static int; countDescendants(PathObject pathObject). Count the descendants of a PathObject recursively. static int; countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass). Count the number of PathObjects in a collection with a specified class or base class. static Map<PathObject,PathClass>; createClassificationMap(Collection<? extends PathObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:1749,Modifiability,extend,extends,1749,"n; static void; addTMAGrid(ImageData<?> imageData,; String hLabels,; String vLabels,; boolean rowFirst,; double diameterCalibrated). Create a new regular TMAGrid and set it as active on the hierarchy for an image. static boolean; containsObject(PathObject parentObject,; PathObject childObject). Deprecated. static boolean; containsROI(ROI parentROI,; ROI childROI). Deprecated. static Collection<PathObject>; convertToPoints(Collection<PathObject> pathObjects,; boolean preferNucleus). Convert a collection of PathObjects to Point annotations, based on ROI centroids. static void; convertToPoints(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean preferNucleus,; boolean deleteObjects). Convert a collection of PathObjects to Point annotations, based on ROI centroids, and add the points to the hierarchy. static int; countDescendants(PathObject pathObject). Count the descendants of a PathObject recursively. static int; countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass). Count the number of PathObjects in a collection with a specified class or base class. static Map<PathObject,PathClass>; createClassificationMap(Collection<? extends PathObject> pathObjects). Create a mapping between PathObjects and their current PathClasses. static Predicate<PathObject>; createImageRegionPredicate(ImageRegion region). Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. static PathObject; createLike(PathObject pathObject,; ROI roiNew). Create a new object with the same type and classification as the input object, but a new ROI and ID. static PathObject; createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus). Create a new object with the same type and classification as the input object, but a new ROI and ID. static TMAGrid; createTMAGrid(String hLabels,; String vLabels,; boolean rowFirst,; double diameterPixels,; ImageRegion region). Create a ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:1985,Modifiability,extend,extends,1985,"or an image. static boolean; containsObject(PathObject parentObject,; PathObject childObject). Deprecated. static boolean; containsROI(ROI parentROI,; ROI childROI). Deprecated. static Collection<PathObject>; convertToPoints(Collection<PathObject> pathObjects,; boolean preferNucleus). Convert a collection of PathObjects to Point annotations, based on ROI centroids. static void; convertToPoints(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean preferNucleus,; boolean deleteObjects). Convert a collection of PathObjects to Point annotations, based on ROI centroids, and add the points to the hierarchy. static int; countDescendants(PathObject pathObject). Count the descendants of a PathObject recursively. static int; countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass). Count the number of PathObjects in a collection with a specified class or base class. static Map<PathObject,PathClass>; createClassificationMap(Collection<? extends PathObject> pathObjects). Create a mapping between PathObjects and their current PathClasses. static Predicate<PathObject>; createImageRegionPredicate(ImageRegion region). Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. static PathObject; createLike(PathObject pathObject,; ROI roiNew). Create a new object with the same type and classification as the input object, but a new ROI and ID. static PathObject; createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus). Create a new object with the same type and classification as the input object, but a new ROI and ID. static TMAGrid; createTMAGrid(String hLabels,; String vLabels,; boolean rowFirst,; double diameterPixels,; ImageRegion region). Create a new regular TMAGrid, fit within a specified region. static boolean; duplicateAllSelectedObjects(PathObjectHierarchy hierarchy). Duplicate all the selected objects in a hierarchy. static boolean; duplica",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:3643,Modifiability,extend,extends,3643,"I and ID. static TMAGrid; createTMAGrid(String hLabels,; String vLabels,; boolean rowFirst,; double diameterPixels,; ImageRegion region). Create a new regular TMAGrid, fit within a specified region. static boolean; duplicateAllSelectedObjects(PathObjectHierarchy hierarchy). Duplicate all the selected objects in a hierarchy. static boolean; duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects). Duplicate the specified objects, assigning new IDs for each object. static boolean; duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean createNewIDs). Duplicate the specified objects, optionally creating new IDs. static boolean; duplicateSelectedAnnotations(PathObjectHierarchy hierarchy). Duplicate the selected annotation objects. static boolean; duplicateSelectedObjects(PathObjectHierarchy hierarchy,; Predicate<PathObject> predicate). Duplicate the selected objects. static Map<String,PathObject>; findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects). Find objects based on a String representation of their IDs. static Map<UUID,PathObject>; findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects). Find objects based on their IDs. static List<PathObject>; findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting). Get all the objects with ROIs that are outside the bounds of an image. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and ti",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:3813,Modifiability,extend,extends,3813,"thin a specified region. static boolean; duplicateAllSelectedObjects(PathObjectHierarchy hierarchy). Duplicate all the selected objects in a hierarchy. static boolean; duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects). Duplicate the specified objects, assigning new IDs for each object. static boolean; duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean createNewIDs). Duplicate the specified objects, optionally creating new IDs. static boolean; duplicateSelectedAnnotations(PathObjectHierarchy hierarchy). Duplicate the selected annotation objects. static boolean; duplicateSelectedObjects(PathObjectHierarchy hierarchy,; Predicate<PathObject> predicate). Duplicate the selected objects. static Map<String,PathObject>; findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects). Find objects based on a String representation of their IDs. static Map<UUID,PathObject>; findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects). Find objects based on their IDs. static List<PathObject>; findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting). Get all the objects with ROIs that are outside the bounds of an image. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assum",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:3942,Modifiability,extend,extends,3942,"lean; duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects). Duplicate the specified objects, assigning new IDs for each object. static boolean; duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean createNewIDs). Duplicate the specified objects, optionally creating new IDs. static boolean; duplicateSelectedAnnotations(PathObjectHierarchy hierarchy). Duplicate the selected annotation objects. static boolean; duplicateSelectedObjects(PathObjectHierarchy hierarchy,; Predicate<PathObject> predicate). Duplicate the selected objects. static Map<String,PathObject>; findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects). Find objects based on a String representation of their IDs. static Map<UUID,PathObject>; findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects). Find objects based on their IDs. static List<PathObject>; findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting). Get all the objects with ROIs that are outside the bounds of an image. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a s",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:4163,Modifiability,extend,extends,4163,"chy,; Collection<PathObject> pathObjects,; boolean createNewIDs). Duplicate the specified objects, optionally creating new IDs. static boolean; duplicateSelectedAnnotations(PathObjectHierarchy hierarchy). Duplicate the selected annotation objects. static boolean; duplicateSelectedObjects(PathObjectHierarchy hierarchy,; Predicate<PathObject> predicate). Duplicate the selected objects. static Map<String,PathObject>; findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects). Find objects based on a String representation of their IDs. static Map<UUID,PathObject>; findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects). Find objects based on their IDs. static List<PathObject>; findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting). Get all the objects with ROIs that are outside the bounds of an image. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a specified PathObject, or null if the object is not contained within a TMA core. static <T extends PathObject>List<T>; getAreaObjects(Collection<T> pathObjects). Get a list of objects with area ROIs from a collection of o",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:4381,Modifiability,extend,extends,4381,"bjects. static boolean; duplicateSelectedObjects(PathObjectHierarchy hierarchy,; Predicate<PathObject> predicate). Duplicate the selected objects. static Map<String,PathObject>; findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects). Find objects based on a String representation of their IDs. static Map<UUID,PathObject>; findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects). Find objects based on their IDs. static List<PathObject>; findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting). Get all the objects with ROIs that are outside the bounds of an image. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a specified PathObject, or null if the object is not contained within a TMA core. static <T extends PathObject>List<T>; getAreaObjects(Collection<T> pathObjects). Get a list of objects with area ROIs from a collection of objects. static Set<String>; getAvailableFeatures(Collection<? extends PathObject> pathObjects). Get a set containing the names of all measurements found in the measurement lists of a specified object collection. static Collection<PathObject",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:5043,Modifiability,extend,extends,5043,"ide the bounds of an image. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a specified PathObject, or null if the object is not contained within a TMA core. static <T extends PathObject>List<T>; getAreaObjects(Collection<T> pathObjects). Get a list of objects with area ROIs from a collection of objects. static Set<String>; getAvailableFeatures(Collection<? extends PathObject> pathObjects). Get a set containing the names of all measurements found in the measurement lists of a specified object collection. static Collection<PathObject>; getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all descendant objects with a specified type. static List<PathObject>; getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent). Get all descendant objects as a flattened list. static <T extends PathObject>List<T>; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:5235,Modifiability,extend,extends,5235,"n ignoreIntersecting). Get all the objects in a collection that are outside a defined region. static List<PathObject>; findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a specified PathObject, or null if the object is not contained within a TMA core. static <T extends PathObject>List<T>; getAreaObjects(Collection<T> pathObjects). Get a list of objects with area ROIs from a collection of objects. static Set<String>; getAvailableFeatures(Collection<? extends PathObject> pathObjects). Get a set containing the names of all measurements found in the measurement lists of a specified object collection. static Collection<PathObject>; getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all descendant objects with a specified type. static List<PathObject>; getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent). Get all descendant objects as a flattened list. static <T extends PathObject>List<T>; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObject). Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:5506,Modifiability,extend,extends,5506," int minT,; int maxT,; boolean ignoreIntersecting). Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. static List<PathObject>; getAncestorList(PathObject pathObject). Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a specified PathObject, or null if the object is not contained within a TMA core. static <T extends PathObject>List<T>; getAreaObjects(Collection<T> pathObjects). Get a list of objects with area ROIs from a collection of objects. static Set<String>; getAvailableFeatures(Collection<? extends PathObject> pathObjects). Get a set containing the names of all measurements found in the measurement lists of a specified object collection. static Collection<PathObject>; getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all descendant objects with a specified type. static List<PathObject>; getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent). Get all descendant objects as a flattened list. static <T extends PathObject>List<T>; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObject). Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> p",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:5762,Modifiability,extend,extends,5762,"ing that the object is part of a hierarchy with a root). static TMACoreObject; getAncestorTMACore(PathObject pathObject). Get the TMA core object that contains a specified PathObject, or null if the object is not contained within a TMA core. static <T extends PathObject>List<T>; getAreaObjects(Collection<T> pathObjects). Get a list of objects with area ROIs from a collection of objects. static Set<String>; getAvailableFeatures(Collection<? extends PathObject> pathObjects). Get a set containing the names of all measurements found in the measurement lists of a specified object collection. static Collection<PathObject>; getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all descendant objects with a specified type. static List<PathObject>; getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent). Get all descendant objects as a flattened list. static <T extends PathObject>List<T>; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObject). Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectH",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:6479,Modifiability,extend,extends,6479," pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all descendant objects with a specified type. static List<PathObject>; getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent). Get all descendant objects as a flattened list. static <T extends PathObject>List<T>; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObject). Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:6592,Modifiability,extend,extends,6592,"ectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent). Get all descendant objects as a flattened list. static <T extends PathObject>List<T>; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObject). Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y c",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:6821,Modifiability,extend,extends,6821,"; getLineObjects(Collection<T> pathObjects). Get a list of objects with line ROIs from a collection of objects. static ROI; getNucleusOrMainROI(PathObject pathObject). Get the nucleus ROI for a cell, or the main ROI if no nucleus is found. static ROI; getNucleusROI(PathObject pathObject). Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:7080,Modifiability,extend,extends,7080,"he nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a spec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:7232,Modifiability,extend,extends,7232," double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:7286,Modifiability,extend,extends,7286," double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:7344,Modifiability,extend,extends,7344," double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8300,Modifiability,extend,extends,8300,"on<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) a",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8595,Modifiability,extend,extends,8595,"ecified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8644,Modifiability,extend,extends,8644,"ecified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8763,Modifiability,extend,extends,8763," hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane as the selected annota",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8906,Modifiability,extend,extends,8906,"a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane as the selected annotations,; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static String[]; parseTMALabelString(String lab",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8970,Modifiability,extend,extends,8970,"a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane as the selected annotations,; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static String[]; parseTMALabelString(String lab",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:10188,Modifiability,extend,extends,10188,"nnotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane as the selected annotations,; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static String[]; parseTMALabelString(String labelString). Parse a string input representing potential TMA core labels. static boolean; relabelTMAGrid(TMAGrid grid,; String labelsHorizontal,; String labelsVertical,; boolean rowFirst). Relabel a TMA grid. static Collection<PathObject>; removeOverlaps(Collection<? extends PathObject> pathObjects,; Comparator<PathObject> comparator,; double overlapTolerance). Resolve overlaps, discarding one and keeping the other. static Collection<PathObject>; removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away. static Collection<PathObject>; removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. static Collection<PathObject>; restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classificat",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:10409,Modifiability,extend,extends,10409,"ons with the specified PathClass sharing the same ImagePlane, ; creating a single multi-point annotation for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane as the selected annotations,; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static String[]; parseTMALabelString(String labelString). Parse a string input representing potential TMA core labels. static boolean; relabelTMAGrid(TMAGrid grid,; String labelsHorizontal,; String labelsVertical,; boolean rowFirst). Relabel a TMA grid. static Collection<PathObject>; removeOverlaps(Collection<? extends PathObject> pathObjects,; Comparator<PathObject> comparator,; double overlapTolerance). Resolve overlaps, discarding one and keeping the other. static Collection<PathObject>; removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away. static Collection<PathObject>; removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. static Collection<PathObject>; restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurem",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:10665,Modifiability,extend,extends,10665,"archy). Merge point annotations sharing the same PathClass and ImagePlane as the selected annotations,; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static String[]; parseTMALabelString(String labelString). Parse a string input representing potential TMA core labels. static boolean; relabelTMAGrid(TMAGrid grid,; String labelsHorizontal,; String labelsVertical,; boolean rowFirst). Relabel a TMA grid. static Collection<PathObject>; removeOverlaps(Collection<? extends PathObject> pathObjects,; Comparator<PathObject> comparator,; double overlapTolerance). Resolve overlaps, discarding one and keeping the other. static Collection<PathObject>; removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away. static Collection<PathObject>; removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. static Collection<PathObject>; restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds). Set the intensity classifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, spl",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:11355,Modifiability,extend,extends,11355,"thObject>; removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away. static Collection<PathObject>; removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. static Collection<PathObject>; restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds). Set the intensity classifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:11578,Modifiability,extend,extends,11578,"d discarding the object further away. static Collection<PathObject>; removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance). Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. static Collection<PathObject>; restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds). Set the intensity classifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of object",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:11894,Modifiability,extend,extends,11894,"onsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds). Set the intensity classifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparato",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:11941,Modifiability,extend,extends,11941,"onsFromMap(Map<PathObject,PathClass> classificationMap). Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). static PathClass; setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds). Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds). Set the intensity classifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparato",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:12218,Modifiability,extend,extends,12218,"ssifications as positive or negative based upon a specified measurement, using up to 3 intensity bins. static void; setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds). Set the intensity classifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:12453,Modifiability,extend,extends,12453,"lassifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Toggle the 'locked' status of specified objects. static void; toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy). Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. static PathObject; transfo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:12500,Modifiability,extend,extends,12500,"lassifications for the specified objects. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer). Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Toggle the 'locked' status of specified objects. static void; toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy). Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. static PathObject; transfo",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:13164,Modifiability,extend,extends,13164,"ess. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Toggle the 'locked' status of specified objects. static void; toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy). Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create a transformed version of a PathObject with a new ID. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean cop",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:14403,Modifiability,extend,extends,14403,"e event if the status of any object is changed. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create a transformed version of a PathObject with a new ID. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Construct",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:15243,Modifiability,inherit,inherited,15243,"descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> creat",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:15685,Modifiability,extend,extends,15685,"copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> createImageRegionPredicate(ImageRegion region); Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. Parameters:; region - ; Returns:. getLineObjects; public static <T extends PathObject> List<T> getLineObjects(Collection<T> pathObjects); Get a list of objects with line ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getAreaObjects; public static <T extends ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:16033,Modifiability,extend,extends,16033,"nts. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> createImageRegionPredicate(ImageRegion region); Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. Parameters:; region - ; Returns:. getLineObjects; public static <T extends PathObject> List<T> getLineObjects(Collection<T> pathObjects); Get a list of objects with line ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getAreaObjects; public static <T extends PathObject> List<T> getAreaObjects(Collection<T> pathObjects); Get a list of objects with area ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getPointObjects; public static <T extends PathObject> List<T> getPointObjects(Collection<",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:16471,Modifiability,extend,extends,16471,"); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> createImageRegionPredicate(ImageRegion region); Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. Parameters:; region - ; Returns:. getLineObjects; public static <T extends PathObject> List<T> getLineObjects(Collection<T> pathObjects); Get a list of objects with line ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getAreaObjects; public static <T extends PathObject> List<T> getAreaObjects(Collection<T> pathObjects); Get a list of objects with area ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getPointObjects; public static <T extends PathObject> List<T> getPointObjects(Collection<T> pathObjects); Get a list of objects with point ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getFlattenedObjectList; public static List<PathObject> getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent); Get all descendant objects as a flattened list. Parameters:; parentObject - the parent objects whose children and descendants should be added to the list; list - output list, optio",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:16721,Modifiability,extend,extends,16721,"e number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> createImageRegionPredicate(ImageRegion region); Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. Parameters:; region - ; Returns:. getLineObjects; public static <T extends PathObject> List<T> getLineObjects(Collection<T> pathObjects); Get a list of objects with line ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getAreaObjects; public static <T extends PathObject> List<T> getAreaObjects(Collection<T> pathObjects); Get a list of objects with area ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getPointObjects; public static <T extends PathObject> List<T> getPointObjects(Collection<T> pathObjects); Get a list of objects with point ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getFlattenedObjectList; public static List<PathObject> getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent); Get all descendant objects as a flattened list. Parameters:; parentObject - the parent objects whose children and descendants should be added to the list; list - output list, optional; includeParent - if true, parentObject will be included in the output list; Returns:; either list, or a new list created if necessary. countDescendants; public static int countDescendants(PathObject pathObject); Count the descendants of a PathObj",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:16972,Modifiability,extend,extends,16972," Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> createImageRegionPredicate(ImageRegion region); Create a predicate that only accepts PathObjects if they have ROIs that fall within a specified ImageRegion. Parameters:; region - ; Returns:. getLineObjects; public static <T extends PathObject> List<T> getLineObjects(Collection<T> pathObjects); Get a list of objects with line ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getAreaObjects; public static <T extends PathObject> List<T> getAreaObjects(Collection<T> pathObjects); Get a list of objects with area ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getPointObjects; public static <T extends PathObject> List<T> getPointObjects(Collection<T> pathObjects); Get a list of objects with point ROIs from a collection of objects. Type Parameters:; T - ; Parameters:; pathObjects - ; Returns:; Since:; v0.5.0. getFlattenedObjectList; public static List<PathObject> getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent); Get all descendant objects as a flattened list. Parameters:; parentObject - the parent objects whose children and descendants should be added to the list; list - output list, optional; includeParent - if true, parentObject will be included in the output list; Returns:; either list, or a new list created if necessary. countDescendants; public static int countDescendants(PathObject pathObject); Count the descendants of a PathObject recursively. Parameters:; pathObject - ; Returns:. containsROI; @Deprecated; public static boolean containsROI(ROI parentROI,; ROI childROI); Deprecated.; Test whether one ROI is can completely contain a second ROI.; Returns false if either ROI is",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:18491,Modifiability,extend,extends,18491,"onal; includeParent - if true, parentObject will be included in the output list; Returns:; either list, or a new list created if necessary. countDescendants; public static int countDescendants(PathObject pathObject); Count the descendants of a PathObject recursively. Parameters:; pathObject - ; Returns:. containsROI; @Deprecated; public static boolean containsROI(ROI parentROI,; ROI childROI); Deprecated.; Test whether one ROI is can completely contain a second ROI.; Returns false if either ROI is null.; ; Note: This is not a perfect test, since it really only checks if the vertices of the child ROI fall within the parent - it is possible; that connecting lines stray outside the parent, yet it still returns true. This behavior may change in later versions.; ; TODO: Consider improving 'containsROI' method accuracy. Parameters:; parentROI - ; childROI - ; Returns:. findObjectsOutsideImage; public static List<PathObject> findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting); Get all the objects with ROIs that are outside the bounds of an image. Parameters:; pathObjects - the input objects to check; server - the image to check; ignoreIntersecting - if true, consider objects that overlap the image boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the image; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean); findObjectsOutsideRegion(Collection, ImageRegion, int, int, int, int, boolean). findObjectsOutsideRegion; public static List<PathObject> findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region. Parameters:; pathObjects - input objects to check; region - 2D reg",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:19302,Modifiability,extend,extends,19302,"method accuracy. Parameters:; parentROI - ; childROI - ; Returns:. findObjectsOutsideImage; public static List<PathObject> findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting); Get all the objects with ROIs that are outside the bounds of an image. Parameters:; pathObjects - the input objects to check; server - the image to check; ignoreIntersecting - if true, consider objects that overlap the image boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the image; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean); findObjectsOutsideRegion(Collection, ImageRegion, int, int, int, int, boolean). findObjectsOutsideRegion; public static List<PathObject> findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region. Parameters:; pathObjects - input objects to check; region - 2D region; ignoreIntersecting - if true, consider objects that overlap the region boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, int, int, int, int, boolean). findObjectsOutsideRegion; public static List<PathObject> findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. Parameters:; pathObjects - input objects to ch",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:20039,Modifiability,extend,extends,20039,"on, boolean); findObjectsOutsideRegion(Collection, ImageRegion, int, int, int, int, boolean). findObjectsOutsideRegion; public static List<PathObject> findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region. Parameters:; pathObjects - input objects to check; region - 2D region; ignoreIntersecting - if true, consider objects that overlap the region boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, int, int, int, int, boolean). findObjectsOutsideRegion; public static List<PathObject> findObjectsOutsideRegion(Collection<? extends PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. Parameters:; pathObjects - input objects to check; region - 2D region; minZ - minimum z for the region (inclusive); maxZ - maximum z for the region (exclusive); minT - minimum t for the region (inclusive); maxT - maximum t for the region (exclusive); ignoreIntersecting - if true, consider objects that overlap the region boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:23064,Modifiability,extend,extends,23064,". updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can completely the ROI of a second object.; Returns false if either ROI is null. Parameters:; parentObject - ; childObject - ; Returns:. isAncestor; public static boolean isAncestor(PathObject pathObject,; PathObject possibleAncestor); Query if one object is the ancestor of another. Parameters:; pathObject - ; possibleAncestor - ; Returns:. getTMACoreObjects; public static List<TMACoreObject> getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores); Extract a list of TMA cores from an object hierarchy. If no cores are present, an empty list is returned. Parameters:; hierarchy - ; includeMissingCores - ; Returns:. getAncestorTMACore; public static T",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:31020,Modifiability,extend,extends,31020," the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). Parameters:; pathObject - ; Returns:. swapNameAndClass; public static void swapNameAndClass(PathObject pathObject,; boolean includeColor); Swap the name and PathClass of an object.; This can be used as a simple way to preserve a classification that might be required later. Parameters:; pathObject - the object to adjust; includeColor - optionally set the color of the object to the color of the classification. parseTMALabelString; public static String[] parseTMALabelString(String labelString); Parse a string input representing potential TMA core labels.; This can be a space-separated list, or an ascending or descending numeric or alphabetic range.; ; Examples:; ; ""A-H""; ""1-9""; ""H-A""; ""A B D E"". Parameters:; labelString - ; Returns:. getSupportedObjects; public static Collection<? extends PathObject> getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses); From a collection of available objects, extract those that are instances of specified supported classes. Parameters:; availableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. Parameters:; pathObject - ; preferNucleus - ; Returns:. getNucleusOrMainROI; public static ROI getNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Si",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:31073,Modifiability,extend,extends,31073," the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). Parameters:; pathObject - ; Returns:. swapNameAndClass; public static void swapNameAndClass(PathObject pathObject,; boolean includeColor); Swap the name and PathClass of an object.; This can be used as a simple way to preserve a classification that might be required later. Parameters:; pathObject - the object to adjust; includeColor - optionally set the color of the object to the color of the classification. parseTMALabelString; public static String[] parseTMALabelString(String labelString); Parse a string input representing potential TMA core labels.; This can be a space-separated list, or an ascending or descending numeric or alphabetic range.; ; Examples:; ; ""A-H""; ""1-9""; ""H-A""; ""A B D E"". Parameters:; labelString - ; Returns:. getSupportedObjects; public static Collection<? extends PathObject> getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses); From a collection of available objects, extract those that are instances of specified supported classes. Parameters:; availableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. Parameters:; pathObject - ; preferNucleus - ; Returns:. getNucleusOrMainROI; public static ROI getNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Si",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:31131,Modifiability,extend,extends,31131," the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). Parameters:; pathObject - ; Returns:. swapNameAndClass; public static void swapNameAndClass(PathObject pathObject,; boolean includeColor); Swap the name and PathClass of an object.; This can be used as a simple way to preserve a classification that might be required later. Parameters:; pathObject - the object to adjust; includeColor - optionally set the color of the object to the color of the classification. parseTMALabelString; public static String[] parseTMALabelString(String labelString); Parse a string input representing potential TMA core labels.; This can be a space-separated list, or an ascending or descending numeric or alphabetic range.; ; Examples:; ; ""A-H""; ""1-9""; ""H-A""; ""A B D E"". Parameters:; labelString - ; Returns:. getSupportedObjects; public static Collection<? extends PathObject> getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses); From a collection of available objects, extract those that are instances of specified supported classes. Parameters:; availableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. Parameters:; pathObject - ; preferNucleus - ; Returns:. getNucleusOrMainROI; public static ROI getNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Si",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:32330,Modifiability,extend,extends,32330,"ilableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. Parameters:; pathObject - ; preferNucleus - ; Returns:. getNucleusOrMainROI; public static ROI getNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusOrMainROI(PathObject). getDescendantObjects; public static Collection<PathObject> getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all descendant objects with a specified type. Parameters:; pathObject - ; pathObjects - ; cls - ; Returns:. splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> pathObjects); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection, Collection). splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects); Given a co",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:32565,Modifiability,extend,extends,32565,"etNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusOrMainROI(PathObject). getDescendantObjects; public static Collection<PathObject> getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all descendant objects with a specified type. Parameters:; pathObject - ; pathObjects - ; cls - ; Returns:. splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> pathObjects); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection, Collection). splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects); Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. Parameters:; areaObjects - objects with area ROIs; non-area ROIs will be ignored; lineObjects - objects with line ROIs; area ROIs can still be used, but will be treated as lines; Returns:; a map ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:33202,Modifiability,extend,extends,33202,"tObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all descendant objects with a specified type. Parameters:; pathObject - ; pathObjects - ; cls - ; Returns:. splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> pathObjects); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection, Collection). splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects); Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. Parameters:; areaObjects - objects with area ROIs; non-area ROIs will be ignored; lineObjects - objects with line ROIs; area ROIs can still be used, but will be treated as lines; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection). splitAreasByBufferedLines; public static Map<PathObject,List<PathObject>> splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. Parameters:; pathObjects - an input collection of objects, con",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:33249,Modifiability,extend,extends,33249,"tObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all descendant objects with a specified type. Parameters:; pathObject - ; pathObjects - ; cls - ; Returns:. splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> pathObjects); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection, Collection). splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects); Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. Parameters:; areaObjects - objects with area ROIs; non-area ROIs will be ignored; lineObjects - objects with line ROIs; area ROIs can still be used, but will be treated as lines; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection). splitAreasByBufferedLines; public static Map<PathObject,List<PathObject>> splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. Parameters:; pathObjects - an input collection of objects, con",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:33955,Modifiability,extend,extends,33955,"y map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection, Collection). splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects); Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. Parameters:; areaObjects - objects with area ROIs; non-area ROIs will be ignored; lineObjects - objects with line ROIs; area ROIs can still be used, but will be treated as lines; Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection). splitAreasByBufferedLines; public static Map<PathObject,List<PathObject>> splitAreasByBufferedLines(Collection<? extends PathObject> pathObjects,; double buffer); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; buffer - the distance by which to buffer the lines (can be considered a radius).; If 0, this is equivalent to #splitAreasByLines(Collection); Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection); splitAreasByBufferedLines(Collection, Collection, double). splitAreasByBufferedLines; public static Map<PathObject,List<PathObject>> splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer); Split the objects with area ROIs using dividing l",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:34870,Modifiability,extend,extends,34870,"nes(Collection<? extends PathObject> pathObjects,; double buffer); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; buffer - the distance by which to buffer the lines (can be considered a radius).; If 0, this is equivalent to #splitAreasByLines(Collection); Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection); splitAreasByBufferedLines(Collection, Collection, double). splitAreasByBufferedLines; public static Map<PathObject,List<PathObject>> splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer); Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. Parameters:; areaObjects - objects with area ROIs; non-area ROIs will be ignored; lineObjects - objects with line ROIs; non-line ROIs will be ignored; buffer - the distance by which to buffer the lines (can be considered a radius).; If 0, this is equivalent to #splitAreasByLines(Collection); Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection); splitAreasByBufferedLines(Collection, Collection, double). mergePointsForSelectedObjectClasses; public static boolean mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy); Merge point annotations sharing the same PathClass and ImagePlane as the sele",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:34917,Modifiability,extend,extends,34917,"nes(Collection<? extends PathObject> pathObjects,; double buffer); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs, after 'buffering' the lines to increase their thickness. Parameters:; pathObjects - an input collection of objects, containing objects with different ROI types; buffer - the distance by which to buffer the lines (can be considered a radius).; If 0, this is equivalent to #splitAreasByLines(Collection); Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection); splitAreasByBufferedLines(Collection, Collection, double). splitAreasByBufferedLines; public static Map<PathObject,List<PathObject>> splitAreasByBufferedLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects,; double buffer); Split the objects with area ROIs using dividing lines extracted from the objects with line ROIs, after; 'buffering' the lines to increase their thickness. Parameters:; areaObjects - objects with area ROIs; non-area ROIs will be ignored; lineObjects - objects with line ROIs; non-line ROIs will be ignored; buffer - the distance by which to buffer the lines (can be considered a radius).; If 0, this is equivalent to #splitAreasByLines(Collection); Returns:; a map containing the original area objects as keys, and the split objects as values.; This only contains entries for objects that are split; if no objects are split, an empty map is returned.; Since:; v0.5.0; See Also:. splitAreasByLines(Collection); splitAreasByBufferedLines(Collection, Collection, double). mergePointsForSelectedObjectClasses; public static boolean mergePointsForSelectedObjectClasses(PathObjectHierarchy hierarchy); Merge point annotations sharing the same PathClass and ImagePlane as the sele",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:42329,Modifiability,extend,extends,42329,"thObject transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs); Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. ; This method can be applied to all objects in a hierarchy by supplying its root object. The parent-children ; relationships are kept after transformation. Parameters:; pathObject - the object to transform; this will be unchanged; transform - optional affine transform; if null, this effectively acts to duplicate the object; copyMeasurements - if true, the measurement list of the new object will be populated with the measurements of pathObject; createNewIDs - if true, create new IDs for each copied object; otherwise, retain the same ID.; Returns:; the new object, including all child objects; Since:; v0.4.0. findByStringID; public static Map<String,PathObject> findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects); Find objects based on a String representation of their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Collection); matchByID(Collection, Collection). findByUUID; public static Map<UUID,PathObject> findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects); Find objects based on their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByStringID(Collection, Collection); matchByID(Collection, Collection). matchByID; public static Map<PathObject,PathObject> matchByID(",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:42853,Modifiability,extend,extends,42853,"; transform - optional affine transform; if null, this effectively acts to duplicate the object; copyMeasurements - if true, the measurement list of the new object will be populated with the measurements of pathObject; createNewIDs - if true, create new IDs for each copied object; otherwise, retain the same ID.; Returns:; the new object, including all child objects; Since:; v0.4.0. findByStringID; public static Map<String,PathObject> findByStringID(Collection<String> ids,; Collection<? extends PathObject> pathObjects); Find objects based on a String representation of their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Collection); matchByID(Collection, Collection). findByUUID; public static Map<UUID,PathObject> findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects); Find objects based on their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByStringID(Collection, Collection); matchByID(Collection, Collection). matchByID; public static Map<PathObject,PathObject> matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects); Match objects according to their IDs. Parameters:; sourceObjects - source objects; each will correspond to a key in the output map; targetObjects - target objects; each will correspond to a value in the output map provided it has a match in sourceObjects; Returns:; a map between sourceObjects and any matched target objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Co",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:43335,Modifiability,extend,extends,43335,"ts); Find objects based on a String representation of their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Collection); matchByID(Collection, Collection). findByUUID; public static Map<UUID,PathObject> findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects); Find objects based on their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByStringID(Collection, Collection); matchByID(Collection, Collection). matchByID; public static Map<PathObject,PathObject> matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects); Match objects according to their IDs. Parameters:; sourceObjects - source objects; each will correspond to a key in the output map; targetObjects - target objects; each will correspond to a value in the output map provided it has a match in sourceObjects; Returns:; a map between sourceObjects and any matched target objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Collection); findByStringID(Collection, Collection). duplicateAllSelectedObjects; public static boolean duplicateAllSelectedObjects(PathObjectHierarchy hierarchy); Duplicate all the selected objects in a hierarchy. Parameters:; hierarchy - the hierarchy containing the objects to duplicate; Returns:; true if the hierarchy is changed, false otherwise. duplicateSelectedAnnotations; public static boolean duplicateSelectedAnnotations(PathObjectHierarchy hierarchy); Duplicate the selected annotation objects. Selected obje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:43384,Modifiability,extend,extends,43384,"ts); Find objects based on a String representation of their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Collection); matchByID(Collection, Collection). findByUUID; public static Map<UUID,PathObject> findByUUID(Collection<UUID> ids,; Collection<? extends PathObject> pathObjects); Find objects based on their IDs. Parameters:; ids - IDs to match; each will correspond to a key in the output map; pathObjects - the objects that may contain corresponding IDs; Returns:; a map between ids and any matched objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByStringID(Collection, Collection); matchByID(Collection, Collection). matchByID; public static Map<PathObject,PathObject> matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects); Match objects according to their IDs. Parameters:; sourceObjects - source objects; each will correspond to a key in the output map; targetObjects - target objects; each will correspond to a value in the output map provided it has a match in sourceObjects; Returns:; a map between sourceObjects and any matched target objects (or null if no matched object was found); Since:; v0.4.0; See Also:. findByUUID(Collection, Collection); findByStringID(Collection, Collection). duplicateAllSelectedObjects; public static boolean duplicateAllSelectedObjects(PathObjectHierarchy hierarchy); Duplicate all the selected objects in a hierarchy. Parameters:; hierarchy - the hierarchy containing the objects to duplicate; Returns:; true if the hierarchy is changed, false otherwise. duplicateSelectedAnnotations; public static boolean duplicateSelectedAnnotations(PathObjectHierarchy hierarchy); Duplicate the selected annotation objects. Selected obje",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:46013,Modifiability,extend,extends,46013,"Collection<PathObject> pathObjects); Duplicate the specified objects, assigning new IDs for each object. Parameters:; hierarchy - hierarchy containing the objects to duplicate; pathObjects - objects that should be duplicated; Returns:; true if the hierarchy is changed, false otherwise; See Also:. duplicateObjects(PathObjectHierarchy, Collection, boolean). duplicateObjects; public static boolean duplicateObjects(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects,; boolean createNewIDs); Duplicate the specified objects, optionally creating new IDs. Parameters:; hierarchy - hierarchy containing the objects to duplicate; pathObjects - objects that should be duplicated; createNewIDs - if true, create new IDs for each copied object; otherwise, retain the same ID.; Returns:; true if the hierarchy is changed, false otherwise; Since:; v0.4.0. removeOverlapsBySize; public static Collection<PathObject> removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. Parameters:; pathObjects - input object collection, which may contain overlapping objects; overlapTolerance - amount of overlap to permit; recommended value is 0, see removeOverlaps(Collection, Comparator, double); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlapsByLocation; public static Collection<PathObject> removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away.; Note that this is determined using first the bounding box, then the centroid.; This is a simpler (and faster) criterion than measuring distance to the original from the ROI itself. Parameters:; pathObjects - input object collection, which may contain overla",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:46610,Modifiability,extend,extends,46610,"erarchy containing the objects to duplicate; pathObjects - objects that should be duplicated; createNewIDs - if true, create new IDs for each copied object; otherwise, retain the same ID.; Returns:; true if the hierarchy is changed, false otherwise; Since:; v0.4.0. removeOverlapsBySize; public static Collection<PathObject> removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. Parameters:; pathObjects - input object collection, which may contain overlapping objects; overlapTolerance - amount of overlap to permit; recommended value is 0, see removeOverlaps(Collection, Comparator, double); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlapsByLocation; public static Collection<PathObject> removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away.; Note that this is determined using first the bounding box, then the centroid.; This is a simpler (and faster) criterion than measuring distance to the original from the ROI itself. Parameters:; pathObjects - input object collection, which may contain overlapping objects; overlapTolerance - amount of overlap to permit; recommended value is 0, see removeOverlaps(Collection, Comparator, double); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlaps; public static Collection<PathObject> removeOverlaps(Collection<? extends PathObject> pathObjects,; Comparator<PathObject> comparator,; double overlapTolerance); Resolve overlaps, discarding one and keeping the other.; It assumes that the objects have been sorted so that 'preferred' objects occur first.; ; 'How overlapping' can be controlled by",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:47374,Modifiability,extend,extends,47374,"ble); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlapsByLocation; public static Collection<PathObject> removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away.; Note that this is determined using first the bounding box, then the centroid.; This is a simpler (and faster) criterion than measuring distance to the original from the ROI itself. Parameters:; pathObjects - input object collection, which may contain overlapping objects; overlapTolerance - amount of overlap to permit; recommended value is 0, see removeOverlaps(Collection, Comparator, double); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlaps; public static Collection<PathObject> removeOverlaps(Collection<? extends PathObject> pathObjects,; Comparator<PathObject> comparator,; double overlapTolerance); Resolve overlaps, discarding one and keeping the other.; It assumes that the objects have been sorted so that 'preferred' objects occur first.; ; 'How overlapping' can be controlled by the overlapTolerance, where an overlap will be removed; ; if overlapTolerance > 0 and the area of the intersection between ROIs is < overlapTolerance (an absolute comparison); if overlapTolerance < 0 and the proportion of the smaller ROI intersecting the larger ROI is < -overlapTolerance (a relative comparison); if overlapTolerance == 0 and there is any non-zero area intersection between ROIs; ; For example, overlapTolerance == 10 will require at least 10 pixels between ROIs to intersect to be considered an overlap,; while overlapTolerance == 0.01 will require at least 1% of the area of the smaller ROI to intersect.; ; It is recommended to keep overlapTolerance == 0 in most instances to remove all overlaps.; This is also less computationally ex",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:48977,Modifiability,extend,extends,48977,"e == 0 and there is any non-zero area intersection between ROIs; ; For example, overlapTolerance == 10 will require at least 10 pixels between ROIs to intersect to be considered an overlap,; while overlapTolerance == 0.01 will require at least 1% of the area of the smaller ROI to intersect.; ; It is recommended to keep overlapTolerance == 0 in most instances to remove all overlaps.; This is also less computationally expensive because it means intersection areas do not need to be calculated. Parameters:; pathObjects - input object collection, which may contain overlapping objects; comparator - comparator, which determines which object is retained when overlaps are found.; Considering the collection to be sorted by the comparator, the 'first' object is the one that will be kept.; overlapTolerance - amount of overlap to permit; Returns:; collection of objects, which should have smaller overlapping objects removed. mergeObjects; public static PathObject mergeObjects(Collection<? extends PathObject> pathObjects); Merge objects by calculating the union of their ROIs. Parameters:; pathObjects - a collection of annotations, cells, detections or tiles. Note that all objects must be of the same type.; Returns:; a single object with ROI(s) determined by union. The classification and name will be taken from the first ROI in the collection.; Throws:; IllegalArgumentException - if no objects are provided (either null or empty list). mergeObjects; public static <K> List<PathObject> mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier); Merge objects that share a property in common.; ; Note that objects must all be of the same type (e.g. cells, detections, annotations). Parameters:; pathObjects - ; classifier - function extracting the shared property, e.g. p -> p.getName(); Returns:; a new list of objects generated by merging grouped objects.; See Also:. mergeObjects(Collection). createLike; public static PathObject createLi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:49505,Modifiability,extend,extends,49505," which may contain overlapping objects; comparator - comparator, which determines which object is retained when overlaps are found.; Considering the collection to be sorted by the comparator, the 'first' object is the one that will be kept.; overlapTolerance - amount of overlap to permit; Returns:; collection of objects, which should have smaller overlapping objects removed. mergeObjects; public static PathObject mergeObjects(Collection<? extends PathObject> pathObjects); Merge objects by calculating the union of their ROIs. Parameters:; pathObjects - a collection of annotations, cells, detections or tiles. Note that all objects must be of the same type.; Returns:; a single object with ROI(s) determined by union. The classification and name will be taken from the first ROI in the collection.; Throws:; IllegalArgumentException - if no objects are provided (either null or empty list). mergeObjects; public static <K> List<PathObject> mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier); Merge objects that share a property in common.; ; Note that objects must all be of the same type (e.g. cells, detections, annotations). Parameters:; pathObjects - ; classifier - function extracting the shared property, e.g. p -> p.getName(); Returns:; a new list of objects generated by merging grouped objects.; See Also:. mergeObjects(Collection). createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew); Create a new object with the same type and classification as the input object, but a new ROI and ID.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:49569,Modifiability,extend,extends,49569," which may contain overlapping objects; comparator - comparator, which determines which object is retained when overlaps are found.; Considering the collection to be sorted by the comparator, the 'first' object is the one that will be kept.; overlapTolerance - amount of overlap to permit; Returns:; collection of objects, which should have smaller overlapping objects removed. mergeObjects; public static PathObject mergeObjects(Collection<? extends PathObject> pathObjects); Merge objects by calculating the union of their ROIs. Parameters:; pathObjects - a collection of annotations, cells, detections or tiles. Note that all objects must be of the same type.; Returns:; a single object with ROI(s) determined by union. The classification and name will be taken from the first ROI in the collection.; Throws:; IllegalArgumentException - if no objects are provided (either null or empty list). mergeObjects; public static <K> List<PathObject> mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier); Merge objects that share a property in common.; ; Note that objects must all be of the same type (e.g. cells, detections, annotations). Parameters:; pathObjects - ; classifier - function extracting the shared property, e.g. p -> p.getName(); Returns:; a new list of objects generated by merging grouped objects.; See Also:. mergeObjects(Collection). createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew); Create a new object with the same type and classification as the input object, but a new ROI and ID.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51051,Modifiability,extend,extends,51051,"object with the same type and classification as the input object, but a new ROI and ID.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObject",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51360,Modifiability,extend,extends,51360,"d ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52373,Modifiability,extend,extends,52373,"xtends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classific",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52682,Modifiability,extend,extends,52682,"n update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap); Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). Parameters:; classificationMap - the map contai",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52973,Modifiability,extend,extends,52973,"any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap); Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). Parameters:; classificationMap - the map containing objects and the classifications that should be applied; Returns:; a collection containing all objects with classifications that were changed. This can be used to fire update events.; See Also:. createClassificationMap(Collection). getRepresentedPathCla",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:54073,Modifiability,extend,extends,54073," their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap); Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). Parameters:; classificationMap - the map containing objects and the classifications that should be applied; Returns:; a collection containing all objects with classifications that were changed. This can be used to fire update events.; See Also:. createClassificationMap(Collection). getRepresentedPathClasses; public static Set<PathClass> getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls); Get a set of the represented path classes, i.e. those with at least 1 manually-labelled object. Parameters:; hierarchy - ; cls - ; Returns:. setIntensityClassification; public static PathClass setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds); Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins.; ; An IllegalArgumentException is thrown if < 1 or > 3 intensity thresholds are provided.; If the object does not have the required measurement, its PathClass will be set to its ; first 'non-intensity' ancestor PathClass.; ; Note that as of v0.3.0, all ignored classes (see PathClassTools.isIgnoredClass(PathClass) are ignored and therefore ; will not be 'intensity classified'. Parameters:; pathObject - the object to classify.; measurementName - the name of the measurement to use for thresholding.; thresholds - between 1 and 3 intensi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:55274,Modifiability,extend,extends,55274," using createClassificationMap(Collection). Parameters:; classificationMap - the map containing objects and the classifications that should be applied; Returns:; a collection containing all objects with classifications that were changed. This can be used to fire update events.; See Also:. createClassificationMap(Collection). getRepresentedPathClasses; public static Set<PathClass> getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls); Get a set of the represented path classes, i.e. those with at least 1 manually-labelled object. Parameters:; hierarchy - ; cls - ; Returns:. setIntensityClassification; public static PathClass setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds); Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins.; ; An IllegalArgumentException is thrown if < 1 or > 3 intensity thresholds are provided.; If the object does not have the required measurement, its PathClass will be set to its ; first 'non-intensity' ancestor PathClass.; ; Note that as of v0.3.0, all ignored classes (see PathClassTools.isIgnoredClass(PathClass) are ignored and therefore ; will not be 'intensity classified'. Parameters:; pathObject - the object to classify.; measurementName - the name of the measurement to use for thresholding.; thresholds - between 1 and 3 intensity thresholds, used to indicate negative/positive, or negative/1+/2+/3+; Returns:; the PathClass of the object after running this method. setIntensityClassifications; public static void setIntensityClassifications(Collection<? extends PathObject> pathObjects,; String measurementName,; double... thresholds); Set the intensity classifications for the specified objects. Parameters:; pathObjects - ; measurementName - measurement to threshold; thresholds - either 1 or 3 thresholds, depending upon whether objects should be classified as Positive/Negative or Negative/1+/2+/3+. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:31765,Safety,avoid,avoids,31765,"al TMA core labels.; This can be a space-separated list, or an ascending or descending numeric or alphabetic range.; ; Examples:; ; ""A-H""; ""1-9""; ""H-A""; ""A B D E"". Parameters:; labelString - ; Returns:. getSupportedObjects; public static Collection<? extends PathObject> getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses); From a collection of available objects, extract those that are instances of specified supported classes. Parameters:; availableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. Parameters:; pathObject - ; preferNucleus - ; Returns:. getNucleusOrMainROI; public static ROI getNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusOrMainROI(PathObject). getDescendantObjects; public static Collection<PathObject> getDescendantObjects(PathObject pathObject,; Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all descendant objects with a specified type. Parameters:; pathObject - ; pathObjects - ; cls - ; Returns:. splitAreasByLines; public static Map<PathObject,List<PathObject>> splitAreasByLines(Collection<? extends PathObject> pathObjects); Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. Parameters:; pathObjects - an input collec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:38365,Safety,detect,detections,38365,"ving duplicates. Parameters:; pathObjects - collection of objects with classifications that should be standardized; Returns:; true if changes were made, false otherwise. standardizeClassifications; public static boolean standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator); Standardize the classifications for a collection of objects.; This involves sorting the names of derived classes, and removing duplicates. Parameters:; pathObjects - collection of objects with classifications that should be standardized; comparator - comparator to use when sorting; Returns:; true if changes were made, false otherwise. transformObject; public static PathObject transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements); Create a transformed version of a PathObject with a new ID.; If the transform is null or the identity transform, then a duplicate object is generated instead.; ; Note: only detections (including tiles and cells) and annotations are fully supported by this method.; Root objects are duplicated.; TMA core objects are transformed only if the resulting transform creates an ellipse ROI, since this is ; currently the only ROI type supported for a TMA core (this behavior may change).; Any other object types result in an UnsupportedOperationException being thrown. Parameters:; pathObject - the object to transform; this will be unchanged; transform - optional affine transform; if null, this effectively acts to duplicate the object; copyMeasurements - if true, the measurement list of the new object will be populated with the measurements of pathObject; Returns:; a duplicate of pathObject, with affine transform applied to the object's ROI(s) if required; See Also:. transformObject(PathObject, AffineTransform, boolean, boolean). transformObject; public static PathObject transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs); Create a transforme",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:39569,Safety,detect,detections,39569,"I type supported for a TMA core (this behavior may change).; Any other object types result in an UnsupportedOperationException being thrown. Parameters:; pathObject - the object to transform; this will be unchanged; transform - optional affine transform; if null, this effectively acts to duplicate the object; copyMeasurements - if true, the measurement list of the new object will be populated with the measurements of pathObject; Returns:; a duplicate of pathObject, with affine transform applied to the object's ROI(s) if required; See Also:. transformObject(PathObject, AffineTransform, boolean, boolean). transformObject; public static PathObject transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs); Create a transformed version of a PathObject, optionally with a new ID.; If the transform is null or the identity transform, then a duplicate object is generated instead.; ; Note: only detections (including tiles and cells), annotations and root objects are fully supported by this method.; TMA core objects are transformed only if the resulting transform creates an ellipse ROI, since this is ; currently the only ROI type supported for a TMA core (this behavior may change).; Any other object types result in an UnsupportedOperationException being thrown. Parameters:; pathObject - the object to transform; this will be unchanged; transform - optional affine transform; if null, this effectively acts to duplicate the object; copyMeasurements - if true, the measurements and metadata maps of the new object will be populated with those from the pathObject; createNewIDs - if true, create new IDs for each copied object; otherwise, retain the same ID.; Returns:; a duplicate of pathObject, with affine transform applied to the object's ROI(s) if required; Since:; v0.4.0. transformObjectRecursive; public static PathObject transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements); Cr",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:49128,Safety,detect,detections,49128,"least 10 pixels between ROIs to intersect to be considered an overlap,; while overlapTolerance == 0.01 will require at least 1% of the area of the smaller ROI to intersect.; ; It is recommended to keep overlapTolerance == 0 in most instances to remove all overlaps.; This is also less computationally expensive because it means intersection areas do not need to be calculated. Parameters:; pathObjects - input object collection, which may contain overlapping objects; comparator - comparator, which determines which object is retained when overlaps are found.; Considering the collection to be sorted by the comparator, the 'first' object is the one that will be kept.; overlapTolerance - amount of overlap to permit; Returns:; collection of objects, which should have smaller overlapping objects removed. mergeObjects; public static PathObject mergeObjects(Collection<? extends PathObject> pathObjects); Merge objects by calculating the union of their ROIs. Parameters:; pathObjects - a collection of annotations, cells, detections or tiles. Note that all objects must be of the same type.; Returns:; a single object with ROI(s) determined by union. The classification and name will be taken from the first ROI in the collection.; Throws:; IllegalArgumentException - if no objects are provided (either null or empty list). mergeObjects; public static <K> List<PathObject> mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier); Merge objects that share a property in common.; ; Note that objects must all be of the same type (e.g. cells, detections, annotations). Parameters:; pathObjects - ; classifier - function extracting the shared property, e.g. p -> p.getName(); Returns:; a new list of objects generated by merging grouped objects.; See Also:. mergeObjects(Collection). createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew); Create a new object with the same type and classification as the input object,",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:49703,Safety,detect,detections,49703,"he comparator, the 'first' object is the one that will be kept.; overlapTolerance - amount of overlap to permit; Returns:; collection of objects, which should have smaller overlapping objects removed. mergeObjects; public static PathObject mergeObjects(Collection<? extends PathObject> pathObjects); Merge objects by calculating the union of their ROIs. Parameters:; pathObjects - a collection of annotations, cells, detections or tiles. Note that all objects must be of the same type.; Returns:; a single object with ROI(s) determined by union. The classification and name will be taken from the first ROI in the collection.; Throws:; IllegalArgumentException - if no objects are provided (either null or empty list). mergeObjects; public static <K> List<PathObject> mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier); Merge objects that share a property in common.; ; Note that objects must all be of the same type (e.g. cells, detections, annotations). Parameters:; pathObjects - ; classifier - function extracting the shared property, e.g. p -> p.getName(); Returns:; a new list of objects generated by merging grouped objects.; See Also:. mergeObjects(Collection). createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew); Create a new object with the same type and classification as the input object, but a new ROI and ID.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathO",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:15317,Security,hash,hashCode,15317,"bjects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection that are instances of a specified class. Parameters:; pathObjects - ; cls - ; Returns:. createImageRegionPredicate; public static Predicate<PathObject> createImageRegionPredicate(ImageRegion region); Create a predicate that only ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:18062,Testability,test,test,18062,"arameters:; pathObjects - ; Returns:; Since:; v0.5.0. getFlattenedObjectList; public static List<PathObject> getFlattenedObjectList(PathObject parentObject,; List<PathObject> list,; boolean includeParent); Get all descendant objects as a flattened list. Parameters:; parentObject - the parent objects whose children and descendants should be added to the list; list - output list, optional; includeParent - if true, parentObject will be included in the output list; Returns:; either list, or a new list created if necessary. countDescendants; public static int countDescendants(PathObject pathObject); Count the descendants of a PathObject recursively. Parameters:; pathObject - ; Returns:. containsROI; @Deprecated; public static boolean containsROI(ROI parentROI,; ROI childROI); Deprecated.; Test whether one ROI is can completely contain a second ROI.; Returns false if either ROI is null.; ; Note: This is not a perfect test, since it really only checks if the vertices of the child ROI fall within the parent - it is possible; that connecting lines stray outside the parent, yet it still returns true. This behavior may change in later versions.; ; TODO: Consider improving 'containsROI' method accuracy. Parameters:; parentROI - ; childROI - ; Returns:. findObjectsOutsideImage; public static List<PathObject> findObjectsOutsideImage(Collection<? extends PathObject> pathObjects,; ImageServer<?> server,; boolean ignoreIntersecting); Get all the objects with ROIs that are outside the bounds of an image. Parameters:; pathObjects - the input objects to check; server - the image to check; ignoreIntersecting - if true, consider objects that overlap the image boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the image; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean); findObject",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:7133,Usability,user-friendly,user-friendly,7133," static Collection<PathObject>; getObjectsForLocation(PathObjectHierarchy hierarchy,; double x,; double y,; int zPos,; int tPos,; double vertexDistance). Get a collection of objects that overlap a specified pixel location. static List<PathObject>; getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get the PathObjects in a collection that are instances of a specified class. static <T extends PathObject>List<T>; getPointObjects(Collection<T> pathObjects). Get a list of objects with point ROIs from a collection of objects. static Set<PathClass>; getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls). Get a set of the represented path classes, i.e. static ROI; getROI(PathObject pathObject,; boolean preferNucleus). Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. static String; getSuitableName(Class<? extends PathObject> cls,; boolean makePlural). Get a user-friendly name for a specific type of PathObject, based on its Java class. static Collection<? extends PathObject>; getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses). From a collection of available objects, extract those that are instances of specified supported classes. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possib",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:23117,Usability,user-friendly,user-friendly,23117,". updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can completely the ROI of a second object.; Returns false if either ROI is null. Parameters:; parentObject - ; childObject - ; Returns:. isAncestor; public static boolean isAncestor(PathObject pathObject,; PathObject possibleAncestor); Query if one object is the ancestor of another. Parameters:; pathObject - ; possibleAncestor - ; Returns:. getTMACoreObjects; public static List<TMACoreObject> getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores); Extract a list of TMA cores from an object hierarchy. If no cores are present, an empty list is returned. Parameters:; hierarchy - ; includeMissingCores - ; Returns:. getAncestorTMACore; public static T",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:30435,Usability,simpl,simple,30435,"ixel location.; ; For area ROIs, this means the ROI should contain the pixel. For non-area ROIs an ; optional vertex distance can be used to define a distance tolerance to the nearest vertex ; or line segment. Parameters:; hierarchy - object hierarchy within which to find the object; x - x-coordinate of the pixel; y - y-coordinate of the pixel; zPos - z-slice number; tPos - time-point number; vertexDistance - for non-area ROIs, the distance from the closest vertex or line segment (or < 0 to ignore non-area ROIs).; Returns:. getAncestorList; public static List<PathObject> getAncestorList(PathObject pathObject); Return a list of object ancestors, starting from the root object and ending with PathObject; (assuming that the object is part of a hierarchy with a root). Parameters:; pathObject - ; Returns:. swapNameAndClass; public static void swapNameAndClass(PathObject pathObject,; boolean includeColor); Swap the name and PathClass of an object.; This can be used as a simple way to preserve a classification that might be required later. Parameters:; pathObject - the object to adjust; includeColor - optionally set the color of the object to the color of the classification. parseTMALabelString; public static String[] parseTMALabelString(String labelString); Parse a string input representing potential TMA core labels.; This can be a space-separated list, or an ascending or descending numeric or alphabetic range.; ; Examples:; ; ""A-H""; ""1-9""; ""H-A""; ""A B D E"". Parameters:; labelString - ; Returns:. getSupportedObjects; public static Collection<? extends PathObject> getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses); From a collection of available objects, extract those that are instances of specified supported classes. Parameters:; availableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:46891,Usability,simpl,simpler,46891,"lapsBySize; public static Collection<PathObject> removeOverlapsBySize(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping objects by size, retaining the object with the larger ROI and discarding the object with the smaller ROI. Parameters:; pathObjects - input object collection, which may contain overlapping objects; overlapTolerance - amount of overlap to permit; recommended value is 0, see removeOverlaps(Collection, Comparator, double); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlapsByLocation; public static Collection<PathObject> removeOverlapsByLocation(Collection<? extends PathObject> pathObjects,; double overlapTolerance); Resolve overlapping object by location, retaining the object closest to the image 'origin' and discarding the object further away.; Note that this is determined using first the bounding box, then the centroid.; This is a simpler (and faster) criterion than measuring distance to the original from the ROI itself. Parameters:; pathObjects - input object collection, which may contain overlapping objects; overlapTolerance - amount of overlap to permit; recommended value is 0, see removeOverlaps(Collection, Comparator, double); Returns:; output collection of objects, which should have smaller overlapping objects removed. removeOverlaps; public static Collection<PathObject> removeOverlaps(Collection<? extends PathObject> pathObjects,; Comparator<PathObject> comparator,; double overlapTolerance); Resolve overlaps, discarding one and keeping the other.; It assumes that the objects have been sorted so that 'preferred' objects occur first.; ; 'How overlapping' can be controlled by the overlapTolerance, where an overlap will be removed; ; if overlapTolerance > 0 and the area of the intersection between ROIs is < overlapTolerance (an absolute comparison); if overlapTolerance < 0 and the proportion of the smaller ROI intersecting the larger ROI is < -over",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathObjectTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:1106,Availability,avail,available,1106,". Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathROIObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; PathAnnotationObject, PathDetectionObject, TMACoreObject. public abstract class PathROIObject; extends PathObject; Abstract class used for PathObjects that have ROIs associated with them.; ; In practice, this is almost all PathObjects (with the notable exception of PathRootObjects). Author:; Pete Bankhead; See Also:. Serialized Form. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; double; getClassProbability(). Request the classification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). Deprecated.; since v0.4.0. boolean; isLocked(). Query the locked status for the object, indicating whether it should be editable or not. void; readExternal(ObjectInput in);  ; void; setLocked(boolean locked). Set locked flag, indicating that the object ROI should not be modified. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. void; setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, g",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:4607,Availability,avail,available,4607,"n isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEditable(); Deprecated.; since v0.4.0. Return true if isLocked() is false, otherwise returns false.; ; This method existed before isLocked() to try to automatically determine whether ; an object should be locked or not. Now the isLocked() flag should be used instead. Specified by:; isEditable in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass - ; classProbability - . getClassProbability; public double getClassProbability(); Description copied from class: PathObject; Request the classification probability, or Double.NaN if no probability is available. Specified by:; getClassProbability in class PathObject; Returns:. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. getROI; public ROI getROI(); Description copied from class: PathObject; Get the region of interest (ROI) for the object. Specified by:; getROI in class PathObject; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:2939,Deployability,update,update,2939,"p, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is not; enforced locally.; ; TODO: Consider shifting this method into PathObject rather than PathROIObject (even; if it doesn't really do anything there). Overrides:; setLocked in class PathObject; Parameters:; locked - . isLocked; public boolean isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEditable(); Deprecated.; since v0.4.0. Return true if isLocked() is false, otherwise returns false.; ; This method existed before isLocked() to try to automatically determine whether ; an object should be locked or not. Now the isLocked() flag shoul",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:5157,Integrability,interface,interface,5157,"n isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEditable(); Deprecated.; since v0.4.0. Return true if isLocked() is false, otherwise returns false.; ; This method existed before isLocked() to try to automatically determine whether ; an object should be locked or not. Now the isLocked() flag should be used instead. Specified by:; isEditable in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass - ; classProbability - . getClassProbability; public double getClassProbability(); Description copied from class: PathObject; Request the classification probability, or Double.NaN if no probability is available. Specified by:; getClassProbability in class PathObject; Returns:. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. getROI; public ROI getROI(); Description copied from class: PathObject; Get the region of interest (ROI) for the object. Specified by:; getROI in class PathObject; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:5384,Integrability,interface,interface,5384,"n isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEditable(); Deprecated.; since v0.4.0. Return true if isLocked() is false, otherwise returns false.; ; This method existed before isLocked() to try to automatically determine whether ; an object should be locked or not. Now the isLocked() flag should be used instead. Specified by:; isEditable in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass - ; classProbability - . getClassProbability; public double getClassProbability(); Description copied from class: PathObject; Request the classification probability, or Double.NaN if no probability is available. Specified by:; getClassProbability in class PathObject; Returns:. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. getROI; public ROI getROI(); Description copied from class: PathObject; Get the region of interest (ROI) for the object. Specified by:; getROI in class PathObject; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:640,Modifiability,extend,extends,640,". PathROIObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathROIObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; PathAnnotationObject, PathDetectionObject, TMACoreObject. public abstract class PathROIObject; extends PathObject; Abstract class used for PathObjects that have ROIs associated with them.; ; In practice, this is almost all PathObjects (with the notable exception of PathRootObjects). Author:; Pete Bankhead; See Also:. Serialized Form. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; double; getClassProbability(). Request the classification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). Deprecated.; since v0.4.0. boolean; isLocked(). Query the locked status for the object, indicating whether it should be editable or not. void; readExternal(ObjectInput in);  ; void; setLocked(boolean locked). Set locked flag, indicating that the object ROI should not be modified. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. void; setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getC",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:1798,Modifiability,inherit,inherited,1798," of PathRootObjects). Author:; Pete Bankhead; See Also:. Serialized Form. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; double; getClassProbability(). Request the classification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). Deprecated.; since v0.4.0. boolean; isLocked(). Query the locked status for the object, indicating whether it should be editable or not. void; readExternal(ObjectInput in);  ; void; setLocked(boolean locked). Set locked flag, indicating that the object ROI should not be modified. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. void; setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait,",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:2694,Modifiability,inherit,inherited,2694,"setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is not; enforced locally.; ; TODO: Consider shifting this method into PathObject rather than PathROIObject (even; if it doesn't really do anything there). Overrides:; setLocked in class PathObject; Parameters:; locked - . isLocked; public boolean isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEdit",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:2768,Security,hash,hashCode,2768,"bjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is not; enforced locally.; ; TODO: Consider shifting this method into PathObject rather than PathROIObject (even; if it doesn't really do anything there). Overrides:; setLocked in class PathObject; Parameters:; locked - . isLocked; public boolean isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEditable(); Deprecated.; since v0.4.0. Return true if isLocked() is fal",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:1914,Usability,clear,clearChildObjects,1914,"able(). Deprecated.; since v0.4.0. boolean; isLocked(). Query the locked status for the object, indicating whether it should be editable or not. void; readExternal(ObjectInput in);  ; void; setLocked(boolean locked). Set locked flag, indicating that the object ROI should not be modified. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. void; setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is no",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:1933,Usability,clear,clearMetadataMap,1933,"able(). Deprecated.; since v0.4.0. boolean; isLocked(). Query the locked status for the object, indicating whether it should be editable or not. void; readExternal(ObjectInput in);  ; void; setLocked(boolean locked). Set locked flag, indicating that the object ROI should not be modified. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. void; setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is no",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:1951,Usability,clear,clearPathObjects,1951,"able(). Deprecated.; since v0.4.0. boolean; isLocked(). Query the locked status for the object, indicating whether it should be editable or not. void; readExternal(ObjectInput in);  ; void; setLocked(boolean locked). Set locked flag, indicating that the object ROI should not be modified. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. void; setROI(ROI roi). Set the ROI for this object. void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is no",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathROIObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:1033,Availability,avail,available,1033,"0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathRootObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathRootObject. All Implemented Interfaces:; Externalizable, Serializable. public class PathRootObject; extends PathObject; The root object used at the base of a PathObjectHierarchy.; ; This doesn't have a ROI, and can't have its PathClass set. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; PathRootObject();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; double; getClassProbability(). Request the classification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). The root object is never locked. boolean; isRootObject(). Returns true if the object is the 'root' of an object hierarchy. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:3628,Availability,avail,available,3628,"scendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass - ; classProbability - . getClassProbability; public double getClassProbability(); Description copied from class: PathObject; Request the classification probability, or Double.NaN if no probability is available. Specified by:; getClassProbability in class PathObject; Returns:. getROI; public ROI getROI(); Description copied from class: PathObject; Get the region of interest (ROI) for the object. Specified by:; getROI in class PathObject; Returns:. toString; public String toString(). Overrides:; toString in class PathObject. isEditable; public boolean isEditable(); The root object is never locked. Specified by:; isEditable in class PathObject; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:551,Modifiability,extend,extends,551,". PathRootObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathRootObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathRootObject. All Implemented Interfaces:; Externalizable, Serializable. public class PathRootObject; extends PathObject; The root object used at the base of a PathObjectHierarchy.; ; This doesn't have a ROI, and can't have its PathClass set. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; PathRootObject();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; double; getClassProbability(). Request the classification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). The root object is never locked. boolean; isRootObject(). Returns true if the object is the 'root' of an object hierarchy. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, has",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:1496,Modifiability,inherit,inherited,1496,"e, Serializable. public class PathRootObject; extends PathObject; The root object used at the base of a PathObjectHierarchy.; ; This doesn't have a ROI, and can't have its PathClass set. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; PathRootObject();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; double; getClassProbability(). Request the classification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). The root object is never locked. boolean; isRootObject(). Returns true if the object is the 'root' of an object hierarchy. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isLocked, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, noti",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:2418,Modifiability,inherit,inherited,2418,"ecifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isLocked, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:2492,Security,hash,hashCode,2492,"ds inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isLocked, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass - ; classProbability - . getClassProbability; public double getClas",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:1612,Usability,clear,clearChildObjects,1612,"assification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). The root object is never locked. boolean; isRootObject(). Returns true if the object is the 'root' of an object hierarchy. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isLocked, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:1631,Usability,clear,clearMetadataMap,1631,"assification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). The root object is never locked. boolean; isRootObject(). Returns true if the object is the 'root' of an object hierarchy. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isLocked, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:1649,Usability,clear,clearPathObjects,1649,"assification probability, or Double.NaN if no probability is available. PathClass; getPathClass(). Get the classification of the object. ROI; getROI(). Get the region of interest (ROI) for the object. boolean; isEditable(). The root object is never locked. boolean; isRootObject(). Returns true if the object is the 'root' of an object hierarchy. void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. String; toString();  . Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isLocked, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathRootObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:671,Modifiability,extend,extends,671,". PathTileObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; ParallelTileObject. public class PathTileObject; extends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:1183,Modifiability,inherit,inherited,1183,"ethod. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; ParallelTileObject. public class PathTileObject; extends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys,",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:1305,Modifiability,inherit,inherited,1305,"ethod. SEARCH. Package qupath.lib.objects; Class PathTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; ParallelTileObject. public class PathTileObject; extends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataVa",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:1483,Modifiability,inherit,inherited,1483,"onObject; qupath.lib.objects.PathTileObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; ParallelTileObject. public class PathTileObject; extends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathTileObjec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:2338,Modifiability,inherit,inherited,2338,"tends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathTileObject; public PathTileObject(); Default constructor. Should not be used directly, instead use PathObjects.createTileObject(ROI). PathTileObject; protected PathTileObject(ROI pathROI). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:2412,Security,hash,hashCode,2412,"tends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathTileObject; public PathTileObject(); Default constructor. Should not be used directly, instead use PathObjects.createTileObject(ROI). PathTileObject; protected PathTileObject(ROI pathROI). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:1599,Usability,clear,clearChildObjects,1599,"tends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathTileObject; public PathTileObject(); Default constructor. Should not be used directly, instead use PathObjects.createTileObject(ROI). PathTileObject; protected PathTileObject(ROI pathROI). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:1618,Usability,clear,clearMetadataMap,1618,"tends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathTileObject; public PathTileObject(); Default constructor. Should not be used directly, instead use PathObjects.createTileObject(ROI). PathTileObject; protected PathTileObject(ROI pathROI). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html:1636,Usability,clear,clearPathObjects,1636,"tends PathDetectionObject; A subclass of PathDetectionObject, generally used to represent an image region that doesn't ; (in itself) correspond to any particularly interesting structure. ; Examples include square tiles or irregularly-shaped 'superpixels'. Author:; Pete Bankhead; See Also:. PathDetectionObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathTileObject(). Default constructor. protected ; PathTileObject(ROI pathROI);  . Method Summary. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathTileObject; public PathTileObject(); Default constructor. Should not be used directly, instead use PathObjects.createTileObject(ROI). PathTileObject; protected PathTileObject(ROI pathROI). ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/PathTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html:445,Integrability,interface,interface,445,". TemporaryObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Interface TemporaryObject. All Known Implementing Classes:; ParallelTileObject. public interface TemporaryObject; Marker interface used to indicate that child objects shouldn't be added to any cache for display.; ; It can be used to create temporary objects that can be displayed faster while performing lengthy; processing operations.; ; Warning: It is better for programmers to avoid using this interface directly, as it may change in future implementations. Author:; Pete Bankhead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TemporaryObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html:479,Integrability,interface,interface,479,". TemporaryObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Interface TemporaryObject. All Known Implementing Classes:; ParallelTileObject. public interface TemporaryObject; Marker interface used to indicate that child objects shouldn't be added to any cache for display.; ; It can be used to create temporary objects that can be displayed faster while performing lengthy; processing operations.; ; Warning: It is better for programmers to avoid using this interface directly, as it may change in future implementations. Author:; Pete Bankhead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TemporaryObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html:755,Integrability,interface,interface,755,". TemporaryObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Interface TemporaryObject. All Known Implementing Classes:; ParallelTileObject. public interface TemporaryObject; Marker interface used to indicate that child objects shouldn't be added to any cache for display.; ; It can be used to create temporary objects that can be displayed faster while performing lengthy; processing operations.; ; Warning: It is better for programmers to avoid using this interface directly, as it may change in future implementations. Author:; Pete Bankhead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TemporaryObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html:551,Performance,cache,cache,551,". TemporaryObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Interface TemporaryObject. All Known Implementing Classes:; ParallelTileObject. public interface TemporaryObject; Marker interface used to indicate that child objects shouldn't be added to any cache for display.; ; It can be used to create temporary objects that can be displayed faster while performing lengthy; processing operations.; ; Warning: It is better for programmers to avoid using this interface directly, as it may change in future implementations. Author:; Pete Bankhead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TemporaryObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html:651,Performance,perform,performing,651,". TemporaryObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Interface TemporaryObject. All Known Implementing Classes:; ParallelTileObject. public interface TemporaryObject; Marker interface used to indicate that child objects shouldn't be added to any cache for display.; ; It can be used to create temporary objects that can be displayed faster while performing lengthy; processing operations.; ; Warning: It is better for programmers to avoid using this interface directly, as it may change in future implementations. Author:; Pete Bankhead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TemporaryObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html:738,Safety,avoid,avoid,738,". TemporaryObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Interface TemporaryObject. All Known Implementing Classes:; ParallelTileObject. public interface TemporaryObject; Marker interface used to indicate that child objects shouldn't be added to any cache for display.; ; It can be used to create temporary objects that can be displayed faster while performing lengthy; processing operations.; ; Warning: It is better for programmers to avoid using this interface directly, as it may change in future implementations. Author:; Pete Bankhead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TemporaryObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TemporaryObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:5770,Integrability,interface,interface,5770,"tant Field Values. Constructor Details. TMACoreObject; public TMACoreObject(); Default constructor. Should not be used directly, instead use PathObjects.createTMACoreObject(double, double, double, boolean). Method Details. isMissing; public boolean isMissing(); Query the 'missing' flag for this core. Returns:. setMissing; public void setMissing(boolean missing); Set the missing flag for this core, for example because insufficient tissue is present.; 'Missing' cores are typically ignored during analysis. Parameters:; missing - . getCaseID; public String getCaseID(); Get the case ID metadata value. Returns:; See Also:. setCaseID(String). setCaseID; public void setCaseID(String caseID); Set the case ID metadata value. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifi",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:5859,Integrability,interface,interface,5859," instead use PathObjects.createTMACoreObject(double, double, double, boolean). Method Details. isMissing; public boolean isMissing(); Query the 'missing' flag for this core. Returns:. setMissing; public void setMissing(boolean missing); Set the missing flag for this core, for example because insufficient tissue is present.; 'Missing' cores are typically ignored during analysis. Parameters:; missing - . getCaseID; public String getCaseID(); Get the case ID metadata value. Returns:; See Also:. setCaseID(String). setCaseID; public void setCaseID(String caseID); Set the case ID metadata value. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6013,Integrability,interface,interface,6013,"Query the 'missing' flag for this core. Returns:. setMissing; public void setMissing(boolean missing); Set the missing flag for this core, for example because insufficient tissue is present.; 'Missing' cores are typically ignored during analysis. Parameters:; missing - . getCaseID; public String getCaseID(); Get the case ID metadata value. Returns:; See Also:. setCaseID(String). setCaseID; public void setCaseID(String caseID); Set the case ID metadata value. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeE",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6127,Integrability,interface,interface,6127,"his core, for example because insufficient tissue is present.; 'Missing' cores are typically ignored during analysis. Parameters:; missing - . getCaseID; public String getCaseID(); Get the case ID metadata value. Returns:; See Also:. setCaseID(String). setCaseID; public void setCaseID(String caseID); Set the case ID metadata value. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizabl",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6269,Integrability,interface,interface,6269,"arameters:; missing - . getCaseID; public String getCaseID(); Get the case ID metadata value. Returns:; See Also:. setCaseID(String). setCaseID; public void setCaseID(String caseID); Set the case ID metadata value. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(Objec",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6364,Integrability,interface,interface,6364,"CaseID(String). setCaseID; public void setCaseID(String caseID); Set the case ID metadata value. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overr",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6499,Integrability,interface,interface,6499,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6582,Integrability,interface,interface,6582,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6701,Integrability,interface,interface,6701,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6813,Integrability,interface,interface,6813,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:7113,Integrability,interface,interface,7113,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:7343,Integrability,interface,interface,7343,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:596,Modifiability,extend,extends,596,". TMACoreObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class TMACoreObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.TMACoreObject. All Implemented Interfaces:; Externalizable, Serializable, MetadataStore. public class TMACoreObject; extends PathROIObject; implements MetadataStore; A special PathObject used exclusively to represent TMA cores.; ; Currently, these only contain circular (or elliptical) ROIs. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; static final String; KEY_CASE_ID. Metadata key to store a case identify for the TMA core. static final String; KEY_OS_CENSORED. Metadata key for an overall survival censored flag. static final String; KEY_OVERALL_SURVIVAL. Metadata key for an overall survival (temporal) value. static final String; KEY_RECURRENCE_FREE_SURVIVAL. Metadata key for an recurrence-free survival (temporal) value. static final String; KEY_RFS_CENSORED. Metadata key for an recurrence-free survival censored flag. static final String; LEGACY_KEY_UNIQUE_ID. Deprecated. Constructor Summary; Constructors. Constructor; Description; TMACoreObject(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; clearMetadata(). Clear all associated metadata. String; getCaseID(). Get the case ID metadata value. Set<String>; getMetadataKeys(). Get all metadata keys. Map<String,String>; getMetadataMap(). Returns an unmodifiable map containing the metadata. String; getMetadataString(String key). Get a metadata value, cast as a String if possible. Object; getMetadataValue(S",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:2489,Modifiability,inherit,inherited,2489,"eObject(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; clearMetadata(). Clear all associated metadata. String; getCaseID(). Get the case ID metadata value. Set<String>; getMetadataKeys(). Get all metadata keys. Map<String,String>; getMetadataMap(). Returns an unmodifiable map containing the metadata. String; getMetadataString(String key). Get a metadata value, cast as a String if possible. Object; getMetadataValue(String key). Get a metadata value of any kind. boolean; isMissing(). Query the 'missing' flag for this core. Object; putMetadataValue(String key,; String value). Store a new metadata value. void; readExternal(ObjectInput in);  ; void; setCaseID(String caseID). Set the case ID metadata value. void; setMissing(boolean missing). Set the missing flag for this core, for example because insufficient tissue is present. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPa",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:2650,Modifiability,inherit,inherited,2650," all associated metadata. String; getCaseID(). Get the case ID metadata value. Set<String>; getMetadataKeys(). Get all metadata keys. Map<String,String>; getMetadataMap(). Returns an unmodifiable map containing the metadata. String; getMetadataString(String key). Get a metadata value, cast as a String if possible. Object; getMetadataValue(String key). Get a metadata value of any kind. boolean; isMissing(). Query the 'missing' flag for this core. Object; putMetadataValue(String key,; String value). Store a new metadata value. void; readExternal(ObjectInput in);  ; void; setCaseID(String caseID). Set the case ID metadata value. void; setMissing(boolean missing). Set the missing flag for this core, for example because insufficient tissue is present. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Fie",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:3536,Modifiability,inherit,inherited,3536,"getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. LEGACY_KEY_UNIQUE_ID; @Deprecated; public static final String LEGACY_KEY_UNIQUE_ID; Deprecated.; The key used before v0.4.0 to represent a unique (usually patient) ID.; This was replaced by #KEY_CASE_ID. See Also:. Constant Field Values. KEY_CASE_ID; public static final String KEY_CASE_ID; Metadata key to store a case identify for the TMA core.; This can be used to group cores that belong to the same case. See Also:. Constant Field Values. KEY_OVERALL_SURVIVAL; public static final String KEY_OVERALL_SURVIVAL; Metadata key for an overall survival (temporal) value. See Also:. Constant Field Values. KEY_RECURRENCE_FREE_SURVIVAL; public static final String KEY_RECURRENCE_FREE_SURVIVAL; Metadata key for an recurrence-free survival (temporal) value. See Also:. Constant Field Values. KEY_OS_CENSORED; public static final String KEY_OS_CENSORED; Metadata key for an over",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:3610,Security,hash,hashCode,3610,"tLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. LEGACY_KEY_UNIQUE_ID; @Deprecated; public static final String LEGACY_KEY_UNIQUE_ID; Deprecated.; The key used before v0.4.0 to represent a unique (usually patient) ID.; This was replaced by #KEY_CASE_ID. See Also:. Constant Field Values. KEY_CASE_ID; public static final String KEY_CASE_ID; Metadata key to store a case identify for the TMA core.; This can be used to group cores that belong to the same case. See Also:. Constant Field Values. KEY_OVERALL_SURVIVAL; public static final String KEY_OVERALL_SURVIVAL; Metadata key for an overall survival (temporal) value. See Also:. Constant Field Values. KEY_RECURRENCE_FREE_SURVIVAL; public static final String KEY_RECURRENCE_FREE_SURVIVAL; Metadata key for an recurrence-free survival (temporal) value. See Also:. Constant Field Values. KEY_OS_CENSORED; public static final String KEY_OS_CENSORED; Metadata key for an overall survival censored flag. See Also:. Constant Field Values. KEY_R",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:1637,Usability,clear,clearMetadata,1637,"plements MetadataStore; A special PathObject used exclusively to represent TMA cores.; ; Currently, these only contain circular (or elliptical) ROIs. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; static final String; KEY_CASE_ID. Metadata key to store a case identify for the TMA core. static final String; KEY_OS_CENSORED. Metadata key for an overall survival censored flag. static final String; KEY_OVERALL_SURVIVAL. Metadata key for an overall survival (temporal) value. static final String; KEY_RECURRENCE_FREE_SURVIVAL. Metadata key for an recurrence-free survival (temporal) value. static final String; KEY_RFS_CENSORED. Metadata key for an recurrence-free survival censored flag. static final String; LEGACY_KEY_UNIQUE_ID. Deprecated. Constructor Summary; Constructors. Constructor; Description; TMACoreObject(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; clearMetadata(). Clear all associated metadata. String; getCaseID(). Get the case ID metadata value. Set<String>; getMetadataKeys(). Get all metadata keys. Map<String,String>; getMetadataMap(). Returns an unmodifiable map containing the metadata. String; getMetadataString(String key). Get a metadata value, cast as a String if possible. Object; getMetadataValue(String key). Get a metadata value of any kind. boolean; isMissing(). Query the 'missing' flag for this core. Object; putMetadataValue(String key,; String value). Store a new metadata value. void; readExternal(ObjectInput in);  ; void; setCaseID(String caseID). Set the case ID metadata value. void; setMissing(boolean missing). Set the missing flag for this core, for example because insufficient tissue is present. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, se",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:2766,Usability,clear,clearChildObjects,2766," Object; putMetadataValue(String key,; String value). Store a new metadata value. void; readExternal(ObjectInput in);  ; void; setCaseID(String caseID). Set the case ID metadata value. void; setMissing(boolean missing). Set the missing flag for this core, for example because insufficient tissue is present. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. LEGACY_KEY_UNIQUE_ID; @Deprecated; public static final String LEGACY_KEY_UNIQUE_ID; Deprecated.; The key used before v0.4.0 to represent a unique (usually patient) ID.; This was replaced by #KEY_CASE_ID. See Also:. Constant Field Values. KEY_CASE_ID; public static final String KEY_CASE_ID; Metadata key to store a case identify for the TMA core.; This can be used to group cores that belong to the same case. See Also:. Constant Field V",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:2785,Usability,clear,clearMetadataMap,2785," Object; putMetadataValue(String key,; String value). Store a new metadata value. void; readExternal(ObjectInput in);  ; void; setCaseID(String caseID). Set the case ID metadata value. void; setMissing(boolean missing). Set the missing flag for this core, for example because insufficient tissue is present. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. LEGACY_KEY_UNIQUE_ID; @Deprecated; public static final String LEGACY_KEY_UNIQUE_ID; Deprecated.; The key used before v0.4.0 to represent a unique (usually patient) ID.; This was replaced by #KEY_CASE_ID. See Also:. Constant Field Values. KEY_CASE_ID; public static final String KEY_CASE_ID; Metadata key to store a case identify for the TMA core.; This can be used to group cores that belong to the same case. See Also:. Constant Field V",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:2803,Usability,clear,clearPathObjects,2803," Object; putMetadataValue(String key,; String value). Store a new metadata value. void; readExternal(ObjectInput in);  ; void; setCaseID(String caseID). Set the case ID metadata value. void; setMissing(boolean missing). Set the missing flag for this core, for example because insufficient tissue is present. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isEditable, isLocked, setLocked, setPathClass, setROI. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. LEGACY_KEY_UNIQUE_ID; @Deprecated; public static final String LEGACY_KEY_UNIQUE_ID; Deprecated.; The key used before v0.4.0 to represent a unique (usually patient) ID.; This was replaced by #KEY_CASE_ID. See Also:. Constant Field Values. KEY_CASE_ID; public static final String KEY_CASE_ID; Metadata key to store a case identify for the TMA core.; This can be used to group cores that belong to the same case. See Also:. Constant Field V",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6848,Usability,clear,clearMetadata,6848,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html:6875,Usability,clear,clearMetadata,6875,"alue. This is typically used to store a patient identifier, ; and must be unique for the patient (but multiple cores may have the same ID if they correspond ; to the same patient). Parameters:; caseID - . putMetadataValue; public Object putMetadataValue(String key,; String value); Description copied from interface: MetadataStore; Store a new metadata value. Specified by:; putMetadataValue in interface MetadataStore; Parameters:; key - ; value - ; Returns:. getMetadataString; public String getMetadataString(String key); Description copied from interface: MetadataStore; Get a metadata value, cast as a String if possible. Specified by:; getMetadataString in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataValue; public Object getMetadataValue(String key); Description copied from interface: MetadataStore; Get a metadata value of any kind. Specified by:; getMetadataValue in interface MetadataStore; Parameters:; key - ; Returns:. getMetadataKeys; public Set<String> getMetadataKeys(); Description copied from interface: MetadataStore; Get all metadata keys. Specified by:; getMetadataKeys in interface MetadataStore; Returns:. getMetadataMap; public Map<String,String> getMetadataMap(); Description copied from interface: MetadataStore; Returns an unmodifiable map containing the metadata. Specified by:; getMetadataMap in interface MetadataStore; Returns:. clearMetadata; public void clearMetadata(); Clear all associated metadata. toString; public String toString(). Overrides:; toString in class PathObject. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Overrides:; writeExternal in class PathROIObject; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Overrides:; readExternal in class PathROIObject; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/objects/TMACoreObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/TMACoreObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2302,Integrability,interface,interface,2302,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2641,Integrability,interface,interface,2641,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:357,Modifiability,plugin,plugins,357,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:429,Modifiability,plugin,plugins,429,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:467,Modifiability,plugin,plugins,467,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:516,Modifiability,plugin,plugins,516,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:877,Modifiability,extend,extends,877,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:924,Modifiability,plugin,plugin,924,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1205,Modifiability,inherit,inherited,1205,". Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, get",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1237,Modifiability,plugin,plugins,1237,"ummary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, n",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1495,Modifiability,extend,extends,1495,"Plugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method D",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1643,Modifiability,extend,extends,1643,"bclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInter",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1753,Modifiability,plugin,plugin,1753,"ixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1780,Modifiability,inherit,inherited,1780,"ionsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specifie",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1812,Modifiability,plugin,plugins,1812,"lerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be app",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1960,Modifiability,inherit,inherited,1960,"will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObje",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:1992,Modifiability,plugin,plugins,1992,"sting objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2148,Modifiability,inherit,inherited,2148,".. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2287,Modifiability,inherit,inherited,2287,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2323,Modifiability,plugin,plugins,2323,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2561,Modifiability,extend,extends,2561,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2728,Modifiability,plugin,plugin,2728,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2998,Modifiability,extend,extends,2998,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:977,Safety,detect,detected,977,". AbstractDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractTileableDetectionPlugin, DetectCytokeratinCV, PositivePixelCounterIJ, SimpleTissueDetection2, TileClassificationsToAnnotationsPlugin, TilerPlugin. public abstract class AbstractDetectionPlugin<T>; extends AbstractInteractivePlugin<T>; Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations).; ; TODO: Note this isn't a very stable API (because it's quite awkward), and it's therefore liable to change... Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.A",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html:2222,Security,hash,hashCode,2222,"ss qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractDetectionPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractDetectionPlugin; public AbstractDetectionPlugin(). Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get all selected objects that are instances of a supported class. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:4008,Availability,avail,available,4008,". Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Sin",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:4081,Availability,avail,available,4081,"ractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a Param",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2741,Integrability,interface,interface,2741,"geData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysProm",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2849,Integrability,interface,interface,2849,"o repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:3377,Integrability,interface,interface,3377,"from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting po",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:3539,Integrability,interface,interface,3539,"ethods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgume",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:3754,Integrability,interface,interface,3754,"th.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible t",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:359,Modifiability,plugin,plugins,359,". AbstractInteractivePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractInteractivePlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractDetectionPlugin, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DilateAnnotationPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TMADearrayerPluginIJ. public abstract class AbstractInteractivePlugin<T>; extends AbstractPlugin<T>; implements PathInteractivePlugin<T>; Abstract class to help with implementing an interactive plugin. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected ParameterList; params;  . Constructor Summary; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty para",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:433,Modifiability,plugin,plugins,433,". AbstractInteractivePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractInteractivePlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractDetectionPlugin, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DilateAnnotationPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TMADearrayerPluginIJ. public abstract class AbstractInteractivePlugin<T>; extends AbstractPlugin<T>; implements PathInteractivePlugin<T>; Abstract class to help with implementing an interactive plugin. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected ParameterList; params;  . Constructor Summary; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty para",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:471,Modifiability,plugin,plugins,471,". AbstractInteractivePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractInteractivePlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractDetectionPlugin, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DilateAnnotationPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TMADearrayerPluginIJ. public abstract class AbstractInteractivePlugin<T>; extends AbstractPlugin<T>; implements PathInteractivePlugin<T>; Abstract class to help with implementing an interactive plugin. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected ParameterList; params;  . Constructor Summary; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty para",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:1051,Modifiability,extend,extends,1051," Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractInteractivePlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractDetectionPlugin, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DilateAnnotationPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TMADearrayerPluginIJ. public abstract class AbstractInteractivePlugin<T>; extends AbstractPlugin<T>; implements PathInteractivePlugin<T>; Abstract class to help with implementing an interactive plugin. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected ParameterList; params;  . Constructor Summary; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageDa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:1171,Modifiability,plugin,plugin,1171," Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractInteractivePlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; AbstractDetectionPlugin, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DilateAnnotationPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TMADearrayerPluginIJ. public abstract class AbstractInteractivePlugin<T>; extends AbstractPlugin<T>; implements PathInteractivePlugin<T>; Abstract class to help with implementing an interactive plugin. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected ParameterList; params;  . Constructor Summary; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageDa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2365,Modifiability,plugin,plugin,2365,"y; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2381,Modifiability,inherit,inherited,2381,"  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface Path",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2413,Modifiability,plugin,plugins,2413,"hodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Para",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2587,Modifiability,inherit,inherited,2587,"every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, t",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2726,Modifiability,inherit,inherited,2726,"geData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysProm",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2762,Modifiability,plugin,plugins,2762,"ould return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2834,Modifiability,inherit,inherited,2834,"o repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getP",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2870,Modifiability,plugin,plugins,2870,"otected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> im",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:4766,Modifiability,plugin,plugin,4766,"; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<T>; Returns:. getParameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:4905,Modifiability,plugin,plugin,4905,"arameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which aren't part of the main list; (e.g. because they shouldn't be included in any automatically created dialog box). Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:5054,Modifiability,variab,variables,5054,"arameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which aren't part of the main list; (e.g. because they shouldn't be included in any automatically created dialog box). Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:5154,Modifiability,plugin,plugins,5154,"arameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which aren't part of the main list; (e.g. because they shouldn't be included in any automatically created dialog box). Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:4978,Safety,abort,abort,4978,"arameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which aren't part of the main list; (e.g. because they shouldn't be included in any automatically created dialog box). Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:5148,Safety,safe,safe,5148,"arameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which aren't part of the main list; (e.g. because they shouldn't be included in any automatically created dialog box). Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2661,Security,hash,hashCode,2661," already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected transient ParameterList params. Constructor Details. AbstractInteractivePlugin; public AbstractInteractivePlugin(). Method Details. getDefaultParameterList; public abstract ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Parameters:; imageData - ; Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if ther",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:2030,Testability,log,logging,2030,"luginIJ. public abstract class AbstractInteractivePlugin<T>; extends AbstractPlugin<T>; implements PathInteractivePlugin<T>; Abstract class to help with implementing an interactive plugin. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected ParameterList; params;  . Constructor Summary; Constructors. Constructor; Description; AbstractInteractivePlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. abstract ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. protected ParameterList; getLoggableParameters(ImageData<T> imageData). Get a copy of the current parameter list (with empty parameters removed) suitable for logging. protected ParameterList; getParameterList(ImageData<T> imageData). Get a reference to a ParameterList stored internally, and which will be used for analysis. protected boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addRunnableTasks, addWorkflowStep, getParentObjects, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathInteractivePlugin; getSupportedParentObjectClasses. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Field Details. params; protected trans",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html:5581,Testability,log,logging,5581,"arameterList; protected ParameterList getParameterList(ImageData<T> imageData); Get a reference to a ParameterList stored internally, and which will be used for analysis.; ; If there is no list presently available, getDefaultParameterList will be called.; ; If there is a list available, it will be returned.; ; The reason for needing this in addition to getDefaultParameterList, is that parseArgument could ; modify the internal ParameterList that will actually be used, while getDefaultParameterList is useful; when creating GUIs and ensuring that there is always a sensible starting point. Parameters:; imageData - image data for which the parameters should be generated. This may influence which parameters are shown.; Returns:. parseArgument; protected boolean parseArgument(ImageData<T> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<T>; Parameters:; imageData - ; arg - ; Returns:. getLoggableParameters; protected ParameterList getLoggableParameters(ImageData<T> imageData); Get a copy of the current parameter list (with empty parameters removed) suitable for logging.; Subclasses might choose to append extra parameters here, which aren't part of the main list; (e.g. because they shouldn't be included in any automatically created dialog box). Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:6782,Availability,avail,available,6782,"ner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList(tasks2);; . Parameters:; input - ; output - ; stride - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:7117,Availability,avail,availableProcessors,7117,"ner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList(tasks2);; . Parameters:; input - ; output - ; stride - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2419,Deployability,update,update,2419,"entObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy updat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3414,Deployability,update,update,3414,"date(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:5397,Deployability,update,update,5397,"ollection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2711,Integrability,interface,interface,2711,"; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is cal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:4557,Integrability,depend,depending,4557,"; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:5299,Integrability,interface,interface,5299,"turns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; S",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:5529,Integrability,interface,interface,5529,"ects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stri",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:348,Modifiability,plugin,plugins,348,". AbstractPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskR",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:411,Modifiability,plugin,plugins,411,". AbstractPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskR",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:619,Modifiability,extend,extends,619,". AbstractPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskR",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:678,Modifiability,plugin,plugin,678,". AbstractPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskR",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:753,Modifiability,plugin,plugins,753,". AbstractPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskR",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:1339,Modifiability,plugin,plugin,1339,"Method. SEARCH. Package qupath.lib.plugins; Class AbstractPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:1392,Modifiability,extend,extends,1392,".lib.plugins.AbstractPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathPlugin<T>. Direct Known Subclasses:; AbstractInteractivePlugin, ImageJMacroRunner. public abstract class AbstractPlugin<T>; extends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:1819,Modifiability,plugin,plugin,1819,"llel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLas",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2541,Modifiability,plugin,plugin,2541,"otected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean par",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2557,Modifiability,inherit,inherited,2557,"le>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> im",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2696,Modifiability,inherit,inherited,2696,"; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is cal",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2732,Modifiability,plugin,plugins,2732,"t argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3686,Modifiability,plugin,plugin,3686,"t; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3825,Modifiability,plugin,plugin,3825,"ion, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3974,Modifiability,variab,variables,3974," collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Fo",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:4074,Modifiability,plugin,plugins,4074,"ring). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:4314,Modifiability,extend,extends,4314,"uestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be p",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:4581,Modifiability,plugin,plugin,4581,"; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunn",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:5330,Modifiability,plugin,plugin,5330,"turns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; S",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:5379,Modifiability,plugin,plugin,5379,"ollection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:6232,Modifiability,plugin,plugin,6232,"- ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:1633,Performance,perform,perform,1633,"ends Object; implements PathPlugin<T>; General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; AbstractPlugin();  . Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected abstract void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<T> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. protected abstract Collection<? extends PathObject>; getParentObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, g",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2986,Performance,perform,perform,2986,"any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:6729,Performance,cache,cached,6729,"ner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList(tasks2);; . Parameters:; input - ; output - ; stride - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:6928,Performance,bottleneck,bottleneck,6928,"ner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList(tasks2);; . Parameters:; input - ; output - ; stride - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3898,Safety,abort,abort,3898,"sks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(Im",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:4068,Safety,safe,safe,4068,"ring). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:4536,Safety,detect,detection,4536,"nt; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Speci",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:6369,Safety,avoid,avoid,6369,"ner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList(tasks2);; . Parameters:; input - ; output - ; stride - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2631,Security,hash,hashCode,2631,"orm. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:6321,Testability,log,logged,6321,"ner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Parameters:; imageData - ; arg - . rearrangeByStride; protected static <T> boolean rearrangeByStride(Collection<T> input,; T[] output,; int stride); Test method for rearranging a collection so that entries are interleaved with a regularity given by stride.; ; It can be used to rearrange tasks to try to make better use of cached image regions, by helping to ensure that; all available processors are operating on distinct parts of the image - rather than all in the same region,; where image tile requests could become a bottleneck.; ; Intended use would be something like the following:; ; int n = tasks.size();; Runnable[] tasks2 = new Runnable[n];; if (rearrangeByStride(tasks, tasks2, Runtime.getRuntime().availableProcessors())); tasks = Arrays.asList(tasks2);; . Parameters:; input - ; output - ; stride - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3141,Usability,simpl,simply,3141,"on<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) t",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1534,Deployability,update,update,1534,"kRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to upd",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:2535,Deployability,update,update,2535,"nitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or Sw",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3331,Deployability,update,update,3331,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1523,Energy Efficiency,monitor,monitor,1523,"kRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to upd",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:2524,Energy Efficiency,monitor,monitor,2524,"nitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or Sw",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3351,Energy Efficiency,monitor,monitor,3351,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:2677,Integrability,interface,interface,2677,"ter a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be can",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:2777,Integrability,interface,interface,2777," Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3613,Integrability,interface,interface,3613,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3793,Integrability,interface,interface,3793,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:352,Modifiability,plugin,plugins,352,". AbstractTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner. All Implemented Interfaces:; TaskRunner. Direct Known Subclasses:; CommandLineTaskRunner, TaskRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunne",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:416,Modifiability,plugin,plugins,416,". AbstractTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner. All Implemented Interfaces:; TaskRunner. Direct Known Subclasses:; CommandLineTaskRunner, TaskRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunne",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:590,Modifiability,extend,extends,590,". AbstractTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner. All Implemented Interfaces:; TaskRunner. Direct Known Subclasses:; CommandLineTaskRunner, TaskRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunne",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:680,Modifiability,plugin,plugin,680,". AbstractTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner. All Implemented Interfaces:; TaskRunner. Direct Known Subclasses:; CommandLineTaskRunner, TaskRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunne",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1401,Modifiability,plugin,plugin,1401,"ib.plugins.AbstractTaskRunner. All Implemented Interfaces:; TaskRunner. Direct Known Subclasses:; CommandLineTaskRunner, TaskRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method D",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1613,Modifiability,extend,extends,1613,"; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1718,Modifiability,extend,extends,1718,"ances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collectio",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1802,Modifiability,inherit,inherited,1802,"tors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:2627,Modifiability,extend,extends,2627,"ter a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be can",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3142,Modifiability,extend,extends,3142,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3649,Modifiability,plugin,plugin,3649,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1876,Security,hash,hashCode,1876,"(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:3017,Integrability,interface,interface,3017,"bstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; ParameterList params); Get an appropriate overlap, in pixels, if analysis of ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:365,Modifiability,plugin,plugins,365,". AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:445,Modifiability,plugin,plugins,445,". AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:483,Modifiability,plugin,plugins,483,". AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:532,Modifiability,plugin,plugins,532,". AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:579,Modifiability,plugin,plugins,579,". AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:935,Modifiability,extend,extends,935," AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:980,Modifiability,plugin,plugin,980," AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:1231,Modifiability,inherit,inherited,1231,"ethod. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(I",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:1263,Modifiability,plugin,plugins,1263," ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2389,Modifiability,inherit,inherited,2389,"();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2421,Modifiability,plugin,plugins,2421,"MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the spe",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2513,Modifiability,inherit,inherited,2513,"protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions i",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2545,Modifiability,plugin,plugins,2545,"Tasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizabl",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2693,Modifiability,inherit,inherited,2693,"lelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; Para",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2725,Modifiability,plugin,plugins,2725,"y,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2863,Modifiability,inherit,inherited,2863,"Data<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:3002,Modifiability,inherit,inherited,3002,"bstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; ParameterList params); Get an appropriate overlap, in pixels, if analysis of ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:3038,Modifiability,plugin,plugins,3038,"ixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; ParameterList params); Get an appropriate overlap, in pixels, if analysis of the specified ImageData will",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:4558,Modifiability,plugin,plugin,4558,"pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; ParameterList params); Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces.; ; TODO: Avoid hard-coding what is considered a 'manageable size' or a preferred size for parallel tiles. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:996,Safety,detect,detection,996," AbstractTileableDetectionPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:1174,Safety,detect,detection,1174,"cated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class AbstractTileableDetectionPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. Direct Known Subclasses:; CellCountsCV, DoGSuperpixelsPlugin, SLICSuperpixelsPlugin, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public abstract class AbstractTileableDetectionPlugin<T>; extends AbstractDetectionPlugin<T>; Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps.; ; Particularly useful for tasks such as cell detection. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; AbstractTileableDetectionPlugin();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces. protected abstract ObjectDetector<T>; createDetector(ImageData<T> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used fo",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:4230,Safety,detect,detected,4230,"ails. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; ParameterList params); Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces.; ; TODO: Avoid hard-coding what is considered a 'manageable size",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:4378,Safety,detect,detections,4378,"pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; ParameterList params); Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Intercepts the 'standard' addRunnableTasks to (if necessary) insert ParallelTileObjects along the way,; thereby breaking an excessively-large parentObject into more manageable pieces.; ; TODO: Avoid hard-coding what is considered a 'manageable size' or a preferred size for parallel tiles. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html:2937,Security,hash,hashCode,2937,"compatible with the specified ImageData and ParameterList. protected abstract double; getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected abstract int; getTileOverlap(ImageData<T> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getDefaultParameterList, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Constructor Details. AbstractTileableDetectionPlugin; public AbstractTileableDetectionPlugin(). Method Details. getPreferredPixelSizeMicrons; protected abstract double getPreferredPixelSizeMicrons(ImageData<T> imageData,; ParameterList params); Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Parameters:; imageData - ; params - ; Returns:. createDetector; protected abstract ObjectDetector<T> createDetector(ImageData<T> imageData,; ParameterList params); Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected abstract int getTileOverlap(ImageData<T> imageData,; Paramet",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTileableDetectionPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1367,Deployability,update,updateProgress,1367,"CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion re",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1561,Deployability,update,updated,1561,"ner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and opti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2308,Deployability,update,updateProgress,2308,"layed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2336,Deployability,update,updateProgress,2336,"layed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2588,Deployability,update,updated,2588,"layed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2698,Deployability,update,updateProgress,2698,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2774,Deployability,update,update,2774,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3231,Deployability,update,updateProgress,3231,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1187,Energy Efficiency,monitor,monitor,1187,"sted; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1330,Energy Efficiency,monitor,monitor,1330," Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1349,Energy Efficiency,monitor,monitoring,1349," Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1987,Energy Efficiency,monitor,monitor,1987,");  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2006,Energy Efficiency,monitor,monitoring,2006,");  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2665,Energy Efficiency,monitor,monitor,2665,"e, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3151,Energy Efficiency,monitor,monitor,3151,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1166,Integrability,message,message,1166,"lass; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1264,Integrability,message,message,1264,": ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1405,Integrability,message,message,1405,"CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion re",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1863,Integrability,message,message,1863,");  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1935,Integrability,interface,interface,1935,");  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2159,Integrability,interface,interface,2159,"in has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2205,Integrability,message,message,2205,"in has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2219,Integrability,message,message,2219,"in has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is c",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2374,Integrability,message,message,2374,"layed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2429,Integrability,interface,interface,2429,"layed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2716,Integrability,interface,interface,2716,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2818,Integrability,message,message,2818,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2837,Integrability,message,message,2837,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3072,Integrability,message,message,3072,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3106,Integrability,interface,interface,3106,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3386,Integrability,interface,interface,3386,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3432,Integrability,message,message,3432,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3442,Integrability,message,message,3442,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3538,Integrability,interface,interface,3538,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3695,Integrability,interface,interface,3695,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:382,Modifiability,plugin,plugins,382,". CommandLineTaskRunner.CommandLineProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:476,Modifiability,plugin,plugins,476,". CommandLineTaskRunner.CommandLineProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:697,Modifiability,extend,extends,697,". CommandLineTaskRunner.CommandLineProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1143,Modifiability,plugin,pluginCompleted,1143,"lass; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1204,Modifiability,plugin,plugin,1204,"sted; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1320,Modifiability,plugin,plugin,1320," Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1578,Modifiability,inherit,inherited,1578,"Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1977,Modifiability,plugin,plugin,1977,");  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3020,Modifiability,plugin,pluginCompleted,3020,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3049,Modifiability,plugin,pluginCompleted,3049,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3168,Modifiability,plugin,plugin,3168,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3295,Modifiability,plugin,plugin,3295,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:3367,Modifiability,plugin,pluginCompleted,3367,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1652,Security,hash,hashCode,1652,"TaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, an",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:796,Testability,log,log,796,". CommandLineTaskRunner.CommandLineProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1435,Deployability,update,update,1435,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:2290,Deployability,update,update,2290,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1424,Energy Efficiency,monitor,monitor,1424,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:2279,Energy Efficiency,monitor,monitor,2279,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:355,Modifiability,plugin,plugins,355,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:422,Modifiability,plugin,plugins,422,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:461,Modifiability,plugin,plugins,461,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:569,Modifiability,extend,extends,569,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1481,Modifiability,inherit,inherited,1481,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1513,Modifiability,plugin,plugins,1513,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1602,Modifiability,inherit,inherited,1602,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1676,Security,hash,hashCode,1676,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:624,Testability,log,logs,624,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:959,Testability,log,log,959,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1105,Testability,log,log,1105,"s. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1254,Testability,log,log,1254,"; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1864,Testability,log,log,1864,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:2043,Testability,log,log,2043,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:617,Usability,simpl,simply,617,". CommandLineTaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor f",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:354,Modifiability,plugin,plugins,354,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:420,Modifiability,plugin,plugins,420,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:485,Modifiability,extend,extends,485,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:1270,Modifiability,inherit,inherited,1270,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:645,Safety,detect,detection,645,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:1233,Safety,detect,detector,1233,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:1693,Safety,detect,detector,1693,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:1828,Safety,detect,detection,1828,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html:1344,Security,hash,hashCode,1344,". DetectionPluginTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class DetectionPluginTools. java.lang.Object; qupath.lib.plugins.DetectionPluginTools. public class DetectionPluginTools; extends Object; Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy.; ; Internally, a PathTask is used with the important resolution/event-firing occurring within the; taskComplete method. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DetectionPluginTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Runnable; createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject). Create a task that applies an object detector to a parent object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DetectionPluginTools; public DetectionPluginTools(). Method Details. createRunnableTask; public static <T> Runnable createRunnableTask(ObjectDetector<T> task,; ParameterList params,; ImageData<T> imageData,; PathObject parentObject); Create a task that applies an object detector to a parent object.; ; Detected objects will be added as children of the parent. If the parent has a ROI, this may define the detection ROI. Type Parameters:; T - ; Parameters:; task - ; params - ; imageData - ; parentObject - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/DetectionPluginTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:417,Integrability,interface,interface,417,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:454,Integrability,interface,interface,454,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:348,Modifiability,plugin,plugins,348,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:484,Modifiability,plugin,plugins,484,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:623,Modifiability,plugin,plugins,623,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:497,Performance,perform,perform,497,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:505,Safety,detect,detection,505,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:613,Safety,detect,detection,613,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:1263,Safety,detect,detected,1263,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:1327,Safety,detect,detection,1327,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:1377,Safety,detect,detection,1377,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:917,Testability,log,logged,917,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html:1574,Testability,log,logged,1574,". ObjectDetector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface ObjectDetector<T>. Type Parameters:; T - . public interface ObjectDetector<T>; Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters.; ; This enables new detection plugins to be written with somewhat less boilerplate code. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getLastResultsDescription(). Get a String summarizing the result, which may be displayed to a user or logged. Collection<PathObject>; runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi). Detect objects. Method Details. runDetection; Collection<PathObject> runDetection(ImageData<T> imageData,; ParameterList params,; ROI roi); throws IOException; Detect objects. Parameters:; imageData - the ImageData for which objects should be detected; params - optional list of parameters required for the detection; roi - specific region within which the detection should be applied; Returns:; Throws:; IOException. getLastResultsDescription; String getLastResultsDescription(); Get a String summarizing the result, which may be displayed to a user or logged. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ObjectDetector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ObjectDetector.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:552,Energy Efficiency,monitor,monitoring,552,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2842,Energy Efficiency,monitor,monitoring,2842," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:848,Integrability,interface,interfaces,848,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2180,Integrability,interface,interface,2180," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2658,Integrability,interface,interface,2658," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2718,Integrability,interface,interface,2718," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2936,Integrability,interface,interface,2936," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:326,Modifiability,plugin,plugins,326,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:354,Modifiability,plugin,plugins,354,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:624,Modifiability,plugin,plugins,624,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:695,Modifiability,plugin,plugins,695,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:818,Modifiability,plugin,plugins,818,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1048,Modifiability,plugin,plugin,1048," Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1257,Modifiability,plugin,plugin,1257,"ge: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1301,Modifiability,plugin,plugin,1301,"th.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A tempora",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1376,Modifiability,plugin,plugins,1376,"th.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A tempora",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1484,Modifiability,plugin,plugin,1484,"ging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status.",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1578,Modifiability,plugin,plugin,1578,"ns for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2210,Modifiability,plugin,plugins,2210," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2684,Modifiability,plugin,plugin,2684," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2738,Modifiability,plugin,plugin,2738," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2870,Modifiability,plugin,plugin,2870," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2223,Performance,perform,perform,2223," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1101,Safety,detect,detected,1101," Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1594,Safety,detect,detection,1594,"ns for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2072,Safety,detect,detection,2072,"Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2231,Safety,detect,detection,2231," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2444,Safety,detect,detection,2444," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:870,Testability,log,logging,870,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1776,Testability,log,logs,1776," dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-proces",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1901,Testability,log,log,1901,"analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:1769,Usability,simpl,simply,1769," dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-proces",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2892,Usability,feedback,feedback,2892," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:3003,Usability,feedback,feedback,3003," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:13,Modifiability,plugin,plugins,13,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:219,Modifiability,plugin,plugins,219,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:310,Modifiability,plugin,plugins,310,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:359,Modifiability,plugin,plugins,359,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:394,Modifiability,plugin,plugins,394,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:454,Modifiability,plugin,plugins,454,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:500,Modifiability,plugin,plugins,500,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:547,Modifiability,plugin,plugins,547,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:602,Modifiability,plugin,plugins,602,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:652,Modifiability,plugin,plugins,652,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:684,Modifiability,plugin,plugins,684,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:726,Modifiability,plugin,plugins,726,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:806,Modifiability,plugin,plugins,806,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:849,Modifiability,plugin,plugins,849,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1066,Modifiability,plugin,plugins,1066,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1153,Modifiability,plugin,plugins,1153,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1210,Modifiability,plugin,plugins,1210,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1248,Modifiability,plugin,plugins,1248,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1282,Modifiability,plugin,plugins,1282,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1347,Modifiability,plugin,plugins,1347,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1376,Modifiability,plugin,plugins,1376,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1418,Modifiability,plugin,plugins,1418,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html:1597,Modifiability,plugin,plugins,1597,". qupath.lib.plugins Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.plugins. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.lib.plugins.AbstractTaskRunner (implements qupath.lib.plugins.TaskRunner). qupath.lib.plugins.CommandLineTaskRunner. qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor (implements qupath.lib.plugins.SimpleProgressMonitor); qupath.lib.plugins.DetectionPluginTools; qupath.lib.objects.PathObject (implements java.io.Externalizable). qupath.lib.objects.PathROIObject. qupath.lib.objects.PathDetectionObject. qupath.lib.objects.PathTileObject. qupath.lib.plugins.ParallelTileObject (implements qupath.lib.objects.TemporaryObject). qupath.lib.plugins.TaskRunnerUtils. Interface Hierarchy. qupath.lib.plugins.ObjectDetector<T>; qupath.lib.plugins.PathPlugin<T>. qupath.lib.plugins.PathInteractivePlugin<T>. java.lang.Runnable. qupath.lib.plugins.PathTask. qupath.lib.plugins.SimpleProgressMonitor; qupath.lib.plugins.TaskRunner. Enum Class Hierarchy. java.lang.Object. java.lang.Enum<E> (implements java.lang.Comparable<T>, java.lang.constant.Constable, java.io.Serializable). qupath.lib.plugins.ParallelTileObject.Status. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:1942,Deployability,update,updateStatus,1942,"overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, remove",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:3523,Deployability,update,updateStatus,3523,"arPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This both changes its display color, and triggers a check to see if overlaps with; detections made in adjacent tiles can be resolved. Parameters:; wasCancelled - . resolveOverlaps; public void resolveOverlaps(); Request that the tile object attempts to resolve overlaps with its neighboring tiles. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:3549,Deployability,update,updateStatus,3549,"arPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This both changes its display color, and triggers a check to see if overlaps with; detections made in adjacent tiles can be resolved. Parameters:; wasCancelled - . resolveOverlaps; public void resolveOverlaps(); Request that the tile object attempts to resolve overlaps with its neighboring tiles. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:3670,Deployability,update,update,3670,"arPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This both changes its display color, and triggers a check to see if overlaps with; detections made in adjacent tiles can be resolved. Parameters:; wasCancelled - . resolveOverlaps; public void resolveOverlaps(); Request that the tile object attempts to resolve overlaps with its neighboring tiles. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:352,Modifiability,plugin,plugins,352,". ParallelTileObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class ParallelTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject; qupath.lib.plugins.ParallelTileObject. All Implemented Interfaces:; Externalizable, Serializable, TemporaryObject. public class ParallelTileObject; extends PathTileObject; implements TemporaryObject; A temporary object, used during parallel processing to represent a tile currently being used for object; detection.; ; ParallelTileObjects maintain knowledge of adjacent tiles, and are thereby able to resolve overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:556,Modifiability,plugin,plugins,556,". ParallelTileObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class ParallelTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject; qupath.lib.plugins.ParallelTileObject. All Implemented Interfaces:; Externalizable, Serializable, TemporaryObject. public class ParallelTileObject; extends PathTileObject; implements TemporaryObject; A temporary object, used during parallel processing to represent a tile currently being used for object; detection.; ; ParallelTileObjects maintain knowledge of adjacent tiles, and are thereby able to resolve overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:693,Modifiability,extend,extends,693,". ParallelTileObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class ParallelTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject; qupath.lib.plugins.ParallelTileObject. All Implemented Interfaces:; Externalizable, Serializable, TemporaryObject. public class ParallelTileObject; extends PathTileObject; implements TemporaryObject; A temporary object, used during parallel processing to represent a tile currently being used for object; detection.; ; ParallelTileObjects maintain knowledge of adjacent tiles, and are thereby able to resolve overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:2052,Modifiability,inherit,inherited,2052,"te Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys,",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:2174,Modifiability,inherit,inherited,2174,"ic enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataVa",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:2352,Modifiability,inherit,inherited,2352,"ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; p",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:3207,Modifiability,inherit,inherited,3207,"athROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This b",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:850,Safety,detect,detection,850,". ParallelTileObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class ParallelTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject; qupath.lib.plugins.ParallelTileObject. All Implemented Interfaces:; Externalizable, Serializable, TemporaryObject. public class ParallelTileObject; extends PathTileObject; implements TemporaryObject; A temporary object, used during parallel processing to represent a tile currently being used for object; detection.; ; ParallelTileObjects maintain knowledge of adjacent tiles, and are thereby able to resolve overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:970,Safety,detect,detection,970,". ParallelTileObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class ParallelTileObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject; qupath.lib.objects.PathTileObject; qupath.lib.plugins.ParallelTileObject. All Implemented Interfaces:; Externalizable, Serializable, TemporaryObject. public class ParallelTileObject; extends PathTileObject; implements TemporaryObject; A temporary object, used during parallel processing to represent a tile currently being used for object; detection.; ; ParallelTileObjects maintain knowledge of adjacent tiles, and are thereby able to resolve overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:4293,Safety,detect,detections,4293,"arPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This both changes its display color, and triggers a check to see if overlaps with; detections made in adjacent tiles can be resolved. Parameters:; wasCancelled - . resolveOverlaps; public void resolveOverlaps(); Request that the tile object attempts to resolve overlaps with its neighboring tiles. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:3281,Security,hash,hashCode,3281,"readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This both changes its display color, and triggers a check to see if overl",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:2468,Usability,clear,clearChildObjects,2468,"essing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileO",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:2487,Usability,clear,clearMetadataMap,2487,"essing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileO",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:2505,Usability,clear,clearPathObjects,2505,"essing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileO",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:840,Integrability,interface,interfaces,840,". ParallelTileObject.Status (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins; Enum Class ParallelTileObject.Status. java.lang.Object; java.lang.Enum<ParallelTileObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:391,Modifiability,plugin,plugins,391,". ParallelTileObject.Status (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins; Enum Class ParallelTileObject.Status. java.lang.Object; java.lang.Enum<ParallelTileObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:510,Modifiability,plugin,plugins,510,". ParallelTileObject.Status (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins; Enum Class ParallelTileObject.Status. java.lang.Object; java.lang.Enum<ParallelTileObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:722,Modifiability,extend,extends,722,". ParallelTileObject.Status (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins; Enum Class ParallelTileObject.Status. java.lang.Object; java.lang.Enum<ParallelTileObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:851,Modifiability,inherit,inherited,851,". ParallelTileObject.Status (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins; Enum Class ParallelTileObject.Status. java.lang.Object; java.lang.Enum<ParallelTileObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:904,Modifiability,extend,extends,904,". ParallelTileObject.Status (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.plugins; Enum Class ParallelTileObject.Status. java.lang.Object; java.lang.Enum<ParallelTileObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Ti",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:1473,Modifiability,inherit,inherited,1473,"leObject.Status>; qupath.lib.plugins.ParallelTileObject.Status. All Implemented Interfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Tile processing complete. Method Details. values; public static ParallelTileObject.Status[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ParallelTileObject.Status valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to d",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:1636,Modifiability,inherit,inherited,1636,"ing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Tile processing complete. Method Details. values; public static ParallelTileObject.Status[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ParallelTileObject.Status valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html:1584,Security,hash,hashCode,1584,"rfaces:; Serializable, Comparable<ParallelTileObject.Status>, Constable. Enclosing class:; ParallelTileObject. public static enum ParallelTileObject.Status; extends Enum<ParallelTileObject.Status>; Current processing status for the tile. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DONE. Tile processing complete. PENDING. Tile waiting to be processed. PROCESSING. Tile currently being processed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ParallelTileObject.Status; valueOf(String name). Returns the enum constant of this class with the specified name. static ParallelTileObject.Status[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. PENDING; public static final ParallelTileObject.Status PENDING; Tile waiting to be processed. PROCESSING; public static final ParallelTileObject.Status PROCESSING; Tile currently being processed. DONE; public static final ParallelTileObject.Status DONE; Tile processing complete. Method Details. values; public static ParallelTileObject.Status[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ParallelTileObject.Status valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.Status.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:1210,Integrability,interface,interface,1210," ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathInteractivePlugin<T>. Type Parameters:; T - . All Superinterfaces:; PathPlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:1373,Integrability,interface,interface,1373,"rs:; T - . All Superinterfaces:; PathPlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:2051,Integrability,interface,interface,2051,"nnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:355,Modifiability,plugin,plugins,355,". PathInteractivePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathInteractivePlugin<T>. Type Parameters:; T - . All Superinterfaces:; PathPlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects t",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:1246,Modifiability,extend,extends,1246," ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathInteractivePlugin<T>. Type Parameters:; T - . All Superinterfaces:; PathPlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:1899,Modifiability,extend,extends,1899,"ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:2009,Modifiability,plugin,plugin,2009,"FeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects alread",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:2036,Modifiability,inherit,inherited,2036,"nnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:2072,Modifiability,plugin,plugins,2072,"nnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:2467,Modifiability,extend,extends,2467,"nnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html:2576,Modifiability,plugin,plugin,2576,"nnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathInteractivePlugin<T>; extends PathPlugin<T>; Interface to define a PathPlugin that requires a list of (user-adjustable) parameters.; ; By using this interface, QuPath is able to show a standardized dialog box within which ; the parameters are set. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName, runPlugin. Method Details. getDefaultParameterList; ParameterList getDefaultParameterList(ImageData<T> imageData); This should return a default ParameterList.; ; Each time the method is invoked, a new ParameterList should be created. Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; boolean alwaysPromptForObjects(); If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathInteractivePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1730,Deployability,update,update,1730,"Plugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean run",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2763,Deployability,update,update,2763,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1238,Integrability,interface,interface,1238,"ethod. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathPlugin<T>. Type Parameters:; T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1271,Integrability,interface,interface,1271,"ethod. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathPlugin<T>. Type Parameters:; T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1330,Integrability,interface,interface,1330,"T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item name",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1564,Integrability,interface,interfaces,1564,"Plugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean run",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:344,Modifiability,plugin,plugins,344,". PathPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathPlugin<T>. Type Parameters:; T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescript",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1297,Modifiability,plugin,plugin,1297,"ethod. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathPlugin<T>. Type Parameters:; T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get th",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1388,Modifiability,plugin,plugins,1388,"T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item name",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1444,Modifiability,plugin,plugin,1444,"T - . All Known Subinterfaces:; PathInteractivePlugin<T>. All Known Implementing Classes:; AbstractDetectionPlugin, AbstractInteractivePlugin, AbstractPlugin, AbstractTileableDetectionPlugin, CellCountsCV, CoherenceFeaturePlugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item name",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1941,Modifiability,plugin,plugin,1941,"ugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2106,Modifiability,plugin,plugin,2106,"otationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2215,Modifiability,plugin,plugin,2215,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2286,Modifiability,plugin,plugin,2286,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2501,Modifiability,plugin,plugin,2501,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2696,Modifiability,plugin,plugin,2696,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2745,Modifiability,plugin,plugin,2745,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:3059,Safety,detect,detected,3059,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:1584,Energy Efficiency,monitor,monitor,1584,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:410,Integrability,interface,interface,410,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:455,Integrability,interface,interface,455,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:970,Integrability,interface,interface,970,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:1276,Integrability,depend,depends,1276,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:342,Modifiability,plugin,plugins,342,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:430,Modifiability,extend,extends,430,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:475,Modifiability,plugin,plugin,475,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:955,Modifiability,inherit,inherited,955,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/PathTask.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1513,Deployability,update,updateProgress,1513,"e process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the curr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1707,Deployability,update,updated,1707,"from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2097,Deployability,update,updateProgress,2097," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2118,Deployability,update,updateProgress,2118," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2312,Deployability,update,updated,2312," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2432,Deployability,update,update,2432," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2824,Deployability,update,updateProgress,2824," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:530,Energy Efficiency,monitor,monitoring,530,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1333,Energy Efficiency,monitor,monitor,1333,".lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1476,Energy Efficiency,monitor,monitor,1476,"ublic interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; messag",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1495,Energy Efficiency,monitor,monitoring,1495,"ublic interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; messag",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1843,Energy Efficiency,monitor,monitor,1843,"he system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is ca",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1862,Energy Efficiency,monitor,monitoring,1862,"he system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is ca",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2389,Energy Efficiency,monitor,monitor,2389," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2744,Energy Efficiency,monitor,monitor,2744," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:487,Integrability,interface,interface,487,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1312,Integrability,message,message,1312,"eld | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1410,Integrability,message,message,1410,"g Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:;",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1551,Integrability,message,message,1551,"e process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the curr",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1777,Integrability,message,message,1777,"he system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is ca",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1994,Integrability,message,message,1994,"lled once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled()",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2008,Integrability,message,message,2008,"lled once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled()",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2156,Integrability,message,message,2156," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2476,Integrability,message,message,2476," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2495,Integrability,message,message,2495," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2723,Integrability,message,message,2723," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2958,Integrability,message,message,2958," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2968,Integrability,message,message,2968," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:355,Modifiability,plugin,plugins,355,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:558,Modifiability,plugin,plugin,558,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:657,Modifiability,plugin,plugin,657,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:876,Modifiability,plugin,plugin,876,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1289,Modifiability,plugin,pluginCompleted,1289,"eld | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1350,Modifiability,plugin,plugin,1350,".lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicat",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1466,Modifiability,plugin,plugin,1466,"ublic interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; messag",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1833,Modifiability,plugin,plugin,1833,"he system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is ca",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2678,Modifiability,plugin,pluginCompleted,2678," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2700,Modifiability,plugin,pluginCompleted,2700," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2761,Modifiability,plugin,plugin,2761," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2888,Modifiability,plugin,plugin,2888," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:777,Testability,log,logging,777,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:580,Usability,feedback,feedback,580,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:760,Usability,progress bar,progress bar,760,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:472,Integrability,interface,interface,472,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:504,Integrability,interface,interface,504,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:344,Modifiability,plugin,plugins,344,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:731,Modifiability,plugin,plugin,731,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:798,Modifiability,extend,extends,798,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:939,Modifiability,plugin,plugin,939,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:1100,Modifiability,extend,extends,1100,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html:571,Usability,feedback,feedback,571,". TaskRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface TaskRunner. All Known Implementing Classes:; AbstractTaskRunner, CommandLineTaskRunner, TaskRunnerFX. public interface TaskRunner; A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; isCancelled(). Query if the plugin can be cancelled while running. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Method Details. isCancelled; boolean isCancelled(); Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Returns:. runTasks; void runTasks(Collection<? extends Runnable> tasks); Pass a collection of parallelizable tasks to run. Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunner.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html:349,Modifiability,plugin,plugins,349,". TaskRunnerUtils (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class TaskRunnerUtils. java.lang.Object; qupath.lib.plugins.TaskRunnerUtils. public class TaskRunnerUtils; extends Object; A utility class to help with the creation of TaskRunner instances.; ; An application can use setCreateFunction(IntFunction) and #setCreateHeadlessFunction(IntFunction)} to; control the creation of TaskRunner instances. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TaskRunner; createHeadlessTaskRunner(). Create a new headless TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createHeadlessTaskRunner(int nThreads). Create a new headless TaskRunner instance with the specified number of threads. TaskRunner; createTaskRunner(). Create a new TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createTaskRunner(int nThreads). Create a new TaskRunner instance with the specified number of threads. static IntFunction<TaskRunner>; getDefaultCreateFunction(). Get the default function used to create TaskRunner instances. static TaskRunnerUtils; getDefaultInstance(). Get the default instance. static TaskRunnerUtils; newInstance(). Create a new instance. TaskRunnerUtils; setCreateFunction(IntFunction<TaskRunner> function). Set the function used to generate new headless TaskRunner instances. TaskRunnerUtils; setCreateHeadlessFunction(IntFunction<TaskRunner> function). Set the function used to generate new TaskRunner instances. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notif",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html:410,Modifiability,plugin,plugins,410,". TaskRunnerUtils (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class TaskRunnerUtils. java.lang.Object; qupath.lib.plugins.TaskRunnerUtils. public class TaskRunnerUtils; extends Object; A utility class to help with the creation of TaskRunner instances.; ; An application can use setCreateFunction(IntFunction) and #setCreateHeadlessFunction(IntFunction)} to; control the creation of TaskRunner instances. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TaskRunner; createHeadlessTaskRunner(). Create a new headless TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createHeadlessTaskRunner(int nThreads). Create a new headless TaskRunner instance with the specified number of threads. TaskRunner; createTaskRunner(). Create a new TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createTaskRunner(int nThreads). Create a new TaskRunner instance with the specified number of threads. static IntFunction<TaskRunner>; getDefaultCreateFunction(). Get the default function used to create TaskRunner instances. static TaskRunnerUtils; getDefaultInstance(). Get the default instance. static TaskRunnerUtils; newInstance(). Create a new instance. TaskRunnerUtils; setCreateFunction(IntFunction<TaskRunner> function). Set the function used to generate new headless TaskRunner instances. TaskRunnerUtils; setCreateHeadlessFunction(IntFunction<TaskRunner> function). Set the function used to generate new TaskRunner instances. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notif",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html:465,Modifiability,extend,extends,465,". TaskRunnerUtils (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class TaskRunnerUtils. java.lang.Object; qupath.lib.plugins.TaskRunnerUtils. public class TaskRunnerUtils; extends Object; A utility class to help with the creation of TaskRunner instances.; ; An application can use setCreateFunction(IntFunction) and #setCreateHeadlessFunction(IntFunction)} to; control the creation of TaskRunner instances. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TaskRunner; createHeadlessTaskRunner(). Create a new headless TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createHeadlessTaskRunner(int nThreads). Create a new headless TaskRunner instance with the specified number of threads. TaskRunner; createTaskRunner(). Create a new TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createTaskRunner(int nThreads). Create a new TaskRunner instance with the specified number of threads. static IntFunction<TaskRunner>; getDefaultCreateFunction(). Get the default function used to create TaskRunner instances. static TaskRunnerUtils; getDefaultInstance(). Get the default instance. static TaskRunnerUtils; newInstance(). Create a new instance. TaskRunnerUtils; setCreateFunction(IntFunction<TaskRunner> function). Set the function used to generate new headless TaskRunner instances. TaskRunnerUtils; setCreateHeadlessFunction(IntFunction<TaskRunner> function). Set the function used to generate new TaskRunner instances. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notif",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html:1912,Modifiability,inherit,inherited,1912,"the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createHeadlessTaskRunner(int nThreads). Create a new headless TaskRunner instance with the specified number of threads. TaskRunner; createTaskRunner(). Create a new TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createTaskRunner(int nThreads). Create a new TaskRunner instance with the specified number of threads. static IntFunction<TaskRunner>; getDefaultCreateFunction(). Get the default function used to create TaskRunner instances. static TaskRunnerUtils; getDefaultInstance(). Get the default instance. static TaskRunnerUtils; newInstance(). Create a new instance. TaskRunnerUtils; setCreateFunction(IntFunction<TaskRunner> function). Set the function used to generate new headless TaskRunner instances. TaskRunnerUtils; setCreateHeadlessFunction(IntFunction<TaskRunner> function). Set the function used to generate new TaskRunner instances. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getDefaultInstance; public static TaskRunnerUtils getDefaultInstance(); Get the default instance. This is a singleton, shared across an application. Returns:. newInstance; public static TaskRunnerUtils newInstance(); Create a new instance. This may be used if part of an application requires its TaskRunner instances; to differ from those used elsewhere. Returns:. getDefaultCreateFunction; public static IntFunction<TaskRunner> getDefaultCreateFunction(); Get the default function used to create TaskRunner instances.; This is suitable for use in a headless environment. Returns:. setCreateHeadlessFunction; public TaskRunnerUtils setCreateHeadlessFunction(IntFunction<TaskRunner> function); Set the function used to generate new TaskRunner instances. Parameters:; function - a creator function that takes a requested number of threads as input; Returns:; this ",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html
https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html:1986,Security,hash,hashCode,1986,"nner; createHeadlessTaskRunner(int nThreads). Create a new headless TaskRunner instance with the specified number of threads. TaskRunner; createTaskRunner(). Create a new TaskRunner instance, using the default number of threads from; ThreadTools.getParallelism(). TaskRunner; createTaskRunner(int nThreads). Create a new TaskRunner instance with the specified number of threads. static IntFunction<TaskRunner>; getDefaultCreateFunction(). Get the default function used to create TaskRunner instances. static TaskRunnerUtils; getDefaultInstance(). Get the default instance. static TaskRunnerUtils; newInstance(). Create a new instance. TaskRunnerUtils; setCreateFunction(IntFunction<TaskRunner> function). Set the function used to generate new headless TaskRunner instances. TaskRunnerUtils; setCreateHeadlessFunction(IntFunction<TaskRunner> function). Set the function used to generate new TaskRunner instances. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getDefaultInstance; public static TaskRunnerUtils getDefaultInstance(); Get the default instance. This is a singleton, shared across an application. Returns:. newInstance; public static TaskRunnerUtils newInstance(); Create a new instance. This may be used if part of an application requires its TaskRunner instances; to differ from those used elsewhere. Returns:. getDefaultCreateFunction; public static IntFunction<TaskRunner> getDefaultCreateFunction(); Get the default function used to create TaskRunner instances.; This is suitable for use in a headless environment. Returns:. setCreateHeadlessFunction; public TaskRunnerUtils setCreateHeadlessFunction(IntFunction<TaskRunner> function); Set the function used to generate new TaskRunner instances. Parameters:; function - a creator function that takes a requested number of threads as input; Returns:; this instance. setCreateFunction; public TaskRunnerUtils setCreateFunction(In",MatchSource.WIKI,javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/TaskRunnerUtils.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/package-summary.html:378,Integrability,interface,interfaces,378,". qupath.lib.projects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.projects. package qupath.lib.projects. Classes and interfaces related to projects, which are used to manage multiple images. All Classes and InterfacesInterfacesClasses. Class; Description; Project<T>. Data structure to manage images and associated data in QuPath. ProjectImageEntry<T>. Class to represent an image entry within a project. ProjectIO. Read QuPath projects. Projects. Static methods to help when working with Projects. ResourceManager. Manage the storage and retrieval of resources with a ResourceManager. ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:1388,Availability,mask,masked,1388," . public interface Project<T>; Data structure to manage images and associated data in QuPath. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; ProjectImageEntry<T>; addDuplicate(ProjectImageEntry<T> entry,; boolean copyData). Add an image by duplicating an existing entry. ProjectImageEntry<T>; addImage(ImageServerBuilder.ServerBuilder<T> server). Add an image for a particular ImageServer. Project<T>; createSubProject(String name,; Collection<ProjectImageEntry<T>> entries). Create a sub-project that provides a view on the specified entries. long; getCreationTimestamp(). Request a timestamp from when the project was created. ProjectImageEntry<T>; getEntry(ImageData<T> imageData). Request a ProjectImageEntry associated with an ImageData. List<ProjectImageEntry<T>>; getImageList(). Get a list of image entries for the project. boolean; getMaskImageNames(). Query whether 'true' or masked image names are being returned. long; getModificationTimestamp(). Request a timestamp from when the project was last synchronized. String; getName(). Get the name of the project. static String; getNameFromURI(URI uri). Extract a usable project name from a URI. default ResourceManager.Manager<ObjectClassifier<T>>; getObjectClassifiers(). Get a manager for object classifiers saved within this project. Path; getPath(). Get a path to this project, or null if this project is not on a local file system. List<PathClass>; getPathClasses(). Get an unmodifiable list representing the PathClasses associated with this project. default ResourceManager.Manager<PixelClassifier>; getPixelClassifiers(). Get a manager for pixel classifiers saved within this project. URI; getPreviousURI(). Sometimes projects move (unfortunately). default <S,; R extends S>ResourceManager.Manager<R>; getResources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3146,Availability,mask,maskNames,3146,"hin this project. URI; getPreviousURI(). Sometimes projects move (unfortunately). default <S,; R extends S>ResourceManager.Manager<R>; getResources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within this project. URI; getURI(). Get a URI that can be used when saving/reloading this project. String; getVersion(). The version string for this project, which can be used to distinguish new and older project ; (which may contain different information). boolean; isEmpty(). Test if the project contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> path",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3186,Availability,mask,masked,3186," (unfortunately). default <S,; R extends S>ResourceManager.Manager<R>; getResources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within this project. URI; getURI(). Get a URI that can be used when saving/reloading this project. String; getVersion(). The version string for this project, which can be used to distinguish new and older project ; (which may contain different information). boolean; isEmpty(). Test if the project contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathCla",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3323,Availability,avail,available,3323," Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within this project. URI; getURI(). Get a URI that can be used when saving/reloading this project. String; getVersion(). The version string for this project, which can be used to distinguish new and older project ; (which may contain different information). boolean; isEmpty(). Test if the project contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when savi",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3617,Availability,mask,masked,3617,"on(). The version string for this project, which can be used to distinguish new and older project ; (which may contain different information). boolean; isEmpty(). Test if the project contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have mov",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3755,Availability,mask,maskNames,3755,"ject contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVers",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3795,Availability,mask,masked,3795,"ject contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVers",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:4014,Availability,mask,maskNames,4014,"oolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVersion(); The version string for this project, which can be used to distinguish new and older project ; (which may contain different information).; ; This may be null if the version information is not stored. Returns:. getPath; Path getPath(); G",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:4156,Availability,avail,available,4156,"; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVersion(); The version string for this project, which can be used to distinguish new and older project ; (which may contain different information).; ; This may be null if the version information is not stored. Returns:. getPath; Path getPath(); Get a path to this project, or null if this project is not on a local file system.; ; If not null, th",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:404,Integrability,interface,interface,404,". Project (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface Project<T>. Type Parameters:; T - . public interface Project<T>; Data structure to manage images and associated data in QuPath. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; ProjectImageEntry<T>; addDuplicate(ProjectImageEntry<T> entry,; boolean copyData). Add an image by duplicating an existing entry. ProjectImageEntry<T>; addImage(ImageServerBuilder.ServerBuilder<T> server). Add an image for a particular ImageServer. Project<T>; createSubProject(String name,; Collection<ProjectImageEntry<T>> entries). Create a sub-project that provides a view on the specified entries. long; getCreationTimestamp(). Request a timestamp from when the project was created. ProjectImageEntry<T>; getEntry(ImageData<T> imageData). Request a ProjectImageEntry associated with an ImageData. List<ProjectImageEntry<T>>; getImageList(). Get a list of image entries for the project. boolean; getMaskImageNames(). Query whether 'true' or masked image names are being returned. long; getModificationTimestamp(). Request a timestamp from when the project was last synchronized. String; getName(). Get the name of the project. static String; getNameFromURI(URI uri). Extract a usable project name from a URI. default ResourceManager.Manager<ObjectClassifier<T>>; getObjectClassifiers(). Get a manager for object classifiers saved within this project. Path; getPath(). Get a path to this project, or null if this project is not on a local file system. List<PathClass>; getPathClasses(). Get an unmodifiable list representing the PathClasses associated wit",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:1512,Integrability,synchroniz,synchronized,1512,"hor:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; ProjectImageEntry<T>; addDuplicate(ProjectImageEntry<T> entry,; boolean copyData). Add an image by duplicating an existing entry. ProjectImageEntry<T>; addImage(ImageServerBuilder.ServerBuilder<T> server). Add an image for a particular ImageServer. Project<T>; createSubProject(String name,; Collection<ProjectImageEntry<T>> entries). Create a sub-project that provides a view on the specified entries. long; getCreationTimestamp(). Request a timestamp from when the project was created. ProjectImageEntry<T>; getEntry(ImageData<T> imageData). Request a ProjectImageEntry associated with an ImageData. List<ProjectImageEntry<T>>; getImageList(). Get a list of image entries for the project. boolean; getMaskImageNames(). Query whether 'true' or masked image names are being returned. long; getModificationTimestamp(). Request a timestamp from when the project was last synchronized. String; getName(). Get the name of the project. static String; getNameFromURI(URI uri). Extract a usable project name from a URI. default ResourceManager.Manager<ObjectClassifier<T>>; getObjectClassifiers(). Get a manager for object classifiers saved within this project. Path; getPath(). Get a path to this project, or null if this project is not on a local file system. List<PathClass>; getPathClasses(). Get an unmodifiable list representing the PathClasses associated with this project. default ResourceManager.Manager<PixelClassifier>; getPixelClassifiers(). Get a manager for pixel classifiers saved within this project. URI; getPreviousURI(). Sometimes projects move (unfortunately). default <S,; R extends S>ResourceManager.Manager<R>; getResources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within th",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:7574,Integrability,synchroniz,synchronized,7574,"getEntry(ImageData<T> imageData); Request a ProjectImageEntry associated with an ImageData. Parameters:; imageData - ; Returns:. removeImage; void removeImage(ProjectImageEntry<?> entry,; boolean removeAllData); Remove an image from the project, optionally including associated data. Parameters:; entry - ; removeAllData - . removeAllImages; void removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData); Remove multiple images from the project, optionally including associated data. Parameters:; entries - ; removeAllData - . syncChanges; void syncChanges(); throws IOException; Save the project. Throws:; IOException. getImageList; List<ProjectImageEntry<T>> getImageList(); Get a list of image entries for the project. Returns:. getName; String getName(); Get the name of the project. Returns:. getCreationTimestamp; long getCreationTimestamp(); Request a timestamp from when the project was created. Returns:. getModificationTimestamp; long getModificationTimestamp(); Request a timestamp from when the project was last synchronized. Returns:; See Also:. syncChanges(). getScripts; default ResourceManager.Manager<String> getScripts(); Get a manager for scripts saved within this project. Returns:; See Also:. getResources(String, Class, String). getObjectClassifiers; default ResourceManager.Manager<ObjectClassifier<T>> getObjectClassifiers(); Get a manager for object classifiers saved within this project. Returns:; See Also:. getResources(String, Class, String). getPixelClassifiers; default ResourceManager.Manager<PixelClassifier> getPixelClassifiers(); Get a manager for pixel classifiers saved within this project. Returns:; See Also:. getResources(String, Class, String). getResources; default <S,; R extends S> ResourceManager.Manager<R> getResources(String location,; Class<S> cls,; String ext); Get a manager for objects of a specified class within this project. Type Parameters:; S - ; Parameters:; location - a location relative to the project where the re",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:8642,Integrability,depend,dependent,8642,"removeAllData); Remove multiple images from the project, optionally including associated data. Parameters:; entries - ; removeAllData - . syncChanges; void syncChanges(); throws IOException; Save the project. Throws:; IOException. getImageList; List<ProjectImageEntry<T>> getImageList(); Get a list of image entries for the project. Returns:. getName; String getName(); Get the name of the project. Returns:. getCreationTimestamp; long getCreationTimestamp(); Request a timestamp from when the project was created. Returns:. getModificationTimestamp; long getModificationTimestamp(); Request a timestamp from when the project was last synchronized. Returns:; See Also:. syncChanges(). getScripts; default ResourceManager.Manager<String> getScripts(); Get a manager for scripts saved within this project. Returns:; See Also:. getResources(String, Class, String). getObjectClassifiers; default ResourceManager.Manager<ObjectClassifier<T>> getObjectClassifiers(); Get a manager for object classifiers saved within this project. Returns:; See Also:. getResources(String, Class, String). getPixelClassifiers; default ResourceManager.Manager<PixelClassifier> getPixelClassifiers(); Get a manager for pixel classifiers saved within this project. Returns:; See Also:. getResources(String, Class, String). getResources; default <S,; R extends S> ResourceManager.Manager<R> getResources(String location,; Class<S> cls,; String ext); Get a manager for objects of a specified class within this project. Type Parameters:; S - ; Parameters:; location - a location relative to the project where the resources should be stored, e.g. ""classifiers/pixel classifiers"".; Projects may use this location in an implementation-dependent way.; cls - class of the resource to return; ext - extension to use with the resource. This is used for determining the type. Usually it should be ""json"".; Returns:; a ResourceManager.Manager for the specified resource, or null if the project does not support the resource or extension. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:2232,Modifiability,extend,extends,2232,"geData. List<ProjectImageEntry<T>>; getImageList(). Get a list of image entries for the project. boolean; getMaskImageNames(). Query whether 'true' or masked image names are being returned. long; getModificationTimestamp(). Request a timestamp from when the project was last synchronized. String; getName(). Get the name of the project. static String; getNameFromURI(URI uri). Extract a usable project name from a URI. default ResourceManager.Manager<ObjectClassifier<T>>; getObjectClassifiers(). Get a manager for object classifiers saved within this project. Path; getPath(). Get a path to this project, or null if this project is not on a local file system. List<PathClass>; getPathClasses(). Get an unmodifiable list representing the PathClasses associated with this project. default ResourceManager.Manager<PixelClassifier>; getPixelClassifiers(). Get a manager for pixel classifiers saved within this project. URI; getPreviousURI(). Sometimes projects move (unfortunately). default <S,; R extends S>ResourceManager.Manager<R>; getResources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within this project. URI; getURI(). Get a URI that can be used when saving/reloading this project. String; getVersion(). The version string for this project, which can be used to distinguish new and older project ; (which may contain different information). boolean; isEmpty(). Test if the project contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image na",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:3279,Modifiability,extend,extends,3279,"ources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within this project. URI; getURI(). Get a URI that can be used when saving/reloading this project. String; getVersion(). The version string for this project, which can be used to distinguish new and older project ; (which may contain different information). boolean; isEmpty(). Test if the project contains any images. void; removeAllImages(Collection<ProjectImageEntry<T>> entries,; boolean removeAllData). Remove multiple images from the project, optionally including associated data. void; removeImage(ProjectImageEntry<?> entry,; boolean removeAllData). Remove an image from the project, optionally including associated data. void; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:4112,Modifiability,extend,extends,4112,"; setMaskImageNames(boolean maskNames). Request that entries return masked image names, rather than the 'true' image names. boolean; setPathClasses(Collection<? extends PathClass> pathClasses). Update the available PathClasses. void; syncChanges(). Save the project. Method Details. getPathClasses; List<PathClass> getPathClasses(); Get an unmodifiable list representing the PathClasses associated with this project. Returns:. getMaskImageNames; boolean getMaskImageNames(); Query whether 'true' or masked image names are being returned. Returns:; See Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVersion(); The version string for this project, which can be used to distinguish new and older project ; (which may contain different information).; ; This may be null if the version information is not stored. Returns:. getPath; Path getPath(); Get a path to this project, or null if this project is not on a local file system.; ; If not null, th",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:8265,Modifiability,extend,extends,8265,"removeAllData); Remove multiple images from the project, optionally including associated data. Parameters:; entries - ; removeAllData - . syncChanges; void syncChanges(); throws IOException; Save the project. Throws:; IOException. getImageList; List<ProjectImageEntry<T>> getImageList(); Get a list of image entries for the project. Returns:. getName; String getName(); Get the name of the project. Returns:. getCreationTimestamp; long getCreationTimestamp(); Request a timestamp from when the project was created. Returns:. getModificationTimestamp; long getModificationTimestamp(); Request a timestamp from when the project was last synchronized. Returns:; See Also:. syncChanges(). getScripts; default ResourceManager.Manager<String> getScripts(); Get a manager for scripts saved within this project. Returns:; See Also:. getResources(String, Class, String). getObjectClassifiers; default ResourceManager.Manager<ObjectClassifier<T>> getObjectClassifiers(); Get a manager for object classifiers saved within this project. Returns:; See Also:. getResources(String, Class, String). getPixelClassifiers; default ResourceManager.Manager<PixelClassifier> getPixelClassifiers(); Get a manager for pixel classifiers saved within this project. Returns:; See Also:. getResources(String, Class, String). getResources; default <S,; R extends S> ResourceManager.Manager<R> getResources(String location,; Class<S> cls,; String ext); Get a manager for objects of a specified class within this project. Type Parameters:; S - ; Parameters:; location - a location relative to the project where the resources should be stored, e.g. ""classifiers/pixel classifiers"".; Projects may use this location in an implementation-dependent way.; cls - class of the resource to return; ext - extension to use with the resource. This is used for determining the type. Usually it should be ""json"".; Returns:; a ResourceManager.Manager for the specified resource, or null if the project does not support the resource or extension. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:5540,Security,access,access,5540,"ving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVersion(); The version string for this project, which can be used to distinguish new and older project ; (which may contain different information).; ; This may be null if the version information is not stored. Returns:. getPath; Path getPath(); Get a path to this project, or null if this project is not on a local file system.; ; If not null, the path may be a file or a directory. Returns:; See Also:. ProjectImageEntry.getEntryPath(). createSubProject; Project<T> createSubProject(String name,; Collection<ProjectImageEntry<T>> entries); Create a sub-project that provides a view on the specified entries.; ; The retains exactly the same references and data, i.e. it does not duplicate entries or data files - ; rather it is used to generate projects that provide access to a subset of the entries in the original project. Parameters:; name - the name of the sub-project; entries - the entries to retain within the sub-project; Returns:. isEmpty; boolean isEmpty(); Test if the project contains any images. Returns:. addImage; ProjectImageEntry<T> addImage(ImageServerBuilder.ServerBuilder<T> server); throws IOException; Add an image for a particular ImageServer. Parameters:; server - ; Returns:; Throws:; IOException. addDuplicate; ProjectImageEntry<T> addDuplicate(ProjectImageEntry<T> entry,; boolean copyData); throws IOException; Add an image by duplicating an existing entry.; This retains the same ImageServerBuilder.ServerBuilder, name, description and metadata, but assigns ; a new unique ID. Parameters:; entry - the entry that should be copied; copyData - if true, copy existing image data in addition to other properties; Returns:; the new entry that has been added to the project; Throws:; IOException. getEntry; ProjectImageEnt",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:1624,Usability,usab,usable,1624,"ription; ProjectImageEntry<T>; addDuplicate(ProjectImageEntry<T> entry,; boolean copyData). Add an image by duplicating an existing entry. ProjectImageEntry<T>; addImage(ImageServerBuilder.ServerBuilder<T> server). Add an image for a particular ImageServer. Project<T>; createSubProject(String name,; Collection<ProjectImageEntry<T>> entries). Create a sub-project that provides a view on the specified entries. long; getCreationTimestamp(). Request a timestamp from when the project was created. ProjectImageEntry<T>; getEntry(ImageData<T> imageData). Request a ProjectImageEntry associated with an ImageData. List<ProjectImageEntry<T>>; getImageList(). Get a list of image entries for the project. boolean; getMaskImageNames(). Query whether 'true' or masked image names are being returned. long; getModificationTimestamp(). Request a timestamp from when the project was last synchronized. String; getName(). Get the name of the project. static String; getNameFromURI(URI uri). Extract a usable project name from a URI. default ResourceManager.Manager<ObjectClassifier<T>>; getObjectClassifiers(). Get a manager for object classifiers saved within this project. Path; getPath(). Get a path to this project, or null if this project is not on a local file system. List<PathClass>; getPathClasses(). Get an unmodifiable list representing the PathClasses associated with this project. default ResourceManager.Manager<PixelClassifier>; getPixelClassifiers(). Get a manager for pixel classifiers saved within this project. URI; getPreviousURI(). Sometimes projects move (unfortunately). default <S,; R extends S>ResourceManager.Manager<R>; getResources(String location,; Class<S> cls,; String ext). Get a manager for objects of a specified class within this project. default ResourceManager.Manager<String>; getScripts(). Get a manager for scripts saved within this project. URI; getURI(). Get a URI that can be used when saving/reloading this project. String; getVersion(). The version string for this p",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html:4688,Usability,usab,usable,4688,"Also:. setMaskImageNames(boolean). setMaskImageNames; void setMaskImageNames(boolean maskNames); Request that entries return masked image names, rather than the 'true' image names.; ; The purpose of this is to support studies where the user ought not to see the image names during analysis, ; reducing the potential for user bias. Parameters:; maskNames - ; See Also:. getMaskImageNames(). setPathClasses; boolean setPathClasses(Collection<? extends PathClass> pathClasses); Update the available PathClasses. Parameters:; pathClasses - ; Returns:; true if the stored values changed, false otherwise. getURI; URI getURI(); Get a URI that can be used when saving/reloading this project. Returns:. getPreviousURI; URI getPreviousURI(); Sometimes projects move (unfortunately). This returns the previous URI, if known - ; which can be helpful for resolving relative paths to images in the event that ; both project and images have moved together. Returns:. getNameFromURI; static String getNameFromURI(URI uri); Extract a usable project name from a URI. Parameters:; uri - ; Returns:. getVersion; String getVersion(); The version string for this project, which can be used to distinguish new and older project ; (which may contain different information).; ; This may be null if the version information is not stored. Returns:. getPath; Path getPath(); Get a path to this project, or null if this project is not on a local file system.; ; If not null, the path may be a file or a directory. Returns:; See Also:. ProjectImageEntry.getEntryPath(). createSubProject; Project<T> createSubProject(String name,; Collection<ProjectImageEntry<T>> entries); Create a sub-project that provides a view on the specified entries.; ; The retains exactly the same references and data, i.e. it does not duplicate entries or data files - ; rather it is used to generate projects that provide access to a subset of the entries in the original project. Parameters:; name - the name of the sub-project; entries - the entries t",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Project.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Project.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:2338,Availability,avail,available,2338,"d for this entry. ResourceManager.Manager<ImageServer<T>>; getImages(). Access additional images associated with the project entry, e.g. Collection<String>; getMetadataKeys(). Get an unmodifiable collection of the metadata map's keys. Map<String,String>; getMetadataMap(). Get an unmodifiable view of the underlying metadata map. default String; getMetadataSummaryString(). Get a formatted string representation of the metadata map's contents. String; getMetadataValue(String key). Request a metadata value. String; getOriginalImageName(). Get the original image name, without any randomization. ImageServerBuilder.ServerBuilder<T>; getServerBuilder(). Get a ImageServerBuilder.ServerBuilder that can be used to open this image. default Collection<URI>; getServerURIs(). Deprecated.; use instead UriResource.getURIs(). String; getSummary(). Get a summary string representing this image entry. T; getThumbnail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Detail",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:2549,Availability,avail,available,2549,"le collection of the metadata map's keys. Map<String,String>; getMetadataMap(). Get an unmodifiable view of the underlying metadata map. default String; getMetadataSummaryString(). Get a formatted string representation of the metadata map's contents. String; getMetadataValue(String key). Request a metadata value. String; getOriginalImageName(). Get the original image name, without any randomization. ImageServerBuilder.ServerBuilder<T>; getServerBuilder(). Get a ImageServerBuilder.ServerBuilder that can be used to open this image. default Collection<URI>; getServerURIs(). Deprecated.; use instead UriResource.getURIs(). String; getSummary(). Get a summary string representing this image entry. T; getThumbnail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getI",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:6536,Availability,avail,available,6536,"tring> getMetadataMap(); Get an unmodifiable view of the underlying metadata map. Returns:. getMetadataKeys; Collection<String> getMetadataKeys(); Get an unmodifiable collection of the metadata map's keys. Returns:. getServerBuilder; ImageServerBuilder.ServerBuilder<T> getServerBuilder(); Get a ImageServerBuilder.ServerBuilder that can be used to open this image. Returns:. readImageData; ImageData<T> readImageData(); throws IOException; Read the ImageData associated with this entry, or create a new ImageData if none is currently present.; ; If the full data is not needed, but rather only the objects readHierarchy() can be much faster. Returns:; Throws:; IOException; See Also:. readHierarchy(). saveImageData; void saveImageData(ImageData<T> imageData); throws IOException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not b",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:6709,Availability,avail,available,6709,"turns:. getServerBuilder; ImageServerBuilder.ServerBuilder<T> getServerBuilder(); Get a ImageServerBuilder.ServerBuilder that can be used to open this image. Returns:. readImageData; ImageData<T> readImageData(); throws IOException; Read the ImageData associated with this entry, or create a new ImageData if none is currently present.; ; If the full data is not needed, but rather only the objects readHierarchy() can be much faster. Returns:; Throws:; IOException; See Also:. readHierarchy(). saveImageData; void saveImageData(ImageData<T> imageData); throws IOException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not be ; e.g. if the images have been moved. Returns:; Throws:; IOException. updateServerURIs; @Deprecated; default boolean updateServerURIs(Map<URI,URI> replacements); throws IOException; Deprecated.; use instead ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3105,Deployability,update,updateServerURIs,3105,"esource.getURIs(). String; getSummary(). Get a summary string representing this image entry. T; getThumbnail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to t",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3187,Deployability,update,updateURIs,3187,"is image entry. T; getThumbnail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the lo",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3282,Deployability,update,updateUris,3282,"mageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system.; ; If not null, the path may be a file or a directory and is not g",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3294,Deployability,update,updateURIs,3294,"mageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system.; ; If not null, the path may be a file or a directory and is not g",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:7534,Deployability,update,updateServerURIs,7534,"OException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not be ; e.g. if the images have been moved. Returns:; Throws:; IOException. updateServerURIs; @Deprecated; default boolean updateServerURIs(Map<URI,URI> replacements); throws IOException; Deprecated.; use instead UriResource.updateURIs(Map). Update the URIs for the server (optional operation). Parameters:; replacements - a map with current URIs as keys, and desired URIs as values.; Returns:; true if changes were made; Throws:; IOException. getMetadataSummaryString; default String getMetadataSummaryString(); Get a formatted string representation of the metadata map's contents. Returns:. getImages; ResourceManager.Manager<ImageServer<T>> getImages(); Access additional images associated with the project entry, e.g. pixel classifications or; aligned slides. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:7581,Deployability,update,updateServerURIs,7581,"OException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not be ; e.g. if the images have been moved. Returns:; Throws:; IOException. updateServerURIs; @Deprecated; default boolean updateServerURIs(Map<URI,URI> replacements); throws IOException; Deprecated.; use instead UriResource.updateURIs(Map). Update the URIs for the server (optional operation). Parameters:; replacements - a map with current URIs as keys, and desired URIs as values.; Returns:; true if changes were made; Throws:; IOException. getMetadataSummaryString; default String getMetadataSummaryString(); Get a formatted string representation of the metadata map's contents. Returns:. getImages; ResourceManager.Manager<ImageServer<T>> getImages(); Access additional images associated with the project entry, e.g. pixel classifications or; aligned slides. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:7683,Deployability,update,updateURIs,7683,"OException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not be ; e.g. if the images have been moved. Returns:; Throws:; IOException. updateServerURIs; @Deprecated; default boolean updateServerURIs(Map<URI,URI> replacements); throws IOException; Deprecated.; use instead UriResource.updateURIs(Map). Update the URIs for the server (optional operation). Parameters:; replacements - a map with current URIs as keys, and desired URIs as values.; Returns:; true if changes were made; Throws:; IOException. getMetadataSummaryString; default String getMetadataSummaryString(); Get a formatted string representation of the metadata map's contents. Returns:. getImages; ResourceManager.Manager<ImageServer<T>> getImages(); Access additional images associated with the project entry, e.g. pixel classifications or; aligned slides. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:524,Integrability,interface,interface,524,". ProjectImageEntry (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ProjectImageEntry<T>. Type Parameters:; T - Depends upon the project used; typically BufferedImage for QuPath. All Superinterfaces:; UriResource. public interface ProjectImageEntry<T>; extends UriResource; Class to represent an image entry within a project.; ; This stores the path to the image, and some optional metadata. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; void; clearMetadata(). Remove all metadata. boolean; containsMetadata(String key). Check if a metadata value is present for a specified key. String; getDescription(). Get a description; this is free text describing the image. Path; getEntryPath(). Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system. String; getID(). Get a unique ID to represent this entry. String; getImageName(). Get a name that may be used for this entry. ResourceManager.Manager<ImageServer<T>>; getImages(). Access additional images associated with the project entry, e.g. Collection<String>; getMetadataKeys(). Get an unmodifiable collection of the metadata map's keys. Map<String,String>; getMetadataMap(). Get an unmodifiable view of the underlying metadata map. default String; getMetadataSummaryString(). Get a formatted string representation of the metadata map's contents. String; getMetadataValue(String key). Request a metadata value. String; getOriginalImageName(). Get the original image name, without any randomization. ImageServerBuilder.ServerBuilder<T>; getServerBuilder(). Get a ImageServerBuilder.Serve",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3227,Integrability,interface,interface,3227,"ail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system.; ; If not nu",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:556,Modifiability,extend,extends,556,". ProjectImageEntry (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ProjectImageEntry<T>. Type Parameters:; T - Depends upon the project used; typically BufferedImage for QuPath. All Superinterfaces:; UriResource. public interface ProjectImageEntry<T>; extends UriResource; Class to represent an image entry within a project.; ; This stores the path to the image, and some optional metadata. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; void; clearMetadata(). Remove all metadata. boolean; containsMetadata(String key). Check if a metadata value is present for a specified key. String; getDescription(). Get a description; this is free text describing the image. Path; getEntryPath(). Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system. String; getID(). Get a unique ID to represent this entry. String; getImageName(). Get a name that may be used for this entry. ResourceManager.Manager<ImageServer<T>>; getImages(). Access additional images associated with the project entry, e.g. Collection<String>; getMetadataKeys(). Get an unmodifiable collection of the metadata map's keys. Map<String,String>; getMetadataMap(). Get an unmodifiable view of the underlying metadata map. default String; getMetadataSummaryString(). Get a formatted string representation of the metadata map's contents. String; getMetadataValue(String key). Request a metadata value. String; getOriginalImageName(). Get the original image name, without any randomization. ImageServerBuilder.ServerBuilder<T>; getServerBuilder(). Get a ImageServerBuilder.Serve",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3212,Modifiability,inherit,inherited,3212,"ail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system.; ; If not nu",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:859,Usability,clear,clearMetadata,859,". ProjectImageEntry (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ProjectImageEntry<T>. Type Parameters:; T - Depends upon the project used; typically BufferedImage for QuPath. All Superinterfaces:; UriResource. public interface ProjectImageEntry<T>; extends UriResource; Class to represent an image entry within a project.; ; This stores the path to the image, and some optional metadata. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; void; clearMetadata(). Remove all metadata. boolean; containsMetadata(String key). Check if a metadata value is present for a specified key. String; getDescription(). Get a description; this is free text describing the image. Path; getEntryPath(). Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system. String; getID(). Get a unique ID to represent this entry. String; getImageName(). Get a name that may be used for this entry. ResourceManager.Manager<ImageServer<T>>; getImages(). Access additional images associated with the project entry, e.g. Collection<String>; getMetadataKeys(). Get an unmodifiable collection of the metadata map's keys. Map<String,String>; getMetadataMap(). Get an unmodifiable view of the underlying metadata map. default String; getMetadataSummaryString(). Get a formatted string representation of the metadata map's contents. String; getMetadataValue(String key). Request a metadata value. String; getOriginalImageName(). Get the original image name, without any randomization. ImageServerBuilder.ServerBuilder<T>; getServerBuilder(). Get a ImageServerBuilder.Serve",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:5376,Usability,clear,clearMetadata,5376,"taValue; String removeMetadataValue(String key); Remove a metadata value. Parameters:; key - ; Returns:. getMetadataValue; String getMetadataValue(String key); Request a metadata value.; ; Note that this may return null. Parameters:; key - ; Returns:. putMetadataValue; String putMetadataValue(String key,; String value); Store a metadata value.; ; This is intended as storage of short key-value pairs.; Extended text should be stored under setDescription. Parameters:; key - ; value - ; Returns:. containsMetadata; boolean containsMetadata(String key); Check if a metadata value is present for a specified key. Parameters:; key - ; Returns:; true if getDescription() does not return null or an empty string, false otherwise. getDescription; String getDescription(); Get a description; this is free text describing the image. Returns:. setDescription; void setDescription(String description); Set the description. Parameters:; description - ; See Also:. getDescription(). clearMetadata; void clearMetadata(); Remove all metadata. getMetadataMap; Map<String,String> getMetadataMap(); Get an unmodifiable view of the underlying metadata map. Returns:. getMetadataKeys; Collection<String> getMetadataKeys(); Get an unmodifiable collection of the metadata map's keys. Returns:. getServerBuilder; ImageServerBuilder.ServerBuilder<T> getServerBuilder(); Get a ImageServerBuilder.ServerBuilder that can be used to open this image. Returns:. readImageData; ImageData<T> readImageData(); throws IOException; Read the ImageData associated with this entry, or create a new ImageData if none is currently present.; ; If the full data is not needed, but rather only the objects readHierarchy() can be much faster. Returns:; Throws:; IOException; See Also:. readHierarchy(). saveImageData; void saveImageData(ImageData<T> imageData); throws IOException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObject",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:5396,Usability,clear,clearMetadata,5396,"taValue; String removeMetadataValue(String key); Remove a metadata value. Parameters:; key - ; Returns:. getMetadataValue; String getMetadataValue(String key); Request a metadata value.; ; Note that this may return null. Parameters:; key - ; Returns:. putMetadataValue; String putMetadataValue(String key,; String value); Store a metadata value.; ; This is intended as storage of short key-value pairs.; Extended text should be stored under setDescription. Parameters:; key - ; value - ; Returns:. containsMetadata; boolean containsMetadata(String key); Check if a metadata value is present for a specified key. Parameters:; key - ; Returns:; true if getDescription() does not return null or an empty string, false otherwise. getDescription; String getDescription(); Get a description; this is free text describing the image. Returns:. setDescription; void setDescription(String description); Set the description. Parameters:; description - ; See Also:. getDescription(). clearMetadata; void clearMetadata(); Remove all metadata. getMetadataMap; Map<String,String> getMetadataMap(); Get an unmodifiable view of the underlying metadata map. Returns:. getMetadataKeys; Collection<String> getMetadataKeys(); Get an unmodifiable collection of the metadata map's keys. Returns:. getServerBuilder; ImageServerBuilder.ServerBuilder<T> getServerBuilder(); Get a ImageServerBuilder.ServerBuilder that can be used to open this image. Returns:. readImageData; ImageData<T> readImageData(); throws IOException; Read the ImageData associated with this entry, or create a new ImageData if none is currently present.; ; If the full data is not needed, but rather only the objects readHierarchy() can be much faster. Returns:; Throws:; IOException; See Also:. readHierarchy(). saveImageData; void saveImageData(ImageData<T> imageData); throws IOException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObject",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:443,Modifiability,extend,extends,443,". ProjectIO (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ProjectIO. java.lang.Object; qupath.lib.projects.ProjectIO. public class ProjectIO; extends Object; Read QuPath projects.; ; Projects should now be written with Project.syncChanges(). Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_PROJECT_EXTENSION. Default file extension for a QuPath project. static final String; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:1397,Modifiability,inherit,inherited,1397,"ts.ProjectIO. public class ProjectIO; extends Object; Read QuPath projects.; ; Projects should now be written with Project.syncChanges(). Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_PROJECT_EXTENSION. Default file extension for a QuPath project. static final String; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls - ; Returns:; Throws:; IOException. getProjectExtension; public static ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:1226,Performance,load,loadProject,1226," Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ProjectIO. java.lang.Object; qupath.lib.projects.ProjectIO. public class ProjectIO; extends Object; Read QuPath projects.; ; Projects should now be written with Project.syncChanges(). Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_PROJECT_EXTENSION. Default file extension for a QuPath project. static final String; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Clas",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:1329,Performance,load,loadProject,1329,"ath.lib.projects; Class ProjectIO. java.lang.Object; qupath.lib.projects.ProjectIO. public class ProjectIO; extends Object; Read QuPath projects.; ; Projects should now be written with Project.syncChanges(). Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_PROJECT_EXTENSION. Default file extension for a QuPath project. static final String; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:1916,Performance,load,loadProject,1916,"ng; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls - ; Returns:; Throws:; IOException. getProjectExtension; public static String getProjectExtension(boolean includePeriod); Get the default extension for a QuPath project file. Parameters:; includePeriod - ; Returns:. getProjectExtension; public static String getProjectExtension(); Get the default extension for a QuPath project file, without the 'dot'. Returns:; See Also:. getProjectExtension(boolean). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:1958,Performance,load,loadProject,1958,"ng; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls - ; Returns:; Throws:; IOException. getProjectExtension; public static String getProjectExtension(boolean includePeriod); Get the default extension for a QuPath project file. Parameters:; includePeriod - ; Returns:. getProjectExtension; public static String getProjectExtension(); Get the default extension for a QuPath project file, without the 'dot'. Returns:; See Also:. getProjectExtension(boolean). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:2160,Performance,load,loadProject,2160,"ng; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls - ; Returns:; Throws:; IOException. getProjectExtension; public static String getProjectExtension(boolean includePeriod); Get the default extension for a QuPath project file. Parameters:; includePeriod - ; Returns:. getProjectExtension; public static String getProjectExtension(); Get the default extension for a QuPath project file, without the 'dot'. Returns:; See Also:. getProjectExtension(boolean). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:2202,Performance,load,loadProject,2202,"ng; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls - ; Returns:; Throws:; IOException. getProjectExtension; public static String getProjectExtension(boolean includePeriod); Get the default extension for a QuPath project file. Parameters:; includePeriod - ; Returns:. getProjectExtension; public static String getProjectExtension(); Get the default extension for a QuPath project file, without the 'dot'. Returns:; See Also:. getProjectExtension(boolean). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html:1471,Security,hash,hashCode,1471,"ts.; ; Projects should now be written with Project.syncChanges(). Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_PROJECT_EXTENSION. Default file extension for a QuPath project. static final String; DEFAULT_PROJECT_NAME. Default file name for a QuPath project. Constructor Summary; Constructors. Constructor; Description; ProjectIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static String; getProjectExtension(). Get the default extension for a QuPath project file, without the 'dot'. static String; getProjectExtension(boolean includePeriod). Get the default extension for a QuPath project file. static <T> Project<T>; loadProject(File fileProject,; Class<T> cls). Load a project from a local file. static <T> Project<T>; loadProject(URI uri,; Class<T> cls). Read project from URI. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. DEFAULT_PROJECT_NAME; public static final String DEFAULT_PROJECT_NAME; Default file name for a QuPath project. See Also:. Constant Field Values. DEFAULT_PROJECT_EXTENSION; public static final String DEFAULT_PROJECT_EXTENSION; Default file extension for a QuPath project. See Also:. Constant Field Values. Constructor Details. ProjectIO; public ProjectIO(). Method Details. loadProject; public static <T> Project<T> loadProject(URI uri,; Class<T> cls); throws IOException; Read project from URI. Currently, this assumes that the URI refers to a local file. Parameters:; uri - ; cls - ; Returns:; Throws:; IOException. loadProject; public static <T> Project<T> loadProject(File fileProject,; Class<T> cls); throws IOException; Load a project from a local file. Parameters:; fileProject - ; cls - ; Returns:; Throws:; IOException. getProjectExtension; public static String getProjectExtension(boolean includePeriod); Get the default exten",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ProjectIO.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectIO.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Projects.html:439,Modifiability,extend,extends,439,". Projects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class Projects. java.lang.Object; qupath.lib.projects.Projects. public class Projects; extends Object; Static methods to help when working with Projects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Projects();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Project<T>; createProject(File file,; Class<T> cls). Create a new project using the local file system. static File; getBaseDirectory(Project<?> project). Get the base directory of a project stored on the local file system. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Projects; public Projects(). Method Details. getBaseDirectory; public static File getBaseDirectory(Project<?> project); Get the base directory of a project stored on the local file system. Parameters:; project - ; Returns:; the base directory, or null if no directory could be found. createProject; public static <T> Project<T> createProject(File file,; Class<T> cls); Create a new project using the local file system. It is assumed that the directory of the project file ; can be managed by the project, and therefore it should not contain additional user files. Parameters:; file - either the project file, or a directory that should contain a project file with a default name; cls - generic type for the project (only BufferedImage currently supported); Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Projects.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Projects.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Projects.html:947,Modifiability,inherit,inherited,947,". Projects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class Projects. java.lang.Object; qupath.lib.projects.Projects. public class Projects; extends Object; Static methods to help when working with Projects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Projects();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Project<T>; createProject(File file,; Class<T> cls). Create a new project using the local file system. static File; getBaseDirectory(Project<?> project). Get the base directory of a project stored on the local file system. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Projects; public Projects(). Method Details. getBaseDirectory; public static File getBaseDirectory(Project<?> project); Get the base directory of a project stored on the local file system. Parameters:; project - ; Returns:; the base directory, or null if no directory could be found. createProject; public static <T> Project<T> createProject(File file,; Class<T> cls); Create a new project using the local file system. It is assumed that the directory of the project file ; can be managed by the project, and therefore it should not contain additional user files. Parameters:; file - either the project file, or a directory that should contain a project file with a default name; cls - generic type for the project (only BufferedImage currently supported); Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Projects.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Projects.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/Projects.html:1021,Security,hash,hashCode,1021,". Projects (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class Projects. java.lang.Object; qupath.lib.projects.Projects. public class Projects; extends Object; Static methods to help when working with Projects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Projects();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> Project<T>; createProject(File file,; Class<T> cls). Create a new project using the local file system. static File; getBaseDirectory(Project<?> project). Get the base directory of a project stored on the local file system. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Projects; public Projects(). Method Details. getBaseDirectory; public static File getBaseDirectory(Project<?> project); Get the base directory of a project stored on the local file system. Parameters:; project - ; Returns:; the base directory, or null if no directory could be found. createProject; public static <T> Project<T> createProject(File file,; Class<T> cls); Create a new project using the local file system. It is assumed that the directory of the project file ; can be managed by the project, and therefore it should not contain additional user files. Parameters:; file - either the project file, or a directory that should contain a project file with a default name; cls - generic type for the project (only BufferedImage currently supported); Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/Projects.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/Projects.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html:789,Integrability,depend,depending,789,". ResourceManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ResourceManager. java.lang.Object; qupath.lib.projects.ResourceManager. public class ResourceManager; extends Object; Manage the storage and retrieval of resources with a ResourceManager.; Examples may include pixel classifiers or scripts.; By using this it is possible to avoid reliance on a filesystem, for example, ; opening the possibility to have resources stored elsewhere.; ; Note that names may be case-insensitive, depending upon the specific backing store.; This is the case for the default implementations using file storage. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. Constructor Summary; Constructors. Constructor; Description; ResourceManager();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ResourceManager; public ResourceManager(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html:1010,Integrability,interface,interface,1010,". ResourceManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ResourceManager. java.lang.Object; qupath.lib.projects.ResourceManager. public class ResourceManager; extends Object; Manage the storage and retrieval of resources with a ResourceManager.; Examples may include pixel classifiers or scripts.; By using this it is possible to avoid reliance on a filesystem, for example, ; opening the possibility to have resources stored elsewhere.; ; Note that names may be case-insensitive, depending upon the specific backing store.; This is the case for the default implementations using file storage. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. Constructor Summary; Constructors. Constructor; Description; ResourceManager();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ResourceManager; public ResourceManager(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html:467,Modifiability,extend,extends,467,". ResourceManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ResourceManager. java.lang.Object; qupath.lib.projects.ResourceManager. public class ResourceManager; extends Object; Manage the storage and retrieval of resources with a ResourceManager.; Examples may include pixel classifiers or scripts.; By using this it is possible to avoid reliance on a filesystem, for example, ; opening the possibility to have resources stored elsewhere.; ; Note that names may be case-insensitive, depending upon the specific backing store.; This is the case for the default implementations using file storage. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. Constructor Summary; Constructors. Constructor; Description; ResourceManager();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ResourceManager; public ResourceManager(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html:1283,Modifiability,inherit,inherited,1283,". ResourceManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ResourceManager. java.lang.Object; qupath.lib.projects.ResourceManager. public class ResourceManager; extends Object; Manage the storage and retrieval of resources with a ResourceManager.; Examples may include pixel classifiers or scripts.; By using this it is possible to avoid reliance on a filesystem, for example, ; opening the possibility to have resources stored elsewhere.; ; Note that names may be case-insensitive, depending upon the specific backing store.; This is the case for the default implementations using file storage. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. Constructor Summary; Constructors. Constructor; Description; ResourceManager();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ResourceManager; public ResourceManager(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html:638,Safety,avoid,avoid,638,". ResourceManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ResourceManager. java.lang.Object; qupath.lib.projects.ResourceManager. public class ResourceManager; extends Object; Manage the storage and retrieval of resources with a ResourceManager.; Examples may include pixel classifiers or scripts.; By using this it is possible to avoid reliance on a filesystem, for example, ; opening the possibility to have resources stored elsewhere.; ; Note that names may be case-insensitive, depending upon the specific backing store.; This is the case for the default implementations using file storage. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. Constructor Summary; Constructors. Constructor; Description; ResourceManager();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ResourceManager; public ResourceManager(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html:1357,Security,hash,hashCode,1357,". ResourceManager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Class ResourceManager. java.lang.Object; qupath.lib.projects.ResourceManager. public class ResourceManager; extends Object; Manage the storage and retrieval of resources with a ResourceManager.; Examples may include pixel classifiers or scripts.; By using this it is possible to avoid reliance on a filesystem, for example, ; opening the possibility to have resources stored elsewhere.; ; Note that names may be case-insensitive, depending upon the specific backing store.; This is the case for the default implementations using file storage. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ResourceManager.Manager<T>. Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory. Constructor Summary; Constructors. Constructor; Description; ResourceManager();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ResourceManager; public ResourceManager(). ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html:1175,Availability,avail,available,1175,". Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ResourceManager.Manager<T>. Type Parameters:; T - the generic type of the resource being managed. Enclosing class:; ResourceManager. public static interface ResourceManager.Manager<T>; Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory.; ; Examples of resources are scripts or classifiers. Several of these may be stored per project, ; and may be identified by name. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default boolean; contains(String name). Returns true if the manager knows a resource with the specified name exists. T; get(String name). Retrieve a resource by name. Collection<String>; getNames(). Get a list of the available resources. void; put(String name,; T resource). Save a resource within the project. boolean; remove(String name). Remove a resource within the project. Method Details. getNames; Collection<String> getNames(); throws IOException; Get a list of the available resources. Returns:; Throws:; IOException. get; T get(String name); throws IOException; Retrieve a resource by name. Parameters:; name - ; Returns:; Throws:; IOException. put; void put(String name,; T resource); throws IOException; Save a resource within the project. Parameters:; name - ; resource - ; Throws:; IOException. remove; boolean remove(String name); throws IOException; Remove a resource within the project. Parameters:; name - ; Returns:; true if a resource was successfully removed, false otherwise; Throws:; IOException. contains; default boolean contains(String name); throws IOException; Returns true if the manager knows a resource with the specified name exists. Parameters:; name - the name to check; Returns:; tru",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html:1432,Availability,avail,available,1432,"sted | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ResourceManager.Manager<T>. Type Parameters:; T - the generic type of the resource being managed. Enclosing class:; ResourceManager. public static interface ResourceManager.Manager<T>; Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory.; ; Examples of resources are scripts or classifiers. Several of these may be stored per project, ; and may be identified by name. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default boolean; contains(String name). Returns true if the manager knows a resource with the specified name exists. T; get(String name). Retrieve a resource by name. Collection<String>; getNames(). Get a list of the available resources. void; put(String name,; T resource). Save a resource within the project. boolean; remove(String name). Remove a resource within the project. Method Details. getNames; Collection<String> getNames(); throws IOException; Get a list of the available resources. Returns:; Throws:; IOException. get; T get(String name); throws IOException; Retrieve a resource by name. Parameters:; name - ; Returns:; Throws:; IOException. put; void put(String name,; T resource); throws IOException; Save a resource within the project. Parameters:; name - ; resource - ; Throws:; IOException. remove; boolean remove(String name); throws IOException; Remove a resource within the project. Parameters:; name - ; Returns:; true if a resource was successfully removed, false otherwise; Throws:; IOException. contains; default boolean contains(String name); throws IOException; Returns true if the manager knows a resource with the specified name exists. Parameters:; name - the name to check; Returns:; true if a resource with the name exists, false otherwise; Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html
https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html:524,Integrability,interface,interface,524,". ResourceManager.Manager (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ResourceManager.Manager<T>. Type Parameters:; T - the generic type of the resource being managed. Enclosing class:; ResourceManager. public static interface ResourceManager.Manager<T>; Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory.; ; Examples of resources are scripts or classifiers. Several of these may be stored per project, ; and may be identified by name. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default boolean; contains(String name). Returns true if the manager knows a resource with the specified name exists. T; get(String name). Retrieve a resource by name. Collection<String>; getNames(). Get a list of the available resources. void; put(String name,; T resource). Save a resource within the project. boolean; remove(String name). Remove a resource within the project. Method Details. getNames; Collection<String> getNames(); throws IOException; Get a list of the available resources. Returns:; Throws:; IOException. get; T get(String name); throws IOException; Retrieve a resource by name. Parameters:; name - ; Returns:; Throws:; IOException. put; void put(String name,; T resource); throws IOException; Save a resource within the project. Parameters:; name - ; resource - ; Throws:; IOException. remove; boolean remove(String name); throws IOException; Remove a resource within the project. Parameters:; name - ; Returns:; true if a resource was successfully removed, false otherwise; Throws:; IOException. contains; default boole",MatchSource.WIKI,javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:772,Availability,error,error-prone,772,". ImagePlane (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class ImagePlane. java.lang.Object; qupath.lib.regions.ImagePlane. All Implemented Interfaces:; Comparable<ImagePlane>. public class ImagePlane; extends Object; implements Comparable<ImagePlane>; Helper class to store z-slice and time point indices, optionally along with a channel index as well.; ; These values are frequently required together, such as with ROIs and RegionRequests. ; It is more convenient (and less error-prone) to use a single ImagePlane instance rather than passing the indices as ; separate integers each time they are needed. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compareTo(ImagePlane o). Compare with another ImagePlane, in the order t, z, c. boolean; equals(Object obj);  ; int; getC(). Get the channel index. static ImagePlane; getDefaultPlane(). Returns an ImagePlane with channel -1, z of 0 and t of 0. static ImagePlane; getPlane(int z,; int t). Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. static ImagePlane; getPlane(ImageRegion region). Returns an ImagePlane with channel -1 and z and t set from an existing ImageRegion. static ImagePlane; getPlane(ROI roi). Returns an ImagePlane with channel -1, and z and t set from an existing ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ()",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:2555,Integrability,interface,interface,2555," ImageRegion. static ImagePlane; getPlane(ROI roi). Returns an ImagePlane with channel -1, and z and t set from an existing ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ(). Get the z-slice index. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getC; public int getC(); Get the channel index. This may be -1 to indicate no channel is specified. Returns:. getZ; public int getZ(); Get the z-slice index. Returns:. getT; public int getT(); Get the time point index. Returns:. compareTo; public int compareTo(ImagePlane o); Compare with another ImagePlane, in the order t, z, c. Specified by:; compareTo in interface Comparable<ImagePlane>. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. getPlane; public static ImagePlane getPlane(int z,; int t); Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. set to -1). Parameters:; z - ; t - ; Returns:. getDefaultPlane; public static ImagePlane getDefaultPlane(); Returns an ImagePlane with channel -1, z of 0 and t of 0.; ; Use of this method is discouraged; it is appropriate only for 2D images. Returns:. getPlaneWithChannel; public static ImagePlane getPlaneWithChannel(ROI roi); Returns an ImagePlane with channel, z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ROI roi); Returns an ImagePlane with channel -1, and z and t set from an existing ROI. Parameters:; roi - ; ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:498,Modifiability,extend,extends,498,". ImagePlane (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class ImagePlane. java.lang.Object; qupath.lib.regions.ImagePlane. All Implemented Interfaces:; Comparable<ImagePlane>. public class ImagePlane; extends Object; implements Comparable<ImagePlane>; Helper class to store z-slice and time point indices, optionally along with a channel index as well.; ; These values are frequently required together, such as with ROIs and RegionRequests. ; It is more convenient (and less error-prone) to use a single ImagePlane instance rather than passing the indices as ; separate integers each time they are needed. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compareTo(ImagePlane o). Compare with another ImagePlane, in the order t, z, c. boolean; equals(Object obj);  ; int; getC(). Get the channel index. static ImagePlane; getDefaultPlane(). Returns an ImagePlane with channel -1, z of 0 and t of 0. static ImagePlane; getPlane(int z,; int t). Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. static ImagePlane; getPlane(ImageRegion region). Returns an ImagePlane with channel -1 and z and t set from an existing ImageRegion. static ImagePlane; getPlane(ROI roi). Returns an ImagePlane with channel -1, and z and t set from an existing ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ()",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:2077,Modifiability,inherit,inherited,2077,"another ImagePlane, in the order t, z, c. boolean; equals(Object obj);  ; int; getC(). Get the channel index. static ImagePlane; getDefaultPlane(). Returns an ImagePlane with channel -1, z of 0 and t of 0. static ImagePlane; getPlane(int z,; int t). Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. static ImagePlane; getPlane(ImageRegion region). Returns an ImagePlane with channel -1 and z and t set from an existing ImageRegion. static ImagePlane; getPlane(ROI roi). Returns an ImagePlane with channel -1, and z and t set from an existing ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ(). Get the z-slice index. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getC; public int getC(); Get the channel index. This may be -1 to indicate no channel is specified. Returns:. getZ; public int getZ(); Get the z-slice index. Returns:. getT; public int getT(); Get the time point index. Returns:. compareTo; public int compareTo(ImagePlane o); Compare with another ImagePlane, in the order t, z, c. Specified by:; compareTo in interface Comparable<ImagePlane>. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. getPlane; public static ImagePlane getPlane(int z,; int t); Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. set to -1). Parameters:; z - ; t - ; Returns:. getDefaultPlane; public static ImagePlane getDefaultPlane(); Re",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:2031,Security,hash,hashCode,2031," compareTo(ImagePlane o). Compare with another ImagePlane, in the order t, z, c. boolean; equals(Object obj);  ; int; getC(). Get the channel index. static ImagePlane; getDefaultPlane(). Returns an ImagePlane with channel -1, z of 0 and t of 0. static ImagePlane; getPlane(int z,; int t). Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. static ImagePlane; getPlane(ImageRegion region). Returns an ImagePlane with channel -1 and z and t set from an existing ImageRegion. static ImagePlane; getPlane(ROI roi). Returns an ImagePlane with channel -1, and z and t set from an existing ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ(). Get the z-slice index. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getC; public int getC(); Get the channel index. This may be -1 to indicate no channel is specified. Returns:. getZ; public int getZ(); Get the z-slice index. Returns:. getT; public int getT(); Get the time point index. Returns:. compareTo; public int compareTo(ImagePlane o); Compare with another ImagePlane, in the order t, z, c. Specified by:; compareTo in interface Comparable<ImagePlane>. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. getPlane; public static ImagePlane getPlane(int z,; int t); Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. set to -1). Parameters:; z - ; t - ; Returns:. getDefaultPlane; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:2663,Security,hash,hashCode,2663,"ng ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ(). Get the z-slice index. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getC; public int getC(); Get the channel index. This may be -1 to indicate no channel is specified. Returns:. getZ; public int getZ(); Get the z-slice index. Returns:. getT; public int getT(); Get the time point index. Returns:. compareTo; public int compareTo(ImagePlane o); Compare with another ImagePlane, in the order t, z, c. Specified by:; compareTo in interface Comparable<ImagePlane>. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. getPlane; public static ImagePlane getPlane(int z,; int t); Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. set to -1). Parameters:; z - ; t - ; Returns:. getDefaultPlane; public static ImagePlane getDefaultPlane(); Returns an ImagePlane with channel -1, z of 0 and t of 0.; ; Use of this method is discouraged; it is appropriate only for 2D images. Returns:. getPlaneWithChannel; public static ImagePlane getPlaneWithChannel(ROI roi); Returns an ImagePlane with channel, z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ROI roi); Returns an ImagePlane with channel -1, and z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ImageRegion region); Returns an ImagePlane with channel -1 and z and",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:2684,Security,hash,hashCode,2684,"ng ROI. static ImagePlane; getPlaneWithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ(). Get the z-slice index. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getC; public int getC(); Get the channel index. This may be -1 to indicate no channel is specified. Returns:. getZ; public int getZ(); Get the z-slice index. Returns:. getT; public int getT(); Get the time point index. Returns:. compareTo; public int compareTo(ImagePlane o); Compare with another ImagePlane, in the order t, z, c. Specified by:; compareTo in interface Comparable<ImagePlane>. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. getPlane; public static ImagePlane getPlane(int z,; int t); Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. set to -1). Parameters:; z - ; t - ; Returns:. getDefaultPlane; public static ImagePlane getDefaultPlane(); Returns an ImagePlane with channel -1, z of 0 and t of 0.; ; Use of this method is discouraged; it is appropriate only for 2D images. Returns:. getPlaneWithChannel; public static ImagePlane getPlaneWithChannel(ROI roi); Returns an ImagePlane with channel, z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ROI roi); Returns an ImagePlane with channel -1, and z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ImageRegion region); Returns an ImagePlane with channel -1 and z and",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html:2708,Security,hash,hashCode,2708,"ithChannel(int c,; int z,; int t). Returns an ImagePlane, where the channel, z-slice and time point can be specified. static ImagePlane; getPlaneWithChannel(ROI roi). Returns an ImagePlane with channel, z and t set from an existing ROI. int; getT(). Get the time point index. int; getZ(). Get the z-slice index. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. getC; public int getC(); Get the channel index. This may be -1 to indicate no channel is specified. Returns:. getZ; public int getZ(); Get the z-slice index. Returns:. getT; public int getT(); Get the time point index. Returns:. compareTo; public int compareTo(ImagePlane o); Compare with another ImagePlane, in the order t, z, c. Specified by:; compareTo in interface Comparable<ImagePlane>. toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. getPlane; public static ImagePlane getPlane(int z,; int t); Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. set to -1). Parameters:; z - ; t - ; Returns:. getDefaultPlane; public static ImagePlane getDefaultPlane(); Returns an ImagePlane with channel -1, z of 0 and t of 0.; ; Use of this method is discouraged; it is appropriate only for 2D images. Returns:. getPlaneWithChannel; public static ImagePlane getPlaneWithChannel(ROI roi); Returns an ImagePlane with channel, z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ROI roi); Returns an ImagePlane with channel -1, and z and t set from an existing ROI. Parameters:; roi - ; Returns:. getPlane; public static ImagePlane getPlane(ImageRegion region); Returns an ImagePlane with channel -1 and z and t set from an existing ImageRegion",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImagePlane.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImagePlane.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:490,Modifiability,extend,extends,490,". ImageRegion (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class ImageRegion. java.lang.Object; qupath.lib.regions.ImageRegion. Direct Known Subclasses:; RegionRequest. public class ImageRegion; extends Object; Class for defining an image region.; ; A boundary box is given in pixel coordinates, while z & t values are given as indices. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(int x,; int y,; int z,; int t). Check if this region contains a specified coordinate. static ImageRegion; createInstance(int x,; int y,; int width,; int height,; int z,; int t). Create a region based on its bounding box coordinates, z-slice index and time point index. static ImageRegion; createInstance(Collection<? extends ROI> rois). Create the smallest region that completely contains the specified ROIs. static ImageRegion; createInstance(ROI pathROI). Create the smallest region that completely contains a specified ROI. boolean; equals(Object obj);  ; int; getHeight(). Get the height of the region bounding box. ImagePlane; getImagePlane(). Get the z-slice and time point for this region as an ImagePlane. int; getMaxX(). Get the x coordinate of the bottom right of the region bounding box. int; getMaxY(). Get the y coordinate of the bottom right of the region bounding box. int; getMinX(). Get the x coordinate of the top left of the region bounding box. int; getMinY(). Get the y coordinate of the top left of the region bounding box. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). int; getT(). Get the ti",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:1124,Modifiability,extend,extends,1124,"ackage; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class ImageRegion. java.lang.Object; qupath.lib.regions.ImageRegion. Direct Known Subclasses:; RegionRequest. public class ImageRegion; extends Object; Class for defining an image region.; ; A boundary box is given in pixel coordinates, while z & t values are given as indices. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(int x,; int y,; int z,; int t). Check if this region contains a specified coordinate. static ImageRegion; createInstance(int x,; int y,; int width,; int height,; int z,; int t). Create a region based on its bounding box coordinates, z-slice index and time point index. static ImageRegion; createInstance(Collection<? extends ROI> rois). Create the smallest region that completely contains the specified ROIs. static ImageRegion; createInstance(ROI pathROI). Create the smallest region that completely contains a specified ROI. boolean; equals(Object obj);  ; int; getHeight(). Get the height of the region bounding box. ImagePlane; getImagePlane(). Get the z-slice and time point for this region as an ImagePlane. int; getMaxX(). Get the x coordinate of the bottom right of the region bounding box. int; getMaxY(). Get the y coordinate of the bottom right of the region bounding box. int; getMinX(). Get the x coordinate of the top left of the region bounding box. int; getMinY(). Get the y coordinate of the top left of the region bounding box. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). int; getT(). Get the time point index for the region. int; getWidth(). Get the width of the region bounding box. int; getX(). Get t",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:2632,Modifiability,inherit,inherited,2632,"te of the bottom right of the region bounding box. int; getMinX(). Get the x coordinate of the top left of the region bounding box. int; getMinY(). Get the y coordinate of the top left of the region bounding box. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). int; getT(). Get the time point index for the region. int; getWidth(). Get the width of the region bounding box. int; getX(). Get the x coordinate of the region bounding box (top left). int; getY(). Get the y coordinate of the region bounding box (top left). int; getZ(). Get the z-slice index for the region. int; hashCode();  ; boolean; intersects(double x2,; double y2,; double w2,; double h2). Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. boolean; intersects(ImageRegion request). Returns true if the region specified by this region overlaps with another. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static ImageRegion createInstance(int x,; int y,; int width,; int height,; int z,; int t); Create a region based on its bounding box coordinates, z-slice index and time point index. Parameters:; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static ImageRegion createInstance(ROI pathROI); Create the smallest region that completely contains a specified ROI. Parameters:; pathROI - ; Returns:. createInstance; public static ImageRegion createInstance(Collection<? extends ROI> rois); Create the smallest region that completely contains the specified ROIs. Parameters:; rois - ; Returns:. intersects; public boolean intersects(ImageRegion request); Returns true if the region specified by this region overlaps with another.; ; If either z or t is < 0 then that va",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:3343,Modifiability,extend,extends,3343,"ouble w2,; double h2). Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. boolean; intersects(ImageRegion request). Returns true if the region specified by this region overlaps with another. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static ImageRegion createInstance(int x,; int y,; int width,; int height,; int z,; int t); Create a region based on its bounding box coordinates, z-slice index and time point index. Parameters:; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static ImageRegion createInstance(ROI pathROI); Create the smallest region that completely contains a specified ROI. Parameters:; pathROI - ; Returns:. createInstance; public static ImageRegion createInstance(Collection<? extends ROI> rois); Create the smallest region that completely contains the specified ROIs. Parameters:; rois - ; Returns:. intersects; public boolean intersects(ImageRegion request); Returns true if the region specified by this region overlaps with another.; ; If either z or t is < 0 then that value will be ignored. Parameters:; request - ; Returns:. intersects; public boolean intersects(double x2,; double y2,; double w2,; double h2); Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. Parameters:; x2 - ; y2 - ; w2 - ; h2 - ; Returns:. contains; public boolean contains(int x,; int y,; int z,; int t); Check if this region contains a specified coordinate. Parameters:; x - ; y - ; z - ; t - ; Returns:. getX; public int getX(); Get the x coordinate of the region bounding box (top left). Returns:. getY; public int getY(); Get the y coordinate of the region bounding box (top left). Returns:. getWidth; public int getWidth(); Get the width of the ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:2293,Security,hash,hashCode,2293,"I. boolean; equals(Object obj);  ; int; getHeight(). Get the height of the region bounding box. ImagePlane; getImagePlane(). Get the z-slice and time point for this region as an ImagePlane. int; getMaxX(). Get the x coordinate of the bottom right of the region bounding box. int; getMaxY(). Get the y coordinate of the bottom right of the region bounding box. int; getMinX(). Get the x coordinate of the top left of the region bounding box. int; getMinY(). Get the y coordinate of the top left of the region bounding box. ImagePlane; getPlane(). Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). int; getT(). Get the time point index for the region. int; getWidth(). Get the width of the region bounding box. int; getX(). Get the x coordinate of the region bounding box (top left). int; getY(). Get the y coordinate of the region bounding box (top left). int; getZ(). Get the z-slice index for the region. int; hashCode();  ; boolean; intersects(double x2,; double y2,; double w2,; double h2). Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. boolean; intersects(ImageRegion request). Returns true if the region specified by this region overlaps with another. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class Object. createInstance; public static ImageRegion createInstance(int x,; int y,; int width,; int height,; int z,; int t); Create a region based on its bounding box coordinates, z-slice index and time point index. Parameters:; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static ImageRegion createInstance(ROI pathROI); Create the smallest region that completely contains a specified ROI. Parameters:; pathROI - ; Returns:. createInstance; public static ImageRegion createInstance(C",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:5487,Security,hash,hashCode,5487,"t value will be ignored. Parameters:; request - ; Returns:. intersects; public boolean intersects(double x2,; double y2,; double w2,; double h2); Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. Parameters:; x2 - ; y2 - ; w2 - ; h2 - ; Returns:. contains; public boolean contains(int x,; int y,; int z,; int t); Check if this region contains a specified coordinate. Parameters:; x - ; y - ; z - ; t - ; Returns:. getX; public int getX(); Get the x coordinate of the region bounding box (top left). Returns:. getY; public int getY(); Get the y coordinate of the region bounding box (top left). Returns:. getWidth; public int getWidth(); Get the width of the region bounding box. Returns:. getHeight; public int getHeight(); Get the height of the region bounding box. Returns:. getZ; public int getZ(); Get the z-slice index for the region. Returns:. getT; public int getT(); Get the time point index for the region. Returns:. getMinX; public int getMinX(); Get the x coordinate of the top left of the region bounding box. Returns:. getMaxX; public int getMaxX(); Get the x coordinate of the bottom right of the region bounding box. Returns:. getMinY; public int getMinY(); Get the y coordinate of the top left of the region bounding box. Returns:. getMaxY; public int getMaxY(); Get the y coordinate of the bottom right of the region bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Get the z-slice and time point for this region as an ImagePlane. Returns:; Since:; v0.4.0 (replaces getPlane() for better consistency with other classes). getPlane; @Deprecated; public ImagePlane getPlane(); Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). Get the z-slice and time point for this region as an ImagePlane. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:5508,Security,hash,hashCode,5508,"t value will be ignored. Parameters:; request - ; Returns:. intersects; public boolean intersects(double x2,; double y2,; double w2,; double h2); Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. Parameters:; x2 - ; y2 - ; w2 - ; h2 - ; Returns:. contains; public boolean contains(int x,; int y,; int z,; int t); Check if this region contains a specified coordinate. Parameters:; x - ; y - ; z - ; t - ; Returns:. getX; public int getX(); Get the x coordinate of the region bounding box (top left). Returns:. getY; public int getY(); Get the y coordinate of the region bounding box (top left). Returns:. getWidth; public int getWidth(); Get the width of the region bounding box. Returns:. getHeight; public int getHeight(); Get the height of the region bounding box. Returns:. getZ; public int getZ(); Get the z-slice index for the region. Returns:. getT; public int getT(); Get the time point index for the region. Returns:. getMinX; public int getMinX(); Get the x coordinate of the top left of the region bounding box. Returns:. getMaxX; public int getMaxX(); Get the x coordinate of the bottom right of the region bounding box. Returns:. getMinY; public int getMinY(); Get the y coordinate of the top left of the region bounding box. Returns:. getMaxY; public int getMaxY(); Get the y coordinate of the bottom right of the region bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Get the z-slice and time point for this region as an ImagePlane. Returns:; Since:; v0.4.0 (replaces getPlane() for better consistency with other classes). getPlane; @Deprecated; public ImagePlane getPlane(); Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). Get the z-slice and time point for this region as an ImagePlane. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html:5532,Security,hash,hashCode,5532,"t value will be ignored. Parameters:; request - ; Returns:. intersects; public boolean intersects(double x2,; double y2,; double w2,; double h2); Query if this region intersects with a specified bounding box, ignoring z-slice and time point information. Parameters:; x2 - ; y2 - ; w2 - ; h2 - ; Returns:. contains; public boolean contains(int x,; int y,; int z,; int t); Check if this region contains a specified coordinate. Parameters:; x - ; y - ; z - ; t - ; Returns:. getX; public int getX(); Get the x coordinate of the region bounding box (top left). Returns:. getY; public int getY(); Get the y coordinate of the region bounding box (top left). Returns:. getWidth; public int getWidth(); Get the width of the region bounding box. Returns:. getHeight; public int getHeight(); Get the height of the region bounding box. Returns:. getZ; public int getZ(); Get the z-slice index for the region. Returns:. getT; public int getT(); Get the time point index for the region. Returns:. getMinX; public int getMinX(); Get the x coordinate of the top left of the region bounding box. Returns:. getMaxX; public int getMaxX(); Get the x coordinate of the bottom right of the region bounding box. Returns:. getMinY; public int getMinY(); Get the y coordinate of the top left of the region bounding box. Returns:. getMaxY; public int getMaxY(); Get the y coordinate of the bottom right of the region bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Get the z-slice and time point for this region as an ImagePlane. Returns:; Since:; v0.4.0 (replaces getPlane() for better consistency with other classes). getPlane; @Deprecated; public ImagePlane getPlane(); Deprecated.; v0.4.0 use getImagePlane() instead (changed for better consistency with other classes). Get the z-slice and time point for this region as an ImagePlane. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/ImageRegion.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/ImageRegion.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/Padding.html:433,Modifiability,extend,extends,433,". Padding (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class Padding. java.lang.Object; qupath.lib.regions.Padding. public class Padding; extends Object; Requested padding for a 2D image. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Padding; add(Padding padding). Add this padding to another. static Padding; empty(). Get an empty padding object (0 on all sides). static Padding; getPadding(int x,; int y). Get an padding object 'x' pixels to the left and right, and 'y' pixels above and below. static Padding; getPadding(int x1,; int x2,; int y1,; int y2). Get a padding object that may have different padding on each side. int; getX1(). Get the first horizontal padding (left of the image), in pixels. int; getX2(). Get the second horizontal padding (right of the image), in pixels. int; getXSum(). Get the total horizontal padding (sum of x1 and x2). int; getY1(). Get the first vertical padding (top of the image), in pixels. int; getY2(). Get the second vertical padding (bottom of the image), in pixels. int; getYSum(). Get the total vertical padding (sum of x1 and x2). boolean; isEmpty(). Returns true of the padding is zero. boolean; isSymmetric(). Returns true of the padding is identical on all sides (x1 == x2 == y1 == y2). Padding; max(Padding padding). Compare two paddings, and take the larger padding value on all sides. Padding; subtract(Padding padding). Add another padding from this one. static Padding; symmetric(int pad). Get a padding object with 'pad' pixels on all sides. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/Padding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/Padding.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/Padding.html:1917,Modifiability,inherit,inherited,1917,"2,; int y1,; int y2). Get a padding object that may have different padding on each side. int; getX1(). Get the first horizontal padding (left of the image), in pixels. int; getX2(). Get the second horizontal padding (right of the image), in pixels. int; getXSum(). Get the total horizontal padding (sum of x1 and x2). int; getY1(). Get the first vertical padding (top of the image), in pixels. int; getY2(). Get the second vertical padding (bottom of the image), in pixels. int; getYSum(). Get the total vertical padding (sum of x1 and x2). boolean; isEmpty(). Returns true of the padding is zero. boolean; isSymmetric(). Returns true of the padding is identical on all sides (x1 == x2 == y1 == y2). Padding; max(Padding padding). Compare two paddings, and take the larger padding value on all sides. Padding; subtract(Padding padding). Add another padding from this one. static Padding; symmetric(int pad). Get a padding object with 'pad' pixels on all sides. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getX1; public int getX1(); Get the first horizontal padding (left of the image), in pixels. Returns:. getX2; public int getX2(); Get the second horizontal padding (right of the image), in pixels. Returns:. getXSum; public int getXSum(); Get the total horizontal padding (sum of x1 and x2). Returns:. getY1; public int getY1(); Get the first vertical padding (top of the image), in pixels. Returns:. getY2; public int getY2(); Get the second vertical padding (bottom of the image), in pixels. Returns:. getYSum; public int getYSum(); Get the total vertical padding (sum of x1 and x2). Returns:. toString; public String toString(). Overrides:; toString in class Object. isSymmetric; public boolean isSymmetric(); Returns true of the padding is identical on all sides (x1 == x2 == y1 == y2). Returns:. isEmpty; public boolean isEmpty(); Returns true of the padding is zero. R",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/Padding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/Padding.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/Padding.html:1991,Security,hash,hashCode,1991,"padding on each side. int; getX1(). Get the first horizontal padding (left of the image), in pixels. int; getX2(). Get the second horizontal padding (right of the image), in pixels. int; getXSum(). Get the total horizontal padding (sum of x1 and x2). int; getY1(). Get the first vertical padding (top of the image), in pixels. int; getY2(). Get the second vertical padding (bottom of the image), in pixels. int; getYSum(). Get the total vertical padding (sum of x1 and x2). boolean; isEmpty(). Returns true of the padding is zero. boolean; isSymmetric(). Returns true of the padding is identical on all sides (x1 == x2 == y1 == y2). Padding; max(Padding padding). Compare two paddings, and take the larger padding value on all sides. Padding; subtract(Padding padding). Add another padding from this one. static Padding; symmetric(int pad). Get a padding object with 'pad' pixels on all sides. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getX1; public int getX1(); Get the first horizontal padding (left of the image), in pixels. Returns:. getX2; public int getX2(); Get the second horizontal padding (right of the image), in pixels. Returns:. getXSum; public int getXSum(); Get the total horizontal padding (sum of x1 and x2). Returns:. getY1; public int getY1(); Get the first vertical padding (top of the image), in pixels. Returns:. getY2; public int getY2(); Get the second vertical padding (bottom of the image), in pixels. Returns:. getYSum; public int getYSum(); Get the total vertical padding (sum of x1 and x2). Returns:. toString; public String toString(). Overrides:; toString in class Object. isSymmetric; public boolean isSymmetric(); Returns true of the padding is identical on all sides (x1 == x2 == y1 == y2). Returns:. isEmpty; public boolean isEmpty(); Returns true of the padding is zero. Returns:. add; public Padding add(Padding padding); Add this padding",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/Padding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/Padding.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:781,Availability,down,downsample,781,". RegionRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class RegionRequest. java.lang.Object; qupath.lib.regions.ImageRegion; qupath.lib.regions.RegionRequest. public class RegionRequest; extends ImageRegion; Class for defining an image region that can also be used to request these region from an ImageServer.; ; In addition to the information contained within an ImageRegion, also contains the path to the image; (and optionally an additional image name stored within it) and a downsample value. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:1015,Availability,down,downsample,1015,". RegionRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class RegionRequest. java.lang.Object; qupath.lib.regions.ImageRegion; qupath.lib.regions.RegionRequest. public class RegionRequest; extends ImageRegion; Class for defining an image region that can also be used to request these region from an ImageServer.; ; In addition to the information contained within an ImageRegion, also contains the path to the image; (and optionally an additional image name stored within it) and a downsample value. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:1194,Availability,down,downsample,1194,"ethod. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class RegionRequest. java.lang.Object; qupath.lib.regions.ImageRegion; qupath.lib.regions.RegionRequest. public class RegionRequest; extends ImageRegion; Class for defining an image region that can also be used to request these region from an ImageServer.; ; In addition to the information contained within an ImageRegion, also contains the path to the image; (and optionally an additional image name stored within it) and a downsample value. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:1416,Availability,down,downsample,1416,"gion; qupath.lib.regions.RegionRequest. public class RegionRequest; extends ImageRegion; Class for defining an image region that can also be used to request these region from an ImageServer.; ; In addition to the information contained within an ImageRegion, also contains the path to the image; (and optionally an additional image name stored within it) and a downsample value. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static Regio",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:1638,Availability,down,downsample,1638,"n contained within an ImageRegion, also contains the path to the image; (and optionally an additional image name stored within it) and a downsample value. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:1854,Availability,down,downsample,1854,"odsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time po",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2023,Availability,down,downsample,2023,"uble downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. Str",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2174,Availability,down,downsample,2174,"t; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int widt",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2615,Availability,down,downsample,2615,"ce and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. R",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2723,Availability,down,downsample,2723,"agePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2928,Availability,down,downsample,2928,"d ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3866,Availability,down,downsample,3866," boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3942,Availability,down,downsample,3942,"requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, ti",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4958,Availability,down,downsample,4958,"le downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; publ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5122,Availability,down,downsample,5122," one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; T",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5276,Availability,down,downsample,5276,"Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest crea",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5403,Availability,down,downsample,5403,"gePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; p",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5548,Availability,down,downsample,5548,"class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion r",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5653,Availability,down,downsample,5653,"ring; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a req",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5810,Availability,down,downsample,5810,"reate a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5923,Availability,down,downsample,5923,"rst resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:6106,Availability,down,downsample,6106," the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public sta",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:6522,Availability,down,downsample,6522,"ameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:6723,Availability,down,downsample,6723,"; Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the fir",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:6757,Availability,down,downsample,6757,"ng the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; hei",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:6873,Availability,down,downsample,6873,"; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7059,Availability,down,downsample,7059,". Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getP",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7209,Availability,down,downsample,7209,"lic static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double get",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7389,Availability,down,downsample,7389,"path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7537,Availability,down,downsample,7537,"sponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum per",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7723,Availability,down,downsample,7723,"eters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:8279,Availability,down,downsample,8279,"ate a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; Reg",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9659,Availability,down,downsample,9659,"required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; th",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9735,Availability,down,downsample,9735,"required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; th",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9766,Availability,down,downsample,9766,"-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9789,Availability,down,downsample,9789,"-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9853,Availability,down,downsample,9853,"-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3803,Deployability,update,updated,3803,"height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest cre",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3842,Deployability,update,updateDownsample,3842," boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3934,Deployability,update,updated,3934,"requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, ti",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3975,Deployability,update,updatePath,3975," pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4055,Deployability,update,updated,4055," requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. cr",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4084,Deployability,update,updateT,4084,". int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createIn",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4155,Deployability,update,updated,4155," x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4187,Deployability,update,updateZ,4187,"the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4258,Deployability,update,updated,4258,"ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice,",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9116,Deployability,update,updateZ,9116,"urns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; pub",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9146,Deployability,update,updateZ,9146,"urns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; pub",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9217,Deployability,update,updated,9217,"urns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; pub",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9356,Deployability,update,updateT,9356,"ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9386,Deployability,update,updateT,9386,"ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9457,Deployability,update,updated,9457,"ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9596,Deployability,update,updateDownsample,9596,"required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; th",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9635,Deployability,update,updateDownsample,9635,"required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; th",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9727,Deployability,update,updated,9727,"required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; th",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9902,Deployability,update,updatePath,9902,"s bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symme",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9935,Deployability,update,updatePath,9935,"s bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symme",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:10015,Deployability,update,updated,10015,"s bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symme",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:10295,Deployability,update,updated,10295,"meters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symmetric padding to the x and y dimensions of a request. Parameters:; padding - padding to add; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). hashCode; public int hashCode(). Overrides:; hashCode in class ImageRegion. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:489,Modifiability,extend,extends,489,". RegionRequest (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.regions; Class RegionRequest. java.lang.Object; qupath.lib.regions.ImageRegion; qupath.lib.regions.RegionRequest. public class RegionRequest; extends ImageRegion; Class for defining an image region that can also be used to request these region from an ImageServer.; ; In addition to the information contained within an ImageRegion, also contains the path to the image; (and optionally an additional image name stored within it) and a downsample value. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:1880,Modifiability,extend,extends,1880,"odsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static List<RegionRequest>; createAllRequests(ImageServer<?> server,; double downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time po",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4283,Modifiability,inherit,inherited,4283,"ion, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Re",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4532,Modifiability,inherit,inherited,4532,"nsions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; serv",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5949,Modifiability,extend,extends,5949,"rst resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3090,Security,hash,hashCode,3090,"nRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equiv",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:11163,Security,hash,hashCode,11163," (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symmetric padding to the x and y dimensions of a request. Parameters:; padding - padding to add; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). hashCode; public int hashCode(). Overrides:; hashCode in class ImageRegion. equals; public boolean equals(Object obj). Overrides:; equals in class ImageRegion. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:11184,Security,hash,hashCode,11184," (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symmetric padding to the x and y dimensions of a request. Parameters:; padding - padding to add; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). hashCode; public int hashCode(). Overrides:; hashCode in class ImageRegion. equals; public boolean equals(Object obj). Overrides:; equals in class ImageRegion. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:11208,Security,hash,hashCode,11208," (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symmetric padding to the x and y dimensions of a request. Parameters:; padding - padding to add; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). hashCode; public int hashCode(). Overrides:; hashCode in class ImageRegion. equals; public boolean equals(Object obj). Overrides:; equals in class ImageRegion. ",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7950,Testability,test,test,7950,"f its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - heig",MatchSource.WIKI,javadoc/docs/qupath/lib/regions/RegionRequest.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:2314,Availability,avail,available,2314,"ate different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Get the x coordinate of the ROI centroid;. double; getCentroidY(). Get the y coordinate of the ROI centroid;. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Default implementation, calls ROI.getAllPoints() and then caches the result. String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11573,Availability,avail,available,11573,"adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4127,Deployability,update,updatePlane,4127,"ated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9721,Deployability,update,updatePlane,9721,"scription copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9745,Deployability,update,updatePlane,9745,"scription copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9932,Deployability,update,updatePlane,9932,"ion copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; g",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12795,Energy Efficiency,efficient,efficient,12795,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:877,Integrability,depend,dependency,877,". AreaROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class AreaROI. java.lang.Object; qupath.lib.roi.AreaROI. All Implemented Interfaces:; Serializable, ROI. public class AreaROI; extends Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:1203,Integrability,depend,dependency,1203,"d. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class AreaROI. java.lang.Object; qupath.lib.roi.AreaROI. All Implemented Interfaces:; Serializable, ROI. public class AreaROI; extends Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top le",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:1466,Integrability,interface,interfaces,1466,"s Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Get the x coordinate of the ROI centroid;. double; getCentroidY(). Get the y coordinate of the ROI centroid;. ROI; getConv",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:1492,Integrability,interface,interface,1492,"s Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Get the x coordinate of the ROI centroid;. double; getCentroidY(). Get the y coordinate of the ROI centroid;. ROI; getConv",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:1517,Integrability,interface,interfaces,1517,"tation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Get the x coordinate of the ROI centroid;. double; getCentroidY(). Get the y coordinate of the ROI centroid;. ROI; getConvexHull(). Default implementation using JTS.",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4379,Integrability,interface,interface,4379,"lidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4404,Integrability,interface,interfaces,4404,"defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description c",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4830,Integrability,interface,interface,4830,") points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4935,Integrability,interface,interface,4935,"scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:5068,Integrability,interface,interface,5068,"late(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:5284,Integrability,interface,interface,5284,", finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to chang",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:5421,Integrability,interface,interface,5421," Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Descri",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:5564,Integrability,interface,interface,5564,"o the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:5952,Integrability,interface,interface,5952,"; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:6340,Integrability,interface,interface,6340,"gth(double, double). getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(d",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:6445,Integrability,interface,interface,6445,"et a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Get the x coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:6659,Integrability,interface,interface,6659,"roid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - ve",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:6794,Integrability,interface,interface,6794,"ding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtr",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:6996,Integrability,interface,interface,6996,"blic double getCentroidY(); Get the y coordinate of the ROI centroid;; ; Warning: If the centroid computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:7101,Integrability,interface,interface,7101,"id computation was too difficult (i.e. the area is particularly elaborate),; then the center of the bounding box will be used instead! (However this should not be relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:7217,Integrability,interface,interface,7217,"e relied upon as it is liable to change in later versions). Specified by:; getCentroidY in interface ROI; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaled",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:7425,Integrability,interface,interface,7425,"tains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:7598,Integrability,interface,interface,7598,"ublic ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8032,Integrability,interface,interface,8032,"s:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Descripti",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8145,Integrability,interface,interface,8145,"al ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; p",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8352,Integrability,interface,interface,8352,"e(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8462,Integrability,interface,interface,8462,"nates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calcul",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8623,Integrability,interface,interface,8623,"X - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8735,Integrability,interface,interface,8735,"inate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8824,Integrability,interface,interface,8824,"rior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:8936,Integrability,interface,interface,8936,"Area; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; u",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9033,Integrability,interface,interface,9033,"d from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; Un",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9125,Integrability,interface,interface,9125,"ed by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. g",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9224,Integrability,interface,interface,9224,"e Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9318,Integrability,interface,interface,9318,"e pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. ge",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9696,Integrability,interface,interface,9696,"bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from in",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9800,Integrability,interface,interface,9800,"scription copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9947,Integrability,interface,interface,9947,"ion copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; g",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10187,Integrability,interface,interface,10187,"public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10286,Integrability,interface,interface,10286,". Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); D",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10370,Integrability,interface,interface,10370,"; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10596,Integrability,interface,interface,10596,"essarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10690,Integrability,interface,interface,10690,"; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; p",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10805,Integrability,interface,interface,10805,"terface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:10904,Integrability,interface,interface,10904,"d. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; p",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11033,Integrability,interface,interface,11033,"pportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11107,Integrability,interface,interface,11107,"onger supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface RO",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11232,Integrability,interface,interface,11232,"s.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line se",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11306,Integrability,interface,interface,11306,"; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interf",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11432,Integrability,interface,interface,11432,", if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an are",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11506,Integrability,interface,interface,11506,"adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11675,Integrability,interface,interface,11675,"on copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11801,Integrability,interface,interface,11801,"pe in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more effic",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12090,Integrability,interface,interface,12090,"cription copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12172,Integrability,interface,interface,12172,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12294,Integrability,interface,interface,12294,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12376,Integrability,interface,interface,12376,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12460,Integrability,interface,interface,12460,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12544,Integrability,interface,interface,12544,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12653,Integrability,interface,interface,12653,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12853,Integrability,interface,interface,12853,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12944,Integrability,interface,interface,12944,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:13113,Integrability,interface,interface,13113,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:473,Modifiability,extend,extends,473,". AreaROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class AreaROI. java.lang.Object; qupath.lib.roi.AreaROI. All Implemented Interfaces:; Serializable, ROI. public class AreaROI; extends Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:1477,Modifiability,inherit,inherited,1477,"s Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Get the x coordinate of the ROI centroid;. double; getCentroidY(). Get the y coordinate of the ROI centroid;. ROI; getConv",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4235,Modifiability,inherit,inherited,4235,", for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4364,Modifiability,inherit,inherited,4364,"lidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getRoiName; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:2828,Performance,cache,caches,2828,"this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Get the x coordinate of the ROI centroid;. double; getCentroidY(). Get the y coordinate of the ROI centroid;. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Default implementation, calls ROI.getAllPoints() and then caches the result. String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) po",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:11999,Performance,cache,caches,11999,"ect. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as R",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:869,Safety,avoid,avoid,869,". AreaROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class AreaROI. java.lang.Object; qupath.lib.roi.AreaROI. All Implemented Interfaces:; Serializable, ROI. public class AreaROI; extends Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:1195,Safety,avoid,avoid,1195,"d. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class AreaROI. java.lang.Object; qupath.lib.roi.AreaROI. All Implemented Interfaces:; Serializable, ROI. public class AreaROI; extends Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top le",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4309,Security,hash,hashCode,4309," java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; Se",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:950,Usability,simpl,simple,950,". AreaROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class AreaROI. java.lang.Object; qupath.lib.roi.AreaROI. All Implemented Interfaces:; Serializable, ROI. public class AreaROI; extends Object; implements Serializable; Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions.; ; It may be decomposed into one or more polygons (vertices), in which case the sign of the area is important ; in indicating whether the region should be considered 'positive' or a hole.; ; The underlying idea is based on java.awt.Area, but implemented so as to avoid a dependency on AWT.; ; However, because this implementation is relatively simple, it doesn't do the complicated checking and ; computations of AWT Areas - and so ought not be used directly. Rather, AWTAreaROI is strongly to be preferred.; ; The real usefulness of this class is in enabling Serialization of all ROIs to avoid a dependency on AWT,; since potentially a deserialized version of this could then be used to create different kinds of Area ; (e.g. java.awt.Area or some JavaFX alternative.). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Beware this method! This will return all polygon points (useful e.g. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/AreaROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html:802,Energy Efficiency,efficient,efficient,802,". ConvexHull (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class ConvexHull. java.lang.Object; qupath.lib.roi.ConvexHull. public class ConvexHull; extends Object; Helper method for calculating the convex hull from a list of points. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ConvexHull();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<Point2>; getConvexHull(List<Point2> points). TODO: Consider a more efficient convex hull calculation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvexHull; public ConvexHull(). Method Details. getConvexHull; public static List<Point2> getConvexHull(List<Point2> points); TODO: Consider a more efficient convex hull calculation.; ; For implementation details, see; ; http://en.wikipedia.org/wiki/Gift_wrapping_algorithm; http://en.wikipedia.org/wiki/Graham_scan. Parameters:; points - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/ConvexHull.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html:1146,Energy Efficiency,efficient,efficient,1146,". ConvexHull (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class ConvexHull. java.lang.Object; qupath.lib.roi.ConvexHull. public class ConvexHull; extends Object; Helper method for calculating the convex hull from a list of points. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ConvexHull();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<Point2>; getConvexHull(List<Point2> points). TODO: Consider a more efficient convex hull calculation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvexHull; public ConvexHull(). Method Details. getConvexHull; public static List<Point2> getConvexHull(List<Point2> points); TODO: Consider a more efficient convex hull calculation.; ; For implementation details, see; ; http://en.wikipedia.org/wiki/Gift_wrapping_algorithm; http://en.wikipedia.org/wiki/Graham_scan. Parameters:; points - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/ConvexHull.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html:437,Modifiability,extend,extends,437,". ConvexHull (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class ConvexHull. java.lang.Object; qupath.lib.roi.ConvexHull. public class ConvexHull; extends Object; Helper method for calculating the convex hull from a list of points. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ConvexHull();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<Point2>; getConvexHull(List<Point2> points). TODO: Consider a more efficient convex hull calculation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvexHull; public ConvexHull(). Method Details. getConvexHull; public static List<Point2> getConvexHull(List<Point2> points); TODO: Consider a more efficient convex hull calculation.; ; For implementation details, see; ; http://en.wikipedia.org/wiki/Gift_wrapping_algorithm; http://en.wikipedia.org/wiki/Graham_scan. Parameters:; points - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/ConvexHull.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html:845,Modifiability,inherit,inherited,845,". ConvexHull (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class ConvexHull. java.lang.Object; qupath.lib.roi.ConvexHull. public class ConvexHull; extends Object; Helper method for calculating the convex hull from a list of points. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ConvexHull();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<Point2>; getConvexHull(List<Point2> points). TODO: Consider a more efficient convex hull calculation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvexHull; public ConvexHull(). Method Details. getConvexHull; public static List<Point2> getConvexHull(List<Point2> points); TODO: Consider a more efficient convex hull calculation.; ; For implementation details, see; ; http://en.wikipedia.org/wiki/Gift_wrapping_algorithm; http://en.wikipedia.org/wiki/Graham_scan. Parameters:; points - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/ConvexHull.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html:919,Security,hash,hashCode,919,". ConvexHull (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class ConvexHull. java.lang.Object; qupath.lib.roi.ConvexHull. public class ConvexHull; extends Object; Helper method for calculating the convex hull from a list of points. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ConvexHull();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<Point2>; getConvexHull(List<Point2> points). TODO: Consider a more efficient convex hull calculation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvexHull; public ConvexHull(). Method Details. getConvexHull; public static List<Point2> getConvexHull(List<Point2> points); TODO: Consider a more efficient convex hull calculation.; ; For implementation details, see; ; http://en.wikipedia.org/wiki/Gift_wrapping_algorithm; http://en.wikipedia.org/wiki/Graham_scan. Parameters:; points - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/ConvexHull.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1317,Integrability,interface,interface,1317,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1632,Integrability,interface,interface,1632,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:523,Modifiability,extend,extends,523,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1163,Modifiability,inherit,inherited,1163,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1302,Modifiability,inherit,inherited,1302,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:624,Safety,predict,predictable,624,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1124,Safety,avoid,avoid,1124,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1762,Safety,avoid,avoid,1762,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html:1237,Security,hash,hashCode,1237,". DefaultROIComparator (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class DefaultROIComparator. java.lang.Object; qupath.lib.roi.DefaultROIComparator. All Implemented Interfaces:; Comparator<ROI>. public class DefaultROIComparator; extends Object; implements Comparator<ROI>; Default comparator to enable ROIs to be sorted in a more predictable manner.; ; The aim is to help sorted lists to sort first on ROI location (time, z, channel, y coordinate, then x); and afterwards on ROI type. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DefaultROIComparator();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compare(ROI o1,; ROI o2);  ; static Comparator<ROI>; getInstance(). Get a static instance of this comparator, to avoid needing to construct it. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface java.util.Comparator; equals, reversed, thenComparing, thenComparing, thenComparing, thenComparingDouble, thenComparingInt, thenComparingLong. Constructor Details. DefaultROIComparator; public DefaultROIComparator(). Method Details. compare; public int compare(ROI o1,; ROI o2). Specified by:; compare in interface Comparator<ROI>. getInstance; public static Comparator<ROI> getInstance(); Get a static instance of this comparator, to avoid needing to construct it. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/DefaultROIComparator.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/DefaultROIComparator.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:1767,Availability,avail,available,1767,"d Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 4 (since the ellipse is defined by its bounding box). String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10275,Availability,avail,available,10275,"nding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Retur",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:3787,Deployability,update,updatePlane,3787,"ossible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isCircle(). Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCir",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6316,Deployability,update,updatePlane,6316,"n interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6340,Deployability,update,updatePlane,6340,"n interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6527,Deployability,update,updatePlane,6527," double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled v",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:7330,Energy Efficiency,efficient,efficient,7330,"Plane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoi",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:666,Integrability,interface,interfaces,666,". EllipseROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class EllipseROI. java.lang.Object; qupath.lib.roi.EllipseROI. All Implemented Interfaces:; Serializable, ROI. public class EllipseROI; extends Object; implements Serializable; ROI implementing a circle, or (unrotated) ellipse. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:692,Integrability,interface,interface,692,". EllipseROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class EllipseROI. java.lang.Object; qupath.lib.roi.EllipseROI. All Implemented Interfaces:; Serializable, ROI. public class EllipseROI; extends Object; implements Serializable; ROI implementing a circle, or (unrotated) ellipse. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:717,Integrability,interface,interfaces,717,". EllipseROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class EllipseROI. java.lang.Object; qupath.lib.roi.EllipseROI. All Implemented Interfaces:; Serializable, ROI. public class EllipseROI; extends Object; implements Serializable; ROI implementing a circle, or (unrotated) ellipse. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4039,Integrability,interface,interface,4039,"an; isCircle(). Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4064,Integrability,interface,interfaces,4064," and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding bo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4296,Integrability,interface,interface,4296,"ly using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from int",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4510,Integrability,interface,interface,4510,"I represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public doub",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4626,Integrability,interface,interface,4626," originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the sc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4769,Integrability,interface,interface,4769,"on of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHe",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:5286,Integrability,interface,interface,5286," Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:5399,Integrability,interface,interface,5399,"returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a ne",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:5606,Integrability,interface,interface,5606," getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new p",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:5716,Integrability,interface,interface,5716,". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; thi",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:5979,Integrability,interface,interface,5979,"uble pixelWidth,; double pixelHeight); Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: RO",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6089,Integrability,interface,interface,6089,"ing 'non-square' pixels. Parameters:; pixelWidth - ; pixelHeight - ; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationExceptio",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6291,Integrability,interface,interface,6291,"terface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS.",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6395,Integrability,interface,interface,6395,"n interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6542,Integrability,interface,interface,6542," double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled v",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6878,Integrability,interface,interface,6878," ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6962,Integrability,interface,interface,6962," Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scalin",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:7188,Integrability,interface,interface,7188,"re moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:7388,Integrability,interface,interface,7388,"copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:7527,Integrability,interface,interface,7527,"OI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:7700,Integrability,interface,interface,7700,"ay change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpt",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8106,Integrability,interface,interface,8106,"ception as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getB",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8222,Integrability,interface,interface,8222,"; Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoun",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8385,Integrability,interface,interface,8385,"eturns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8500,Integrability,interface,interface,8500,"inY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8593,Integrability,interface,interface,8593,"es are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Descript",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8734,Integrability,interface,interface,8734,"aleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8908,Integrability,interface,interface,8908,"acted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-sta",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:8997,Integrability,interface,interface,8997,"ale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied fro",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9154,Integrability,interface,interface,9154," The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9319,Integrability,interface,interface,9319,"ns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not c",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9462,Integrability,interface,interface,9462,"lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toSt",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9606,Integrability,interface,interface,9606," the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not encl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9735,Integrability,interface,interface,9735,"rom interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9809,Integrability,interface,interface,9809,":. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specifie",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:9934,Integrability,interface,interface,9934,"etBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10008,Integrability,interface,interface,10008,"rface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10134,Integrability,interface,interface,10134,"ription copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a o",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10208,Integrability,interface,interface,10208,"nding box. Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Retur",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10377,Integrability,interface,interface,10377," Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10533,Integrability,interface,interface,10533,"c ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI l",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10655,Integrability,interface,interface,10655,"ns the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10737,Integrability,interface,interface,10737,"terface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLeng",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10821,Integrability,interface,interface,10821,"ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getS",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:10905,Integrability,interface,interface,10905,"fied by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the soli",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11014,Integrability,interface,interface,11014,"rface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11107,Integrability,interface,interface,11107,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11206,Integrability,interface,interface,11206,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11289,Integrability,interface,interface,11289,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11394,Integrability,interface,interface,11394,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11527,Integrability,interface,interface,11527,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11743,Integrability,interface,interface,11743,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:11882,Integrability,interface,interface,11882,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:12051,Integrability,interface,interface,12051,"t relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:485,Modifiability,extend,extends,485,". EllipseROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class EllipseROI. java.lang.Object; qupath.lib.roi.EllipseROI. All Implemented Interfaces:; Serializable, ROI. public class EllipseROI; extends Object; implements Serializable; ROI implementing a circle, or (unrotated) ellipse. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:677,Modifiability,inherit,inherited,677,". EllipseROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class EllipseROI. java.lang.Object; qupath.lib.roi.EllipseROI. All Implemented Interfaces:; Serializable, ROI. public class EllipseROI; extends Object; implements Serializable; ROI implementing a circle, or (unrotated) ellipse. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:3895,Modifiability,inherit,inherited,3895,"T(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isCircle(). Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:4024,Modifiability,inherit,inherited,4024,"an; isCircle(). Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircle(double pixelWidth,; double pixelHeight); Query if the width and",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:3969,Security,hash,hashCode,3969,"olean; isArea(). Returns true if this ROI encloses an area. boolean; isCircle(). Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCircle; public boolean isCircle(); Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. Returns:. isCircle; public boolean isCircl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:1230,Usability,simpl,simple,1230,"Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class EllipseROI. java.lang.Object; qupath.lib.roi.EllipseROI. All Implemented Interfaces:; Serializable, ROI. public class EllipseROI; extends Object; implements Serializable; ROI implementing a circle, or (unrotated) ellipse. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double xx,; double yy). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal). double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 4 (since the ellipse",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6710,Usability,simpl,simple,6710,"n interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/EllipseROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:1841,Availability,avail,available,1841,"tly compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Default implementation, calls ROI.getAllPoints() and then caches the result. String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; g",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10211,Availability,avail,available,10211,"e, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3588,Deployability,update,updatePlane,3588,"dth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9174,Deployability,update,updatePlane,9174,"y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currentl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9198,Deployability,update,updatePlane,9198,"y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currentl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9385,Deployability,update,updatePlane,9385,"al ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Speci",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11433,Energy Efficiency,efficient,efficient,11433,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:1002,Integrability,interface,interfaces,1002,"QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConve",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:1028,Integrability,interface,interface,1028,"QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConve",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:1053,Integrability,interface,interfaces,1053,"ur browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3840,Integrability,interface,interface,3840,"Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3865,Integrability,interface,interfaces,3865,"ing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3968,Integrability,interface,interface,3968,"hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description co",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4111,Integrability,interface,interface,4111,"s an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoun",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4204,Integrability,interface,interface,4204,"turns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4298,Integrability,interface,interface,4298,"t(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4391,Integrability,interface,interface,4391,"leX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4485,Integrability,interface,interface,4485,"tring; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined fo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4574,Integrability,interface,interface,4574," ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4686,Integrability,interface,interface,4686,"ane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4775,Integrability,interface,interface,4775,"ify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4887,Integrability,interface,interface,4887,"le. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:4984,Integrability,interface,interface,4984,"e: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interf",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5076,Integrability,interface,interface,5076,"""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interfa",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5175,Integrability,interface,interface,5175,"CentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in inte",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5269,Integrability,interface,interface,5269,"id. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; R",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5368,Integrability,interface,interface,5368,"Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedO",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5685,Integrability,interface,interface,5685,"X in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5769,Integrability,interface,interface,5769," copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied fr",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:5971,Integrability,interface,interface,5971,"ion copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double get",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6064,Integrability,interface,interface,6064,"pecified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is d",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6163,Integrability,interface,interface,6163,"ion copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6247,Integrability,interface,interface,6247,"x. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6473,Integrability,interface,interface,6473,"defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pix",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6567,Integrability,interface,interface,6567,"at contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See A",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6682,Integrability,interface,interface,6682,"ts in interface ROI; Returns:. duplicate; public ROI duplicate(); Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; doub",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6765,Integrability,interface,interface,6765," copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled lengt",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:6870,Integrability,interface,interface,6870,"g towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; p",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:7003,Integrability,interface,interface,7003,"eturns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:7219,Integrability,interface,interface,7219," Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:7400,Integrability,interface,interface,7400," as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:7513,Integrability,interface,interface,7513,"ype(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertica",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:7720,Integrability,interface,interface,7720,"rns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a s",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:7830,Integrability,interface,interface,7830,"d by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in inte",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:8007,Integrability,interface,interface,8007,"om interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scal",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:8221,Integrability,interface,interface,8221,"I; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Des",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:8351,Integrability,interface,interface,8351,"ble pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:8467,Integrability,interface,interface,8467,"ScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlan",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:8675,Integrability,interface,interface,8675,"caledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Speci",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:8848,Integrability,interface,interface,8848,"escription copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9253,Integrability,interface,interface,9253,"y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currentl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9400,Integrability,interface,interface,9400,"al ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Speci",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9542,Integrability,interface,interface,9542,"eturns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; p",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9671,Integrability,interface,interface,9671,"ied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9745,Integrability,interface,interface,9745,"are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface RO",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9870,Integrability,interface,interface,9870,"ers:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line se",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9944,Integrability,interface,interface,9944,"e; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interf",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10070,Integrability,interface,interface,10070,"y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an are",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10144,Integrability,interface,interface,10144,"e, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10313,Integrability,interface,interface,10313," a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10439,Integrability,interface,interface,10439,"he new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more effic",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10728,Integrability,interface,interface,10728,"cription copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10810,Integrability,interface,interface,10810,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10932,Integrability,interface,interface,10932,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11014,Integrability,interface,interface,11014,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11098,Integrability,interface,interface,11098,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11182,Integrability,interface,interface,11182,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11291,Integrability,interface,interface,11291,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11491,Integrability,interface,interface,11491,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11582,Integrability,interface,interface,11582,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:11751,Integrability,interface,interface,11751,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:489,Modifiability,extend,extends,489,". GeometryROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:600,Modifiability,flexible,flexible,600,". GeometryROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:1013,Modifiability,inherit,inherited,1013,"QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConve",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3696,Modifiability,inherit,inherited,3696,"caledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3825,Modifiability,inherit,inherited,3825,"Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:759,Performance,perform,performant,759,". GeometryROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:2363,Performance,cache,caches,2363," list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Default implementation, calls ROI.getAllPoints() and then caches the result. String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) po",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:10637,Performance,cache,caches,10637,"ect. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as R",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:902,Security,validat,validated,902,". GeometryROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryROI. java.lang.Object; qupath.lib.roi.GeometryROI. All Implemented Interfaces:; Serializable, ROI. public class GeometryROI; extends Object; implements Serializable; ROI based on Java Topology Suite Geometry objects.; This gives a very flexible representation (except for a lack of support for ellipses), ; which needs only copy itself to return getGeometry().; Consequently it can be much more performant whenever the underlying Geometry is ; required frequently compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3770,Security,hash,hashCode,3770," length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied fr",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html:611,Modifiability,extend,extends,611,". GeometryTools.GeometryConverter.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryTools.GeometryConverter.Builder. java.lang.Object; qupath.lib.roi.GeometryTools.GeometryConverter.Builder. Enclosing class:; GeometryTools.GeometryConverter. public static class GeometryTools.GeometryConverter.Builder; extends Object; Builder to help define how ROIs and Geometry objects should be converted. Constructor Summary; Constructors. Constructor; Description; Builder(). Default constructor for a builder with flatness 0.5 and pixel width/height of 1.0. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; GeometryTools.GeometryConverter; build(). Build a new converter with the specified parameters. GeometryTools.GeometryConverter.Builder; factory(GeometryFactory factory). Specify the GeometryFactory, which can define a precision model in JTS. GeometryTools.GeometryConverter.Builder; flatness(double flatness). Specify the flatness for any operation where a PathIterator is required. GeometryTools.GeometryConverter.Builder; pixelSize(double pixelWidth,; double pixelHeight). Specify the pixel width and height, used to scale x and y coordinates during conversion (default is 1.0 for both). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(); Default constructor for a builder with flatness 0.5 and pixel width/height of 1.0. Method Details. pixelSize; public GeometryTools.GeometryConverter.Builder pixelSize(double pixelWidth,; double pixelHeight); Specify the pixel width and height, used to scale x and y c",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html:1555,Modifiability,inherit,inherited,1555," class GeometryTools.GeometryConverter.Builder; extends Object; Builder to help define how ROIs and Geometry objects should be converted. Constructor Summary; Constructors. Constructor; Description; Builder(). Default constructor for a builder with flatness 0.5 and pixel width/height of 1.0. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; GeometryTools.GeometryConverter; build(). Build a new converter with the specified parameters. GeometryTools.GeometryConverter.Builder; factory(GeometryFactory factory). Specify the GeometryFactory, which can define a precision model in JTS. GeometryTools.GeometryConverter.Builder; flatness(double flatness). Specify the flatness for any operation where a PathIterator is required. GeometryTools.GeometryConverter.Builder; pixelSize(double pixelWidth,; double pixelHeight). Specify the pixel width and height, used to scale x and y coordinates during conversion (default is 1.0 for both). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(); Default constructor for a builder with flatness 0.5 and pixel width/height of 1.0. Method Details. pixelSize; public GeometryTools.GeometryConverter.Builder pixelSize(double pixelWidth,; double pixelHeight); Specify the pixel width and height, used to scale x and y coordinates during conversion (default is 1.0 for both). Parameters:; pixelWidth - ; pixelHeight - ; Returns:. flatness; public GeometryTools.GeometryConverter.Builder flatness(double flatness); Specify the flatness for any operation where a PathIterator is required. Parameters:; flatness - ; Returns:. factory; public GeometryTools.GeometryConverter.Builder factory(GeometryFactory factory); Specify the GeometryFactory, which can define a precision model in JTS. Parameters:; factory - ; Returns:. build; public GeometryTools.GeometryConverter build(); Build a ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html:1629,Security,hash,hashCode,1629,"Object; Builder to help define how ROIs and Geometry objects should be converted. Constructor Summary; Constructors. Constructor; Description; Builder(). Default constructor for a builder with flatness 0.5 and pixel width/height of 1.0. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; GeometryTools.GeometryConverter; build(). Build a new converter with the specified parameters. GeometryTools.GeometryConverter.Builder; factory(GeometryFactory factory). Specify the GeometryFactory, which can define a precision model in JTS. GeometryTools.GeometryConverter.Builder; flatness(double flatness). Specify the flatness for any operation where a PathIterator is required. GeometryTools.GeometryConverter.Builder; pixelSize(double pixelWidth,; double pixelHeight). Specify the pixel width and height, used to scale x and y coordinates during conversion (default is 1.0 for both). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(); Default constructor for a builder with flatness 0.5 and pixel width/height of 1.0. Method Details. pixelSize; public GeometryTools.GeometryConverter.Builder pixelSize(double pixelWidth,; double pixelHeight); Specify the pixel width and height, used to scale x and y coordinates during conversion (default is 1.0 for both). Parameters:; pixelWidth - ; pixelHeight - ; Returns:. flatness; public GeometryTools.GeometryConverter.Builder flatness(double flatness); Specify the flatness for any operation where a PathIterator is required. Parameters:; flatness - ; Returns:. factory; public GeometryTools.GeometryConverter.Builder factory(GeometryFactory factory); Specify the GeometryFactory, which can define a precision model in JTS. Parameters:; factory - ; Returns:. build; public GeometryTools.GeometryConverter build(); Build a new converter with the specified parameters. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html:561,Modifiability,extend,extends,561,". GeometryTools.GeometryConverter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryTools.GeometryConverter. java.lang.Object; qupath.lib.roi.GeometryTools.GeometryConverter. Enclosing class:; GeometryTools. public static class GeometryTools.GeometryConverter; extends Object; Converter to help switch from a ROI to a Geometry. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; GeometryTools.GeometryConverter.Builder. Builder to help define how ROIs and Geometry objects should be converted. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Geometry; roiToGeometry(ROI roi). Convert a QuPath ROI to a JTS Geometry. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. roiToGeometry; public Geometry roiToGeometry(ROI roi); Convert a QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html:1018,Modifiability,inherit,inherited,1018,". GeometryTools.GeometryConverter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryTools.GeometryConverter. java.lang.Object; qupath.lib.roi.GeometryTools.GeometryConverter. Enclosing class:; GeometryTools. public static class GeometryTools.GeometryConverter; extends Object; Converter to help switch from a ROI to a Geometry. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; GeometryTools.GeometryConverter.Builder. Builder to help define how ROIs and Geometry objects should be converted. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Geometry; roiToGeometry(ROI roi). Convert a QuPath ROI to a JTS Geometry. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. roiToGeometry; public Geometry roiToGeometry(ROI roi); Convert a QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html:1092,Security,hash,hashCode,1092,". GeometryTools.GeometryConverter (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryTools.GeometryConverter. java.lang.Object; qupath.lib.roi.GeometryTools.GeometryConverter. Enclosing class:; GeometryTools. public static class GeometryTools.GeometryConverter; extends Object; Converter to help switch from a ROI to a Geometry. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; GeometryTools.GeometryConverter.Builder. Builder to help define how ROIs and Geometry objects should be converted. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Geometry; roiToGeometry(ROI roi). Convert a QuPath ROI to a JTS Geometry. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. roiToGeometry; public Geometry roiToGeometry(ROI roi); Convert a QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.GeometryConverter.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:5864,Availability,recover,recover,5864,"- ; Returns:. convertTransform; public static AffineTransformation convertTransform(AffineTransform transform); Convert an AffineTransform to an AffineTransformation. Parameters:; transform - ; Returns:. shapeToGeometry; public static Geometry shapeToGeometry(Shape shape); Convert a java.awt.Shape to a JTS Geometry. Parameters:; shape - ; Returns:. envelopToRegion; public static ImageRegion envelopToRegion(Envelope env,; int z,; int t); Convert an Envelope to an ImageRegion. Parameters:; env - envelop; z - z index for the region (default is 0); t - timepoint for the region (default is 0); Returns:; the smallest ImageRegion that contains the specified envelop. attemptOperation; public static Geometry attemptOperation(Geometry input,; Function<Geometry,Geometry> fun); Attempt to apply a function to a geometry, returning the input unchanged if there was an exception.; ; The purpose of this is to make it easier to apply non-essential functions that might fail (e.g. with a TopologyException ; and to recover easily. Parameters:; input - the input geometry; fun - the function to (attempt) to apply; Returns:; the new geometry if the function succeeded, otherwise the original geometry. roundCoordinates; public static Geometry roundCoordinates(Geometry geometry); Round coordinates in a Geometry to integer values. Parameters:; geometry - the updated Geometry; Returns:. constrainToBounds; public static Geometry constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height); Compute the intersection of a Geometry and a specified bounding box.; The original Geometry may be returned unchanged if no changes are required to fit within the bounds. Parameters:; geometry - the updated Geometry; x - ; y - ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:.",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:6207,Deployability,update,updated,6207,"nvelopToRegion; public static ImageRegion envelopToRegion(Envelope env,; int z,; int t); Convert an Envelope to an ImageRegion. Parameters:; env - envelop; z - z index for the region (default is 0); t - timepoint for the region (default is 0); Returns:; the smallest ImageRegion that contains the specified envelop. attemptOperation; public static Geometry attemptOperation(Geometry input,; Function<Geometry,Geometry> fun); Attempt to apply a function to a geometry, returning the input unchanged if there was an exception.; ; The purpose of this is to make it easier to apply non-essential functions that might fail (e.g. with a TopologyException ; and to recover easily. Parameters:; input - the input geometry; fun - the function to (attempt) to apply; Returns:; the new geometry if the function succeeded, otherwise the original geometry. roundCoordinates; public static Geometry roundCoordinates(Geometry geometry); Round coordinates in a Geometry to integer values. Parameters:; geometry - the updated Geometry; Returns:. constrainToBounds; public static Geometry constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height); Compute the intersection of a Geometry and a specified bounding box.; The original Geometry may be returned unchanged if no changes are required to fit within the bounds. Parameters:; geometry - the updated Geometry; x - ; y - ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:. geometryToROI; public static ROI geometryToROI(Geometry geometry,; ImagePlane plane); Convert a JTS Geometry to a QuPath ROI. Parameters:; geometry - ; plane - ; Returns:. roiToGeometry; public static Geometry roiToGeometry(ROI roi); Convert to QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. geometryToShape; public static Shape geometry",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:6567,Deployability,update,updated,6567,"ometry input,; Function<Geometry,Geometry> fun); Attempt to apply a function to a geometry, returning the input unchanged if there was an exception.; ; The purpose of this is to make it easier to apply non-essential functions that might fail (e.g. with a TopologyException ; and to recover easily. Parameters:; input - the input geometry; fun - the function to (attempt) to apply; Returns:; the new geometry if the function succeeded, otherwise the original geometry. roundCoordinates; public static Geometry roundCoordinates(Geometry geometry); Round coordinates in a Geometry to integer values. Parameters:; geometry - the updated Geometry; Returns:. constrainToBounds; public static Geometry constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height); Compute the intersection of a Geometry and a specified bounding box.; The original Geometry may be returned unchanged if no changes are required to fit within the bounds. Parameters:; geometry - the updated Geometry; x - ; y - ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:. geometryToROI; public static ROI geometryToROI(Geometry geometry,; ImagePlane plane); Convert a JTS Geometry to a QuPath ROI. Parameters:; geometry - ; plane - ; Returns:. roiToGeometry; public static Geometry roiToGeometry(ROI roi); Convert to QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. geometryToShape; public static Shape geometryToShape(Geometry geometry); Convert a JTS Geometry to a java.awt.Shape. Parameters:; geometry - ; Returns:. regionToGeometry; public static Geometry regionToGeometry(ImageRegion region); Convert an ImageRegion to a rectangular Geometry.; The z-position is retained, but timepoint is lost. Parameters:; region - ; Returns:. union; public static Geometry union(Collection<? exten",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:449,Modifiability,extend,extends,449,". GeometryTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class GeometryTools. java.lang.Object; qupath.lib.roi.GeometryTools. public class GeometryTools; extends Object; Convert between QuPath ROI objects and Java Topology Suite Geometry objects. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; GeometryTools.GeometryConverter. Converter to help switch from a ROI to a Geometry. Constructor Summary; Constructors. Constructor; Description; GeometryTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Geometry; attemptOperation(Geometry input,; Function<Geometry,Geometry> fun). Attempt to apply a function to a geometry, returning the input unchanged if there was an exception. static Geometry; constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height). Compute the intersection of a Geometry and a specified bounding box. static AffineTransformation; convertTransform(AffineTransform transform). Convert an AffineTransform to an AffineTransformation. static AffineTransform; convertTransform(AffineTransformation transform). Convert an AffineTransformation to an AffineTransform. static Geometry; createRectangle(double x,; double y,; double width,; double height). Create a rectangular Geometry for the specified bounding box. static Geometry; ensurePolygonal(Geometry geometry). Strip non-polygonal parts from a GeometryCollection (non-recursive). static ImageRegion; envelopToRegion(Envelope env,; int z,; int t). Convert an Envelope to an ImageRegion. static Geometry; fillHoles(Geometry geometry). Fill all interior rings for the spec",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:3604,Modifiability,extend,extends,3604,"ix (String) to create and return an AffineTransformation. static Geometry; refineAreas(Geometry geometry,; double minSizePixels,; double minHoleSizePixels). Remove small fragments and fill small interior rings within a Geometry. static Geometry; regionToGeometry(ImageRegion region). Convert an ImageRegion to a rectangular Geometry. static Geometry; removeFragments(Geometry geometry,; double minArea). Remove fragments smaller than the specified area from a Geometry, ignoring internal rings. static Geometry; removeInteriorRings(Geometry geometry,; double minRingArea). Fill all interior rings for the specified geometry that have an area < a specified threshold. static Geometry; roiToGeometry(ROI roi). Convert to QuPath ROI to a JTS Geometry. static Geometry; roundCoordinates(Geometry geometry). Round coordinates in a Geometry to integer values. static Geometry; shapeToGeometry(Shape shape). Convert a java.awt.Shape to a JTS Geometry. static List<Geometry>; splitGeometryByLineStrings(Geometry polygon,; Collection<? extends Geometry> splitLines). Split an input polygonal geometry using a collection of split lines. static Geometry; tryToFixPolygon(Polygon polygon). Test a polygon for validity, attempting to fix TopologyValidationErrors if possible. static Geometry; union(Collection<? extends Geometry> geometries). Calculate the union of multiple Geometry objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GeometryTools; public GeometryTools(). Method Details. getDefaultFactory; public static GeometryFactory getDefaultFactory(); Get the default GeometryFactory to construct Geometries within QuPath. Returns:. parseTransformMatrix; public static AffineTransformation parseTransformMatrix(String text); throws ParseException; Parse the matrix (String) to create and return an AffineTransformation. ; ; The order of the matrix elements should be the following:. m00 m",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:3876,Modifiability,extend,extends,3876,"ImageRegion to a rectangular Geometry. static Geometry; removeFragments(Geometry geometry,; double minArea). Remove fragments smaller than the specified area from a Geometry, ignoring internal rings. static Geometry; removeInteriorRings(Geometry geometry,; double minRingArea). Fill all interior rings for the specified geometry that have an area < a specified threshold. static Geometry; roiToGeometry(ROI roi). Convert to QuPath ROI to a JTS Geometry. static Geometry; roundCoordinates(Geometry geometry). Round coordinates in a Geometry to integer values. static Geometry; shapeToGeometry(Shape shape). Convert a java.awt.Shape to a JTS Geometry. static List<Geometry>; splitGeometryByLineStrings(Geometry polygon,; Collection<? extends Geometry> splitLines). Split an input polygonal geometry using a collection of split lines. static Geometry; tryToFixPolygon(Polygon polygon). Test a polygon for validity, attempting to fix TopologyValidationErrors if possible. static Geometry; union(Collection<? extends Geometry> geometries). Calculate the union of multiple Geometry objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GeometryTools; public GeometryTools(). Method Details. getDefaultFactory; public static GeometryFactory getDefaultFactory(); Get the default GeometryFactory to construct Geometries within QuPath. Returns:. parseTransformMatrix; public static AffineTransformation parseTransformMatrix(String text); throws ParseException; Parse the matrix (String) to create and return an AffineTransformation. ; ; The order of the matrix elements should be the following:. m00 m01 m02; m10 m11 m12. Parameters:; text - ; Returns:; affineTransformation; Throws:; ParseException. convertTransform; public static AffineTransform convertTransform(AffineTransformation transform); Convert an AffineTransformation to an AffineTransform. Parameters:; transform - ; Returns:. conve",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:3965,Modifiability,inherit,inherited,3965,"nArea). Remove fragments smaller than the specified area from a Geometry, ignoring internal rings. static Geometry; removeInteriorRings(Geometry geometry,; double minRingArea). Fill all interior rings for the specified geometry that have an area < a specified threshold. static Geometry; roiToGeometry(ROI roi). Convert to QuPath ROI to a JTS Geometry. static Geometry; roundCoordinates(Geometry geometry). Round coordinates in a Geometry to integer values. static Geometry; shapeToGeometry(Shape shape). Convert a java.awt.Shape to a JTS Geometry. static List<Geometry>; splitGeometryByLineStrings(Geometry polygon,; Collection<? extends Geometry> splitLines). Split an input polygonal geometry using a collection of split lines. static Geometry; tryToFixPolygon(Polygon polygon). Test a polygon for validity, attempting to fix TopologyValidationErrors if possible. static Geometry; union(Collection<? extends Geometry> geometries). Calculate the union of multiple Geometry objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GeometryTools; public GeometryTools(). Method Details. getDefaultFactory; public static GeometryFactory getDefaultFactory(); Get the default GeometryFactory to construct Geometries within QuPath. Returns:. parseTransformMatrix; public static AffineTransformation parseTransformMatrix(String text); throws ParseException; Parse the matrix (String) to create and return an AffineTransformation. ; ; The order of the matrix elements should be the following:. m00 m01 m02; m10 m11 m12. Parameters:; text - ; Returns:; affineTransformation; Throws:; ParseException. convertTransform; public static AffineTransform convertTransform(AffineTransformation transform); Convert an AffineTransformation to an AffineTransform. Parameters:; transform - ; Returns:. convertTransform; public static AffineTransformation convertTransform(AffineTransform transform); Convert ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:7578,Modifiability,extend,extends,7578,"- ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:. geometryToROI; public static ROI geometryToROI(Geometry geometry,; ImagePlane plane); Convert a JTS Geometry to a QuPath ROI. Parameters:; geometry - ; plane - ; Returns:. roiToGeometry; public static Geometry roiToGeometry(ROI roi); Convert to QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. geometryToShape; public static Shape geometryToShape(Geometry geometry); Convert a JTS Geometry to a java.awt.Shape. Parameters:; geometry - ; Returns:. regionToGeometry; public static Geometry regionToGeometry(ImageRegion region); Convert an ImageRegion to a rectangular Geometry.; The z-position is retained, but timepoint is lost. Parameters:; region - ; Returns:. union; public static Geometry union(Collection<? extends Geometry> geometries); Calculate the union of multiple Geometry objects. Parameters:; geometries - ; Returns:. ensurePolygonal; public static Geometry ensurePolygonal(Geometry geometry); Strip non-polygonal parts from a GeometryCollection (non-recursive). Parameters:; geometry - ; Returns:; a Geometry containing only Polygons, which may be the same as the input Geometry or empty. homogenizeGeometryCollection; public static Geometry homogenizeGeometryCollection(Geometry geometry); Ensure a GeometryCollection contains only Geometries of the same type (Polygonal, Lineal or Puntal).; Other geometries (with lower dimension) are discarded. Parameters:; geometry - ; Returns:. removeInteriorRings; public static Geometry removeInteriorRings(Geometry geometry,; double minRingArea); Fill all interior rings for the specified geometry that have an area < a specified threshold.; ; Note that this assumes that the geometry is valid, and does not contain self-intersections or overlapping pieces. ; No checks a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:11110,Modifiability,extend,extends,11110,"lygon (if valid), an adjusted polygon (if attempted fixes helped),; or an empty polygon if the situation could not be resolved. refineAreas; public static Geometry refineAreas(Geometry geometry,; double minSizePixels,; double minHoleSizePixels); Remove small fragments and fill small interior rings within a Geometry.; ; Note that any modifications to the geometry will result in points and lines being stripped away, ; leaving only polygons. Parameters:; geometry - input geometry to refine; minSizePixels - minimum area of a fragment to keep (the area of interior rings for polygons will be ignored); minHoleSizePixels - minimum size of an interior hole to keep; Returns:; the refined geometry (possibly the original unchanged), or empty geometry if the changes resulted in the Geometry disappearing; See Also:. removeFragments(Geometry, double); removeInteriorRings(Geometry, double). splitGeometryByLineStrings; public static List<Geometry> splitGeometryByLineStrings(Geometry polygon,; Collection<? extends Geometry> splitLines); throws IllegalArgumentException; Split an input polygonal geometry using a collection of split lines.; ; The main input must be polygonal, but the split lines can be any geometry type; their linestrings will be; extracted and used for splitting.; ; Important! This will also split a MultiPolygon into its constituent; Polygon objects as a side effect. This is to ensure consistency and avoid; cases where linestrings may span multiple polygons within the same multipolygon.; The output may be combined to form a new multipolygon later if required. Parameters:; polygon - the polygonal geometry to split; splitLines - a collection of geometries, whose union will be used to split the input geometry; Returns:; a list of polygons formed by the splitting. This may return the original geometry, or geometries within; an original collection, if these do not need to be split.; Throws:; IllegalArgumentException - if the input geometry is not polygonal; Since:; v0.5.0. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:8622,Performance,perform,performance,8622,"lculate the union of multiple Geometry objects. Parameters:; geometries - ; Returns:. ensurePolygonal; public static Geometry ensurePolygonal(Geometry geometry); Strip non-polygonal parts from a GeometryCollection (non-recursive). Parameters:; geometry - ; Returns:; a Geometry containing only Polygons, which may be the same as the input Geometry or empty. homogenizeGeometryCollection; public static Geometry homogenizeGeometryCollection(Geometry geometry); Ensure a GeometryCollection contains only Geometries of the same type (Polygonal, Lineal or Puntal).; Other geometries (with lower dimension) are discarded. Parameters:; geometry - ; Returns:. removeInteriorRings; public static Geometry removeInteriorRings(Geometry geometry,; double minRingArea); Fill all interior rings for the specified geometry that have an area < a specified threshold.; ; Note that this assumes that the geometry is valid, and does not contain self-intersections or overlapping pieces. ; No checks are made to confirm this (for performance reasons). Parameters:; geometry - ; minRingArea - ; Returns:. fillHoles; public static Geometry fillHoles(Geometry geometry); Fill all interior rings for the specified geometry. Parameters:; geometry - ; Returns:. removeFragments; public static Geometry removeFragments(Geometry geometry,; double minArea); Remove fragments smaller than the specified area from a Geometry, ignoring internal rings. Parameters:; geometry - the geometry to refine; minArea - the minimum area of a fragment to retain. If ≤ 0, the geometry is returned unchanged.; Otherwise, polygons will be extracted from the geometry and all that have an external ring area smaller than minArea will be removed.; Returns:; the refined Geometry, or an empty polygon if all pieces of the geometry were removed. tryToFixPolygon; public static Geometry tryToFixPolygon(Polygon polygon); Test a polygon for validity, attempting to fix TopologyValidationErrors if possible.; This attempts a range of tricks (starting w",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:5864,Safety,recover,recover,5864,"- ; Returns:. convertTransform; public static AffineTransformation convertTransform(AffineTransform transform); Convert an AffineTransform to an AffineTransformation. Parameters:; transform - ; Returns:. shapeToGeometry; public static Geometry shapeToGeometry(Shape shape); Convert a java.awt.Shape to a JTS Geometry. Parameters:; shape - ; Returns:. envelopToRegion; public static ImageRegion envelopToRegion(Envelope env,; int z,; int t); Convert an Envelope to an ImageRegion. Parameters:; env - envelop; z - z index for the region (default is 0); t - timepoint for the region (default is 0); Returns:; the smallest ImageRegion that contains the specified envelop. attemptOperation; public static Geometry attemptOperation(Geometry input,; Function<Geometry,Geometry> fun); Attempt to apply a function to a geometry, returning the input unchanged if there was an exception.; ; The purpose of this is to make it easier to apply non-essential functions that might fail (e.g. with a TopologyException ; and to recover easily. Parameters:; input - the input geometry; fun - the function to (attempt) to apply; Returns:; the new geometry if the function succeeded, otherwise the original geometry. roundCoordinates; public static Geometry roundCoordinates(Geometry geometry); Round coordinates in a Geometry to integer values. Parameters:; geometry - the updated Geometry; Returns:. constrainToBounds; public static Geometry constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height); Compute the intersection of a Geometry and a specified bounding box.; The original Geometry may be returned unchanged if no changes are required to fit within the bounds. Parameters:; geometry - the updated Geometry; x - ; y - ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:.",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:11527,Safety,avoid,avoid,11527,"lygon (if valid), an adjusted polygon (if attempted fixes helped),; or an empty polygon if the situation could not be resolved. refineAreas; public static Geometry refineAreas(Geometry geometry,; double minSizePixels,; double minHoleSizePixels); Remove small fragments and fill small interior rings within a Geometry.; ; Note that any modifications to the geometry will result in points and lines being stripped away, ; leaving only polygons. Parameters:; geometry - input geometry to refine; minSizePixels - minimum area of a fragment to keep (the area of interior rings for polygons will be ignored); minHoleSizePixels - minimum size of an interior hole to keep; Returns:; the refined geometry (possibly the original unchanged), or empty geometry if the changes resulted in the Geometry disappearing; See Also:. removeFragments(Geometry, double); removeInteriorRings(Geometry, double). splitGeometryByLineStrings; public static List<Geometry> splitGeometryByLineStrings(Geometry polygon,; Collection<? extends Geometry> splitLines); throws IllegalArgumentException; Split an input polygonal geometry using a collection of split lines.; ; The main input must be polygonal, but the split lines can be any geometry type; their linestrings will be; extracted and used for splitting.; ; Important! This will also split a MultiPolygon into its constituent; Polygon objects as a side effect. This is to ensure consistency and avoid; cases where linestrings may span multiple polygons within the same multipolygon.; The output may be combined to form a new multipolygon later if required. Parameters:; polygon - the polygonal geometry to split; splitLines - a collection of geometries, whose union will be used to split the input geometry; Returns:; a list of polygons formed by the splitting. This may return the original geometry, or geometries within; an original collection, if these do not need to be split.; Throws:; IllegalArgumentException - if the input geometry is not polygonal; Since:; v0.5.0. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:4039,Security,hash,hashCode,4039,", ignoring internal rings. static Geometry; removeInteriorRings(Geometry geometry,; double minRingArea). Fill all interior rings for the specified geometry that have an area < a specified threshold. static Geometry; roiToGeometry(ROI roi). Convert to QuPath ROI to a JTS Geometry. static Geometry; roundCoordinates(Geometry geometry). Round coordinates in a Geometry to integer values. static Geometry; shapeToGeometry(Shape shape). Convert a java.awt.Shape to a JTS Geometry. static List<Geometry>; splitGeometryByLineStrings(Geometry polygon,; Collection<? extends Geometry> splitLines). Split an input polygonal geometry using a collection of split lines. static Geometry; tryToFixPolygon(Polygon polygon). Test a polygon for validity, attempting to fix TopologyValidationErrors if possible. static Geometry; union(Collection<? extends Geometry> geometries). Calculate the union of multiple Geometry objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GeometryTools; public GeometryTools(). Method Details. getDefaultFactory; public static GeometryFactory getDefaultFactory(); Get the default GeometryFactory to construct Geometries within QuPath. Returns:. parseTransformMatrix; public static AffineTransformation parseTransformMatrix(String text); throws ParseException; Parse the matrix (String) to create and return an AffineTransformation. ; ; The order of the matrix elements should be the following:. m00 m01 m02; m10 m11 m12. Parameters:; text - ; Returns:; affineTransformation; Throws:; ParseException. convertTransform; public static AffineTransform convertTransform(AffineTransformation transform); Convert an AffineTransformation to an AffineTransform. Parameters:; transform - ; Returns:. convertTransform; public static AffineTransformation convertTransform(AffineTransform transform); Convert an AffineTransform to an AffineTransformation. Parameters:; transform - ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:9945,Testability,test,test,9945,"han the specified area from a Geometry, ignoring internal rings. Parameters:; geometry - the geometry to refine; minArea - the minimum area of a fragment to retain. If ≤ 0, the geometry is returned unchanged.; Otherwise, polygons will be extracted from the geometry and all that have an external ring area smaller than minArea will be removed.; Returns:; the refined Geometry, or an empty polygon if all pieces of the geometry were removed. tryToFixPolygon; public static Geometry tryToFixPolygon(Polygon polygon); Test a polygon for validity, attempting to fix TopologyValidationErrors if possible.; This attempts a range of tricks (starting with Geometry.buffer(0)), although none; are guaranteed to work. The first that largely preserves the polygon's area is returned.; ; The result is guaranteed to be valid, but not necessarily to be a close match to the ; original polygon; in particular, if everything failed the result will be empty.; ; Code that calls this method can test if the output is equal to the input to determine ; if any changes were made. Parameters:; polygon - input (possibly-invalid) polygon; Returns:; the input polygon (if valid), an adjusted polygon (if attempted fixes helped),; or an empty polygon if the situation could not be resolved. refineAreas; public static Geometry refineAreas(Geometry geometry,; double minSizePixels,; double minHoleSizePixels); Remove small fragments and fill small interior rings within a Geometry.; ; Note that any modifications to the geometry will result in points and lines being stripped away, ; leaving only polygons. Parameters:; geometry - input geometry to refine; minSizePixels - minimum area of a fragment to keep (the area of interior rings for polygons will be ignored); minHoleSizePixels - minimum size of an interior hole to keep; Returns:; the refined geometry (possibly the original unchanged), or empty geometry if the changes resulted in the Geometry disappearing; See Also:. removeFragments(Geometry, double); removeInterio",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/GeometryTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:1502,Availability,avail,available,1502,"ct; implements Serializable; ROI representing a straight line, defined by its end points. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 2 (since the line is defined by its end points). String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10782,Availability,avail,available,10782,"eters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Retur",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3491,Deployability,update,updatePlane,3491,"epresenting this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. double; getX1(). Get the first x co-ordinate (start of the line). double; getX2(). Get the second x co-ordinate (end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7829,Deployability,update,updatePlane,7829,"getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7853,Deployability,update,updatePlane,7853,"getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8040,Deployability,update,updatePlane,8040,"t in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.ge",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8449,Energy Efficiency,efficient,efficient,8449,"currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public R",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:664,Integrability,interface,interfaces,664,". LineROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class LineROI. java.lang.Object; qupath.lib.roi.LineROI. All Implemented Interfaces:; Serializable, ROI. public class LineROI; extends Object; implements Serializable; ROI representing a straight line, defined by its end points. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 2 (since the line is define",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:690,Integrability,interface,interface,690,". LineROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class LineROI. java.lang.Object; qupath.lib.roi.LineROI. All Implemented Interfaces:; Serializable, ROI. public class LineROI; extends Object; implements Serializable; ROI representing a straight line, defined by its end points. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 2 (since the line is define",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:715,Integrability,interface,interfaces,715,". LineROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class LineROI. java.lang.Object; qupath.lib.roi.LineROI. All Implemented Interfaces:; Serializable, ROI. public class LineROI; extends Object; implements Serializable; ROI representing a straight line, defined by its end points. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 2 (since the line is define",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3743,Integrability,interface,interface,3743,"(). Get the second x co-ordinate (end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3768,Integrability,interface,interfaces,3768,"end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Desc",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3871,Integrability,interface,interface,3871,"t the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4014,Integrability,interface,interface,4014,"s an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4101,Integrability,interface,interface,4101,"lean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the li",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4317,Integrability,interface,interface,4317,"riginX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinat",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4502,Integrability,interface,interface,4502,"I. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the seco",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4612,Integrability,interface,interface,4612,"ct; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in inte",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4794,Integrability,interface,interface,4794,"s. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:4996,Integrability,interface,interface,4996,"d by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCen",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:5150,Integrability,interface,interface,5150,"ned as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated v",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:5630,Integrability,interface,interface,5630,"arameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:5723,Integrability,interface,interface,5723," @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:.",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:5817,Integrability,interface,interface,5817,"ate a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:5910,Integrability,interface,interface,5910,"ds being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6004,Integrability,interface,interface,6004,"rface ROI; Returns:. getNumPoints; public int getNumPoints(); Returns 2 (since the line is defined by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6109,Integrability,interface,interface,6109,"ed by its end points). Specified by:; getNumPoints in interface ROI; Returns:. getX1; public double getX1(); Get the first x co-ordinate (start of the line). Returns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6225,Integrability,interface,interface,6225,"urns:. getY1; public double getY1(); Get the first y co-ordinate (start of the line). Returns:. getX2; public double getX2(); Get the second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; Th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6383,Integrability,interface,interface,6383,"second x co-ordinate (end of the line). Returns:. getY2; public double getY2(); Get the second y co-ordinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6495,Integrability,interface,interface,6495,"rdinate (end of the line). Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6584,Integrability,interface,interface,6584," zero area. Specified by:; isEmpty in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6696,Integrability,interface,interface,6696,"dX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an Unsupp",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6793,Integrability,interface,interface,6793," Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6885,Integrability,interface,interface,6885,"dY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plan",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:6984,Integrability,interface,interface,6984,"cified by:; getCentroidY in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a diffe",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7078,Integrability,interface,interface,7078," double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Par",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7177,Integrability,interface,interface,7177,"al ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Descripti",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7494,Integrability,interface,interface,7494,"X in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7578,Integrability,interface,interface,7578,"cription copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea()",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7804,Integrability,interface,interface,7804,": ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScal",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7908,Integrability,interface,interface,7908,"getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8055,Integrability,interface,interface,8055,"t in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.ge",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8192,Integrability,interface,interface,8192,"ts representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8307,Integrability,interface,interface,8307," single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8507,Integrability,interface,interface,8507,"e ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; doub",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8590,Integrability,interface,interface,8590,"erface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version o",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8695,Integrability,interface,interface,8695,"perationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8874,Integrability,interface,interface,8874,"Plane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior t",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8987,Integrability,interface,interface,8987," is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:9162,Integrability,interface,interface,9162,"etRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which c",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:9376,Integrability,interface,interface,9376,"lementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:9540,Integrability,interface,interface,9540,"nterface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:9713,Integrability,interface,interface,9713," Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in th",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10113,Integrability,interface,interface,10113,"x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not encl",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10242,Integrability,interface,interface,10242,"Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10316,Integrability,interface,interface,10316,"er ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specifie",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10441,Integrability,interface,interface,10441,"OI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10515,Integrability,interface,interface,10515,"iginY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10641,Integrability,interface,interface,10641,"g factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a o",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10715,Integrability,interface,interface,10715,"eters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Retur",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:10884,Integrability,interface,interface,10884,"k afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11040,Integrability,interface,interface,11040,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11162,Integrability,interface,interface,11162,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11244,Integrability,interface,interface,11244,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11328,Integrability,interface,interface,11328,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11412,Integrability,interface,interface,11412,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11521,Integrability,interface,interface,11521,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11614,Integrability,interface,interface,11614,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11713,Integrability,interface,interface,11713,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11804,Integrability,interface,interface,11804,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:11973,Integrability,interface,interface,11973,":; See Also:. ROI.scale(double, double). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:473,Modifiability,extend,extends,473,". LineROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class LineROI. java.lang.Object; qupath.lib.roi.LineROI. All Implemented Interfaces:; Serializable, ROI. public class LineROI; extends Object; implements Serializable; ROI representing a straight line, defined by its end points. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 2 (since the line is define",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:675,Modifiability,inherit,inherited,675,". LineROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class LineROI. java.lang.Object; qupath.lib.roi.LineROI. All Implemented Interfaces:; Serializable, ROI. public class LineROI; extends Object; implements Serializable; ROI representing a straight line, defined by its end points. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 2 (since the line is define",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3599,Modifiability,inherit,inherited,3599,"convex hull area. int; getT(). Get time point index. double; getX1(). Get the first x co-ordinate (start of the line). double; getX2(). Get the second x co-ordinate (end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3728,Modifiability,inherit,inherited,3728,"(). Get the second x co-ordinate (end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). duplicate; @Deprecated; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3673,Security,hash,hashCode,3673,"). Get the first x co-ordinate (start of the line). double; getX2(). Get the second x co-ordinate (end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/LineROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/package-summary.html:454,Integrability,interface,interfaces,454,". qupath.lib.roi (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi. package qupath.lib.roi. Classes that define regions of interest (ROIs). Related Packages. Package; Description; qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs). All Classes and InterfacesClassesEnum Classes. Class; Description; AreaROI. Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions. ConvexHull. Helper method for calculating the convex hull from a list of points. DefaultROIComparator. Default comparator to enable ROIs to be sorted in a more predictable manner. EllipseROI. ROI implementing a circle, or (unrotated) ellipse. GeometryROI. ROI based on Java Topology Suite Geometry objects. GeometryTools. Convert between QuPath ROI objects and Java Topology Suite Geometry objects. GeometryTools.GeometryConverter. Converter to help switch from a ROI to a Geometry. GeometryTools.GeometryConverter.Builder. Builder to help define how ROIs and Geometry objects should be converted. LineROI. ROI representing a straight line, defined by its end points. PointsROI. ROI representing a collection of 2D points (distinct x,y coordinates). PolygonROI. ROI representing an arbitrary closed polygon. PolylineROI. ROI representing an arbitrary open polyline. RectangleROI. ROI representing a square or rectangle (unrotated). RoiEditor. Helper class for interactively modifying existing ROIs. ROIs. This class consists exclusively of static methods that operate on or return regions of interest (ROIs). RoiTools. A collection of static methods for working with ROIs. RoiTools.CombineOp. Methods of combining two ROIs. ShapeSimplifier. Helper methods for simplifying shapes, such removing polygon points while re",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/package-summary.html:844,Safety,predict,predictable,844,". qupath.lib.roi (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi. package qupath.lib.roi. Classes that define regions of interest (ROIs). Related Packages. Package; Description; qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs). All Classes and InterfacesClassesEnum Classes. Class; Description; AreaROI. Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions. ConvexHull. Helper method for calculating the convex hull from a list of points. DefaultROIComparator. Default comparator to enable ROIs to be sorted in a more predictable manner. EllipseROI. ROI implementing a circle, or (unrotated) ellipse. GeometryROI. ROI based on Java Topology Suite Geometry objects. GeometryTools. Convert between QuPath ROI objects and Java Topology Suite Geometry objects. GeometryTools.GeometryConverter. Converter to help switch from a ROI to a Geometry. GeometryTools.GeometryConverter.Builder. Builder to help define how ROIs and Geometry objects should be converted. LineROI. ROI representing a straight line, defined by its end points. PointsROI. ROI representing a collection of 2D points (distinct x,y coordinates). PolygonROI. ROI representing an arbitrary closed polygon. PolylineROI. ROI representing an arbitrary open polyline. RectangleROI. ROI representing a square or rectangle (unrotated). RoiEditor. Helper class for interactively modifying existing ROIs. ROIs. This class consists exclusively of static methods that operate on or return regions of interest (ROIs). RoiTools. A collection of static methods for working with ROIs. RoiTools.CombineOp. Methods of combining two ROIs. ShapeSimplifier. Helper methods for simplifying shapes, such removing polygon points while re",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/package-summary.html:1944,Usability,simpl,simplifying,1944,"your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.roi. package qupath.lib.roi. Classes that define regions of interest (ROIs). Related Packages. Package; Description; qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs). All Classes and InterfacesClassesEnum Classes. Class; Description; AreaROI. Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions. ConvexHull. Helper method for calculating the convex hull from a list of points. DefaultROIComparator. Default comparator to enable ROIs to be sorted in a more predictable manner. EllipseROI. ROI implementing a circle, or (unrotated) ellipse. GeometryROI. ROI based on Java Topology Suite Geometry objects. GeometryTools. Convert between QuPath ROI objects and Java Topology Suite Geometry objects. GeometryTools.GeometryConverter. Converter to help switch from a ROI to a Geometry. GeometryTools.GeometryConverter.Builder. Builder to help define how ROIs and Geometry objects should be converted. LineROI. ROI representing a straight line, defined by its end points. PointsROI. ROI representing a collection of 2D points (distinct x,y coordinates). PolygonROI. ROI representing an arbitrary closed polygon. PolylineROI. ROI representing an arbitrary open polyline. RectangleROI. ROI representing a square or rectangle (unrotated). RoiEditor. Helper class for interactively modifying existing ROIs. ROIs. This class consists exclusively of static methods that operate on or return regions of interest (ROIs). RoiTools. A collection of static methods for working with ROIs. RoiTools.CombineOp. Methods of combining two ROIs. ShapeSimplifier. Helper methods for simplifying shapes, such removing polygon points while retaining the a similar overall ; shape at a coarser level. ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:1520,Availability,avail,available,1520,"ents Serializable; ROI representing a collection of 2D points (distinct x,y coordinates). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. Point2; getNearest(double x,; double y,; double maxDist). Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. int; getNumPoints(). Default implementation, calls ROI.getAllPoints() and then caches the result. String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:11021,Availability,avail,available,11021,"th; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from int",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:3538,Deployability,update,updateBounds,3538,"e pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). It is not possible to convert a PointROI to a java.awt.Shape. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). A Points ROI is empty if it contains no points (*not* if its bounds have no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:3581,Deployability,update,updatePlane,3581,"e pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). It is not possible to convert a PointROI to a java.awt.Shape. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). A Points ROI is empty if it contains no points (*not* if its bounds have no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4553,Deployability,update,updateBounds,4553,"atePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape complete",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4582,Deployability,update,updateBounds,4582,"atePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape complete",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8130,Deployability,update,updatePlane,8130,"ng box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8154,Deployability,update,updatePlane,8154,"ng box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8341,Deployability,update,updatePlane,8341,"idth of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the RO",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:6788,Energy Efficiency,efficient,efficient,6788,"leX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:682,Integrability,interface,interfaces,682,". PointsROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class PointsROI. java.lang.Object; qupath.lib.roi.PointsROI. All Implemented Interfaces:; Serializable, ROI. public class PointsROI; extends Object; implements Serializable; ROI representing a collection of 2D points (distinct x,y coordinates). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. Point2; getNearest(double x,; double y",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:708,Integrability,interface,interface,708,". PointsROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class PointsROI. java.lang.Object; qupath.lib.roi.PointsROI. All Implemented Interfaces:; Serializable, ROI. public class PointsROI; extends Object; implements Serializable; ROI representing a collection of 2D points (distinct x,y coordinates). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. Point2; getNearest(double x,; double y",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:733,Integrability,interface,interfaces,733,". PointsROI (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class PointsROI. java.lang.Object; qupath.lib.roi.PointsROI. All Implemented Interfaces:; Serializable, ROI. public class PointsROI; extends Object; implements Serializable; ROI representing a collection of 2D points (distinct x,y coordinates). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. Point2; getNearest(double x,; double y",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:3833,Integrability,interface,interface,3833," int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). A Points ROI is empty if it contains no points (*not* if its bounds have no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:3858,Integrability,interface,interfaces,3858,". int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). A Points ROI is empty if it contains no points (*not* if its bounds have no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; publi",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:3965,Integrability,interface,interface,3965,"ea. boolean; isEmpty(). A Points ROI is empty if it contains no points (*not* if its bounds have no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4059,Integrability,interface,interface,4059,"ve no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in i",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4152,Integrability,interface,interface,4152,"s and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoi",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4246,Integrability,interface,interface,4246,"ct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclass",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4822,Integrability,interface,interface,4822,"herited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; do",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4911,Integrability,interface,interface,4911,"c double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coor",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:5054,Integrability,interface,interface,5054,"oidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Par",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:5305,Integrability,interface,interface,5305,"earest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back af",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:5404,Integrability,interface,interface,5404,"o coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:5721,Integrability,interface,interface,5721,"ds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Def",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:5860,Integrability,interface,interface,5860,"ace ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:6033,Integrability,interface,interface,6033,"mentation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coor",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:6444,Integrability,interface,interface,6444,"the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Re",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:6646,Integrability,interface,interface,6646,"disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:6846,Integrability,interface,interface,6846,"iption copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:6935,Integrability,interface,interface,6935,"the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7047,Integrability,interface,interface,7047,"OI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish b",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7136,Integrability,interface,interface,7136,"tracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; pu",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7248,Integrability,interface,interface,7248,"from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI def",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7345,Integrability,interface,interface,7345,"cale(double, double). duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7437,Integrability,interface,interface,7437,"copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translat",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7536,Integrability,interface,interface,7536,"OIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7630,Integrability,interface,interface,7630,"ied by:; duplicate in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in inter",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7856,Integrability,interface,interface,7856,"BoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x coordinate for the top left of the ROI bounding box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea ",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:7990,Integrability,interface,interface,7990,"ing box. Specified by:; getBoundsX in interface ROI; Returns:. getBoundsY; public double getBoundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8105,Integrability,interface,interface,8105,"oundsY(); Description copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, fo",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8209,Integrability,interface,interface,8209,"ng box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ;",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8356,Integrability,interface,interface,8356,"idth of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the RO",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8504,Integrability,interface,interface,8504,"e getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All ot",MatchSource.WIKI,javadoc/docs/qupath/lib/roi/PointsROI.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html
