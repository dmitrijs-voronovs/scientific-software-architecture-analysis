id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:1910,Availability,error,error,1910,"ghtsNRows, size_t WeightsNCols, size_t BiasesNSlices, size_t BiasesNRows, size_t BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, std::vector< size_t > WeightsNRows, std::vector< size_t > WeightsNCols, size_t BiasesNSlices, std::vector< size_t > BiasesNRows, std::vector< size_t > BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  General Constructor with different weights dimension. ;  ;  VGeneralLayer (VGeneralLayer< Architecture_t > *layer);  Copy the layer provided as a pointer. ;  ; virtual ~VGeneralLayer ();  Virtual Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent)=0;  Writes the information and the weights about the layer in an XML node. ;  ; virtual void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward)=0;  Backpropagates the error. ;  ; void CopyBiases (const std::vector< Matrix_t > &otherBiases);  Copies the biases provided as an input. ;  ; template<typename Arch > ; void CopyParameters (const VGeneralLayer< Arch > &layer);  Copy all trainable weight and biases from another equivalent layer but with different architecture The function can copy also extra parameters in addition to weights and biases if they are return by the function GetExtraLayerParameters. ;  ; void CopyWeights (const std::vector< Matrix_t > &otherWeights);  Copies the weights provided as an input. ;  ; virtual void Forward (Tensor_t &input, bool applyDropout=false)=0;  Computes activation of the layer for the given input. ;  ; Tensor_t & GetActivationGradients ();  ; const Tensor_t & GetActivationGradients () const;  ; Matrix_t GetActivationGradientsAt (size_t i);  ; const Matrix_t & GetActivationGradientsAt (size_t i) const;  ; size_t GetBatchSize () const;  Getters. ;  ; std::v",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:11088,Availability,error,error,11088,"_t >::~VGeneralLayer. virtual . Virtual Destructor. ; Definition at line 388 of file GeneralLayer.h. Member Function Documentation. ◆ AddWeightsXMLTo(). template<typename Architecture_t > . virtual void TMVA::DNN::VGeneralLayer< Architecture_t >::AddWeightsXMLTo ; (; void * ; parent). pure virtual . Writes the information and the weights about the layer in an XML node. ; Implemented in TMVA::DNN::TBatchNormLayer< Architecture_t >, TMVA::DNN::CNN::TConvLayer< Architecture_t >, TMVA::DNN::CNN::TMaxPoolLayer< Architecture_t >, TMVA::DNN::TDenseLayer< Architecture_t >, TMVA::DNN::TReshapeLayer< Architecture_t >, TMVA::DNN::RNN::TBasicGRULayer< Architecture_t >, TMVA::DNN::RNN::TBasicLSTMLayer< Architecture_t >, and TMVA::DNN::RNN::TBasicRNNLayer< Architecture_t >. ◆ Backward(). template<typename Architecture_t > . virtual void TMVA::DNN::VGeneralLayer< Architecture_t >::Backward ; (; Tensor_t & ; gradients_backward, . const Tensor_t & ; activations_backward . ). pure virtual . Backpropagates the error. ; Must only be called directly at the corresponding call to Forward(...). ; Implemented in TMVA::DNN::TBatchNormLayer< Architecture_t >, TMVA::DNN::CNN::TConvLayer< Architecture_t >, TMVA::DNN::CNN::TMaxPoolLayer< Architecture_t >, TMVA::DNN::TDenseLayer< Architecture_t >, TMVA::DNN::TReshapeLayer< Architecture_t >, TMVA::DNN::RNN::TBasicGRULayer< Architecture_t >, TMVA::DNN::RNN::TBasicLSTMLayer< Architecture_t >, and TMVA::DNN::RNN::TBasicRNNLayer< Architecture_t >. ◆ CopyBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::CopyBiases ; (; const std::vector< Matrix_t > & ; otherBiases). Copies the biases provided as an input. ; Definition at line 468 of file GeneralLayer.h. ◆ CopyParameters(). template<typename Architecture_t > . template<typename Arch > . void TMVA::DNN::VGeneralLayer< Architecture_t >::CopyParameters ; (; const VGeneralLayer< Arch > & ; layer). Copy all trainable weight and biases from another equivalent laye",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:512,Modifiability,layers,layers,512,". ROOT: TMVA::DNN::VGeneralLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Types |; List of all members ; TMVA::DNN::VGeneralLayer< Architecture_t > Class Template Referenceabstract. ; template<typename Architecture_t>; class TMVA::DNN::VGeneralLayer< Architecture_t >Generic General Layer class. ; This class represents the general class for all layers in the Deep Learning Module. ; Definition at line 51 of file GeneralLayer.h. Public Member Functions;  VGeneralLayer (const VGeneralLayer &);  Copy Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, size_t WeightsNRows, size_t WeightsNCols, size_t BiasesNSlices, size_t BiasesNRows, size_t BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, std::vector< size_t > WeightsNRows, std::vector< size_t > WeightsNCols, size_t BiasesNSlices, std::vector< size_t > BiasesNRows, std::vector< size_t > BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  General Constructor with different weights dimension. ;  ;  VGeneralLayer (VGeneralLayer< Architecture_t > *layer);  Copy the layer provided as a pointer. ;  ; virtual ~VGeneralLayer ();  Virtual Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent)=0;  Writes the information and the weights about the layer in an XML node. ;  ; virtual void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward)=0;  Backpropagates the error. ;  ; void CopyBiases (const std::vector< Matrix_t > &otherBiases);  Copies the biase",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:23515,Modifiability,layers,layers,23515,>::ResetTraining ; (; ). inlinevirtual . Reset some training flags after a loop on all batches Some layer (e.g. ; batchnormalization) might need to implement the function in case some operations are needed after looping an all batches . Reimplemented in TMVA::DNN::TBatchNormLayer< Architecture_t >.; Definition at line 121 of file GeneralLayer.h. ◆ SetBatchSize(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetBatchSize ; (; size_t ; batchSize). inline . Setters. ; Definition at line 217 of file GeneralLayer.h. ◆ SetDepth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetDepth ; (; size_t ; depth). inline . Definition at line 221 of file GeneralLayer.h. ◆ SetDropoutProbability(). template<typename Architecture_t > . virtual void TMVA::DNN::VGeneralLayer< Architecture_t >::SetDropoutProbability ; (; Scalar_t ; ). inlinevirtual . Set Dropout probability. ; Reimplemented for layers supporting droput ; Reimplemented in TMVA::DNN::TDenseLayer< Architecture_t >.; Definition at line 160 of file GeneralLayer.h. ◆ SetExtraLayerParameters(). template<typename Architecture_t > . virtual void TMVA::DNN::VGeneralLayer< Architecture_t >::SetExtraLayerParameters ; (; const std::vector< Matrix_t > & ; ). inlinevirtual . Reimplemented in TMVA::DNN::TBatchNormLayer< Architecture_t >.; Definition at line 212 of file GeneralLayer.h. ◆ SetHeight(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetHeight ; (; size_t ; height). inline . Definition at line 222 of file GeneralLayer.h. ◆ SetInputDepth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputDepth ; (; size_t ; inputDepth). inline . Definition at line 218 of file GeneralLayer.h. ◆ SetInputHeight(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputHeight ; (; size_t ; inputHeight). inline . Definition at line 219 of file G,MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5145,Usability,learn,learningRate,5145,"x_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; virtual void Initialize ();  Initialize the weights and biases according to the given initialization method. ;  ; bool IsTraining () const;  ; virtual void Print () const =0;  Prints the info about the layer. ;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ReadWeightsFromXML (void *parent)=0;  Read the information and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5203,Usability,learn,learning,5203,"x_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; virtual void Initialize ();  Initialize the weights and biases according to the given initialization method. ;  ; bool IsTraining () const;  ; virtual void Print () const =0;  Prints the info about the layer. ;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ReadWeightsFromXML (void *parent)=0;  Read the information and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5303,Usability,learn,learningRate,5303,"nts the info about the layer. ;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ReadWeightsFromXML (void *parent)=0;  Read the information and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for trainin",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5367,Usability,learn,learning,5367,"nts the info about the layer. ;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ReadWeightsFromXML (void *parent)=0;  Read the information and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for trainin",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5474,Usability,learn,learningRate,5474,"on and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of th",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5556,Usability,learn,learning,5556,"on and the weights about the layer from XML node. ;  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of th",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5667,Usability,learn,learningRate,5667,"chSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5751,Usability,learn,learning,5751,"chSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5854,Usability,learn,learningRate,5854,"::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth of the previous layer or input. ;  ; size_t fInputHeight;  The height of the previous layer or input. ;  ; size_t fInputWidth;  The width of the previous layer or input. ;  ; bool f",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5919,Usability,learn,learning,5919,"::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth of the previous layer or input. ;  ; size_t fInputHeight;  The height of the previous layer or input. ;  ; size_t fInputWidth;  The width of the previous layer or input. ;  ; bool f",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:25278,Usability,learn,learningRate,25278,"hitecture_t >::SetInputDepth ; (; size_t ; inputDepth). inline . Definition at line 218 of file GeneralLayer.h. ◆ SetInputHeight(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputHeight ; (; size_t ; inputHeight). inline . Definition at line 219 of file GeneralLayer.h. ◆ SetInputWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputWidth ; (; size_t ; inputWidth). inline . Definition at line 220 of file GeneralLayer.h. ◆ SetIsTraining(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetIsTraining ; (; bool ; isTraining). inline . Definition at line 224 of file GeneralLayer.h. ◆ SetWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; w",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:25335,Usability,learn,learning,25335," at line 218 of file GeneralLayer.h. ◆ SetInputHeight(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputHeight ; (; size_t ; inputHeight). inline . Definition at line 219 of file GeneralLayer.h. ◆ SetInputWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputWidth ; (; size_t ; inputWidth). inline . Definition at line 220 of file GeneralLayer.h. ◆ SetIsTraining(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetIsTraining ; (; bool ; isTraining). inline . Definition at line 224 of file GeneralLayer.h. ◆ SetWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gra",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:25589,Usability,learn,learningRate,25589,"te<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetInputWidth ; (; size_t ; inputWidth). inline . Definition at line 220 of file GeneralLayer.h. ◆ SetIsTraining(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetIsTraining ; (; bool ; isTraining). inline . Definition at line 224 of file GeneralLayer.h. ◆ SetWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:25655,Usability,learn,learning,25655,"neralLayer< Architecture_t >::SetInputWidth ; (; size_t ; inputWidth). inline . Definition at line 220 of file GeneralLayer.h. ◆ SetIsTraining(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetIsTraining ; (; bool ; isTraining). inline . Definition at line 224 of file GeneralLayer.h. ◆ SetWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:25923,Usability,learn,learningRate,25923,"nition at line 224 of file GeneralLayer.h. ◆ SetWidth(). template<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; na",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26007,Usability,learn,learning,26007,"mplate<typename Architecture_t > . void TMVA::DNN::VGeneralLayer< Architecture_t >::SetWidth ; (; size_t ; width). inline . Definition at line 223 of file GeneralLayer.h. ◆ Update(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::Update ; (; const Scalar_t ; learningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26281,Usability,learn,learningRate,26281,"earningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26367,Usability,learn,learning,26367,"ning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file GeneralLayer.h. Member Data Documentation. ◆ fActivationGradi",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26625,Usability,learn,learningRate,26625,"es, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file GeneralLayer.h. Member Data Documentation. ◆ fActivationGradients. template<typename Architecture_t > . Tensor_t TMVA::DNN::VGeneralLayer< Architecture_t >::fActivationGradients. protected . Gradients w.r.t. the activations of this layer. ; Definition at line 78 of file GeneralLayer.h. ◆ fBatchSize. template<typename Architecture_t > . size_t",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26692,Usability,learn,learning,26692,"finition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file GeneralLayer.h. Member Data Documentation. ◆ fActivationGradients. template<typename Architecture_t > . Tensor_t TMVA::DNN::VGeneralLayer< Architecture_t >::fActivationGradients. protected . Gradients w.r.t. the activations of this layer. ; Definition at line 78 of file GeneralLayer.h. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::VGeneralLayer< Architecture_t >::fBatchS",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:694,Performance,optimiz,optimizers,694,". ROOT: TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Referenceabstract. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >Generic Optimizer class. ; This class represents the general class for all optimizers in the Deep Learning Module. ; Definition at line 45 of file Optimizer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learni",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:1384,Performance,optimiz,optimization,1384,"Net_t > Class Template Referenceabstract. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >Generic Optimizer class. ; This class represents the general class for all optimizers in the Deep Learning Module. ; Definition at line 45 of file Optimizer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Optimizer.h>. Inheritance diagram for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:5669,Performance,optimiz,optimization,5669,"Optimizer< Architecture_t, Layer_t, DeepNet_t >::GetLearningRate ; (; ); const. inline . Getters. ; Definition at line 77 of file Optimizer.h. ◆ IncrementGlobalStep(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::IncrementGlobalStep ; (; ). inline . Increments the global step. ; Definition at line 74 of file Optimizer.h. ◆ SetLearningRate(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::SetLearningRate ; (; size_t ; learningRate). inline . Setters. ; Definition at line 86 of file Optimizer.h. ◆ Step(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . auto TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Step. Performs one step of optimization. ; Definition at line 101 of file Optimizer.h. ◆ UpdateBiases(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::UpdateBiases ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; biases, . const std::vector< Matrix_t > & ; biasGradients . ). protectedpure virtual . Update the biases, given the current bias gradients. ; Implemented in TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >, and TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >. ◆ UpdateWeights(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual void TMVA::D",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:950,Usability,learn,learningRate,950,". ROOT: TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Referenceabstract. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >Generic Optimizer class. ; This class represents the general class for all optimizers in the Deep Learning Module. ; Definition at line 45 of file Optimizer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learni",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:1318,Usability,learn,learningRate,1318,"rs ; TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Referenceabstract. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >Generic Optimizer class. ; This class represents the general class for all optimizers in the Deep Learning Module. ; Definition at line 45 of file Optimizer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Optimizer.h>. Inheritance diagram for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Archi",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:1995,Usability,learn,learning,1995,"ctor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Optimizer.h>. Inheritance diagram for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Optimizer.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Optimizer.h. Constructor & Destructor Documentation. ◆ VOptimizer(). template<typename Architecture_t , typ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:3121,Usability,learn,learningRate,3121,"m for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Optimizer.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Optimizer.h. Constructor & Destructor Documentation. ◆ VOptimizer(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::VOptimizer ; (; Scalar_t ; learningRate, . DeepNet_t & ; deepNet . ). Constructor. ; Definition at line 94 of file Optimizer.h. ◆ ~VOptimizer(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::~VOptimizer ; (; ). virtualdefault . Virtual Destructor. . Member Function Documentation. ◆ GetGlobalStep(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . size_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::GetGlobalStep ; (; ); const. inline . Definition at line 81 of file Optimizer.h. ◆ GetLayerAt(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Layer_t * TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Ge",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:5411,Usability,learn,learningRate,5411,"< Architecture_t, Layer_t, DeepNet_t >::GetLayers ; (; ). inline . Definition at line 82 of file Optimizer.h. ◆ GetLearningRate(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::GetLearningRate ; (; ); const. inline . Getters. ; Definition at line 77 of file Optimizer.h. ◆ IncrementGlobalStep(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::IncrementGlobalStep ; (; ). inline . Increments the global step. ; Definition at line 74 of file Optimizer.h. ◆ SetLearningRate(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::SetLearningRate ; (; size_t ; learningRate). inline . Setters. ; Definition at line 86 of file Optimizer.h. ◆ Step(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . auto TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Step. Performs one step of optimization. ; Definition at line 101 of file Optimizer.h. ◆ UpdateBiases(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::UpdateBiases ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; biases, . const std::vector< Matrix_t > & ; biasGradients . ). protectedpure virtual . Update the biases, given the current bias gradients. ; Implemented in TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >, TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:8201,Usability,learn,learning,8201,":TSGD< Architecture_t, Layer_t, DeepNet_t >. ◆ UpdateWeights(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::UpdateWeights ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; weights, . const std::vector< Matrix_t > & ; weightGradients . ). protectedpure virtual . Update the weights, given the current weight gradients. ; Implemented in TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >, and TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >. Member Data Documentation. ◆ fDeepNet. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . DeepNet_t& TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::fDeepNet. protected . The reference to the deep net. ; Definition at line 53 of file Optimizer.h. ◆ fGlobalStep. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . size_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::fGlobalStep. protected . The current global step count during training. ; Definition at line 52 of file Optimizer.h. ◆ fLearningRate. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::fLearningRate. protected . The learning rate used for training. ; Definition at line 51 of file Optimizer.h. tmva/tmva/inc/TMVA/DNN/Optimizer.h. TMVADNNVOptimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html
https://root.cern/doc/master/classTMVA_1_1DTNodeTrainingInfo.html:516,Modifiability,variab,variable,516,". ROOT: TMVA::DTNodeTrainingInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::DTNodeTrainingInfo Class Reference. . Definition at line 51 of file DecisionTreeNode.h. Public Member Functions;  DTNodeTrainingInfo ();  ;  DTNodeTrainingInfo (const DTNodeTrainingInfo &n);  . Public Attributes; Double_t fAlpha;  critical alpha for this node ;  ; Double_t fCC;  debug variable for cost complexity pruning .. ;  ; Double_t fG;  minimum alpha in subtree rooted at this node ;  ; Double_t fNB;  sum of weights of background events from the pruning sample in this node ;  ; Float_t fNBkgEvents;  sum of weights of backgr event in the node ;  ; Float_t fNBkgEvents_unboosted;  sum of backgr event in the node ;  ; Float_t fNBkgEvents_unweighted;  sum of backgr event in the node ;  ; Float_t fNEvents;  number of events in that entered the node (during training) ;  ; Float_t fNEvents_unboosted;  number of events in that entered the node (during training) ;  ; Float_t fNEvents_unweighted;  number of events in that entered the node (during training) ;  ; Double_t fNodeR;  node resubstitution estimate, R(t) ;  ; Double_t fNS;  ditto for the signal events ;  ; Float_t fNSigEvents;  sum of weights of signal event in the node ;  ; Float_t fNSigEvents_unboosted;  sum of signal event in the node ;  ; Float_t fNSigEvents_unweighted;  sum of signal event in the node ;  ; Int_t fNTerminal;  number of terminal nodes in subtree rooted at this node ;  ; std::vector< Float_t > fSampleMax;  the maxima for each ivar of the sample on the node during training ;  ; std::vector< Float_t > fSampleMin;  the minima for each ivar of the sample on the node during training ;  ; Float_t fSeparationGain;  measure of ""purity"", separation, or information gained BY this nodes selection ;  ; Float_t fSeparationIndex;  measure of ""purity"" (separation between S and B) AT t",MatchSource.WIKI,doc/master/classTMVA_1_1DTNodeTrainingInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DTNodeTrainingInfo.html
https://root.cern/doc/master/classTMVA_1_1DTNodeTrainingInfo.html:2877,Modifiability,variab,variable,2877,"BY this nodes selection ;  ; Float_t fSeparationIndex;  measure of ""purity"" (separation between S and B) AT this node ;  ; Double_t fSubTreeR;  R(T) = Sum(R(t) : t in ~T) ;  ; Float_t fSumTarget;  sum of weight*target used for the calculation of the variance (regression) ;  ; Float_t fSumTarget2;  sum of weight*target^2 used for the calculation of the variance (regression) ;  . #include <TMVA/DecisionTreeNode.h>; Constructor & Destructor Documentation. ◆ DTNodeTrainingInfo() [1/2]. TMVA::DTNodeTrainingInfo::DTNodeTrainingInfo ; (; ). inline . Definition at line 54 of file DecisionTreeNode.h. ◆ DTNodeTrainingInfo() [2/2]. TMVA::DTNodeTrainingInfo::DTNodeTrainingInfo ; (; const DTNodeTrainingInfo & ; n). inline . Definition at line 96 of file DecisionTreeNode.h. Member Data Documentation. ◆ fAlpha. Double_t TMVA::DTNodeTrainingInfo::fAlpha. critical alpha for this node ; Definition at line 74 of file DecisionTreeNode.h. ◆ fCC. Double_t TMVA::DTNodeTrainingInfo::fCC. debug variable for cost complexity pruning .. ; Definition at line 81 of file DecisionTreeNode.h. ◆ fG. Double_t TMVA::DTNodeTrainingInfo::fG. minimum alpha in subtree rooted at this node ; Definition at line 75 of file DecisionTreeNode.h. ◆ fNB. Double_t TMVA::DTNodeTrainingInfo::fNB. sum of weights of background events from the pruning sample in this node ; Definition at line 77 of file DecisionTreeNode.h. ◆ fNBkgEvents. Float_t TMVA::DTNodeTrainingInfo::fNBkgEvents. sum of weights of backgr event in the node ; Definition at line 84 of file DecisionTreeNode.h. ◆ fNBkgEvents_unboosted. Float_t TMVA::DTNodeTrainingInfo::fNBkgEvents_unboosted. sum of backgr event in the node ; Definition at line 90 of file DecisionTreeNode.h. ◆ fNBkgEvents_unweighted. Float_t TMVA::DTNodeTrainingInfo::fNBkgEvents_unweighted. sum of backgr event in the node ; Definition at line 87 of file DecisionTreeNode.h. ◆ fNEvents. Float_t TMVA::DTNodeTrainingInfo::fNEvents. number of events in that entered the node (during training) ; D",MatchSource.WIKI,doc/master/classTMVA_1_1DTNodeTrainingInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DTNodeTrainingInfo.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:1645,Availability,avail,available,1645,"ions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writable file. ;  ; void SetModelPersistence (Bool_t status=kTRUE);  Method enable model persistence, then algorithms model is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:7354,Availability,error,error,7354,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:7443,Availability,error,error,7443,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:7598,Availability,error,error,7598,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:7895,Availability,error,error,7895,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:11979,Availability,error,error,11979,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constex",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:21897,Availability,avail,available,21897,"ion at line 107 of file Envelope.cxx. ◆ HasMethod(). Bool_t TMVA::Envelope::HasMethod ; (; TString ; methodname, . TString ; methodtitle . ). function to check methods booked ; Parameters. methodnameMethod's name. ; methodtitletitle associated to the method. . Returnstrue if the method was booked. ; Definition at line 220 of file Envelope.cxx. ◆ IsA(). virtual TClass * TMVA::Envelope::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::Experimental::Classification, TMVA::CrossValidation, TMVA::HyperParameterOptimisation, and TMVA::VariableImportance.; Definition at line 123 of file Envelope.h. ◆ IsModelPersistence(). Bool_t TMVA::Envelope::IsModelPersistence ; (; ). Method to see if the algorithm model is saved in xml or serialized files. ; ReturnsBoolean with the status. ; Definition at line 136 of file Envelope.cxx. ◆ IsSilentFile(). Bool_t Envelope::IsSilentFile ; (; ). Method to see if a file is available to save results. ; ReturnsBoolean with the status. ; Definition at line 71 of file Envelope.cxx. ◆ IsVerbose(). Bool_t Envelope::IsVerbose ; (; ). Method to see if the algorithm should print extra information. ; ReturnsBoolean with the status. ; Definition at line 93 of file Envelope.cxx. ◆ ParseOptions(). void TMVA::Envelope::ParseOptions ; (; ). virtual . Method to parse the internal option string. ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::CrossValidation.; Definition at line 182 of file Envelope.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Envelope::RootBaseDir ; (; ). inlineprotected . Utility method to get base dir directory from current file. ; ReturnsTDirectory* pointer. ; Definition at line 119 of file Envelope.h. ◆ SetDataLoader(). void Envelope::SetDataLoader ; (; DataLoader * ; dataloader). Method to set the pointer to TMVA::DataLoader object. ; Parameters. dataloaderpointer to TMVA::DataLoader object. . Definition at line 126 of file Envelope.c",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:7360,Integrability,message,message,7360,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:7901,Integrability,message,message,7901,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:8891,Integrability,message,message,8891,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:11985,Integrability,message,message,11985,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constex",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:12358,Integrability,message,message,12358," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:16039,Integrability,message,message,16039," options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:.",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:2459,Modifiability,inherit,inherited,2459,");  Method enable print extra information in the algorithms. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:4157,Modifiability,inherit,inherited,4157,"_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:5897,Modifiability,inherit,inherited,5897,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:6990,Modifiability,inherit,inheritance,6990,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:8989,Modifiability,inherit,inherits,8989,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:9106,Modifiability,inherit,inherits,9106,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:12859,Modifiability,inherit,inherited,12859," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & Ge",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:13081,Modifiability,inherit,inherited,13081," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & Ge",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:13291,Modifiability,inherit,inherited,13291," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & Ge",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:14732,Modifiability,inherit,inherited,14732,"ds differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from T",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:15139,Modifiability,inherit,inherited,15139,"ds differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from T",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:15980,Modifiability,inherit,inherited,15980," options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:.",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:16081,Modifiability,inherit,inherited,16081," options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:.",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:16185,Modifiability,inherit,inherited,16185,"const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Envelope(). Envelope::Envelope ; (; const TString & ; name, . DataLoader * ; dataloader = nullptr, . TFile * ; file = nullptr, . const TString ;",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:16826,Modifiability,inherit,inherited,16826,"to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Envelope(). Envelope::Envelope ; (; const TString & ; name, . DataLoader * ; dataloader = nullptr, . TFile * ; file = nullptr, . const TString ; options = """" . ). protected . Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; m",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:810,Performance,perform,perform,810,". ROOT: TMVA::Envelope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Envelope Class ReferenceabstractTMVA. ; Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. ; SVM etc.. and set a TMVA::DataLoader object to run your code in the overloaded method Evaluate.; Base class for all machine learning algorithms ; Definition at line 43 of file Envelope.h. Public Member Functions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the po",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:972,Performance,perform,perform,972,". ROOT: TMVA::Envelope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Envelope Class ReferenceabstractTMVA. ; Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. ; SVM etc.. and set a TMVA::DataLoader object to run your code in the overloaded method Evaluate.; Base class for all machine learning algorithms ; Definition at line 43 of file Envelope.h. Public Member Functions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the po",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:17971,Performance,perform,perform,17971,"elope:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Envelope(). Envelope::Envelope ; (; const TString & ; name, . DataLoader * ; dataloader = nullptr, . TFile * ; file = nullptr, . const TString ; options = """" . ). protected . Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; methodName, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodNameString with the name of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 163 of file Envelope.cxx. ◆ BookMethod() [2/2]. void TMVA::Envelope::BookMethod ; (; Types::EMVA ; method, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodenum TMVA::Types::EMVA with the type of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 152 of file Envelope.cxx. ◆ Class(). static TClass * TMVA::Envelope::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Envelope::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Envelope::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:18388,Performance,perform,perform,18388,"ructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; methodName, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodNameString with the name of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 163 of file Envelope.cxx. ◆ BookMethod() [2/2]. void TMVA::Envelope::BookMethod ; (; Types::EMVA ; method, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodenum TMVA::Types::EMVA with the type of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 152 of file Envelope.cxx. ◆ Class(). static TClass * TMVA::Envelope::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Envelope::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Envelope::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 123 of file Envelope.h. ◆ DeclFileName(). static const char * TMVA::Envelope::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 123 of file Envelope.h. ◆ Evaluate(). virtual void TMVA::Envelope::Evaluate ; (; ). pure virtual . Virtual method to be implemented with your algorithm. ; Implemented in TMVA::Experimental:",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:5025,Security,hash,hash,5025,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:15852,Testability,test,test,15852," options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:.",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:16047,Testability,log,logger,16047," options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:.",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:25594,Testability,test,test,25594,ypes::EAnalysisType ; fAnalysisType . ). protected . method to save Train/Test information into the output file. ; Parameters. fDataSetInfoTMVA::DataSetInfo object reference ; fAnalysisTypeTypes::kMulticlass and Types::kRegression . Definition at line 235 of file Envelope.cxx. Member Data Documentation. ◆ fDataLoader. std::shared_ptr<DataLoader> TMVA::Envelope::fDataLoader. protected . ! data ; Definition at line 47 of file Envelope.h. ◆ fFile. std::shared_ptr<TFile> TMVA::Envelope::fFile. protected . ! file to save the results ; Definition at line 48 of file Envelope.h. ◆ fJobs. UInt_t TMVA::Envelope::fJobs. protected . ! number of jobs to run some high level algorithm in parallel ; Definition at line 56 of file Envelope.h. ◆ fMethods. std::vector<OptionMap> TMVA::Envelope::fMethods. protected . ! Booked method information ; Definition at line 46 of file Envelope.h. ◆ fModelPersistence. Bool_t TMVA::Envelope::fModelPersistence. protected . ! flag to save the trained model ; Definition at line 49 of file Envelope.h. ◆ fSilentFile. Bool_t TMVA::Envelope::fSilentFile. protected . ! if true dont produce file output ; Definition at line 52 of file Envelope.h. ◆ fTimer. TStopwatch TMVA::Envelope::fTimer. protected . ! timer to measure the time. ; Definition at line 57 of file Envelope.h. ◆ fTransformations. TString TMVA::Envelope::fTransformations. protected . ! List of transformations to test ; Definition at line 51 of file Envelope.h. ◆ fVerbose. Bool_t TMVA::Envelope::fVerbose. protected . ! flag for extra information ; Definition at line 50 of file Envelope.h. ◆ fWorkers. TProcPool TMVA::Envelope::fWorkers. protected . ! procpool object ; Definition at line 54 of file Envelope.h. Libraries for TMVA::Envelope:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Envelope.h; tmva/tmva/src/Envelope.cxx. TMVAEnvelope. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:546,Usability,learn,learning,546,". ROOT: TMVA::Envelope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Envelope Class ReferenceabstractTMVA. ; Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. ; SVM etc.. and set a TMVA::DataLoader object to run your code in the overloaded method Evaluate.; Base class for all machine learning algorithms ; Definition at line 43 of file Envelope.h. Public Member Functions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the po",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:791,Usability,learn,learning,791,". ROOT: TMVA::Envelope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Envelope Class ReferenceabstractTMVA. ; Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. ; SVM etc.. and set a TMVA::DataLoader object to run your code in the overloaded method Evaluate.; Base class for all machine learning algorithms ; Definition at line 43 of file Envelope.h. Public Member Functions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the po",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:953,Usability,learn,learning,953,". ROOT: TMVA::Envelope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Envelope Class ReferenceabstractTMVA. ; Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. ; SVM etc.. and set a TMVA::DataLoader object to run your code in the overloaded method Evaluate.; Base class for all machine learning algorithms ; Definition at line 43 of file Envelope.h. Public Member Functions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the po",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:17952,Usability,learn,learning,17952,"elope:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Envelope(). Envelope::Envelope ; (; const TString & ; name, . DataLoader * ; dataloader = nullptr, . TFile * ; file = nullptr, . const TString ; options = """" . ). protected . Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; methodName, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodNameString with the name of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 163 of file Envelope.cxx. ◆ BookMethod() [2/2]. void TMVA::Envelope::BookMethod ; (; Types::EMVA ; method, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodenum TMVA::Types::EMVA with the type of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 152 of file Envelope.cxx. ◆ Class(). static TClass * TMVA::Envelope::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Envelope::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Envelope::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Envelope.html:18369,Usability,learn,learning,18369,"ructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; methodName, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodNameString with the name of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 163 of file Envelope.cxx. ◆ BookMethod() [2/2]. void TMVA::Envelope::BookMethod ; (; Types::EMVA ; method, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodenum TMVA::Types::EMVA with the type of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 152 of file Envelope.cxx. ◆ Class(). static TClass * TMVA::Envelope::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Envelope::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Envelope::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 123 of file Envelope.h. ◆ DeclFileName(). static const char * TMVA::Envelope::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 123 of file Envelope.h. ◆ Evaluate(). virtual void TMVA::Envelope::Evaluate ; (; ). pure virtual . Virtual method to be implemented with your algorithm. ; Implemented in TMVA::Experimental:",MatchSource.WIKI,doc/master/classTMVA_1_1Envelope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html
https://root.cern/doc/master/classTMVA_1_1Event.html:5029,Availability,error,error,5029,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:5118,Availability,error,error,5118,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:5273,Availability,error,error,5273,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:5570,Availability,error,error,5570,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:10013,Availability,error,error,10013,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ClearDynamicVariables ();  ; static const char * DeclFileName ();  ; static void SetIgnoreNegWeightsInTraining (Bool_t);  when this static function is called, it sets the flag ",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:2128,Integrability,depend,depending,2128,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:5035,Integrability,message,message,5035,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:5576,Integrability,message,message,5576,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:6778,Integrability,message,message,6778,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:10019,Integrability,message,message,10019,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ClearDynamicVariables ();  ; static const char * DeclFileName ();  ; static void SetIgnoreNegWeightsInTraining (Bool_t);  when this static function is called, it sets the flag ",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:10392,Integrability,message,message,10392," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ClearDynamicVariables ();  ; static const char * DeclFileName ();  ; static void SetIgnoreNegWeightsInTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ; static void SetIsTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:18841,Integrability,depend,depending,18841,"nt_t ; itgt); const. inline . Definition at line 102 of file Event.h. ◆ GetTargets() [1/2]. std::vector< Float_t > & TMVA::Event::GetTargets ; (; ). inline . Definition at line 103 of file Event.h. ◆ GetTargets() [2/2]. const std::vector< Float_t > & TMVA::Event::GetTargets ; (; ); const. inline . Definition at line 104 of file Event.h. ◆ GetValue(). Float_t TMVA::Event::GetValue ; (; UInt_t ; ivar); const. return value of i'th variable ; Definition at line 236 of file Event.cxx. ◆ GetValueFast(). Float_t TMVA::Event::GetValueFast ; (; UInt_t ; ivar); const. inline . Definition at line 93 of file Event.h. ◆ GetValues() [1/2]. std::vector< Float_t > & TMVA::Event::GetValues ; (; ). inline . Definition at line 94 of file Event.h. ◆ GetValues() [2/2]. const std::vector< Float_t > & TMVA::Event::GetValues ; (; ); const. return value vector ; Definition at line 278 of file Event.cxx. ◆ GetWeight(). Double_t TMVA::Event::GetWeight ; (; ); const. return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ; If it is set AND it is used for training, then negative event weights are set to zero ! NOTE! For events used in Testing, the ORIGINAL possibly negative event weight is used no matter what ; Definition at line 389 of file Event.cxx. ◆ IsA(). virtual TClass * TMVA::Event::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 153 of file Event.h. ◆ IsDynamic(). Bool_t TMVA::Event::IsDynamic ; (; ); const. inline . Definition at line 80 of file Event.h. ◆ operator=(). Event & TMVA::Event::operator= ; (; const Event & ; ). default . ◆ Print() [1/2]. void TObject::Print ; (; Option_t * ; option = """"); const. virtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 159 of file TObject.cxx. ◆ Print() [2/2]. void TMVA::Event::Print ; (; std::ostream & ; o); const. print method ; Definition at line 359 of f",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:1173,Modifiability,variab,variable,1173,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:1462,Modifiability,variab,variables,1462,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:1894,Modifiability,variab,variable,1894,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:2941,Modifiability,variab,variable,2941,"loat_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectator (UInt_t ivar, Float_t value);  set spectator value (dimension ivar) to value ;  ; void SetSpectatorTypes (const std::vector< char > &types);  ; void SetTarget (UInt_t itgt, Float_t value);  set the target value (dimension itgt) to value ;  ; void SetVal (UInt_t ivar, Float_t val);  set variable ivar to val ;  ; void SetVariableArrangement (std::vector< UInt_t > *const m) const;  set the variable arrangement ;  ; void SetWeight (Double_t w);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHas",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:3044,Modifiability,variab,variable,3044,"loat_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectator (UInt_t ivar, Float_t value);  set spectator value (dimension ivar) to value ;  ; void SetSpectatorTypes (const std::vector< char > &types);  ; void SetTarget (UInt_t itgt, Float_t value);  set the target value (dimension itgt) to value ;  ; void SetVal (UInt_t ivar, Float_t val);  set variable ivar to val ;  ; void SetVariableArrangement (std::vector< UInt_t > *const m) const;  set the variable arrangement ;  ; void SetWeight (Double_t w);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHas",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:3268,Modifiability,inherit,inherited,3268,"ic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectator (UInt_t ivar, Float_t value);  set spectator value (dimension ivar) to value ;  ; void SetSpectatorTypes (const std::vector< char > &types);  ; void SetTarget (UInt_t itgt, Float_t value);  set the target value (dimension itgt) to value ;  ; void SetVal (UInt_t ivar, Float_t val);  set variable ivar to val ;  ; void SetVariableArrangement (std::vector< UInt_t > *const m) const;  set the variable arrangement ;  ; void SetWeight (Double_t w);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:4665,Modifiability,inherit,inheritance,4665,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:6876,Modifiability,inherit,inherits,6876,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:6993,Modifiability,inherit,inherits,6993,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:11312,Modifiability,inherit,inherited,11312," Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ClearDynamicVariables ();  ; static const char * DeclFileName ();  ; static void SetIgnoreNegWeightsInTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ; static void SetIsTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Double_t fBoostWeight;  internal weight to be set by boosting algorithm ;  ; UInt_t fClass;  class number ;  ; Bool_t fDoNotBoost;  mark event as not to be boosted (used to compensate for events with negative event weights ;  ; Bool_t fDynamic;  is set when the dynamic values are taken ;  ; std::vector< Float_t > fSpectators;  ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< char > fSpectatorTypes;  type of the spectator variable (typically F or I). Used ony for dynamic events ;  ; std::vector< Float_t > fTargets;  target val",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:12158,Modifiability,variab,variables,12158,"ed in the training, or not. ;  ; static void SetIsTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Double_t fBoostWeight;  internal weight to be set by boosting algorithm ;  ; UInt_t fClass;  class number ;  ; Bool_t fDoNotBoost;  mark event as not to be boosted (used to compensate for events with negative event weights ;  ; Bool_t fDynamic;  is set when the dynamic values are taken ;  ; std::vector< Float_t > fSpectators;  ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< char > fSpectatorTypes;  type of the spectator variable (typically F or I). Used ony for dynamic events ;  ; std::vector< Float_t > fTargets;  target values for regression ;  ; std::vector< Float_t > fValues;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< Float_t * > * fValuesDynamic;  ! the event values ;  ; std::vector< Float_t > fValuesRearranged;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< UInt_t > fVariableArrangement;  needed for MethodCategories, where we can train on other than the main variables ;  ; Double_t fWeight;  event weight (product of global and individual weights) ;  . Static Private Attributes; static Bool_t fgIgnoreNegWeightsInTraining = kFALSE;  ; static Bool_t fgIsTraining = kF",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:12308,Modifiability,variab,variable,12308,"ed in the training, or not. ;  ; static void SetIsTraining (Bool_t);  when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Double_t fBoostWeight;  internal weight to be set by boosting algorithm ;  ; UInt_t fClass;  class number ;  ; Bool_t fDoNotBoost;  mark event as not to be boosted (used to compensate for events with negative event weights ;  ; Bool_t fDynamic;  is set when the dynamic values are taken ;  ; std::vector< Float_t > fSpectators;  ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< char > fSpectatorTypes;  type of the spectator variable (typically F or I). Used ony for dynamic events ;  ; std::vector< Float_t > fTargets;  target values for regression ;  ; std::vector< Float_t > fValues;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< Float_t * > * fValuesDynamic;  ! the event values ;  ; std::vector< Float_t > fValuesRearranged;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< UInt_t > fVariableArrangement;  needed for MethodCategories, where we can train on other than the main variables ;  ; Double_t fWeight;  event weight (product of global and individual weights) ;  . Static Private Attributes; static Bool_t fgIgnoreNegWeightsInTraining = kFALSE;  ; static Bool_t fgIsTraining = kF",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:12858,Modifiability,variab,variables,12858,"DtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; Double_t fBoostWeight;  internal weight to be set by boosting algorithm ;  ; UInt_t fClass;  class number ;  ; Bool_t fDoNotBoost;  mark event as not to be boosted (used to compensate for events with negative event weights ;  ; Bool_t fDynamic;  is set when the dynamic values are taken ;  ; std::vector< Float_t > fSpectators;  ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< char > fSpectatorTypes;  type of the spectator variable (typically F or I). Used ony for dynamic events ;  ; std::vector< Float_t > fTargets;  target values for regression ;  ; std::vector< Float_t > fValues;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< Float_t * > * fValuesDynamic;  ! the event values ;  ; std::vector< Float_t > fValuesRearranged;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< UInt_t > fVariableArrangement;  needed for MethodCategories, where we can train on other than the main variables ;  ; Double_t fWeight;  event weight (product of global and individual weights) ;  . Static Private Attributes; static Bool_t fgIgnoreNegWeightsInTraining = kFALSE;  ; static Bool_t fgIsTraining = kFALSE;  . Friends; std::ostream & operator<< (std::ostream &os, const Event &event);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , k",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:13198,Modifiability,inherit,inherited,13198," char > fSpectatorTypes;  type of the spectator variable (typically F or I). Used ony for dynamic events ;  ; std::vector< Float_t > fTargets;  target values for regression ;  ; std::vector< Float_t > fValues;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< Float_t * > * fValuesDynamic;  ! the event values ;  ; std::vector< Float_t > fValuesRearranged;  the event values ; mutable, to be able to copy the dynamic values in there ;  ; std::vector< UInt_t > fVariableArrangement;  needed for MethodCategories, where we can train on other than the main variables ;  ; Double_t fWeight;  event weight (product of global and individual weights) ;  . Static Private Attributes; static Bool_t fgIgnoreNegWeightsInTraining = kFALSE;  ; static Bool_t fgIsTraining = kFALSE;  . Friends; std::ostream & operator<< (std::ostream &os, const Event &event);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Event.h>. Inheritance diagram for TMVA::Event:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera i",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:13839,Modifiability,inherit,inherited,13839,"Static Private Attributes; static Bool_t fgIgnoreNegWeightsInTraining = kFALSE;  ; static Bool_t fgIsTraining = kFALSE;  . Friends; std::ostream & operator<< (std::ostream &os, const Event &event);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Event.h>. Inheritance diagram for TMVA::Event:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Event() [1/6]. TMVA::Event::Event ; (; ). copy constructor ; Definition at line 48 of file Event.cxx. ◆ Event() [2/6]. TMVA::Event::Event ; (; const Event & ; event). copy constructor ; Definition at line 146 of file Event.cxx. ◆ Event() [3/6]. TMVA::Event::Event ; (; const std::vector< Float_t > & ; values, . const std::vector< Float_t > & ; targetValues, . const std::vector< Float_t > & ; spectatorValues, . UInt_t ; theClass = 0, . Double_t ; weight = 1.0, . Double_t ; boostweight = 1.0 . ). explicit . constructor ; Definition at line 86 of file Event.cxx. ◆ Event() [4/6]. TMVA::Event::Event ; (; const std::vector< Float_t",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:13938,Modifiability,inherit,inherited,13938,"Static Private Attributes; static Bool_t fgIgnoreNegWeightsInTraining = kFALSE;  ; static Bool_t fgIsTraining = kFALSE;  . Friends; std::ostream & operator<< (std::ostream &os, const Event &event);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Event.h>. Inheritance diagram for TMVA::Event:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Event() [1/6]. TMVA::Event::Event ; (; ). copy constructor ; Definition at line 48 of file Event.cxx. ◆ Event() [2/6]. TMVA::Event::Event ; (; const Event & ; event). copy constructor ; Definition at line 146 of file Event.cxx. ◆ Event() [3/6]. TMVA::Event::Event ; (; const std::vector< Float_t > & ; values, . const std::vector< Float_t > & ; targetValues, . const std::vector< Float_t > & ; spectatorValues, . UInt_t ; theClass = 0, . Double_t ; weight = 1.0, . Double_t ; boostweight = 1.0 . ). explicit . constructor ; Definition at line 86 of file Event.cxx. ◆ Event() [4/6]. TMVA::Event::Event ; (; const std::vector< Float_t",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:16339,Modifiability,variab,variable,16339," Definition at line 108 of file Event.cxx. ◆ Event() [6/6]. TMVA::Event::Event ; (; const std::vector< Float_t * > *& ; evdyn, . UInt_t ; nvar . ). explicit . constructor for single events ; Definition at line 128 of file Event.cxx. ◆ ~Event(). TMVA::Event::~Event ; (; ). Event destructor. ; Definition at line 184 of file Event.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Event::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Event::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Event::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 153 of file Event.h. ◆ ClearDynamicVariables(). static void TMVA::Event::ClearDynamicVariables ; (; ). inlinestatic . Definition at line 122 of file Event.h. ◆ CopyVarValues(). void TMVA::Event::CopyVarValues ; (; const Event & ; other). copies only the variable values ; Definition at line 203 of file Event.cxx. ◆ DeclFileName(). static const char * TMVA::Event::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file Event.h. ◆ GetBoostWeight(). Double_t TMVA::Event::GetBoostWeight ; (; ); const. inline . Definition at line 85 of file Event.h. ◆ GetClass(). UInt_t TMVA::Event::GetClass ; (; ); const. inline . Definition at line 86 of file Event.h. ◆ GetNSpectators(). UInt_t TMVA::Event::GetNSpectators ; (; ); const. accessor to the number of spectators ; Definition at line 335 of file Event.cxx. ◆ GetNTargets(). UInt_t TMVA::Event::GetNTargets ; (; ); const. accessor to the number of targets ; Definition at line 327 of file Event.cxx. ◆ GetNVariables(). UInt_t TMVA::Event::GetNVariables ; (; ); const. accessor to the number of variables ; Definition at line 316 of file Event.cxx. ◆ GetOriginalWeight(). Double_t TMVA::Event::GetOriginalWeight ; (; ); const. inline . Definition at line ",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:17198,Modifiability,variab,variables,17198,tion at line 122 of file Event.h. ◆ CopyVarValues(). void TMVA::Event::CopyVarValues ; (; const Event & ; other). copies only the variable values ; Definition at line 203 of file Event.cxx. ◆ DeclFileName(). static const char * TMVA::Event::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file Event.h. ◆ GetBoostWeight(). Double_t TMVA::Event::GetBoostWeight ; (; ); const. inline . Definition at line 85 of file Event.h. ◆ GetClass(). UInt_t TMVA::Event::GetClass ; (; ); const. inline . Definition at line 86 of file Event.h. ◆ GetNSpectators(). UInt_t TMVA::Event::GetNSpectators ; (; ); const. accessor to the number of spectators ; Definition at line 335 of file Event.cxx. ◆ GetNTargets(). UInt_t TMVA::Event::GetNTargets ; (; ); const. accessor to the number of targets ; Definition at line 327 of file Event.cxx. ◆ GetNVariables(). UInt_t TMVA::Event::GetNVariables ; (; ); const. accessor to the number of variables ; Definition at line 316 of file Event.cxx. ◆ GetOriginalWeight(). Double_t TMVA::Event::GetOriginalWeight ; (; ); const. inline . Definition at line 84 of file Event.h. ◆ GetSpectator(). Float_t TMVA::Event::GetSpectator ; (; UInt_t ; ivar); const. return spectator content ; Definition at line 261 of file Event.cxx. ◆ GetSpectators() [1/2]. std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ). inline . Definition at line 107 of file Event.h. ◆ GetSpectators() [2/2]. const std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ); const. inline . Definition at line 108 of file Event.h. ◆ GetTarget(). Float_t TMVA::Event::GetTarget ; (; UInt_t ; itgt); const. inline . Definition at line 102 of file Event.h. ◆ GetTargets() [1/2]. std::vector< Float_t > & TMVA::Event::GetTargets ; (; ). inline . Definition at line 103 of file Event.h. ◆ GetTargets() [2/2]. const std::vector< Float_t > & TMVA::Event::GetTargets ; (; ); const. inline . Definition at line 104 of file Event.h. ◆ GetValu,MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:18293,Modifiability,variab,variable,18293,"alWeight ; (; ); const. inline . Definition at line 84 of file Event.h. ◆ GetSpectator(). Float_t TMVA::Event::GetSpectator ; (; UInt_t ; ivar); const. return spectator content ; Definition at line 261 of file Event.cxx. ◆ GetSpectators() [1/2]. std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ). inline . Definition at line 107 of file Event.h. ◆ GetSpectators() [2/2]. const std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ); const. inline . Definition at line 108 of file Event.h. ◆ GetTarget(). Float_t TMVA::Event::GetTarget ; (; UInt_t ; itgt); const. inline . Definition at line 102 of file Event.h. ◆ GetTargets() [1/2]. std::vector< Float_t > & TMVA::Event::GetTargets ; (; ). inline . Definition at line 103 of file Event.h. ◆ GetTargets() [2/2]. const std::vector< Float_t > & TMVA::Event::GetTargets ; (; ); const. inline . Definition at line 104 of file Event.h. ◆ GetValue(). Float_t TMVA::Event::GetValue ; (; UInt_t ; ivar); const. return value of i'th variable ; Definition at line 236 of file Event.cxx. ◆ GetValueFast(). Float_t TMVA::Event::GetValueFast ; (; UInt_t ; ivar); const. inline . Definition at line 93 of file Event.h. ◆ GetValues() [1/2]. std::vector< Float_t > & TMVA::Event::GetValues ; (; ). inline . Definition at line 94 of file Event.h. ◆ GetValues() [2/2]. const std::vector< Float_t > & TMVA::Event::GetValues ; (; ); const. return value vector ; Definition at line 278 of file Event.cxx. ◆ GetWeight(). Double_t TMVA::Event::GetWeight ; (; ); const. return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ; If it is set AND it is used for training, then negative event weights are set to zero ! NOTE! For events used in Testing, the ORIGINAL possibly negative event weight is used no matter what ; Definition at line 389 of file Event.cxx. ◆ IsA(). virtual TClass * TMVA::Event::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:21507,Modifiability,variab,variable,21507,"vents with negative event weight should be ignored in the training, or not. ; Definition at line 408 of file Event.cxx. ◆ SetIsTraining(). void TMVA::Event::SetIsTraining ; (; Bool_t ; b). static . when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ; Definition at line 399 of file Event.cxx. ◆ SetSpectator(). void TMVA::Event::SetSpectator ; (; UInt_t ; ivar, . Float_t ; value . ). set spectator value (dimension ivar) to value ; Definition at line 376 of file Event.cxx. ◆ SetSpectatorTypes(). void TMVA::Event::SetSpectatorTypes ; (; const std::vector< char > & ; types). inline . Definition at line 119 of file Event.h. ◆ SetTarget(). void TMVA::Event::SetTarget ; (; UInt_t ; itgt, . Float_t ; value . ). set the target value (dimension itgt) to value ; Definition at line 367 of file Event.cxx. ◆ SetVal(). void TMVA::Event::SetVal ; (; UInt_t ; ivar, . Float_t ; val . ). set variable ivar to val ; Definition at line 348 of file Event.cxx. ◆ SetVariableArrangement(). void TMVA::Event::SetVariableArrangement ; (; std::vector< UInt_t > *const ; m); const. set the variable arrangement ; Definition at line 191 of file Event.cxx. ◆ SetWeight(). void TMVA::Event::SetWeight ; (; Double_t ; w). inline . Definition at line 110 of file Event.h. ◆ Streamer(). virtual void TMVA::Event::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Event::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file Event.h. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const Event & ; event . ). friend . Member Data Documentation. ◆ fBoostWeight. Double_t TMVA::Event::fBoostWeight. mutableprivate . internal weight to be set by boosting algorithm ; Definition at line 148 of file Event.h. ◆ fClass. UInt_t TMVA::Event:",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:21696,Modifiability,variab,variable,21696,". static . when this static function is called, it sets the flag whether events with negative event weight should be ignored in the training, or not. ; Definition at line 399 of file Event.cxx. ◆ SetSpectator(). void TMVA::Event::SetSpectator ; (; UInt_t ; ivar, . Float_t ; value . ). set spectator value (dimension ivar) to value ; Definition at line 376 of file Event.cxx. ◆ SetSpectatorTypes(). void TMVA::Event::SetSpectatorTypes ; (; const std::vector< char > & ; types). inline . Definition at line 119 of file Event.h. ◆ SetTarget(). void TMVA::Event::SetTarget ; (; UInt_t ; itgt, . Float_t ; value . ). set the target value (dimension itgt) to value ; Definition at line 367 of file Event.cxx. ◆ SetVal(). void TMVA::Event::SetVal ; (; UInt_t ; ivar, . Float_t ; val . ). set variable ivar to val ; Definition at line 348 of file Event.cxx. ◆ SetVariableArrangement(). void TMVA::Event::SetVariableArrangement ; (; std::vector< UInt_t > *const ; m); const. set the variable arrangement ; Definition at line 191 of file Event.cxx. ◆ SetWeight(). void TMVA::Event::SetWeight ; (; Double_t ; w). inline . Definition at line 110 of file Event.h. ◆ Streamer(). virtual void TMVA::Event::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Event::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file Event.h. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const Event & ; event . ). friend . Member Data Documentation. ◆ fBoostWeight. Double_t TMVA::Event::fBoostWeight. mutableprivate . internal weight to be set by boosting algorithm ; Definition at line 148 of file Event.h. ◆ fClass. UInt_t TMVA::Event::fClass. private . class number ; Definition at line 146 of file Event.h. ◆ fDoNotBoost. Bool_t TMVA::Event::fDoNotBoost. mutableprivate . mark event as not to be boosted (used to compens",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:23294,Modifiability,variab,variables,23294,"BoostWeight. Double_t TMVA::Event::fBoostWeight. mutableprivate . internal weight to be set by boosting algorithm ; Definition at line 148 of file Event.h. ◆ fClass. UInt_t TMVA::Event::fClass. private . class number ; Definition at line 146 of file Event.h. ◆ fDoNotBoost. Bool_t TMVA::Event::fDoNotBoost. mutableprivate . mark event as not to be boosted (used to compensate for events with negative event weights ; Definition at line 150 of file Event.h. ◆ fDynamic. Bool_t TMVA::Event::fDynamic. private . is set when the dynamic values are taken ; Definition at line 149 of file Event.h. ◆ fgIgnoreNegWeightsInTraining. Bool_t TMVA::Event::fgIgnoreNegWeightsInTraining = kFALSE. staticprivate . Definition at line 134 of file Event.h. ◆ fgIsTraining. Bool_t TMVA::Event::fgIsTraining = kFALSE. staticprivate . Definition at line 133 of file Event.h. ◆ fSpectators. std::vector<Float_t> TMVA::Event::fSpectators. mutableprivate . ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ; Definition at line 142 of file Event.h. ◆ fSpectatorTypes. std::vector<char> TMVA::Event::fSpectatorTypes. private . type of the spectator variable (typically F or I). Used ony for dynamic events ; Definition at line 144 of file Event.h. ◆ fTargets. std::vector<Float_t> TMVA::Event::fTargets. private . target values for regression ; Definition at line 141 of file Event.h. ◆ fValues. std::vector<Float_t> TMVA::Event::fValues. mutableprivate . the event values ; mutable, to be able to copy the dynamic values in there ; Definition at line 137 of file Event.h. ◆ fValuesDynamic. std::vector<Float_t*>* TMVA::Event::fValuesDynamic. mutableprivate . ! the event values ; Definition at line 140 of file Event.h. ◆ fValuesRearranged. std::vector<Float_t> TMVA::Event::fValuesRearranged. mutableprivate . the event values ; mutable, to be able to copy the dynamic values in there ; Definition at line 139 of file Event.h. ◆ fVariableArrangement. std::vector<UInt_t> TMVA::",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:23520,Modifiability,variab,variable,23520," TMVA::Event::fClass. private . class number ; Definition at line 146 of file Event.h. ◆ fDoNotBoost. Bool_t TMVA::Event::fDoNotBoost. mutableprivate . mark event as not to be boosted (used to compensate for events with negative event weights ; Definition at line 150 of file Event.h. ◆ fDynamic. Bool_t TMVA::Event::fDynamic. private . is set when the dynamic values are taken ; Definition at line 149 of file Event.h. ◆ fgIgnoreNegWeightsInTraining. Bool_t TMVA::Event::fgIgnoreNegWeightsInTraining = kFALSE. staticprivate . Definition at line 134 of file Event.h. ◆ fgIsTraining. Bool_t TMVA::Event::fgIsTraining = kFALSE. staticprivate . Definition at line 133 of file Event.h. ◆ fSpectators. std::vector<Float_t> TMVA::Event::fSpectators. mutableprivate . ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ; Definition at line 142 of file Event.h. ◆ fSpectatorTypes. std::vector<char> TMVA::Event::fSpectatorTypes. private . type of the spectator variable (typically F or I). Used ony for dynamic events ; Definition at line 144 of file Event.h. ◆ fTargets. std::vector<Float_t> TMVA::Event::fTargets. private . target values for regression ; Definition at line 141 of file Event.h. ◆ fValues. std::vector<Float_t> TMVA::Event::fValues. mutableprivate . the event values ; mutable, to be able to copy the dynamic values in there ; Definition at line 137 of file Event.h. ◆ fValuesDynamic. std::vector<Float_t*>* TMVA::Event::fValuesDynamic. mutableprivate . ! the event values ; Definition at line 140 of file Event.h. ◆ fValuesRearranged. std::vector<Float_t> TMVA::Event::fValuesRearranged. mutableprivate . the event values ; mutable, to be able to copy the dynamic values in there ; Definition at line 139 of file Event.h. ◆ fVariableArrangement. std::vector<UInt_t> TMVA::Event::fVariableArrangement. mutableprivate . needed for MethodCategories, where we can train on other than the main variables ; Definition at line 143 of file Event.h. ◆ fW",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:24467,Modifiability,variab,variables,24467,"oreNegWeightsInTraining. Bool_t TMVA::Event::fgIgnoreNegWeightsInTraining = kFALSE. staticprivate . Definition at line 134 of file Event.h. ◆ fgIsTraining. Bool_t TMVA::Event::fgIsTraining = kFALSE. staticprivate . Definition at line 133 of file Event.h. ◆ fSpectators. std::vector<Float_t> TMVA::Event::fSpectators. mutableprivate . ""visiting"" variables not used in MVAs ; mutable, to be able to copy the dynamic values in there ; Definition at line 142 of file Event.h. ◆ fSpectatorTypes. std::vector<char> TMVA::Event::fSpectatorTypes. private . type of the spectator variable (typically F or I). Used ony for dynamic events ; Definition at line 144 of file Event.h. ◆ fTargets. std::vector<Float_t> TMVA::Event::fTargets. private . target values for regression ; Definition at line 141 of file Event.h. ◆ fValues. std::vector<Float_t> TMVA::Event::fValues. mutableprivate . the event values ; mutable, to be able to copy the dynamic values in there ; Definition at line 137 of file Event.h. ◆ fValuesDynamic. std::vector<Float_t*>* TMVA::Event::fValuesDynamic. mutableprivate . ! the event values ; Definition at line 140 of file Event.h. ◆ fValuesRearranged. std::vector<Float_t> TMVA::Event::fValuesRearranged. mutableprivate . the event values ; mutable, to be able to copy the dynamic values in there ; Definition at line 139 of file Event.h. ◆ fVariableArrangement. std::vector<UInt_t> TMVA::Event::fVariableArrangement. mutableprivate . needed for MethodCategories, where we can train on other than the main variables ; Definition at line 143 of file Event.h. ◆ fWeight. Double_t TMVA::Event::fWeight. private . event weight (product of global and individual weights) ; Definition at line 147 of file Event.h. Libraries for TMVA::Event:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Event.h; tmva/tmva/src/Event.cxx. TMVAEvent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:1293,Security,access,accessor,1293,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:1365,Security,access,accessor,1365,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:1436,Security,access,accessor,1436,"eight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const std::vector< Float_t > & GetValues () const;  return value vector ;  ; Double_t GetWeight () const;  return the event weight - depending on whether the flag IgnoreNegWeightsInTraining is or not. ;  ; virtual TClass * IsA () const;  ; Bool_t IsDynamic () const;  ; Event & operator= (const Event &)=default;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; void Print (std::ostream &o) const;  print method ;  ; void ScaleBoostWeight (Double_t s) const;  ; void SetBoostWeight (Double_t w) const;  ; void SetClass (UInt_t t);  ; void SetDoNotBoost () const;  ; void SetSpectato",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:6507,Security,hash,hash,6507," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:16881,Security,access,accessor,16881,his class . ◆ Class_Version(). static constexpr Version_t TMVA::Event::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 153 of file Event.h. ◆ ClearDynamicVariables(). static void TMVA::Event::ClearDynamicVariables ; (; ). inlinestatic . Definition at line 122 of file Event.h. ◆ CopyVarValues(). void TMVA::Event::CopyVarValues ; (; const Event & ; other). copies only the variable values ; Definition at line 203 of file Event.cxx. ◆ DeclFileName(). static const char * TMVA::Event::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file Event.h. ◆ GetBoostWeight(). Double_t TMVA::Event::GetBoostWeight ; (; ); const. inline . Definition at line 85 of file Event.h. ◆ GetClass(). UInt_t TMVA::Event::GetClass ; (; ); const. inline . Definition at line 86 of file Event.h. ◆ GetNSpectators(). UInt_t TMVA::Event::GetNSpectators ; (; ); const. accessor to the number of spectators ; Definition at line 335 of file Event.cxx. ◆ GetNTargets(). UInt_t TMVA::Event::GetNTargets ; (; ); const. accessor to the number of targets ; Definition at line 327 of file Event.cxx. ◆ GetNVariables(). UInt_t TMVA::Event::GetNVariables ; (; ); const. accessor to the number of variables ; Definition at line 316 of file Event.cxx. ◆ GetOriginalWeight(). Double_t TMVA::Event::GetOriginalWeight ; (; ); const. inline . Definition at line 84 of file Event.h. ◆ GetSpectator(). Float_t TMVA::Event::GetSpectator ; (; UInt_t ; ivar); const. return spectator content ; Definition at line 261 of file Event.cxx. ◆ GetSpectators() [1/2]. std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ). inline . Definition at line 107 of file Event.h. ◆ GetSpectators() [2/2]. const std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ); const. inline . Definition at line 108 of file Event.h. ◆ GetTarget(). Float_t TMVA::Event::GetTarget ; (; UInt_t ; itgt); const. inline . Definition at line 102 of fi,MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:17026,Security,access,accessor,17026,s ; Definition at line 153 of file Event.h. ◆ ClearDynamicVariables(). static void TMVA::Event::ClearDynamicVariables ; (; ). inlinestatic . Definition at line 122 of file Event.h. ◆ CopyVarValues(). void TMVA::Event::CopyVarValues ; (; const Event & ; other). copies only the variable values ; Definition at line 203 of file Event.cxx. ◆ DeclFileName(). static const char * TMVA::Event::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file Event.h. ◆ GetBoostWeight(). Double_t TMVA::Event::GetBoostWeight ; (; ); const. inline . Definition at line 85 of file Event.h. ◆ GetClass(). UInt_t TMVA::Event::GetClass ; (; ); const. inline . Definition at line 86 of file Event.h. ◆ GetNSpectators(). UInt_t TMVA::Event::GetNSpectators ; (; ); const. accessor to the number of spectators ; Definition at line 335 of file Event.cxx. ◆ GetNTargets(). UInt_t TMVA::Event::GetNTargets ; (; ); const. accessor to the number of targets ; Definition at line 327 of file Event.cxx. ◆ GetNVariables(). UInt_t TMVA::Event::GetNVariables ; (; ); const. accessor to the number of variables ; Definition at line 316 of file Event.cxx. ◆ GetOriginalWeight(). Double_t TMVA::Event::GetOriginalWeight ; (; ); const. inline . Definition at line 84 of file Event.h. ◆ GetSpectator(). Float_t TMVA::Event::GetSpectator ; (; UInt_t ; ivar); const. return spectator content ; Definition at line 261 of file Event.cxx. ◆ GetSpectators() [1/2]. std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ). inline . Definition at line 107 of file Event.h. ◆ GetSpectators() [2/2]. const std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ); const. inline . Definition at line 108 of file Event.h. ◆ GetTarget(). Float_t TMVA::Event::GetTarget ; (; UInt_t ; itgt); const. inline . Definition at line 102 of file Event.h. ◆ GetTargets() [1/2]. std::vector< Float_t > & TMVA::Event::GetTargets ; (; ). inline . Definition at line 103 of file Event.h. ◆ G,MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Event.html:17172,Security,access,accessor,17172,tion at line 122 of file Event.h. ◆ CopyVarValues(). void TMVA::Event::CopyVarValues ; (; const Event & ; other). copies only the variable values ; Definition at line 203 of file Event.cxx. ◆ DeclFileName(). static const char * TMVA::Event::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file Event.h. ◆ GetBoostWeight(). Double_t TMVA::Event::GetBoostWeight ; (; ); const. inline . Definition at line 85 of file Event.h. ◆ GetClass(). UInt_t TMVA::Event::GetClass ; (; ); const. inline . Definition at line 86 of file Event.h. ◆ GetNSpectators(). UInt_t TMVA::Event::GetNSpectators ; (; ); const. accessor to the number of spectators ; Definition at line 335 of file Event.cxx. ◆ GetNTargets(). UInt_t TMVA::Event::GetNTargets ; (; ); const. accessor to the number of targets ; Definition at line 327 of file Event.cxx. ◆ GetNVariables(). UInt_t TMVA::Event::GetNVariables ; (; ); const. accessor to the number of variables ; Definition at line 316 of file Event.cxx. ◆ GetOriginalWeight(). Double_t TMVA::Event::GetOriginalWeight ; (; ); const. inline . Definition at line 84 of file Event.h. ◆ GetSpectator(). Float_t TMVA::Event::GetSpectator ; (; UInt_t ; ivar); const. return spectator content ; Definition at line 261 of file Event.cxx. ◆ GetSpectators() [1/2]. std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ). inline . Definition at line 107 of file Event.h. ◆ GetSpectators() [2/2]. const std::vector< Float_t > & TMVA::Event::GetSpectators ; (; ); const. inline . Definition at line 108 of file Event.h. ◆ GetTarget(). Float_t TMVA::Event::GetTarget ; (; UInt_t ; itgt); const. inline . Definition at line 102 of file Event.h. ◆ GetTargets() [1/2]. std::vector< Float_t > & TMVA::Event::GetTargets ; (; ). inline . Definition at line 103 of file Event.h. ◆ GetTargets() [2/2]. const std::vector< Float_t > & TMVA::Event::GetTargets ; (; ); const. inline . Definition at line 104 of file Event.h. ◆ GetValu,MatchSource.WIKI,doc/master/classTMVA_1_1Event.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html
https://root.cern/doc/master/classTMVA_1_1Executor.html:1251,Integrability,wrap,wrap,1251,"finition at line 36 of file Executor.h. Public Types; template<class F , class... T> ; using noReferenceCond = typename std::enable_if_t<""Function can't return a reference"" &&!(std::is_reference< InvokeResult_t< F, T... > >::value)>;  . Public Member Functions;  Executor ();  Default constructor of TMVA Executor class if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created A user can create a thread pool and enable multi-thread excution by calling. ;  ;  Executor (int nthreads);  Constructor of TMVA Executor class Explicit specify the number of threads. ;  ; template<class Function , class INTEGER > ; void Foreach (Function func, ROOT::TSeq< INTEGER > args, unsigned nChunks=0);  ; template<class Function , class T > ; void Foreach (Function func, std::vector< T > &args, unsigned nChunks=0);  ; template<class Function > ; void Foreach (Function func, unsigned int nTimes, unsigned nChunks=0);  wrap TExecutor::Foreach ;  ; ROOT::TThreadExecutor * GetMultiThreadExecutor ();  ; unsigned int GetPoolSize () const;  ; template<class F , class INTEGER , class Cond = noReferenceCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  ; template<class F , class Cond = noReferenceCond<F>> ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Wrap TExecutor::Map functions. ;  ; template<class F , class INTEGER , class R , class Cond = noReferenceCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Wrap TExecutor::MapReduce functions. ;  ; template<class F , class INTEGER , class R , class Cond = noReferenceCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc, unsigned nChunks) -> InvokeResult_t< F, INTEGER >;  ; template<class T , class R > ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  Wrap Reduce function. ;  . Public Attributes;",MatchSource.WIKI,doc/master/classTMVA_1_1Executor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Executor.html
https://root.cern/doc/master/classTMVA_1_1Executor.html:4767,Integrability,wrap,wrap,4767,"tor of TMVA Executor class Explicit specify the number of threads. ; In this case if nthreads is > 1 a multi-threaded executor will be created and TMVA will run in MT. If nthreads = 1 instead TMVA will run in sequential mode If nthreads = 0 TMVA will use the default thread pool size ; Definition at line 80 of file Executor.h. Member Function Documentation. ◆ Foreach() [1/3]. template<class Function , class INTEGER > . void TMVA::Executor::Foreach ; (; Function ; func, . ROOT::TSeq< INTEGER > ; args, . unsigned ; nChunks = 0 . ). inline . Definition at line 128 of file Executor.h. ◆ Foreach() [2/3]. template<class Function , class T > . void TMVA::Executor::Foreach ; (; Function ; func, . std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). inline . Definition at line 122 of file Executor.h. ◆ Foreach() [3/3]. template<class Function > . void TMVA::Executor::Foreach ; (; Function ; func, . unsigned int ; nTimes, . unsigned ; nChunks = 0 . ). inline . wrap TExecutor::Foreach ; Definition at line 117 of file Executor.h. ◆ GetMultiThreadExecutor(). ROOT::TThreadExecutor * TMVA::Executor::GetMultiThreadExecutor ; (; ). inline . Definition at line 96 of file Executor.h. ◆ GetPoolSize(). unsigned int TMVA::Executor::GetPoolSize ; (; ); const. inline . Definition at line 106 of file Executor.h. ◆ Map() [1/2]. template<class F , class INTEGER , class Cond = noReferenceCond<F, INTEGER>> . auto TMVA::Executor::Map ; (; F ; func, . ROOT::TSeq< INTEGER > ; args . ); -> std::vector<InvokeResult_t<F, INTEGER>>; . inline . Definition at line 146 of file Executor.h. ◆ Map() [2/2]. template<class F , class Cond = noReferenceCond<F>> . auto TMVA::Executor::Map ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>; . inline . Wrap TExecutor::Map functions. ; Definition at line 140 of file Executor.h. ◆ MapReduce() [1/2]. template<class F , class INTEGER , class R , class Cond = noReferenceCond<F, INTEGER>> . auto TMVA::Executor::MapReduce ; (; F ; func, . ROOT::T",MatchSource.WIKI,doc/master/classTMVA_1_1Executor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Executor.html
https://root.cern/doc/master/classTMVA_1_1Executor.html:765,Performance,multi-thread,multi-thread,765,". ROOT: TMVA::Executor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; Private Types |; List of all members ; TMVA::Executor Class Reference. ; Base Executor class. ; Definition at line 36 of file Executor.h. Public Types; template<class F , class... T> ; using noReferenceCond = typename std::enable_if_t<""Function can't return a reference"" &&!(std::is_reference< InvokeResult_t< F, T... > >::value)>;  . Public Member Functions;  Executor ();  Default constructor of TMVA Executor class if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created A user can create a thread pool and enable multi-thread excution by calling. ;  ;  Executor (int nthreads);  Constructor of TMVA Executor class Explicit specify the number of threads. ;  ; template<class Function , class INTEGER > ; void Foreach (Function func, ROOT::TSeq< INTEGER > args, unsigned nChunks=0);  ; template<class Function , class T > ; void Foreach (Function func, std::vector< T > &args, unsigned nChunks=0);  ; template<class Function > ; void Foreach (Function func, unsigned int nTimes, unsigned nChunks=0);  wrap TExecutor::Foreach ;  ; ROOT::TThreadExecutor * GetMultiThreadExecutor ();  ; unsigned int GetPoolSize () const;  ; template<class F , class INTEGER , class Cond = noReferenceCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  ; template<class F , class Cond = noReferenceCond<F>> ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Wrap TExecutor::Map functions. ;  ; template<class F , class INTEGER , class R , class Cond = noReferenceCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Wrap TExecutor::MapReduce functions. ;  ; template<class F , class INTEGER , class R , class Cond = no",MatchSource.WIKI,doc/master/classTMVA_1_1Executor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Executor.html
https://root.cern/doc/master/classTMVA_1_1Executor.html:3351,Performance,multi-thread,multi-thread,3351,"ction. ;  . Public Attributes; std::unique_ptr< ROOT::TThreadExecutor > fMTExecImpl;  ; std::unique_ptr< ROOT::TSequentialExecutor > fSeqExecImpl;  . Private Types; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . #include <TMVA/Executor.h>; Member Typedef Documentation. ◆ InvokeResult_t. template<typename F , typename... Args> . using TMVA::Executor::InvokeResult_t = ROOT::TypeTraits::InvokeResult_t<F, Args...>. private . Definition at line 39 of file Executor.h. ◆ noReferenceCond. template<class F , class... T> . using TMVA::Executor::noReferenceCond = typename std::enable_if_t<""Function can't return a reference"" && !(std::is_reference<InvokeResult_t<F, T...> >::value)>. Definition at line 43 of file Executor.h. Constructor & Destructor Documentation. ◆ Executor() [1/2]. TMVA::Executor::Executor ; (; ). inline . Default constructor of TMVA Executor class if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created A user can create a thread pool and enable multi-thread excution by calling. ; TMVA::Config::Instance()::%EnableMT(int nthreads);; TMVA::Config::Instancestatic Config & Instance()static function: returns TMVA instanceDefinition Config.cxx:98; int; For releasing the thread pool used by TMVA one can do it by calling TMVA::Config::Instance()::%DisableMT();. Definition at line 59 of file Executor.h. ◆ Executor() [2/2]. TMVA::Executor::Executor ; (; int ; nthreads). inlineexplicit . Constructor of TMVA Executor class Explicit specify the number of threads. ; In this case if nthreads is > 1 a multi-threaded executor will be created and TMVA will run in MT. If nthreads = 1 instead TMVA will run in sequential mode If nthreads = 0 TMVA will use the default thread pool size ; Definition at line 80 of file Executor.h. Member Function Documentation. ◆ Foreach() [1/3]. template<class Function , class INTEGER > . void TMVA::Executor::Foreach ; (; Function ; func, . RO",MatchSource.WIKI,doc/master/classTMVA_1_1Executor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Executor.html
https://root.cern/doc/master/classTMVA_1_1Executor.html:3902,Performance,multi-thread,multi-threaded,3902,"d::enable_if_t<""Function can't return a reference"" && !(std::is_reference<InvokeResult_t<F, T...> >::value)>. Definition at line 43 of file Executor.h. Constructor & Destructor Documentation. ◆ Executor() [1/2]. TMVA::Executor::Executor ; (; ). inline . Default constructor of TMVA Executor class if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created A user can create a thread pool and enable multi-thread excution by calling. ; TMVA::Config::Instance()::%EnableMT(int nthreads);; TMVA::Config::Instancestatic Config & Instance()static function: returns TMVA instanceDefinition Config.cxx:98; int; For releasing the thread pool used by TMVA one can do it by calling TMVA::Config::Instance()::%DisableMT();. Definition at line 59 of file Executor.h. ◆ Executor() [2/2]. TMVA::Executor::Executor ; (; int ; nthreads). inlineexplicit . Constructor of TMVA Executor class Explicit specify the number of threads. ; In this case if nthreads is > 1 a multi-threaded executor will be created and TMVA will run in MT. If nthreads = 1 instead TMVA will run in sequential mode If nthreads = 0 TMVA will use the default thread pool size ; Definition at line 80 of file Executor.h. Member Function Documentation. ◆ Foreach() [1/3]. template<class Function , class INTEGER > . void TMVA::Executor::Foreach ; (; Function ; func, . ROOT::TSeq< INTEGER > ; args, . unsigned ; nChunks = 0 . ). inline . Definition at line 128 of file Executor.h. ◆ Foreach() [2/3]. template<class Function , class T > . void TMVA::Executor::Foreach ; (; Function ; func, . std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). inline . Definition at line 122 of file Executor.h. ◆ Foreach() [3/3]. template<class Function > . void TMVA::Executor::Foreach ; (; Function ; func, . unsigned int ; nTimes, . unsigned ; nChunks = 0 . ). inline . wrap TExecutor::Foreach ; Definition at line 117 of file Executor.h. ◆ GetMultiThreadExecutor(). ROOT::TThreadExecutor * TMVA::Executor::GetMultiThre",MatchSource.WIKI,doc/master/classTMVA_1_1Executor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Executor.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:368,Availability,error,error,368,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:418,Availability,error,error,418,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:564,Availability,error,error,564,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:669,Availability,error,error,669,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:724,Availability,error,error,724,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:764,Availability,error,error,764,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:786,Availability,error,error,786,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:925,Availability,error,error,925,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:977,Availability,error,error,977,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:1890,Availability,error,error,1890,"r as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2040,Availability,error,error,2040,"orPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::Exp",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2104,Availability,error,error,2104,"orPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::Exp",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4249,Availability,error,error,4249,"efinition at line 71 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). TMVA::PruningInfo * TMVA::ExpectedErrorPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4377,Availability,error,error,4377,"vents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4469,Availability,error,error,4469,"vents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4524,Availability,error,error,4524,"vents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4558,Availability,error,error,4558,"vents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4580,Availability,error,error,4580,"vents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4886,Availability,error,error,4886,"isionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPru",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:4950,Availability,error,error,4950,"isionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPru",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2293,Integrability,message,message,2293,"Increment (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:5668,Integrability,message,message,5668," the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPruneTool.h. ◆ fPruneSequence. std::vector<DecisionTreeNode*> TMVA::ExpectedErrorPruneTool::fPruneSequence. private . ! the (optimal) prune sequence ; Definition at line 75 of file ExpectedErrorPruneTool.h. Libraries for TMVA::ExpectedErrorPruneTool:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h; tmva/tmva/src/ExpectedErrorPruneTool.cxx. TMVAExpectedErrorPruneTool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:1378,Modifiability,inherit,inherited,1378,"prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodeP",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2536,Modifiability,inherit,inherited,2536,"Nodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). TMVA::PruningInfo * TMVA::ExpectedErrorPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2644,Modifiability,inherit,inherited,2644,"Nodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). TMVA::PruningInfo * TMVA::ExpectedErrorPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2222,Performance,optimiz,optimizing,2222,"Increment (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:5488,Performance,optimiz,optimizing,5488," the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPruneTool.h. ◆ fPruneSequence. std::vector<DecisionTreeNode*> TMVA::ExpectedErrorPruneTool::fPruneSequence. private . ! the (optimal) prune sequence ; Definition at line 75 of file ExpectedErrorPruneTool.h. Libraries for TMVA::ExpectedErrorPruneTool:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h; tmva/tmva/src/ExpectedErrorPruneTool.cxx. TMVAExpectedErrorPruneTool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:1249,Testability,test,testEvents,1249,"prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodeP",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2301,Testability,log,logger,2301,"Increment (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:3505,Testability,test,testEvents,3505,"nal Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::ExpectedErrorPruneTool ; (; ). Definition at line 62 of file ExpectedErrorPruneTool.cxx. ◆ ~ExpectedErrorPruneTool(). TMVA::ExpectedErrorPruneTool::~ExpectedErrorPruneTool ; (; ). virtual . Definition at line 71 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). TMVA::PruningInfo * TMVA::ExpectedErrorPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const IPruneTool::EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). virtual . Implements TMVA::IPruneTool.; Definition at line 79 of file ExpectedErrorPruneTool.cxx. ◆ CountNodes(). Int_t TMVA::ExpectedErrorPruneTool::CountNodes ; (; DecisionTreeNode * ; node, . Int_t ; icount = 0 . ). inlineprivate . Definition at line 81 of file ExpectedErrorPruneTool.h. ◆ FindListOfNodes(). void TMVA::ExpectedErrorPruneTool::FindListOfNodes ; (; DecisionTreeNode * ; node). private . recursive pruning of nodes using the Expected Error Pruning (EEP) ; Definition at line 175 of file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomia",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:5676,Testability,log,logger,5676," the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPruneTool.h. ◆ fPruneSequence. std::vector<DecisionTreeNode*> TMVA::ExpectedErrorPruneTool::fPruneSequence. private . ! the (optimal) prune sequence ; Definition at line 75 of file ExpectedErrorPruneTool.h. Libraries for TMVA::ExpectedErrorPruneTool:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h; tmva/tmva/src/ExpectedErrorPruneTool.cxx. TMVAExpectedErrorPruneTool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2822,Availability,avail,available,2822,"pecific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writable file. ;  ; void SetModelPersistence (Bool_t status=kTRUE);  Method enable model persistence, then algorithms model is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; v",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:8455,Availability,error,error,8455,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:8544,Availability,error,error,8544,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:8699,Availability,error,error,8699,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:8996,Availability,error,error,8996,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:13080,Availability,error,error,13080,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr V",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:8461,Integrability,message,message,8461,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:9002,Integrability,message,message,9002,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:9992,Integrability,message,message,9992,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:13086,Integrability,message,message,13086,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr V",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:13459,Integrability,message,message,13459," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19527,Integrability,message,message,19527,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1903,Modifiability,inherit,inherited,1903,"ult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print e",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:3560,Modifiability,inherit,inherited,3560,"del is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:5258,Modifiability,inherit,inherited,5258,"_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:6998,Modifiability,inherit,inherited,6998,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:8091,Modifiability,inherit,inheritance,8091,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:10090,Modifiability,inherit,inherits,10090,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:10207,Modifiability,inherit,inherits,10207,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:13960,Modifiability,inherit,inherited,13960,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CopyFrom (TDirectory *src, TFile *file);  ; TString GetMethodOptions (TString methodname, TString methodtitle);  return the options for the booked method. ;  ; Classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:14178,Modifiability,inherit,inherited,14178,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CopyFrom (TDirectory *src, TFile *file);  ; TString GetMethodOptions (TString methodname, TString methodtitle);  return the options for the booked method. ;  ; Classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:14400,Modifiability,inherit,inherited,14400,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CopyFrom (TDirectory *src, TFile *file);  ; TString GetMethodOptions (TString methodname, TString methodtitle);  return the options for the booked method. ;  ; Classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:14610,Modifiability,inherit,inherited,14610,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CopyFrom (TDirectory *src, TFile *file);  ; TString GetMethodOptions (TString methodname, TString methodtitle);  return the options for the booked method. ;  ; Classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:16224,Modifiability,inherit,inherited,16224,"name, TString methodtitle);  Allow to get result for an specific ml method. ;  ; TMVA::ROCCurve * GetROC (TMVA::MethodBase *method, UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get TMVA::ROCCurve Object. ;  ; TMVA::ROCCurve * GetROC (TString methodname, TString methodtitle, UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get TMVA::ROCCurve Object. ;  ; Double_t GetROCIntegral (TString methodname, TString methodtitle, UInt_t iClass=0);  Method to get ROC-Integral value from mvas. ;  ; Bool_t HasMethodObject (TString methodname, TString methodtitle, Int_t &index);  Allows to check if the TMVA::MethodBase was created and return the index in the vector. ;  ; Bool_t IsCutsMethod (TMVA::MethodBase *method);  Allows to check if the ml method is a Cuts method. ;  ; void MergeFiles ();  ;  Protected Member Functions inherited from TMVA::Envelope;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnab",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:17182,Modifiability,inherit,inherited,17182,"ds differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! ;  ; Bool_t fCorrelations;  ! ;  ; std::vector< IMethod * > fIMethods;  ! vector of objects with booked methods ;  ; std::vector< ClassificationResult > fResults;  ! ;  ; Bool_t fROC;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:17589,Modifiability,inherit,inherited,17589,"ds differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! ;  ; Bool_t fCorrelations;  ! ;  ; std::vector< IMethod * > fIMethods;  ! vector of objects with booked methods ;  ; std::vector< ClassificationResult > fResults;  ! ;  ; Bool_t fROC;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:18067,Modifiability,inherit,inherited,18067,"to the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! ;  ; Bool_t fCorrelations;  ! ;  ; std::vector< IMethod * > fIMethods;  ! vector of objects with booked methods ;  ; std::vector< ClassificationResult > fResults;  ! ;  ; Bool_t fROC;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:18708,Modifiability,inherit,inherited,18708," > fResults;  ! ;  ; Bool_t fROC;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:18801,Modifiability,inherit,inherited,18801," > fResults;  ! ;  ; Bool_t fROC;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19468,Modifiability,inherit,inherited,19468,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19569,Modifiability,inherit,inherited,19569,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:456,Performance,load,loader,456,". ROOT: TMVA::Experimental::Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Experimental::Classification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (T",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:575,Performance,load,loader,575,". ROOT: TMVA::Experimental::Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Experimental::Classification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (T",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:733,Performance,perform,perform,733,". ROOT: TMVA::Experimental::Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Experimental::Classification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (T",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1343,Performance,perform,perform,1343,"assification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLo",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1457,Performance,perform,perform,1457,"der, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2109,Performance,perform,perform,2109,"  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLo",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2271,Performance,perform,perform,2271," ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:21747,Performance,perform,perform,21747,"n.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Experimental::Classification::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Experimental::Classification::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Experimental::Classification::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 202 of file Classification.h. ◆ CopyFrom(). void TMVA::Experimental::Classification::CopyFrom ; (; TDirectory * ; src, . TFile * ; file . ). protected . Definition at line 1093 of file Classification.cxx. ◆ DeclFileName(). static const char * TMVA::Experimental::Classification::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 202 of file Classification.h. ◆ Evaluate(). void TMVA::Experimental::Classification::Evaluate ; (; ). virtual . Method to perform Train/Test over all ml method booked. ; If the option Jobs > 1 can do it in parallel with MultiProc. ; Implements TMVA::Envelope.; Definition at line 248 of file Classification.cxx. ◆ GetMethod(). TMVA::MethodBase * TMVA::Experimental::Classification::GetMethod ; (; TString ; methodname, . TString ; methodtitle . ). Return a TMVA::MethodBase object. ; if method is not booked then return a null pointer. Parameters. methodnamename of the method. ; methodtitlemethod title. . ReturnsTMVA::MethodBase object ; Definition at line 386 of file Classification.cxx. ◆ GetMethodOptions(). TString TMVA::Experimental::Classification::GetMethodOptions ; (; TString ; methodname, . TString ; methodtitle . ). protected . return the options for the booked method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Returnsstring the with options for the ml method. ; Definition at line 234 of file Classification.cxx. ◆ GetResults() [1/2]. std::vector< TMVA::Experimental::ClassificationResult > &",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26602,Performance,perform,perform,26602,"cted . Allows to check if the ml method is a Cuts method. ; Returnsboolen true if the method is a Cuts method. ; Definition at line 957 of file Classification.cxx. ◆ MergeFiles(). void TMVA::Experimental::Classification::MergeFiles ; (; ). protected . Definition at line 1130 of file Classification.cxx. ◆ Streamer(). virtual void TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26907,Performance,perform,perform,26907,"d TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::Experimental::Classification::TrainMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 373 of file Classification.cxx. Member Data Doc",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:6126,Security,hash,hash,6126,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1226,Testability,test,test,1226,"tic Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Experimental::Classification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString meth",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1351,Testability,test,test,1351,"assification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLo",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:1465,Testability,test,test,1465,"der, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19340,Testability,test,test,19340,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:19535,Testability,log,logger,19535,"ete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classif",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:20139,Testability,test,test,20139,"ModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classifier without output file. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; optionsstring extra options. . Definition at line 200 of file Classification.cxx. ◆ ~Classification(). TMVA::Experimental::Classification::~Classification ; (; ). Definition at line 219 of file Classification.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Experimental::Classification::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Experimental::Classification::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Experim",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:20549,Testability,test,test,20549,";  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::Classification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Classification() [1/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TFile * ; file, . TString ; options . ). explicit . Contructor to create a two class classifier. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; fileTFile object to save the results ; optionsstring extra options. . Definition at line 181 of file Classification.cxx. ◆ Classification() [2/2]. TMVA::Experimental::Classification::Classification ; (; DataLoader * ; dataloader, . TString ; options . ). explicit . Contructor to create a two class classifier without output file. ; Parameters. dataloaderTMVA::DataLoader object with the data to train/test. ; optionsstring extra options. . Definition at line 200 of file Classification.cxx. ◆ ~Classification(). TMVA::Experimental::Classification::~Classification ; (; ). Definition at line 219 of file Classification.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Experimental::Classification::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Experimental::Classification::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Experimental::Classification::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 202 of file Classification.h. ◆ CopyFrom(). void TMVA::Experimental::Classification::CopyFrom ; (; TDirectory * ; src, . TFile * ; file . ). protected . Definition at line 1093 of file Classification.cxx. ◆ DeclFileName(). static const char * TMVA::Experimental::Classification::DeclFileName",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:23737,Testability,test,test,23737,"std::vector< TMVA::Experimental::ClassificationResult > & TMVA::Experimental::Classification::GetResults ; (; ). Return the vector of TMVA::Experimental::ClassificationResult objects. ; Returnsvector of results. ; Definition at line 945 of file Classification.cxx. ◆ GetResults() [2/2]. TMVA::Experimental::ClassificationResult & TMVA::Experimental::Classification::GetResults ; (; TString ; methodname, . TString ; methodtitle . ). protected . Allow to get result for an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . ReturnsTMVA::Experimental::ClassificationResult object for the method. ; Definition at line 970 of file Classification.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TMVA::MethodBase * ; method, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodTMVA::MethodBase object ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 993 of file Classification.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 1060 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::Classification::GetROCIntegral ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0 . ). protected . Method to get ROC-Integral value from mvas. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal . ReturnsDouble_t with the ROC-Integral ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:23756,Testability,test,test,23756,"std::vector< TMVA::Experimental::ClassificationResult > & TMVA::Experimental::Classification::GetResults ; (; ). Return the vector of TMVA::Experimental::ClassificationResult objects. ; Returnsvector of results. ; Definition at line 945 of file Classification.cxx. ◆ GetResults() [2/2]. TMVA::Experimental::ClassificationResult & TMVA::Experimental::Classification::GetResults ; (; TString ; methodname, . TString ; methodtitle . ). protected . Allow to get result for an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . ReturnsTMVA::Experimental::ClassificationResult object for the method. ; Definition at line 970 of file Classification.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TMVA::MethodBase * ; method, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodTMVA::MethodBase object ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 993 of file Classification.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 1060 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::Classification::GetROCIntegral ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0 . ). protected . Method to get ROC-Integral value from mvas. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal . ReturnsDouble_t with the ROC-Integral ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:24232,Testability,test,test,24232,"odnamename of the method. ; methodtitlemethod title. . ReturnsTMVA::Experimental::ClassificationResult object for the method. ; Definition at line 970 of file Classification.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TMVA::MethodBase * ; method, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodTMVA::MethodBase object ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 993 of file Classification.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 1060 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::Classification::GetROCIntegral ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0 . ). protected . Method to get ROC-Integral value from mvas. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 1074 of file Classification.cxx. ◆ HasMethodObject(). Bool_t TMVA::Experimental::Classification::HasMethodObject ; (; TString ; methodname, . TString ; methodtitle, . Int_t & ; index . ). protected . Allows to check if the TMVA::MethodBase was created and return the index in the vector. ; Parameters. methodnamename of the method. ; methodtitlemethod title. ; indexrefrence to Int_t with the position of the method into the vector fIMethods . Returnsboolean true if the method was ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:24251,Testability,test,test,24251,"odnamename of the method. ; methodtitlemethod title. . ReturnsTMVA::Experimental::ClassificationResult object for the method. ; Definition at line 970 of file Classification.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TMVA::MethodBase * ; method, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodTMVA::MethodBase object ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 993 of file Classification.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Experimental::Classification::GetROC ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). protected . Method to get TMVA::ROCCurve Object. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 1060 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::Classification::GetROCIntegral ; (; TString ; methodname, . TString ; methodtitle, . UInt_t ; iClass = 0 . ). protected . Method to get ROC-Integral value from mvas. ; Parameters. methodnameml method name. ; methodtitleml method title. ; iClasscategory, default 0 then signal . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 1074 of file Classification.cxx. ◆ HasMethodObject(). Bool_t TMVA::Experimental::Classification::HasMethodObject ; (; TString ; methodname, . TString ; methodtitle, . Int_t & ; index . ). protected . Allows to check if the TMVA::MethodBase was created and return the index in the vector. ; Parameters. methodnamename of the method. ; methodtitlemethod title. ; indexrefrence to Int_t with the position of the method into the vector fIMethods . Returnsboolean true if the method was ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26365,Testability,test,test,26365,"rnsTClass describing current object ; Reimplemented from TMVA::Envelope.; Definition at line 202 of file Classification.h. ◆ IsCutsMethod(). Bool_t TMVA::Experimental::Classification::IsCutsMethod ; (; TMVA::MethodBase * ; method). protected . Allows to check if the ml method is a Cuts method. ; Returnsboolen true if the method is a Cuts method. ; Definition at line 957 of file Classification.cxx. ◆ MergeFiles(). void TMVA::Experimental::Classification::MergeFiles ; (; ). protected . Definition at line 1130 of file Classification.cxx. ◆ Streamer(). virtual void TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; method",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26610,Testability,test,test,26610,"cted . Allows to check if the ml method is a Cuts method. ; Returnsboolen true if the method is a Cuts method. ; Definition at line 957 of file Classification.cxx. ◆ MergeFiles(). void TMVA::Experimental::Classification::MergeFiles ; (; ). protected . Definition at line 1130 of file Classification.cxx. ◆ Streamer(). virtual void TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:26915,Testability,test,test,26915,"d TMVA::Experimental::Classification::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::Experimental::Classification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file Classification.h. ◆ Test(). void TMVA::Experimental::Classification::Test ; (; ). virtual . Perform test evaluation in all booked methods. ; Definition at line 513 of file Classification.cxx. ◆ TestMethod() [1/2]. void TMVA::Experimental::Classification::TestMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 526 of file Classification.cxx. ◆ TestMethod() [2/2]. void TMVA::Experimental::Classification::TestMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::Experimental::Classification::TrainMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 373 of file Classification.cxx. Member Data Doc",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2090,Usability,learn,learning,2090,"  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLo",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2252,Usability,learn,learning,2252," ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1Classification.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:3218,Availability,error,error,3218,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:3307,Availability,error,error,3307,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:3462,Availability,error,error,3462,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:3759,Availability,error,error,3759,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:8323,Availability,error,error,8323," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:3224,Integrability,message,message,3224,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:3765,Integrability,message,message,3765,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:4967,Integrability,message,message,4967,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:8329,Integrability,message,message,8329," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:8702,Integrability,message,message,8702," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Priva",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:1457,Modifiability,inherit,inherited,1457,"unctions;  ClassificationResult ();  ;  ClassificationResult (const ClassificationResult &cr);  ;  ~ClassificationResult ();  ; TString GetDataLoaderName ();  ; const TString GetMethodName () const;  ; const TString GetMethodTitle () const;  ; ROCCurve * GetROC (UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get TMVA::ROCCurve Object. ;  ; TGraph * GetROCGraph (UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get TGraph object with the ROC curve. ;  ; Double_t GetROCIntegral (UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get ROC-Integral value from mvas. ;  ; virtual TClass * IsA () const;  ; Bool_t IsCutsMethod ();  ; ClassificationResult & operator= (const ClassificationResult &r);  ; void Show ();  Method to print the results in stdout. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:2854,Modifiability,inherit,inheritance,2854,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:5065,Modifiability,inherit,inherits,5065,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:5182,Modifiability,inherit,inherits,5182,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:9203,Modifiability,inherit,inherited,9203,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Bool_t IsMethod (TString methodname, TString methodtitle);  Method to check if method was booked. ;  . Private Attributes; std::vector< TString > fClassNames;  ; TString fDataLoaderName;  ; Bool_t fIsCuts;  if it is a method cuts need special output ;  ; OptionMap fMethod;  ; std::map< UInt_t, std::vector< std::tuple< Float_t, Float_t, Bool_t > > > fMvaTest;  Mvas for two-class and multiclass classification. ;  ; std::map< UInt_t, std::vector< std::tuple< Float_t, Float_t, Bool_t > > > fMvaTrai",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:10362,Modifiability,inherit,inherited,10362,"estructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Bool_t IsMethod (TString methodname, TString methodtitle);  Method to check if method was booked. ;  . Private Attributes; std::vector< TString > fClassNames;  ; TString fDataLoaderName;  ; Bool_t fIsCuts;  if it is a method cuts need special output ;  ; OptionMap fMethod;  ; std::map< UInt_t, std::vector< std::tuple< Float_t, Float_t, Bool_t > > > fMvaTest;  Mvas for two-class and multiclass classification. ;  ; std::map< UInt_t, std::vector< std::tuple< Float_t, Float_t, Bool_t > > > fMvaTrain;  Mvas for two-class classification. ;  ; Double_t fROCIntegral;  . Friends; class Classification;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::ClassificationResult:. This browser is not able to show SVG: t",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:11003,Modifiability,inherit,inherited,11003,"fication. ;  ; std::map< UInt_t, std::vector< std::tuple< Float_t, Float_t, Bool_t > > > fMvaTrain;  Mvas for two-class classification. ;  ; Double_t fROCIntegral;  . Friends; class Classification;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::ClassificationResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ClassificationResult() [1/2]. TMVA::Experimental::ClassificationResult::ClassificationResult ; (; ). Definition at line 52 of file Classification.cxx. ◆ ClassificationResult() [2/2]. TMVA::Experimental::ClassificationResult::ClassificationResult ; (; const ClassificationResult & ; cr). Definition at line 57 of file Classification.cxx. ◆ ~ClassificationResult(). TMVA::Experimental::ClassificationResult::~ClassificationResult ; (; ). inline . Definition at line 145 of file Classification.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::Experimental::ClassificationResult::",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:11102,Modifiability,inherit,inherited,11102,"fication. ;  ; std::map< UInt_t, std::vector< std::tuple< Float_t, Float_t, Bool_t > > > fMvaTrain;  Mvas for two-class classification. ;  ; Double_t fROCIntegral;  . Friends; class Classification;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/Classification.h>. Inheritance diagram for TMVA::Experimental::ClassificationResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ClassificationResult() [1/2]. TMVA::Experimental::ClassificationResult::ClassificationResult ; (; ). Definition at line 52 of file Classification.cxx. ◆ ClassificationResult() [2/2]. TMVA::Experimental::ClassificationResult::ClassificationResult ; (; const ClassificationResult & ; cr). Definition at line 57 of file Classification.cxx. ◆ ~ClassificationResult(). TMVA::Experimental::ClassificationResult::~ClassificationResult ; (; ). inline . Definition at line 145 of file Classification.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::Experimental::ClassificationResult::",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:15450,Performance,load,loader,15450,"(; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 159 of file Classification.h. ◆ IsCutsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsCutsMethod ; (; ). inline . Definition at line 152 of file Classification.h. ◆ IsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsMethod ; (; TString ; methodname, . TString ; methodtitle . ). private . Method to check if method was booked. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Returnsboolean true if the method was booked, false in other case. ; Definition at line 166 of file Classification.cxx. ◆ operator=(). TMVA::Experimental::ClassificationResult & TMVA::Experimental::ClassificationResult::operator= ; (; const ClassificationResult & ; r). Definition at line 104 of file Classification.cxx. ◆ Show(). void TMVA::Experimental::ClassificationResult::Show ; (; ). Method to print the results in stdout. ; data loader name, method name/tittle and ROC-integ. ; Definition at line 121 of file Classification.cxx. ◆ Streamer(). virtual void TMVA::Experimental::ClassificationResult::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Experimental::ClassificationResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 159 of file Classification.h. Friends And Related Symbol Documentation. ◆ Classification. friend class Classification. friend . Definition at line 129 of file Classification.h. Member Data Documentation. ◆ fClassNames. std::vector<TString> TMVA::Experimental::ClassificationResult::fClassNames. private . Definition at line 136 of file Classification.h. ◆ fDataLoaderName. TString TMVA::Experimental::ClassificationResult::fDataLoaderName. private . Definition at line 133 of file Classification.h. ◆ fIsCuts. Bool_t TMVA::Experimental::ClassificationResult::fIsCuts. private . if ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:4696,Security,hash,hash,4696," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:13500,Testability,test,test,13500,"on at line 159 of file Classification.h. ◆ DeclFileName(). static const char * TMVA::Experimental::ClassificationResult::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 159 of file Classification.h. ◆ GetDataLoaderName(). TString TMVA::Experimental::ClassificationResult::GetDataLoaderName ; (; ). inline . Definition at line 151 of file Classification.h. ◆ GetMethodName(). const TString TMVA::Experimental::ClassificationResult::GetMethodName ; (; ); const. inline . Definition at line 147 of file Classification.h. ◆ GetMethodTitle(). const TString TMVA::Experimental::ClassificationResult::GetMethodTitle ; (; ); const. inline . Definition at line 148 of file Classification.h. ◆ GetROC(). TMVA::ROCCurve * TMVA::Experimental::ClassificationResult::GetROC ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TMVA::ROCCurve Object. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 93 of file Classification.cxx. ◆ GetROCGraph(). TGraph * TMVA::Experimental::ClassificationResult::GetROCGraph ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TGraph object with the ROC curve. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTGraph object. ; Definition at line 149 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::ClassificationResult::GetROCIntegral ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get ROC-Integral value from mvas. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 74 of file Classification.cxx. ◆ IsA(). virtual TClass * TMVA::Experimental::ClassificationResult::IsA ; (; ); const. inlin",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:13519,Testability,test,test,13519,"on at line 159 of file Classification.h. ◆ DeclFileName(). static const char * TMVA::Experimental::ClassificationResult::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 159 of file Classification.h. ◆ GetDataLoaderName(). TString TMVA::Experimental::ClassificationResult::GetDataLoaderName ; (; ). inline . Definition at line 151 of file Classification.h. ◆ GetMethodName(). const TString TMVA::Experimental::ClassificationResult::GetMethodName ; (; ); const. inline . Definition at line 147 of file Classification.h. ◆ GetMethodTitle(). const TString TMVA::Experimental::ClassificationResult::GetMethodTitle ; (; ); const. inline . Definition at line 148 of file Classification.h. ◆ GetROC(). TMVA::ROCCurve * TMVA::Experimental::ClassificationResult::GetROC ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TMVA::ROCCurve Object. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 93 of file Classification.cxx. ◆ GetROCGraph(). TGraph * TMVA::Experimental::ClassificationResult::GetROCGraph ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TGraph object with the ROC curve. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTGraph object. ; Definition at line 149 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::ClassificationResult::GetROCIntegral ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get ROC-Integral value from mvas. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 74 of file Classification.cxx. ◆ IsA(). virtual TClass * TMVA::Experimental::ClassificationResult::IsA ; (; ); const. inlin",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:13888,Testability,test,test,13888,"ine 151 of file Classification.h. ◆ GetMethodName(). const TString TMVA::Experimental::ClassificationResult::GetMethodName ; (; ); const. inline . Definition at line 147 of file Classification.h. ◆ GetMethodTitle(). const TString TMVA::Experimental::ClassificationResult::GetMethodTitle ; (; ); const. inline . Definition at line 148 of file Classification.h. ◆ GetROC(). TMVA::ROCCurve * TMVA::Experimental::ClassificationResult::GetROC ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TMVA::ROCCurve Object. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 93 of file Classification.cxx. ◆ GetROCGraph(). TGraph * TMVA::Experimental::ClassificationResult::GetROCGraph ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TGraph object with the ROC curve. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTGraph object. ; Definition at line 149 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::ClassificationResult::GetROCIntegral ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get ROC-Integral value from mvas. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 74 of file Classification.cxx. ◆ IsA(). virtual TClass * TMVA::Experimental::ClassificationResult::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 159 of file Classification.h. ◆ IsCutsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsCutsMethod ; (; ). inline . Definition at line 152 of file Classification.h. ◆ IsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsMethod ; (; TString ; methodname, . TString ; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:13907,Testability,test,test,13907,"ine 151 of file Classification.h. ◆ GetMethodName(). const TString TMVA::Experimental::ClassificationResult::GetMethodName ; (; ); const. inline . Definition at line 147 of file Classification.h. ◆ GetMethodTitle(). const TString TMVA::Experimental::ClassificationResult::GetMethodTitle ; (; ); const. inline . Definition at line 148 of file Classification.h. ◆ GetROC(). TMVA::ROCCurve * TMVA::Experimental::ClassificationResult::GetROC ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TMVA::ROCCurve Object. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 93 of file Classification.cxx. ◆ GetROCGraph(). TGraph * TMVA::Experimental::ClassificationResult::GetROCGraph ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TGraph object with the ROC curve. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTGraph object. ; Definition at line 149 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::ClassificationResult::GetROCIntegral ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get ROC-Integral value from mvas. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 74 of file Classification.cxx. ◆ IsA(). virtual TClass * TMVA::Experimental::ClassificationResult::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 159 of file Classification.h. ◆ IsCutsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsCutsMethod ; (; ). inline . Definition at line 152 of file Classification.h. ◆ IsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsMethod ; (; TString ; methodname, . TString ; ",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:14271,Testability,test,test,14271,"rve * TMVA::Experimental::ClassificationResult::GetROC ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TMVA::ROCCurve Object. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 93 of file Classification.cxx. ◆ GetROCGraph(). TGraph * TMVA::Experimental::ClassificationResult::GetROCGraph ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TGraph object with the ROC curve. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTGraph object. ; Definition at line 149 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::ClassificationResult::GetROCIntegral ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get ROC-Integral value from mvas. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 74 of file Classification.cxx. ◆ IsA(). virtual TClass * TMVA::Experimental::ClassificationResult::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 159 of file Classification.h. ◆ IsCutsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsCutsMethod ; (; ). inline . Definition at line 152 of file Classification.h. ◆ IsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsMethod ; (; TString ; methodname, . TString ; methodtitle . ). private . Method to check if method was booked. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Returnsboolean true if the method was booked, false in other case. ; Definition at line 166 of file Classification.cxx. ◆ operator=(). TMVA::Experimental::ClassificationResult & TMVA::Experimental::ClassificationResult::operator= ; (; const Clas",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:14290,Testability,test,test,14290,"rve * TMVA::Experimental::ClassificationResult::GetROC ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TMVA::ROCCurve Object. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTMVA::ROCCurve object. ; Definition at line 93 of file Classification.cxx. ◆ GetROCGraph(). TGraph * TMVA::Experimental::ClassificationResult::GetROCGraph ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get TGraph object with the ROC curve. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsTGraph object. ; Definition at line 149 of file Classification.cxx. ◆ GetROCIntegral(). Double_t TMVA::Experimental::ClassificationResult::GetROCIntegral ; (; UInt_t ; iClass = 0, . TMVA::Types::ETreeType ; type = TMVA::Types::kTesting . ). Method to get ROC-Integral value from mvas. ; Parameters. iClasscategory, default 0 then signal ; typetrain/test tree, default test. . ReturnsDouble_t with the ROC-Integral value. ; Definition at line 74 of file Classification.cxx. ◆ IsA(). virtual TClass * TMVA::Experimental::ClassificationResult::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 159 of file Classification.h. ◆ IsCutsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsCutsMethod ; (; ). inline . Definition at line 152 of file Classification.h. ◆ IsMethod(). Bool_t TMVA::Experimental::ClassificationResult::IsMethod ; (; TString ; methodname, . TString ; methodtitle . ). private . Method to check if method was booked. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Returnsboolean true if the method was booked, false in other case. ; Definition at line 166 of file Classification.cxx. ◆ operator=(). TMVA::Experimental::ClassificationResult & TMVA::Experimental::ClassificationResult::operator= ; (; const Clas",MatchSource.WIKI,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:3363,Availability,error,error,3363,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:3444,Availability,error,error,3444,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:199,Modifiability,inherit,inherited,199,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::Factory Member List. This is the complete list of members for TMVA::Factory, including all inherited members. AbstractMethod(const char *method) constTObject; AddOptionsXMLTo(void *parent) constTMVA::Configurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AssignOpt(const TString &name, T &valAssign) constTMVA::Configurableprivate; BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString)TMVA::Factoryinline; BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile)TMVA::Factoryprivate; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckForUnusedOptions() constTMVA::Configurable; Class()TMVA::Factorystatic; Class_Name()TMVA::Factorystatic; Class_Version()TMVA::Factoryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Configurable(const TString &theOption="""")TMVA::Configurable; Copy(TObject &named) const overrideTNamedvirtual; CrossValidationTMVA::Factoryfriend; DeclareOptionRef(T &ref, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; Decl",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:628,Performance,load,loader,628," AbstractMethod(const char *method) constTObject; AddOptionsXMLTo(void *parent) constTMVA::Configurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AssignOpt(const TString &name, T &valAssign) constTMVA::Configurableprivate; BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString)TMVA::Factoryinline; BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile)TMVA::Factoryprivate; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckForUnusedOptions() constTMVA::Configurable; Class()TMVA::Factorystatic; Class_Name()TMVA::Factorystatic; Class_Version()TMVA::Factoryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Configurable(const TString &theOption="""")TMVA::Configurable; Copy(TObject &named) const overrideTNamedvirtual; CrossValidationTMVA::Factoryfriend; DeclareOptionRef(T &ref, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; Decl",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:739,Performance,load,loader,739," AbstractMethod(const char *method) constTObject; AddOptionsXMLTo(void *parent) constTMVA::Configurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AssignOpt(const TString &name, T &valAssign) constTMVA::Configurableprivate; BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString)TMVA::Factoryinline; BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile)TMVA::Factoryprivate; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckForUnusedOptions() constTMVA::Configurable; Class()TMVA::Factorystatic; Class_Name()TMVA::Factorystatic; Class_Version()TMVA::Factoryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Configurable(const TString &theOption="""")TMVA::Configurable; Copy(TObject &named) const overrideTNamedvirtual; CrossValidationTMVA::Factoryfriend; DeclareOptionRef(T &ref, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; Decl",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:2709,Performance,load,loader,2709,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:2782,Performance,load,loader,2782,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:2923,Performance,load,loader,2923,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:3059,Performance,load,loader,3059,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:3209,Performance,load,loader,3209,"Error(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EnableLooseOptions(Bool_t b=kTRUE)TMVA::Configurableinlineprotected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EvaluateAllMethods(void)TMVA::Factory; EvaluateAllVariables(DataLoader *loader, TString options="""")TMVA::Factory; EvaluateImportance(DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factory; EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")TMVA::Factoryprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Factory(TString theJobName, TFile *theTargetFile, TString theOption="""")TMVA::Factory; Factory(TString theJobName, TString theOption="""")TMVA::Factory; fAnalysisTypeTMVA::Factoryprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fConfigDescriptionTMVA::Configurableprivate; fCorrelationsTMVA::Factoryprivate; fDefaultTrfsTMVA::Factoryprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgTargetFileTMVA::Factoryprivate; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fJobNam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:5444,Performance,load,loader,5444,"fNameTNamedprotected; fOptionsTMVA::Factoryprivate; fReferenceFileTMVA::Configurableprivate; fROCTMVA::Factoryprivate; fSilentFileTMVA::Factoryprivate; fTitleTNamedprotected; fTransformationsTMVA::Factoryprivate; fUniqueIDTObjectprivate; fVerboseTMVA::Factoryprivate; fVerboseLevelTMVA::Factoryprivate; GetConfigDescription() constTMVA::Configurableinline; GetConfigName() constTMVA::Configurableinline; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetImportance(const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames)TMVA::Factoryprivate; GetMethod(const TString &datasetname, const TString &title) constTMVA::Factory; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetOptions() constTMVA::Configurableinline; GetReferenceFile() constTMVA::Configurableinlineprotected; GetROC(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROC(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(DataLoader *loader, TStr",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:5704,Performance,load,loader,5704,"rivate; fVerboseLevelTMVA::Factoryprivate; GetConfigDescription() constTMVA::Configurableinline; GetConfigName() constTMVA::Configurableinline; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetImportance(const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames)TMVA::Factoryprivate; GetMethod(const TString &datasetname, const TString &title) constTMVA::Factory; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetOptions() constTMVA::Configurableinline; GetReferenceFile() constTMVA::Configurableinlineprotected; GetROC(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROC(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetTitle() const overrideTNamedinlinevirtu",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:6003,Performance,load,loader,6003,"importances, std::vector< TString > varNames)TMVA::Factoryprivate; GetMethod(const TString &datasetname, const TString &title) constTMVA::Factory; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetOptions() constTMVA::Configurableinline; GetReferenceFile() constTMVA::Configurableinlineprotected; GetROC(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROC(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; Greetings()TMVA::Factoryprivate; HandleTimer(TTimer *timer)TObjectvirtual; Hash() const overrideTNamedinlinevirtual; HasInconsistentHash() constTObjectinline; HasMethod(const TString &datasetname, const TString &title) constTMVA::Factory; Info(const char *meth",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:6220,Performance,load,loader,6220,"< TString > varNames)TMVA::Factoryprivate; GetMethod(const TString &datasetname, const TString &title) constTMVA::Factory; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetOptions() constTMVA::Configurableinline; GetReferenceFile() constTMVA::Configurableinlineprotected; GetROC(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROC(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; Greetings()TMVA::Factoryprivate; HandleTimer(TTimer *timer)TObjectvirtual; Hash() const overrideTNamedinlinevirtual; HasInconsistentHash() constTObjectinline; HasMethod(const TString &datasetname, const TString &title) constTMVA::Factory; Info(const char *method, const char *msgfmt,.",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory-members.html:6436,Performance,load,loader,6436,"< TString > varNames)TMVA::Factoryprivate; GetMethod(const TString &datasetname, const TString &title) constTMVA::Factory; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetOptions() constTMVA::Configurableinline; GetReferenceFile() constTMVA::Configurableinlineprotected; GetROC(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROC(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factoryprivate; GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurve(TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCCurveAsMultiGraph(TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetROCIntegral(TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)TMVA::Factory; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; Greetings()TMVA::Factoryprivate; HandleTimer(TTimer *timer)TObjectvirtual; Hash() const overrideTNamedinlinevirtual; HasInconsistentHash() constTObjectinline; HasMethod(const TString &datasetname, const TString &title) constTMVA::Factory; Info(const char *method, const char *msgfmt,.",MatchSource.WIKI,doc/master/classTMVA_1_1Factory-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:10815,Availability,error,error,10815,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:10904,Availability,error,error,10904,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:11059,Availability,error,error,11059,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:11356,Availability,error,error,11356,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:15440,Availability,error,error,15440,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constex",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:26763,Availability,error,error,26763,"ance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou own the retured pointer. ; Definition at line 749 of file Factory.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TString ; datasetname, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). private . Private method to generate a ROCCurve instance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou own the retured pointer. ; Definition at line 762 of file Factory.cxx. ◆ GetROCCurve() [1/4]. TGraph * TMVA::Factory::GetROCCurve ; (; DataLoader * ; loader, . TString ; theMethodName, . Bool_t ; setTitles = kTRUE, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ; It is ignored for binary classification.; Returns a ROC graph for a given method, or nullptr on error.; Note: Evaluation of the given method must have been run prior to ROC generation through Factory::EvaluateAllMetods.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 912 of file Factory.cxx. ◆ GetROCCurve() [2/4]. TCanvas * TMVA::Factory::GetROCCurve ; (; TMVA::DataLoader * ; loader, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification bu",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:28299,Availability,error,error,28299,"Loader * ; loader, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 1061 of file Factory.cxx. ◆ GetROCCurve() [3/4]. TGraph * TMVA::Factory::GetROCCurve ; (; TString ; datasetname, . TString ; theMethodName, . Bool_t ; setTitles = kTRUE, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ; It is ignored for binary classification.; Returns a ROC graph for a given method, or nullptr on error.; Note: Evaluation of the given method must have been run prior to ROC generation through Factory::EvaluateAllMetods.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 932 of file Factory.cxx. ◆ GetROCCurve() [4/4]. TCanvas * TMVA::Factory::GetROCCurve ; (; TString ; datasetname, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the factory for a given class. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22161,Deployability,configurat,configuration,22161,"ory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22367,Deployability,configurat,configurations,22367,"ory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:5248,Integrability,message,message,5248,"ate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ;  ; Bool_t HasMethod (const TString &datasetname, const TString &title) const;  Checks whether a given method name is defined for a given dataset. ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence () const;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &datasetname, const TString &methodTitle="""") const;  ; std::map< TString, Double_t > OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  Iterates through all booked methods and sees if they use parameter tuning and if so does just that, i.e. calls ""Method::Train()"" for different parameter settings and keeps in mind the ""optimal one""... and that's the one that will later on be used in the main training loop. ;  ; void OptimizeAllMethodsForClassification (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  ; void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  ; void PrintHelpMessage (const TString &datasetname, const TString &methodTitle="""") const;  Print predefined help message of classifier. ;  ; TDirectory * RootBaseDir ();  ; void SetVerbose (Bool_t v=kTRUE);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TestAllMethods ();  Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ;  ; void TrainAllMethods ();  Iterates through all booked methods and calls training. ;  ; void TrainAllMethodsForClassification (void);  ; void TrainAllMethodsForRegression (void);  ; Bool_t Verbose (void) const;  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; templat",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:10821,Integrability,message,message,10821,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:11362,Integrability,message,message,11362,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:12352,Integrability,message,message,12352,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:15446,Integrability,message,message,15446,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constex",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:15819,Integrability,message,message,15819," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:18443,Integrability,message,message,18443,"tring &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceRandom (DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceShort (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * GetImportance (const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends;",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:20271,Integrability,message,message,20271,"st of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . TString ; theOption = """" . ). Standard constructor. . jobname : this name will appear in all weight file names produced by the MVAs; theTargetFile : output ROOT file; the test tree and all evaluation plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:31916,Integrability,message,message,31916,"/2]. Double_t TMVA::Factory::GetROCIntegral ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification. ; Definition at line 849 of file Factory.cxx. ◆ GetROCIntegral() [2/2]. Double_t TMVA::Factory::GetROCIntegral ; (; TString ; datasetname, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification. ; Definition at line 862 of file Factory.cxx. ◆ Greetings(). void TMVA::Factory::Greetings ; (; ). private . Print welcome message. ; Options are: kLogoWelcomeMsg, kIsometricWelcomeMsg, kLeanWelcomeMsg ; Definition at line 295 of file Factory.cxx. ◆ HasMethod(). Bool_t TMVA::Factory::HasMethod ; (; const TString & ; datasetname, . const TString & ; title . ); const. Checks whether a given method name is defined for a given dataset. ; Definition at line 586 of file Factory.cxx. ◆ IsA(). virtual TClass * TMVA::Factory::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Definition at line 227 of file Factory.h. ◆ IsModelPersistence(). Bool_t TMVA::Factory::IsModelPersistence ; (; ); const. inline . Definition at line 152 of file Factory.h. ◆ IsSilentFile(). Bool_t TMVA::Factory::IsSilentFile ; (; ); const. inline . Definition at line 151 of file Factory.h. ◆ MakeClass(). void TMVA::Factory::MakeClass ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. virtual . Definition at line 1305 of file Factory.cxx. ◆ O",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:33997,Integrability,message,message,33997,"s ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). Iterates through all booked methods and sees if they use parameter tuning and if so does just that, i.e. calls ""Method::Train()"" for different parameter settings and keeps in mind the ""optimal one""... and that's the one that will later on be used in the main training loop. ; Definition at line 701 of file Factory.cxx. ◆ OptimizeAllMethodsForClassification(). void TMVA::Factory::OptimizeAllMethodsForClassification ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). inline . Definition at line 110 of file Factory.h. ◆ OptimizeAllMethodsForRegression(). void TMVA::Factory::OptimizeAllMethodsForRegression ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). inline . Definition at line 111 of file Factory.h. ◆ PrintHelpMessage(). void TMVA::Factory::PrintHelpMessage ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. Print predefined help message of classifier. ; Iterate over methods and test. ; Definition at line 1333 of file Factory.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Factory::RootBaseDir ; (; ). inline . Definition at line 149 of file Factory.h. ◆ SetInputTreesFromEventAssignTrees(). void TMVA::Factory::SetInputTreesFromEventAssignTrees ; (; ). private . ◆ SetVerbose(). void TMVA::Factory::SetVerbose ; (; Bool_t ; v = kTRUE). Definition at line 343 of file Factory.cxx. ◆ Streamer(). virtual void TMVA::Factory::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable. ◆ StreamerNVirtual(). void TMVA::Factory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file Factory.h. ◆ TestAllMethods(). void TMVA::Factory::TestAllMethods ; (; ). Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ; Definition at line 1271 of file Factory.cxx. ◆ TrainAll",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:613,Modifiability,inherit,inherited,613,". ROOT: TMVA::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Factory Class ReferenceTMVA. ; This is the main MVA steering class. ; It creates all MVA methods, and guides them through the training, testing and evaluation phases. ; Definition at line 80 of file Factory.h. Public Types; typedef std::vector< IMethod * > MVector;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:2147,Modifiability,variab,variables,2147,"<< ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:5869,Modifiability,inherit,inherited,5869,"oid TrainAllMethods ();  Iterates through all booked methods and calls training. ;  ; void TrainAllMethodsForClassification (void);  ; void TrainAllMethodsForRegression (void);  ; Bool_t Verbose (void) const;  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:7618,Modifiability,inherit,inherited,7618,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:9358,Modifiability,inherit,inherited,9358,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:10451,Modifiability,inherit,inheritance,10451,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:12450,Modifiability,inherit,inherits,12450,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:12567,Modifiability,inherit,inherits,12567,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:16320,Modifiability,inherit,inherited,16320," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:16542,Modifiability,inherit,inherited,16542," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:16752,Modifiability,inherit,inherited,16752," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:19501,Modifiability,inherit,inherited,19501,"Set ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:19600,Modifiability,inherit,inherited,19600,"Set ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:20007,Modifiability,inherit,inherited,20007,"Set ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:20212,Modifiability,inherit,inherited,20212,"st of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . TString ; theOption = """" . ). Standard constructor. . jobname : this name will appear in all weight file names produced by the MVAs; theTargetFile : output ROOT file; the test tree and all evaluation plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:20313,Modifiability,inherit,inherited,20313,"st of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . TString ; theOption = """" . ). Standard constructor. . jobname : this name will appear in all weight file names produced by the MVAs; theTargetFile : output ROOT file; the test tree and all evaluation plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22161,Modifiability,config,configuration,22161,"ory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22367,Modifiability,config,configurations,22367,"ory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:23928,Modifiability,variab,variables,23928,"ss describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆ EvaluateAllVariables(). void TMVA::Factory::EvaluateAllVariables ; (; DataLoader * ; loader, . TString ; options = """" . ). Iterates over all MVA input variables and evaluates them. ; Definition at line 1360 of file Factory.cxx. ◆ EvaluateImportance(). TH1F * TMVA::Factory::EvaluateImportance ; (; DataLoader * ; loader, . VIType ; vitype, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). Evaluate Variable Importance. ; Definition at line 2217 of file Factory.cxx. ◆ EvaluateImportanceAll(). TH1F * TMVA::Factory::EvaluateImportanceAll ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2246 of file Factory.cxx. ◆ EvaluateImportanceRandom(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::Factory::EvaluateImportanceShort ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TS",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:1621,Performance,load,loader,1621,"lic Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0,",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:1779,Performance,load,loader,1779,"eKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:2089,Performance,load,loader,2089,"<< ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:2221,Performance,load,loader,2221,";  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:2532,Performance,load,loader,2532,"taLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (TString datasetname, UInt_t i",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:2772,Performance,load,loader,2772,", TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been booked, and calls their evaluation methods. ;  ; void EvaluateAllVariables (DataLoader *loader, TString options="""");  Iterates over all MVA input variables and evaluates them. ;  ; TH1F * EvaluateImportance (DataLoader *loader, VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  Evaluate Variable Importance. ;  ; IMethod * GetMethod (const TString &datasetname, const TString &title) const;  Returns pointer to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; Double_t GetROCIntegral (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETre",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:3407,Performance,load,loader,3407,"r to MVA that corresponds to given method title. ;  ; TGraph * GetROCCurve (DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (DataLoader *loader, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; Double_t GetROCIntegral (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ;  ; Double_t GetROCIntegral (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ;  ; Bool_t HasMethod (const TString &datasetname, const TString &title) const;  Checks whether a given method name is defined for a given dataset. ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence () const;  ; Bool_t IsSilentFile (",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:3770,Performance,load,loader,3770,"ROC curves for all methods booked with the factory for a given class onto a canvas. ;  ; TGraph * GetROCCurve (TString datasetname, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ;  ; TCanvas * GetROCCurve (TString datasetname, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Draws ROC curves for all methods booked with the factory for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (DataLoader *loader, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; TMultiGraph * GetROCCurveAsMultiGraph (TString datasetname, UInt_t iClass, Types::ETreeType type=Types::kTesting);  Generate a collection of graphs, for all methods for a given class. ;  ; Double_t GetROCIntegral (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ;  ; Double_t GetROCIntegral (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ;  ; Bool_t HasMethod (const TString &datasetname, const TString &title) const;  Checks whether a given method name is defined for a given dataset. ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence () const;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &datasetname, const TString &methodTitle="""") const;  ; std::map< TString, Double_t > OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  Iterates through all booked methods and sees if they use parameter tuning and if so does just that, i.e. calls ""Method::Train()"" for different parameter settings and keeps in mind the ""op",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:17561,Performance,load,loader,17561,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceRandom (DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceShort (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * GetImportance (const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ;",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:17688,Performance,load,loader,17688,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceRandom (DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceShort (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * GetImportance (const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ;",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:17829,Performance,load,loader,17829,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceRandom (DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceShort (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * GetImportance (const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ;",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:18055,Performance,load,loader,18055,"ersion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; std::map< TString, MVector * > fMethodsMap;  . Private Member Functions; MethodBase * BookMethodWeightfile (DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);  Adds an already constructed method to be managed by this factory. ;  ; TH1F * EvaluateImportanceAll (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceRandom (DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * EvaluateImportanceShort (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""");  ; TH1F * GetImportance (const int nbits, std::vector< Double_t > importances, std::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ;",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:21767,Performance,load,loader,21767,"::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . TString ; theOption = """" . ). Standard constructor. . jobname : this name will appear in all weight file names produced by the MVAs; theTargetFile : output ROOT file; the test tree and all evaluation plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at line 204 of file Factory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using t",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22038,Performance,load,loader,22038," plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at line 204 of file Factory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::C",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22344,Performance,perform,performance,22344,"ory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22529,Performance,load,loader,22529,":BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:22772,Performance,load,loading,22772," TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:23862,Performance,load,loader,23862,"ile Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆ EvaluateAllVariables(). void TMVA::Factory::EvaluateAllVariables ; (; DataLoader * ; loader, . TString ; options = """" . ). Iterates over all MVA input variables and evaluates them. ; Definition at line 1360 of file Factory.cxx. ◆ EvaluateImportance(). TH1F * TMVA::Factory::EvaluateImportance ; (; DataLoader * ; loader, . VIType ; vitype, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). Evaluate Variable Importance. ; Definition at line 2217 of file Factory.cxx. ◆ EvaluateImportanceAll(). TH1F * TMVA::Factory::EvaluateImportanceAll ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2246 of file Factory.cxx. ◆ EvaluateImportanceRandom(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:24090,Performance,load,loader,24090," Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆ EvaluateAllVariables(). void TMVA::Factory::EvaluateAllVariables ; (; DataLoader * ; loader, . TString ; options = """" . ). Iterates over all MVA input variables and evaluates them. ; Definition at line 1360 of file Factory.cxx. ◆ EvaluateImportance(). TH1F * TMVA::Factory::EvaluateImportance ; (; DataLoader * ; loader, . VIType ; vitype, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). Evaluate Variable Importance. ; Definition at line 2217 of file Factory.cxx. ◆ EvaluateImportanceAll(). TH1F * TMVA::Factory::EvaluateImportanceAll ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2246 of file Factory.cxx. ◆ EvaluateImportanceRandom(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::Factory::EvaluateImportanceShort ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2358 of file Factory.cxx. ◆ GetImportance(). TH1F",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:24374,Performance,load,loader,24374,"the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆ EvaluateAllVariables(). void TMVA::Factory::EvaluateAllVariables ; (; DataLoader * ; loader, . TString ; options = """" . ). Iterates over all MVA input variables and evaluates them. ; Definition at line 1360 of file Factory.cxx. ◆ EvaluateImportance(). TH1F * TMVA::Factory::EvaluateImportance ; (; DataLoader * ; loader, . VIType ; vitype, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). Evaluate Variable Importance. ; Definition at line 2217 of file Factory.cxx. ◆ EvaluateImportanceAll(). TH1F * TMVA::Factory::EvaluateImportanceAll ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2246 of file Factory.cxx. ◆ EvaluateImportanceRandom(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::Factory::EvaluateImportanceShort ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2358 of file Factory.cxx. ◆ GetImportance(). TH1F * TMVA::Factory::GetImportance ; (; const int ; nbits, . std::vector< Double_t > ; importances, . std::vector< TString > ; varNames . ). private . Definition at line 2591 of file Factory.cxx. ◆ GetMethod(). TMVA::IMethod * TMVA::Factory::GetMethod ; (; const TString & ; datasetnam",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:24623,Performance,load,loader,24623,"oid TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆ EvaluateAllVariables(). void TMVA::Factory::EvaluateAllVariables ; (; DataLoader * ; loader, . TString ; options = """" . ). Iterates over all MVA input variables and evaluates them. ; Definition at line 1360 of file Factory.cxx. ◆ EvaluateImportance(). TH1F * TMVA::Factory::EvaluateImportance ; (; DataLoader * ; loader, . VIType ; vitype, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). Evaluate Variable Importance. ; Definition at line 2217 of file Factory.cxx. ◆ EvaluateImportanceAll(). TH1F * TMVA::Factory::EvaluateImportanceAll ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2246 of file Factory.cxx. ◆ EvaluateImportanceRandom(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::Factory::EvaluateImportanceShort ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2358 of file Factory.cxx. ◆ GetImportance(). TH1F * TMVA::Factory::GetImportance ; (; const int ; nbits, . std::vector< Double_t > ; importances, . std::vector< TString > ; varNames . ). private . Definition at line 2591 of file Factory.cxx. ◆ GetMethod(). TMVA::IMethod * TMVA::Factory::GetMethod ; (; const TString & ; datasetname, . const TString & ; title . ); const. Returns pointer to MVA that corresponds to given method title. ; Definition at line 566 of file Factory.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TMVA::DataLoader * ; loader, . TStri",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:24889,Performance,load,loader,24889,"; loader, . TString ; options = """" . ). Iterates over all MVA input variables and evaluates them. ; Definition at line 1360 of file Factory.cxx. ◆ EvaluateImportance(). TH1F * TMVA::Factory::EvaluateImportance ; (; DataLoader * ; loader, . VIType ; vitype, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). Evaluate Variable Importance. ; Definition at line 2217 of file Factory.cxx. ◆ EvaluateImportanceAll(). TH1F * TMVA::Factory::EvaluateImportanceAll ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2246 of file Factory.cxx. ◆ EvaluateImportanceRandom(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::Factory::EvaluateImportanceShort ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2358 of file Factory.cxx. ◆ GetImportance(). TH1F * TMVA::Factory::GetImportance ; (; const int ; nbits, . std::vector< Double_t > ; importances, . std::vector< TString > ; varNames . ). private . Definition at line 2591 of file Factory.cxx. ◆ GetMethod(). TMVA::IMethod * TMVA::Factory::GetMethod ; (; const TString & ; datasetname, . const TString & ; title . ); const. Returns pointer to MVA that corresponds to given method title. ; Definition at line 566 of file Factory.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). private . Private method to generate a ROCCurve instance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:25579,Performance,load,loader,25579,"om(). TH1F * TMVA::Factory::EvaluateImportanceRandom ; (; DataLoader * ; loader, . UInt_t ; nseeds, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2473 of file Factory.cxx. ◆ EvaluateImportanceShort(). TH1F * TMVA::Factory::EvaluateImportanceShort ; (; DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . const char * ; theOption = """" . ). private . Definition at line 2358 of file Factory.cxx. ◆ GetImportance(). TH1F * TMVA::Factory::GetImportance ; (; const int ; nbits, . std::vector< Double_t > ; importances, . std::vector< TString > ; varNames . ). private . Definition at line 2591 of file Factory.cxx. ◆ GetMethod(). TMVA::IMethod * TMVA::Factory::GetMethod ; (; const TString & ; datasetname, . const TString & ; title . ); const. Returns pointer to MVA that corresponds to given method title. ; Definition at line 566 of file Factory.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). private . Private method to generate a ROCCurve instance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou own the retured pointer. ; Definition at line 749 of file Factory.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TString ; datasetname, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). private . Private method to generate a ROCCurve instance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou own the retured pointer. ; Definition at line 762 of file Factory.cxx. ◆ GetROCCurve() [1/4]. TGraph * TMVA::Factory::GetROCCurve ; (; DataLoader * ; loader, . TString ; theMethodName, . Bool_t ; setTitles = kTRUE, . UInt_t ; iClass = 0, . Types::ETreeType ; t",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:26441,Performance,load,loader,26441,"rresponds to given method title. ; Definition at line 566 of file Factory.cxx. ◆ GetROC() [1/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). private . Private method to generate a ROCCurve instance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou own the retured pointer. ; Definition at line 749 of file Factory.cxx. ◆ GetROC() [2/2]. TMVA::ROCCurve * TMVA::Factory::GetROC ; (; TString ; datasetname, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). private . Private method to generate a ROCCurve instance for a given method. ; Handles the conversion from TMVA ResultSet to a format the ROCCurve class understands.; NoteYou own the retured pointer. ; Definition at line 762 of file Factory.cxx. ◆ GetROCCurve() [1/4]. TGraph * TMVA::Factory::GetROCCurve ; (; DataLoader * ; loader, . TString ; theMethodName, . Bool_t ; setTitles = kTRUE, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ; It is ignored for binary classification.; Returns a ROC graph for a given method, or nullptr on error.; Note: Evaluation of the given method must have been run prior to ROC generation through Factory::EvaluateAllMetods.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 912 of file Factory.cxx. ◆ GetROCCurve() [2/4]. TCanvas * TMVA::Factory::GetROCCurve ; (; TMVA::DataLoader * ; loader, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the fac",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:27285,Performance,load,loader,27285,"Curve class understands.; NoteYou own the retured pointer. ; Definition at line 762 of file Factory.cxx. ◆ GetROCCurve() [1/4]. TGraph * TMVA::Factory::GetROCCurve ; (; DataLoader * ; loader, . TString ; theMethodName, . Bool_t ; setTitles = kTRUE, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ; It is ignored for binary classification.; Returns a ROC graph for a given method, or nullptr on error.; Note: Evaluation of the given method must have been run prior to ROC generation through Factory::EvaluateAllMetods.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 912 of file Factory.cxx. ◆ GetROCCurve() [2/4]. TCanvas * TMVA::Factory::GetROCCurve ; (; TMVA::DataLoader * ; loader, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the factory for a given class onto a canvas. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 1061 of file Factory.cxx. ◆ GetROCCurve() [3/4]. TGraph * TMVA::Factory::GetROCCurve ; (; TString ; datasetname, . TString ; theMethodName, . Bool_t ; setTitles = kTRUE, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Argument iClass specifies the class to generate the ROC curve in a multiclass setting. ; It is ignored for binary classification.; Returns a ROC",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:29522,Performance,load,loader,29522,"red signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 932 of file Factory.cxx. ◆ GetROCCurve() [4/4]. TCanvas * TMVA::Factory::GetROCCurve ; (; TString ; datasetname, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the factory for a given class. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 1077 of file Factory.cxx. ◆ GetROCCurveAsMultiGraph() [1/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; DataLoader * ; loader, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 988 of file Factory.cxx. ◆ GetROCCurveAsMultiGraph() [2/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; TString ; datasetname, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to g",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:29698,Performance,perform,performance,29698,". ; Definition at line 932 of file Factory.cxx. ◆ GetROCCurve() [4/4]. TCanvas * TMVA::Factory::GetROCCurve ; (; TString ; datasetname, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Draws ROC curves for all methods booked with the factory for a given class. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 1077 of file Factory.cxx. ◆ GetROCCurveAsMultiGraph() [1/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; DataLoader * ; loader, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 988 of file Factory.cxx. ◆ GetROCCurveAsMultiGraph() [2/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; TString ; datasetname, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered backgro",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:30436,Performance,perform,performance,30436,"veAsMultiGraph() [1/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; DataLoader * ; loader, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 988 of file Factory.cxx. ◆ GetROCCurveAsMultiGraph() [2/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; TString ; datasetname, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 1005 of file Factory.cxx. ◆ GetROCIntegral() [1/2]. Double_t TMVA::Factory::GetROCIntegral ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification. ; Definition at line 849 of file Factory.cxx. ◆ GetROCIntegral() [2/2]. Double_t TMVA::Factory::GetROCIn",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:30982,Performance,load,loader,30982,". This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 988 of file Factory.cxx. ◆ GetROCCurveAsMultiGraph() [2/2]. TMultiGraph * TMVA::Factory::GetROCCurveAsMultiGraph ; (; TString ; datasetname, . UInt_t ; iClass, . Types::ETreeType ; type = Types::kTesting . ). Generate a collection of graphs, for all methods for a given class. ; Suitable for comparing method performance.; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification.; NOTE: The ROC curve is 1 vs. all where the given class is considered signal and the others considered background. This is ok in binary classification but in in multi class classification, the ROC surface is an N dimensional shape, where N is number of classes - 1. ; Definition at line 1005 of file Factory.cxx. ◆ GetROCIntegral() [1/2]. Double_t TMVA::Factory::GetROCIntegral ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification. ; Definition at line 849 of file Factory.cxx. ◆ GetROCIntegral() [2/2]. Double_t TMVA::Factory::GetROCIntegral ; (; TString ; datasetname, . TString ; theMethodName, . UInt_t ; iClass = 0, . Types::ETreeType ; type = Types::kTesting . ). Calculate the integral of the ROC curve, also known as the area under curve (AUC), for a given method. ; Argument iClass specifies the class to generate the ROC curve in a multiclass setting. It is ignored for binary classification. ; Definition at line 862 of file Factory.cxx. ◆ Greetings(). void TMVA::Factory::Greetings ; (; ). private . Print welcome message. ; Options are: kLogoWelcomeMs",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:8486,Security,hash,hash,8486,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:466,Testability,test,testing,466,". ROOT: TMVA::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Factory Class ReferenceTMVA. ; This is the main MVA steering class. ; It creates all MVA methods, and guides them through the training, testing and evaluation phases. ; Definition at line 80 of file Factory.h. Public Types; typedef std::vector< IMethod * > MVector;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:5547,Testability,test,testing,5547,"g &methodTitle="""") const;  ; std::map< TString, Double_t > OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  Iterates through all booked methods and sees if they use parameter tuning and if so does just that, i.e. calls ""Method::Train()"" for different parameter settings and keeps in mind the ""optimal one""... and that's the one that will later on be used in the main training loop. ;  ; void OptimizeAllMethodsForClassification (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  ; void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  ; void PrintHelpMessage (const TString &datasetname, const TString &methodTitle="""") const;  Print predefined help message of classifier. ;  ; TDirectory * RootBaseDir ();  ; void SetVerbose (Bool_t v=kTRUE);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TestAllMethods ();  Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ;  ; void TrainAllMethods ();  Iterates through all booked methods and calls training. ;  ; void TrainAllMethodsForClassification (void);  ; void TrainAllMethodsForRegression (void);  ; Bool_t Verbose (void) const;  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:19291,Testability,test,test,19291,"d::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:19406,Testability,log,logging,19406,"d::vector< TString > varNames);  ; ROCCurve * GetROC (DataLoader *loader, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; ROCCurve * GetROC (TString datasetname, TString theMethodName, UInt_t iClass=0, Types::ETreeType type=Types::kTesting);  Private method to generate a ROCCurve instance for a given method. ;  ; void Greetings ();  Print welcome message. ;  ; void SetInputTreesFromEventAssignTrees ();  ; void WriteDataInformation (DataSetInfo &fDataSetInfo);  . Private Attributes; Types::EAnalysisType fAnalysisType;  ! the training type ;  ; Bool_t fCorrelations;  ! enable to calculate correlations ;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  ! list of transformations on default DataSet ;  ; TFile * fgTargetFile;  ! ROOT output file ;  ; TString fJobName;  ! jobname, used as extension in weight file names ;  ; Bool_t fModelPersistence;  ! option to save the trained model in xml file or using serialization ;  ; TString fOptions;  ! option string given by construction (presently only ""V"") ;  ; Bool_t fROC;  ! enable to calculate ROC values ;  ; Bool_t fSilentFile;  ! used in constructor without file ;  ; TString fTransformations;  ! list of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:20279,Testability,log,logger,20279,"st of transformations to test ;  ; Bool_t fVerbose;  ! verbose mode ;  ; TString fVerboseLevel;  ! verbosity level, controls granularity of logging ;  . Friends; class CrossValidation;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . TString ; theOption = """" . ). Standard constructor. . jobname : this name will appear in all weight file names produced by the MVAs; theTargetFile : output ROOT file; the test tree and all evaluation plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:20978,Testability,test,test,20978,";  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/Factory.h>. Inheritance diagram for TMVA::Factory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ MVector. typedef std::vector<IMethod*> TMVA::Factory::MVector. Definition at line 84 of file Factory.h. Constructor & Destructor Documentation. ◆ Factory() [1/2]. TMVA::Factory::Factory ; (; TString ; jobName, . TFile * ; theTargetFile, . TString ; theOption = """" . ). Standard constructor. . jobname : this name will appear in all weight file names produced by the MVAs; theTargetFile : output ROOT file; the test tree and all evaluation plots will be stored here; theOption : option string; currently: ""V"" for verbose . Definition at line 113 of file Factory.cxx. ◆ Factory() [2/2]. TMVA::Factory::Factory ; (; TString ; theJobName, . TString ; theOption = """" . ). Constructor. ; Definition at line 204 of file Factory.cxx. ◆ ~Factory(). TMVA::Factory::~Factory ; (; void ; ). virtual . Destructor. ; Definition at line 306 of file Factory.cxx. Member Function Documentation. ◆ BookMethod() [1/3]. MethodBase * TMVA::Factory::BookMethod ; (; DataLoader * ; , . TMVA::Types::EMVA ; , . TString ; , . TString ; , . TMVA::Types::EMVA ; , . TString ;  . ). inline . Definition at line 102 of file Factory.h. ◆ BookMethod() [2/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::Me",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:34047,Testability,test,test,34047,""", . TString ; fitType = ""FitGA"" . ). Iterates through all booked methods and sees if they use parameter tuning and if so does just that, i.e. calls ""Method::Train()"" for different parameter settings and keeps in mind the ""optimal one""... and that's the one that will later on be used in the main training loop. ; Definition at line 701 of file Factory.cxx. ◆ OptimizeAllMethodsForClassification(). void TMVA::Factory::OptimizeAllMethodsForClassification ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). inline . Definition at line 110 of file Factory.h. ◆ OptimizeAllMethodsForRegression(). void TMVA::Factory::OptimizeAllMethodsForRegression ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). inline . Definition at line 111 of file Factory.h. ◆ PrintHelpMessage(). void TMVA::Factory::PrintHelpMessage ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. Print predefined help message of classifier. ; Iterate over methods and test. ; Definition at line 1333 of file Factory.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Factory::RootBaseDir ; (; ). inline . Definition at line 149 of file Factory.h. ◆ SetInputTreesFromEventAssignTrees(). void TMVA::Factory::SetInputTreesFromEventAssignTrees ; (; ). private . ◆ SetVerbose(). void TMVA::Factory::SetVerbose ; (; Bool_t ; v = kTRUE). Definition at line 343 of file Factory.cxx. ◆ Streamer(). virtual void TMVA::Factory::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable. ◆ StreamerNVirtual(). void TMVA::Factory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file Factory.h. ◆ TestAllMethods(). void TMVA::Factory::TestAllMethods ; (; ). Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ; Definition at line 1271 of file Factory.cxx. ◆ TrainAllMethods(). void TMVA::Factory::TrainAll",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:34861,Testability,test,testing,34861,"pMessage ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. Print predefined help message of classifier. ; Iterate over methods and test. ; Definition at line 1333 of file Factory.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Factory::RootBaseDir ; (; ). inline . Definition at line 149 of file Factory.h. ◆ SetInputTreesFromEventAssignTrees(). void TMVA::Factory::SetInputTreesFromEventAssignTrees ; (; ). private . ◆ SetVerbose(). void TMVA::Factory::SetVerbose ; (; Bool_t ; v = kTRUE). Definition at line 343 of file Factory.cxx. ◆ Streamer(). virtual void TMVA::Factory::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable. ◆ StreamerNVirtual(). void TMVA::Factory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file Factory.h. ◆ TestAllMethods(). void TMVA::Factory::TestAllMethods ; (; ). Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ; Definition at line 1271 of file Factory.cxx. ◆ TrainAllMethods(). void TMVA::Factory::TrainAllMethods ; (; ). Iterates through all booked methods and calls training. ; Definition at line 1114 of file Factory.cxx. ◆ TrainAllMethodsForClassification(). void TMVA::Factory::TrainAllMethodsForClassification ; (; void ; ). inline . Definition at line 115 of file Factory.h. ◆ TrainAllMethodsForRegression(). void TMVA::Factory::TrainAllMethodsForRegression ; (; void ; ). inline . Definition at line 116 of file Factory.h. ◆ Verbose(). Bool_t TMVA::Factory::Verbose ; (; void ; ); const. inline . Definition at line 134 of file Factory.h. ◆ WriteDataInformation(). void TMVA::Factory::WriteDataInformation ; (; DataSetInfo & ; fDataSetInfo). private . Definition at line 602 of file Factory.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 81 of file Factory.h. Member ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:37464,Testability,test,test,37464,"Factory::fCorrelations. private . ! enable to calculate correlations ; Definition at line 215 of file Factory.h. ◆ fDefaultTrfs. std::vector<TMVA::VariableTransformBase*> TMVA::Factory::fDefaultTrfs. private . ! list of transformations on default DataSet ; Definition at line 208 of file Factory.h. ◆ fgTargetFile. TFile* TMVA::Factory::fgTargetFile. private . ! ROOT output file ; Definition at line 205 of file Factory.h. ◆ fJobName. TString TMVA::Factory::fJobName. private . ! jobname, used as extension in weight file names ; Definition at line 219 of file Factory.h. ◆ fMethodsMap. std::map<TString,MVector*> TMVA::Factory::fMethodsMap. Definition at line 85 of file Factory.h. ◆ fModelPersistence. Bool_t TMVA::Factory::fModelPersistence. private . ! option to save the trained model in xml file or using serialization ; Definition at line 222 of file Factory.h. ◆ fOptions. TString TMVA::Factory::fOptions. private . ! option string given by construction (presently only ""V"") ; Definition at line 211 of file Factory.h. ◆ fROC. Bool_t TMVA::Factory::fROC. private . ! enable to calculate ROC values ; Definition at line 216 of file Factory.h. ◆ fSilentFile. Bool_t TMVA::Factory::fSilentFile. private . ! used in constructor without file ; Definition at line 217 of file Factory.h. ◆ fTransformations. TString TMVA::Factory::fTransformations. private . ! list of transformations to test ; Definition at line 212 of file Factory.h. ◆ fVerbose. Bool_t TMVA::Factory::fVerbose. private . ! verbose mode ; Definition at line 213 of file Factory.h. ◆ fVerboseLevel. TString TMVA::Factory::fVerboseLevel. private . ! verbosity level, controls granularity of logging ; Definition at line 214 of file Factory.h. Libraries for TMVA::Factory:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Factory.h; tmva/tmva/src/Factory.cxx. TMVAFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:37734,Testability,log,logging,37734,"Factory::fCorrelations. private . ! enable to calculate correlations ; Definition at line 215 of file Factory.h. ◆ fDefaultTrfs. std::vector<TMVA::VariableTransformBase*> TMVA::Factory::fDefaultTrfs. private . ! list of transformations on default DataSet ; Definition at line 208 of file Factory.h. ◆ fgTargetFile. TFile* TMVA::Factory::fgTargetFile. private . ! ROOT output file ; Definition at line 205 of file Factory.h. ◆ fJobName. TString TMVA::Factory::fJobName. private . ! jobname, used as extension in weight file names ; Definition at line 219 of file Factory.h. ◆ fMethodsMap. std::map<TString,MVector*> TMVA::Factory::fMethodsMap. Definition at line 85 of file Factory.h. ◆ fModelPersistence. Bool_t TMVA::Factory::fModelPersistence. private . ! option to save the trained model in xml file or using serialization ; Definition at line 222 of file Factory.h. ◆ fOptions. TString TMVA::Factory::fOptions. private . ! option string given by construction (presently only ""V"") ; Definition at line 211 of file Factory.h. ◆ fROC. Bool_t TMVA::Factory::fROC. private . ! enable to calculate ROC values ; Definition at line 216 of file Factory.h. ◆ fSilentFile. Bool_t TMVA::Factory::fSilentFile. private . ! used in constructor without file ; Definition at line 217 of file Factory.h. ◆ fTransformations. TString TMVA::Factory::fTransformations. private . ! list of transformations to test ; Definition at line 212 of file Factory.h. ◆ fVerbose. Bool_t TMVA::Factory::fVerbose. private . ! verbose mode ; Definition at line 213 of file Factory.h. ◆ fVerboseLevel. TString TMVA::Factory::fVerboseLevel. private . ! verbosity level, controls granularity of logging ; Definition at line 214 of file Factory.h. Libraries for TMVA::Factory:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Factory.h; tmva/tmva/src/Factory.cxx. TMVAFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1Factory.html:432,Usability,guid,guides,432,". ROOT: TMVA::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Factory Class ReferenceTMVA. ; This is the main MVA steering class. ; It creates all MVA methods, and guides them through the training, testing and evaluation phases. ; Definition at line 80 of file Factory.h. Public Types; typedef std::vector< IMethod * > MVector;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been ",MatchSource.WIKI,doc/master/classTMVA_1_1Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:6271,Availability,error,error,6271,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:6360,Availability,error,error,6360,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:6515,Availability,error,error,6515,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:6812,Availability,error,error,6812,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:10896,Availability,error,error,10896,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constex",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:395,Integrability,interface,interface,395,". ROOT: TMVA::FitterBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::FitterBase Class ReferenceabstractTMVA. ; Base class for TMVA fitters. ; Also defines generalised fitting interface ; Definition at line 51 of file FitterBase.h. Public Member Functions;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; virtual TClass * IsA () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; virtual Double_t Run (std::vector< Double_t > &pars)=0;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<cl",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:737,Integrability,interface,interface,737,". ROOT: TMVA::FitterBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::FitterBase Class ReferenceabstractTMVA. ; Base class for TMVA fitters. ; Also defines generalised fitting interface ; Definition at line 51 of file FitterBase.h. Public Member Functions;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; virtual TClass * IsA () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; virtual Double_t Run (std::vector< Double_t > &pars)=0;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<cl",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:969,Integrability,interface,interface,969,"OT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::FitterBase Class ReferenceabstractTMVA. ; Base class for TMVA fitters. ; Also defines generalised fitting interface ; Definition at line 51 of file FitterBase.h. Public Member Functions;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; virtual TClass * IsA () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; virtual Double_t Run (std::vector< Double_t > &pars)=0;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:6277,Integrability,message,message,6277,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:6818,Integrability,message,message,6818,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:7808,Integrability,message,message,7808,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:10902,Integrability,message,message,10902,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constex",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:11275,Integrability,message,message,11275," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:12786,Integrability,message,message,12786,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13788,Integrability,message,message,13788," of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:16191,Integrability,interface,interface,16191,"tterBase.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::FitterBase::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::FitterBase::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::FitterBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 97 of file FitterBase.h. ◆ DeclareOptions(). virtual void TMVA::FitterBase::DeclareOptions ; (; ). protectedpure virtual . Implemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ DeclFileName(). static const char * TMVA::FitterBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 97 of file FitterBase.h. ◆ EstimatorFunction(). Double_t TMVA::FitterBase::EstimatorFunction ; (; std::vector< Double_t > & ; parameters). estimator function interface for fitting ; Definition at line 88 of file FitterBase.cxx. ◆ GetFitterTarget(). IFitterTarget & TMVA::FitterBase::GetFitterTarget ; (; ); const. inline . Definition at line 64 of file FitterBase.h. ◆ GetName(). const char * TMVA::FitterBase::GetName ; (; ); const. inlinevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 70 of file FitterBase.h. ◆ GetNpars(). Int_t TMVA::FitterBase::GetNpars ; (; ); const. inline . Definition at line 67 of file FitterBase.h. ◆ IsA(). virtual TClass * TMVA::FitterBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter.; Definition at line 97 of file FitterBase.h. ◆ Log(). MsgLogger & TMVA::FitterBase::Log ; (; ); const. inlineprotected . message logger ; ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:17197,Integrability,message,message,17197," at line 88 of file FitterBase.cxx. ◆ GetFitterTarget(). IFitterTarget & TMVA::FitterBase::GetFitterTarget ; (; ); const. inline . Definition at line 64 of file FitterBase.h. ◆ GetName(). const char * TMVA::FitterBase::GetName ; (; ); const. inlinevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 70 of file FitterBase.h. ◆ GetNpars(). Int_t TMVA::FitterBase::GetNpars ; (; ); const. inline . Definition at line 67 of file FitterBase.h. ◆ IsA(). virtual TClass * TMVA::FitterBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter.; Definition at line 97 of file FitterBase.h. ◆ Log(). MsgLogger & TMVA::FitterBase::Log ; (; ); const. inlineprotected . message logger ; Definition at line 89 of file FitterBase.h. ◆ Run() [1/2]. Double_t TMVA::FitterBase::Run ; (; ). estimator function interface for fitting ; Definition at line 74 of file FitterBase.cxx. ◆ Run() [2/2]. virtual Double_t TMVA::FitterBase::Run ; (; std::vector< Double_t > & ; pars). pure virtual . Implemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ SetIPythonInteractive(). void TMVA::FitterBase::SetIPythonInteractive ; (; bool * ; ExitFromTraining, . UInt_t * ; fIPyMaxIter_, . UInt_t * ; fIPyCurrentIter_ . ). inline . Definition at line 73 of file FitterBase.h. ◆ Streamer(). virtual void TMVA::FitterBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ StreamerNVirtual(). void TMVA::FitterBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inlin",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:17331,Integrability,interface,interface,17331," . Definition at line 64 of file FitterBase.h. ◆ GetName(). const char * TMVA::FitterBase::GetName ; (; ); const. inlinevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 70 of file FitterBase.h. ◆ GetNpars(). Int_t TMVA::FitterBase::GetNpars ; (; ); const. inline . Definition at line 67 of file FitterBase.h. ◆ IsA(). virtual TClass * TMVA::FitterBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter.; Definition at line 97 of file FitterBase.h. ◆ Log(). MsgLogger & TMVA::FitterBase::Log ; (; ); const. inlineprotected . message logger ; Definition at line 89 of file FitterBase.h. ◆ Run() [1/2]. Double_t TMVA::FitterBase::Run ; (; ). estimator function interface for fitting ; Definition at line 74 of file FitterBase.cxx. ◆ Run() [2/2]. virtual Double_t TMVA::FitterBase::Run ; (; std::vector< Double_t > & ; pars). pure virtual . Implemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ SetIPythonInteractive(). void TMVA::FitterBase::SetIPythonInteractive ; (; bool * ; ExitFromTraining, . UInt_t * ; fIPyMaxIter_, . UInt_t * ; fIPyCurrentIter_ . ). inline . Definition at line 73 of file FitterBase.h. ◆ Streamer(). virtual void TMVA::FitterBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ StreamerNVirtual(). void TMVA::FitterBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file FitterBase.h. Member Data Documentation. ◆ fClassName. TString TMVA::FitterBase::fClassName. p",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:1325,Modifiability,inherit,inherited,1325,"MaxIter_, UInt_t *fIPyCurrentIter_);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:3074,Modifiability,inherit,inherited,3074,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:4814,Modifiability,inherit,inherited,4814,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:5907,Modifiability,inherit,inheritance,5907,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:7906,Modifiability,inherit,inherits,7906,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:8023,Modifiability,inherit,inherits,8023,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:11776,Modifiability,inherit,inherited,11776," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:11998,Modifiability,inherit,inherited,11998," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:12208,Modifiability,inherit,inherited,12208," ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:12834,Modifiability,inherit,inherited,12834,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13241,Modifiability,inherit,inherited,13241,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13729,Modifiability,inherit,inherited,13729," of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13830,Modifiability,inherit,inherited,13830," of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13934,Modifiability,inherit,inherited,13934," const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/FitterBase.h>. Inheritance diagram for TMVA::FitterBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FitterBase(). TMVA::FitterBase::FitterBase ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > ",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:14575,Modifiability,inherit,inherited,14575,"ter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/FitterBase.h>. Inheritance diagram for TMVA::FitterBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FitterBase(). TMVA::FitterBase::FitterBase ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 56 of file FitterBase.cxx. ◆ ~FitterBase(). virtual TMVA::FitterBase::~FitterBase ; (; ). inlinevirtual . Definition at line 58 of file FitterBase.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::FitterBase::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::FitterBase::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::FitterBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion o",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:3942,Security,hash,hash,3942,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:12794,Testability,log,logger,12794,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13796,Testability,log,logger,13796," of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1FitterBase.html:17205,Testability,log,logger,17205," at line 88 of file FitterBase.cxx. ◆ GetFitterTarget(). IFitterTarget & TMVA::FitterBase::GetFitterTarget ; (; ); const. inline . Definition at line 64 of file FitterBase.h. ◆ GetName(). const char * TMVA::FitterBase::GetName ; (; ); const. inlinevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 70 of file FitterBase.h. ◆ GetNpars(). Int_t TMVA::FitterBase::GetNpars ; (; ); const. inline . Definition at line 67 of file FitterBase.h. ◆ IsA(). virtual TClass * TMVA::FitterBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter.; Definition at line 97 of file FitterBase.h. ◆ Log(). MsgLogger & TMVA::FitterBase::Log ; (; ); const. inlineprotected . message logger ; Definition at line 89 of file FitterBase.h. ◆ Run() [1/2]. Double_t TMVA::FitterBase::Run ; (; ). estimator function interface for fitting ; Definition at line 74 of file FitterBase.cxx. ◆ Run() [2/2]. virtual Double_t TMVA::FitterBase::Run ; (; std::vector< Double_t > & ; pars). pure virtual . Implemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ SetIPythonInteractive(). void TMVA::FitterBase::SetIPythonInteractive ; (; bool * ; ExitFromTraining, . UInt_t * ; fIPyMaxIter_, . UInt_t * ; fIPyCurrentIter_ . ). inline . Definition at line 73 of file FitterBase.h. ◆ Streamer(). virtual void TMVA::FitterBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ StreamerNVirtual(). void TMVA::FitterBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inlin",MatchSource.WIKI,doc/master/classTMVA_1_1FitterBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:8086,Energy Efficiency,reduce,reduce,8086,"ewValue; ; Definition at line 123 of file GeneticAlgorithm.cxx. ◆ SetMakeCopies(). void TMVA::GeneticAlgorithm::SetMakeCopies ; (; Bool_t ; s). inline . Definition at line 72 of file GeneticAlgorithm.h. ◆ SetSpread(). void TMVA::GeneticAlgorithm::SetSpread ; (; Double_t ; s). inline . Definition at line 70 of file GeneticAlgorithm.h. ◆ SpreadControl(). Double_t TMVA::GeneticAlgorithm::SpreadControl ; (; Int_t ; ofSteps, . Int_t ; successSteps, . Double_t ; factor . ). virtual . this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor. (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread is divided by the factor); using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the stepSize if we are in a difficult ""territory"" of the phase-space. ; Definition at line 217 of file GeneticAlgorithm.cxx. ◆ Streamer(). virtual void TMVA::GeneticAlgorithm::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::GeneticAlgorithm::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file GeneticAlgorithm.h. Member Data Documentation. ◆ fBestFitness. Double_t TMVA::GeneticAlgorithm::fBestFitness. protected . Definition at line 99 of file GeneticAlgorithm.h. ◆ fConvCounter. Int_t TMVA::GeneticAlgorithm::fConvCounter. Definition at line 75 of file GeneticAlgorithm.h. ◆ fConvValue. Double_t TMVA::GeneticAlgorithm::fConvValue. protected . Definition at line 81 of file GeneticAlgorithm.h. ◆ fFirstTime. Bool_t TMVA::GeneticAlgorithm::fFirstTime. protected . Definition at line 91 of file GeneticAlgorithm.h. ◆ fFitterTar",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:2134,Integrability,message,message,2134,"ve lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ;  ; void Init ();  calls evolution, but if it is not the first time. ;  ; virtual TClass * IsA () const;  ; virtual Double_t NewFitness (Double_t oldValue, Double_t newValue);  if the ""fitnessFunction"" is called multiple times for one set of factors (because i.e. ;  ; void SetMakeCopies (Bool_t s);  ; void SetSpread (Double_t s);  ; virtual Double_t SpreadControl (Int_t steps, Int_t ofSteps, Double_t factor);  this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; Int_t fConvCounter;  . Protected Member Functions; MsgLogger & Log () const;  message logger ;  . Protected Attributes; Double_t fBestFitness;  ; Double_t fConvValue;  ; Bool_t fFirstTime;  ; IFitterTarget & fFitterTarget;  ; Double_t fLastResult;  ; MsgLogger * fLogger;  ; Bool_t fMakeCopies;  ; Bool_t fMirror;  ; GeneticPopulation fPopulation;  ; Int_t fPopulationSize;  ; const std::vector< TMVA::Interval * > & fRanges;  ; Double_t fSpread;  ; std::deque< Int_t > fSuccessList;  . #include <TMVA/GeneticAlgorithm.h>; Constructor & Destructor Documentation. ◆ GeneticAlgorithm(). TMVA::GeneticAlgorithm::GeneticAlgorithm ; (; IFitterTarget & ; target, . Int_t ; populationSize, . const std::vector< TMVA::Interval * > & ; ranges, . UInt_t ; seed = 0 . ). Constructor. ; Parameters:. int populationSize : defines the number of ""Individuals"" which are created and tested within one Generation (Iteration of the Evolution); std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin gets the low and GetMax gets the",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:6255,Integrability,message,message,6255,"rged ; (; Int_t ; steps = 10, . Double_t ; improvement = 0.1 . ). virtual . gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ; this gives a simple measure of if the fitness of the individuals is converging and no major improvement is to be expected soon. ; Definition at line 260 of file GeneticAlgorithm.cxx. ◆ Init(). void TMVA::GeneticAlgorithm::Init ; (; ). calls evolution, but if it is not the first time. ; If it's the first time, the random population created by the constructor is still not evaluated, .. therefore we wait for the second time init is called. ; Definition at line 101 of file GeneticAlgorithm.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticAlgorithm::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticAlgorithm.h. ◆ Log(). MsgLogger & TMVA::GeneticAlgorithm::Log ; (; ); const. inlineprotected . message logger ; Definition at line 102 of file GeneticAlgorithm.h. ◆ NewFitness(). Double_t TMVA::GeneticAlgorithm::NewFitness ; (; Double_t ; oldValue, . Double_t ; newValue . ). virtual . if the ""fitnessFunction"" is called multiple times for one set of factors (because i.e. ; each event of a TTree has to be assessed with each set of Factors proposed by the Genetic Algorithm) the value of the current calculation has to be added(? or else) to the value obtained up to now. example: some chi-square is calculated for every event, after every event the new chi-square (newValue) has to be simply added to the oldValue.; this function has to be overridden eventually it might contain only the following return statement. return oldValue + newValue; ; Definition at line 123 of file GeneticAlgorithm.cxx. ◆ SetMakeCopies(). void TMVA::GeneticAlgorithm::SetMakeCopies ; (; Bool_t ; s). inline . Definition at line 72 of file GeneticAlgorithm.h. ◆ SetSpread(). void TMVA::GeneticAlgorithm::SetSpread ; (; Double_t ; s). inline . Defi",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:3140,Modifiability,variab,variable,3140,"ounter;  . Protected Member Functions; MsgLogger & Log () const;  message logger ;  . Protected Attributes; Double_t fBestFitness;  ; Double_t fConvValue;  ; Bool_t fFirstTime;  ; IFitterTarget & fFitterTarget;  ; Double_t fLastResult;  ; MsgLogger * fLogger;  ; Bool_t fMakeCopies;  ; Bool_t fMirror;  ; GeneticPopulation fPopulation;  ; Int_t fPopulationSize;  ; const std::vector< TMVA::Interval * > & fRanges;  ; Double_t fSpread;  ; std::deque< Int_t > fSuccessList;  . #include <TMVA/GeneticAlgorithm.h>; Constructor & Destructor Documentation. ◆ GeneticAlgorithm(). TMVA::GeneticAlgorithm::GeneticAlgorithm ; (; IFitterTarget & ; target, . Int_t ; populationSize, . const std::vector< TMVA::Interval * > & ; ranges, . UInt_t ; seed = 0 . ). Constructor. ; Parameters:. int populationSize : defines the number of ""Individuals"" which are created and tested within one Generation (Iteration of the Evolution); std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin gets the low and GetMax gets the high constraint of the variable the size of ""ranges"" is the number of coefficients which are optimised Purpose:; Creates a random population with individuals of the size ranges.size() . Definition at line 69 of file GeneticAlgorithm.cxx. ◆ ~GeneticAlgorithm(). TMVA::GeneticAlgorithm::~GeneticAlgorithm ; (; ). virtual . Definition at line 88 of file GeneticAlgorithm.cxx. Member Function Documentation. ◆ CalculateFitness(). Double_t TMVA::GeneticAlgorithm::CalculateFitness ; (; ). virtual . starts the evaluation of the fitness of all different individuals of the population. ; this function calls implicitly (many times) the ""fitnessFunction"" which has been overridden by the user. ; Definition at line 135 of file GeneticAlgorithm.cxx. ◆ Class(). static TClass * TMVA::GeneticAlgorithm::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GeneticAlgorithm::Class_Name ; (; ). static . ReturnsName",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:7673,Modifiability,variab,variable,7673," to now. example: some chi-square is calculated for every event, after every event the new chi-square (newValue) has to be simply added to the oldValue.; this function has to be overridden eventually it might contain only the following return statement. return oldValue + newValue; ; Definition at line 123 of file GeneticAlgorithm.cxx. ◆ SetMakeCopies(). void TMVA::GeneticAlgorithm::SetMakeCopies ; (; Bool_t ; s). inline . Definition at line 72 of file GeneticAlgorithm.h. ◆ SetSpread(). void TMVA::GeneticAlgorithm::SetSpread ; (; Double_t ; s). inline . Definition at line 70 of file GeneticAlgorithm.h. ◆ SpreadControl(). Double_t TMVA::GeneticAlgorithm::SpreadControl ; (; Int_t ; ofSteps, . Int_t ; successSteps, . Double_t ; factor . ). virtual . this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor. (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread is divided by the factor); using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the stepSize if we are in a difficult ""territory"" of the phase-space. ; Definition at line 217 of file GeneticAlgorithm.cxx. ◆ Streamer(). virtual void TMVA::GeneticAlgorithm::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::GeneticAlgorithm::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file GeneticAlgorithm.h. Member Data Documentation. ◆ fBestFitness. Double_t TMVA::GeneticAlgorithm::fBestFitness. protected . Definition at line 99 of file GeneticAlgorithm.h. ◆ fConvCounter. Int_t TMVA::GeneticAlgorithm::fConvCounter. Definition at line 75 of file",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:2142,Testability,log,logger,2142,"ve lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ;  ; void Init ();  calls evolution, but if it is not the first time. ;  ; virtual TClass * IsA () const;  ; virtual Double_t NewFitness (Double_t oldValue, Double_t newValue);  if the ""fitnessFunction"" is called multiple times for one set of factors (because i.e. ;  ; void SetMakeCopies (Bool_t s);  ; void SetSpread (Double_t s);  ; virtual Double_t SpreadControl (Int_t steps, Int_t ofSteps, Double_t factor);  this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; Int_t fConvCounter;  . Protected Member Functions; MsgLogger & Log () const;  message logger ;  . Protected Attributes; Double_t fBestFitness;  ; Double_t fConvValue;  ; Bool_t fFirstTime;  ; IFitterTarget & fFitterTarget;  ; Double_t fLastResult;  ; MsgLogger * fLogger;  ; Bool_t fMakeCopies;  ; Bool_t fMirror;  ; GeneticPopulation fPopulation;  ; Int_t fPopulationSize;  ; const std::vector< TMVA::Interval * > & fRanges;  ; Double_t fSpread;  ; std::deque< Int_t > fSuccessList;  . #include <TMVA/GeneticAlgorithm.h>; Constructor & Destructor Documentation. ◆ GeneticAlgorithm(). TMVA::GeneticAlgorithm::GeneticAlgorithm ; (; IFitterTarget & ; target, . Int_t ; populationSize, . const std::vector< TMVA::Interval * > & ; ranges, . UInt_t ; seed = 0 . ). Constructor. ; Parameters:. int populationSize : defines the number of ""Individuals"" which are created and tested within one Generation (Iteration of the Evolution); std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin gets the low and GetMax gets the",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:2923,Testability,test,tested,2923,"ounter;  . Protected Member Functions; MsgLogger & Log () const;  message logger ;  . Protected Attributes; Double_t fBestFitness;  ; Double_t fConvValue;  ; Bool_t fFirstTime;  ; IFitterTarget & fFitterTarget;  ; Double_t fLastResult;  ; MsgLogger * fLogger;  ; Bool_t fMakeCopies;  ; Bool_t fMirror;  ; GeneticPopulation fPopulation;  ; Int_t fPopulationSize;  ; const std::vector< TMVA::Interval * > & fRanges;  ; Double_t fSpread;  ; std::deque< Int_t > fSuccessList;  . #include <TMVA/GeneticAlgorithm.h>; Constructor & Destructor Documentation. ◆ GeneticAlgorithm(). TMVA::GeneticAlgorithm::GeneticAlgorithm ; (; IFitterTarget & ; target, . Int_t ; populationSize, . const std::vector< TMVA::Interval * > & ; ranges, . UInt_t ; seed = 0 . ). Constructor. ; Parameters:. int populationSize : defines the number of ""Individuals"" which are created and tested within one Generation (Iteration of the Evolution); std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin gets the low and GetMax gets the high constraint of the variable the size of ""ranges"" is the number of coefficients which are optimised Purpose:; Creates a random population with individuals of the size ranges.size() . Definition at line 69 of file GeneticAlgorithm.cxx. ◆ ~GeneticAlgorithm(). TMVA::GeneticAlgorithm::~GeneticAlgorithm ; (; ). virtual . Definition at line 88 of file GeneticAlgorithm.cxx. Member Function Documentation. ◆ CalculateFitness(). Double_t TMVA::GeneticAlgorithm::CalculateFitness ; (; ). virtual . starts the evaluation of the fitness of all different individuals of the population. ; this function calls implicitly (many times) the ""fitnessFunction"" which has been overridden by the user. ; Definition at line 135 of file GeneticAlgorithm.cxx. ◆ Class(). static TClass * TMVA::GeneticAlgorithm::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GeneticAlgorithm::Class_Name ; (; ). static . ReturnsName",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:6263,Testability,log,logger,6263,"rged ; (; Int_t ; steps = 10, . Double_t ; improvement = 0.1 . ). virtual . gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ; this gives a simple measure of if the fitness of the individuals is converging and no major improvement is to be expected soon. ; Definition at line 260 of file GeneticAlgorithm.cxx. ◆ Init(). void TMVA::GeneticAlgorithm::Init ; (; ). calls evolution, but if it is not the first time. ; If it's the first time, the random population created by the constructor is still not evaluated, .. therefore we wait for the second time init is called. ; Definition at line 101 of file GeneticAlgorithm.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticAlgorithm::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticAlgorithm.h. ◆ Log(). MsgLogger & TMVA::GeneticAlgorithm::Log ; (; ); const. inlineprotected . message logger ; Definition at line 102 of file GeneticAlgorithm.h. ◆ NewFitness(). Double_t TMVA::GeneticAlgorithm::NewFitness ; (; Double_t ; oldValue, . Double_t ; newValue . ). virtual . if the ""fitnessFunction"" is called multiple times for one set of factors (because i.e. ; each event of a TTree has to be assessed with each set of Factors proposed by the Genetic Algorithm) the value of the current calculation has to be added(? or else) to the value obtained up to now. example: some chi-square is calculated for every event, after every event the new chi-square (newValue) has to be simply added to the oldValue.; this function has to be overridden eventually it might contain only the following return statement. return oldValue + newValue; ; Definition at line 123 of file GeneticAlgorithm.cxx. ◆ SetMakeCopies(). void TMVA::GeneticAlgorithm::SetMakeCopies ; (; Bool_t ; s). inline . Definition at line 72 of file GeneticAlgorithm.h. ◆ SetSpread(). void TMVA::GeneticAlgorithm::SetSpread ; (; Double_t ; s). inline . Defi",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:5512,Usability,simpl,simple,5512,"Evolution(). void TMVA::GeneticAlgorithm::Evolution ; (; ). virtual . this function is called from ""init"" and controls the evolution of the individuals. ; The function can be overridden to change the parameters for mutation rate sexual reproduction and so on. ; Definition at line 190 of file GeneticAlgorithm.cxx. ◆ GetGeneticPopulation(). GeneticPopulation & TMVA::GeneticAlgorithm::GetGeneticPopulation ; (; ). inline . Definition at line 67 of file GeneticAlgorithm.h. ◆ GetMakeCopies(). Bool_t TMVA::GeneticAlgorithm::GetMakeCopies ; (; ). inline . Definition at line 73 of file GeneticAlgorithm.h. ◆ GetSpread(). Double_t TMVA::GeneticAlgorithm::GetSpread ; (; ); const. inline . Definition at line 69 of file GeneticAlgorithm.h. ◆ HasConverged(). Bool_t TMVA::GeneticAlgorithm::HasConverged ; (; Int_t ; steps = 10, . Double_t ; improvement = 0.1 . ). virtual . gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ; this gives a simple measure of if the fitness of the individuals is converging and no major improvement is to be expected soon. ; Definition at line 260 of file GeneticAlgorithm.cxx. ◆ Init(). void TMVA::GeneticAlgorithm::Init ; (; ). calls evolution, but if it is not the first time. ; If it's the first time, the random population created by the constructor is still not evaluated, .. therefore we wait for the second time init is called. ; Definition at line 101 of file GeneticAlgorithm.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticAlgorithm::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticAlgorithm.h. ◆ Log(). MsgLogger & TMVA::GeneticAlgorithm::Log ; (; ); const. inlineprotected . message logger ; Definition at line 102 of file GeneticAlgorithm.h. ◆ NewFitness(). Double_t TMVA::GeneticAlgorithm::NewFitness ; (; Double_t ; oldValue, . Double_t ; newValue . ). virtual . if the ""fitnessFunction"" is called multiple time",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:6847,Usability,simpl,simply,6847,"time, the random population created by the constructor is still not evaluated, .. therefore we wait for the second time init is called. ; Definition at line 101 of file GeneticAlgorithm.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticAlgorithm::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticAlgorithm.h. ◆ Log(). MsgLogger & TMVA::GeneticAlgorithm::Log ; (; ); const. inlineprotected . message logger ; Definition at line 102 of file GeneticAlgorithm.h. ◆ NewFitness(). Double_t TMVA::GeneticAlgorithm::NewFitness ; (; Double_t ; oldValue, . Double_t ; newValue . ). virtual . if the ""fitnessFunction"" is called multiple times for one set of factors (because i.e. ; each event of a TTree has to be assessed with each set of Factors proposed by the Genetic Algorithm) the value of the current calculation has to be added(? or else) to the value obtained up to now. example: some chi-square is calculated for every event, after every event the new chi-square (newValue) has to be simply added to the oldValue.; this function has to be overridden eventually it might contain only the following return statement. return oldValue + newValue; ; Definition at line 123 of file GeneticAlgorithm.cxx. ◆ SetMakeCopies(). void TMVA::GeneticAlgorithm::SetMakeCopies ; (; Bool_t ; s). inline . Definition at line 72 of file GeneticAlgorithm.h. ◆ SetSpread(). void TMVA::GeneticAlgorithm::SetSpread ; (; Double_t ; s). inline . Definition at line 70 of file GeneticAlgorithm.h. ◆ SpreadControl(). Double_t TMVA::GeneticAlgorithm::SpreadControl ; (; Int_t ; ofSteps, . Int_t ; successSteps, . Double_t ; factor . ). virtual . this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSiz",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticAlgorithm.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:6770,Availability,error,error,6770,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:6859,Availability,error,error,6859,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:7014,Availability,error,error,7014,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:7311,Availability,error,error,7311,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:11395,Availability,error,error,11395,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:915,Deployability,configurat,configuration,915,". ROOT: TMVA::GeneticFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::GeneticFitter Class ReferenceTMVA. ; Fitter using a Genetic Algorithm. ; Definition at line 44 of file GeneticFitter.h. Public Member Functions;  GeneticFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~GeneticFitter ();  ; virtual TClass * IsA () const;  ; Double_t NewFitness (Double_t oldF, Double_t newF);  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles, Int_t nsteps, Int_t popSize, Int_t SC_steps, Int_t SC_rate, Double_t SC_factor, Double_t convCrit);  set GA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:19012,Deployability,configurat,configuration,19012,"lFileName(). static const char * TMVA::GeneticFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file GeneticFitter.h. ◆ IsA(). virtual TClass * TMVA::GeneticFitter::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::FitterBase.; Definition at line 81 of file GeneticFitter.h. ◆ NewFitness(). Double_t TMVA::GeneticFitter::NewFitness ; (; Double_t ; oldF, . Double_t ; newF . ). inline . Definition at line 63 of file GeneticFitter.h. ◆ Run(). Double_t TMVA::GeneticFitter::Run ; (; std::vector< Double_t > & ; pars). virtual . Execute fitting. ; Implements TMVA::FitterBase.; Definition at line 107 of file GeneticFitter.cxx. ◆ SetParameters(). void TMVA::GeneticFitter::SetParameters ; (; Int_t ; cycles, . Int_t ; nsteps, . Int_t ; popSize, . Int_t ; SC_steps, . Int_t ; SC_rate, . Double_t ; SC_factor, . Double_t ; convCrit . ). set GA configuration parameters ; Definition at line 87 of file GeneticFitter.cxx. ◆ Streamer(). virtual void TMVA::GeneticFitter::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::FitterBase. ◆ StreamerNVirtual(). void TMVA::GeneticFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file GeneticFitter.h. Member Data Documentation. ◆ fConvCrit. Double_t TMVA::GeneticFitter::fConvCrit. private . improvements bigger than fConvCrit are counted as ""improvement"" ; Definition at line 75 of file GeneticFitter.h. ◆ fCycles. Int_t TMVA::GeneticFitter::fCycles. private . number of (nearly) independent calculation cycles ; Definition at line 69 of file GeneticFitter.h. ◆ fNsteps. Int_t TMVA::GeneticFitter::fNsteps. private . convergence criteria: if no improvements > fConvCrit was achieved within the last fNsteps: cycle has ""converged"" ; Definition at line 70 of file GeneticFitter.h. ◆ fPopSize. Int_t TMVA::GeneticFitter::fPopS",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:1405,Integrability,interface,interface,1405,"embers ; TMVA::GeneticFitter Class ReferenceTMVA. ; Fitter using a Genetic Algorithm. ; Definition at line 44 of file GeneticFitter.h. Public Member Functions;  GeneticFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~GeneticFitter ();  ; virtual TClass * IsA () const;  ; Double_t NewFitness (Double_t oldF, Double_t newF);  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles, Int_t nsteps, Int_t popSize, Int_t SC_steps, Int_t SC_rate, Double_t SC_factor, Double_t convCrit);  set GA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; templa",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:1603,Integrability,interface,interface,1603,"e of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:6776,Integrability,message,message,6776,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:7317,Integrability,message,message,7317,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:8307,Integrability,message,message,8307,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:11401,Integrability,message,message,11401,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:11774,Integrability,message,message,11774," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class (); ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:15660,Integrability,message,message,15660,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16695,Integrability,message,message,16695," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticFitter(). TMVA::GeneticFitter::GeneticFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 50 of file GeneticFitter.cxx. ◆ ~GeneticFitter(). virtual TMVA::GeneticFitter::~GeneticFitter ; (; ). inlinevirtual . Definition at line 51 of file GeneticFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticFitter::Class ; (; ). static . ReturnsTClass describin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:915,Modifiability,config,configuration,915,". ROOT: TMVA::GeneticFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::GeneticFitter Class ReferenceTMVA. ; Fitter using a Genetic Algorithm. ; Definition at line 44 of file GeneticFitter.h. Public Member Functions;  GeneticFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~GeneticFitter ();  ; virtual TClass * IsA () const;  ; Double_t NewFitness (Double_t oldF, Double_t newF);  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles, Int_t nsteps, Int_t popSize, Int_t SC_steps, Int_t SC_rate, Double_t SC_factor, Double_t convCrit);  set GA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:1111,Modifiability,inherit,inherited,1111,"embers ; TMVA::GeneticFitter Class ReferenceTMVA. ; Fitter using a Genetic Algorithm. ; Definition at line 44 of file GeneticFitter.h. Public Member Functions;  GeneticFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~GeneticFitter ();  ; virtual TClass * IsA () const;  ; Double_t NewFitness (Double_t oldF, Double_t newF);  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles, Int_t nsteps, Int_t popSize, Int_t SC_steps, Int_t SC_rate, Double_t SC_factor, Double_t convCrit);  set GA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; templa",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:1824,Modifiability,inherit,inherited,1824,"e of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:3573,Modifiability,inherit,inherited,3573,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:5313,Modifiability,inherit,inherited,5313,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:6406,Modifiability,inherit,inheritance,6406,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:8405,Modifiability,inherit,inherits,8405,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:8522,Modifiability,inherit,inherits,8522,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:12275,Modifiability,inherit,inherited,12275,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  declare GA options ;  . Private Attributes; Double_t fConvCrit;  improvements bigger than fConvCrit are counted as ""improvement"" ;  ; Int_t fCycles;",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:12495,Modifiability,inherit,inherited,12495,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  declare GA options ;  . Private Attributes; Double_t fConvCrit;  improvements bigger than fConvCrit are counted as ""improvement"" ;  ; Int_t fCycles;",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:12717,Modifiability,inherit,inherited,12717,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  declare GA options ;  . Private Attributes; Double_t fConvCrit;  improvements bigger than fConvCrit are counted as ""improvement"" ;  ; Int_t fCycles;",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:12927,Modifiability,inherit,inherited,12927,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  declare GA options ;  . Private Attributes; Double_t fConvCrit;  improvements bigger than fConvCrit are counted as ""improvement"" ;  ; Int_t fCycles;",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:14860,Modifiability,inherit,inherited,14860,"e cycle (these are included as ""hints"" in the last cycle of GA calculation) ;  ; Int_t fSaveBestFromGeneration;  store the best individuals from one generation (these are included as ""hints"" in the last cycle of GA calculation) ;  ; Double_t fSC_factor;  ... with fSC_factor; if there were less improvements: divide by that factor; if there were exactly fSC_rate improvements, dont change anything ;  ; Int_t fSC_rate;  ... fSC_rate improvements, than multiply the sigma of the gaussian which defines how the random numbers are generated ... ;  ; Int_t fSC_steps;  regulates how strong the mutations for the coordinates are: if within fSC_steps there were more than... ;  ; UInt_t fSeed;  Seed for the random generator (0 takes random seeds) ;  ; Bool_t fTrim;  take care, that the number of individuals is less fPopSize (trimming is done after the fitness of the individuals is assessed) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet fl",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:15501,Modifiability,inherit,inherited,15501,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:15600,Modifiability,inherit,inherited,15600,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:15708,Modifiability,inherit,inherited,15708,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16115,Modifiability,inherit,inherited,16115,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16320,Modifiability,inherit,inherited,16320," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticFitter(). TMVA::GeneticFitter::GeneticFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 50 of file GeneticFitter.cxx. ◆ ~GeneticFitter(). virtual TMVA::GeneticFitter::~GeneticFitter ; (; ). inlinevirtual . Definition at line 51 of file GeneticFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticFitter::Class ; (; ). static . ReturnsTClass describin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16636,Modifiability,inherit,inherited,16636," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticFitter(). TMVA::GeneticFitter::GeneticFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 50 of file GeneticFitter.cxx. ◆ ~GeneticFitter(). virtual TMVA::GeneticFitter::~GeneticFitter ; (; ). inlinevirtual . Definition at line 51 of file GeneticFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticFitter::Class ; (; ). static . ReturnsTClass describin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16737,Modifiability,inherit,inherited,16737," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticFitter(). TMVA::GeneticFitter::GeneticFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 50 of file GeneticFitter.cxx. ◆ ~GeneticFitter(). virtual TMVA::GeneticFitter::~GeneticFitter ; (; ). inlinevirtual . Definition at line 51 of file GeneticFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticFitter::Class ; (; ). static . ReturnsTClass describin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:19012,Modifiability,config,configuration,19012,"lFileName(). static const char * TMVA::GeneticFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file GeneticFitter.h. ◆ IsA(). virtual TClass * TMVA::GeneticFitter::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::FitterBase.; Definition at line 81 of file GeneticFitter.h. ◆ NewFitness(). Double_t TMVA::GeneticFitter::NewFitness ; (; Double_t ; oldF, . Double_t ; newF . ). inline . Definition at line 63 of file GeneticFitter.h. ◆ Run(). Double_t TMVA::GeneticFitter::Run ; (; std::vector< Double_t > & ; pars). virtual . Execute fitting. ; Implements TMVA::FitterBase.; Definition at line 107 of file GeneticFitter.cxx. ◆ SetParameters(). void TMVA::GeneticFitter::SetParameters ; (; Int_t ; cycles, . Int_t ; nsteps, . Int_t ; popSize, . Int_t ; SC_steps, . Int_t ; SC_rate, . Double_t ; SC_factor, . Double_t ; convCrit . ). set GA configuration parameters ; Definition at line 87 of file GeneticFitter.cxx. ◆ Streamer(). virtual void TMVA::GeneticFitter::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::FitterBase. ◆ StreamerNVirtual(). void TMVA::GeneticFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file GeneticFitter.h. Member Data Documentation. ◆ fConvCrit. Double_t TMVA::GeneticFitter::fConvCrit. private . improvements bigger than fConvCrit are counted as ""improvement"" ; Definition at line 75 of file GeneticFitter.h. ◆ fCycles. Int_t TMVA::GeneticFitter::fCycles. private . number of (nearly) independent calculation cycles ; Definition at line 69 of file GeneticFitter.h. ◆ fNsteps. Int_t TMVA::GeneticFitter::fNsteps. private . convergence criteria: if no improvements > fConvCrit was achieved within the last fNsteps: cycle has ""converged"" ; Definition at line 70 of file GeneticFitter.h. ◆ fPopSize. Int_t TMVA::GeneticFitter::fPopS",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:4441,Security,hash,hash,4441,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:15668,Testability,log,logger,15668,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16703,Testability,log,logger,16703," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticFitter(). TMVA::GeneticFitter::GeneticFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 50 of file GeneticFitter.cxx. ◆ ~GeneticFitter(). virtual TMVA::GeneticFitter::~GeneticFitter ; (; ). inlinevirtual . Definition at line 51 of file GeneticFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticFitter::Class ; (; ). static . ReturnsTClass describin",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html
https://root.cern/doc/master/classTMVA_1_1GeneticGenes.html:323,Integrability,interface,interface,323,". ROOT: TMVA::GeneticGenes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::GeneticGenes Class ReferenceTMVA. ; Cut optimisation interface class for genetic algorithm. ; Definition at line 41 of file GeneticGenes.h. Public Member Functions;  GeneticGenes ();  ;  GeneticGenes (std::vector< Double_t > &f);  Constructor: set the factors of this individual. ;  ; virtual ~GeneticGenes ();  ; std::vector< Double_t > & GetFactors ();  ; Double_t GetFitness () const;  ; virtual TClass * IsA () const;  ; void SetFitness (Double_t fitness);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; std::vector< Double_t > fFactors;  ; Double_t fFitness;  . Friends; Bool_t operator< (const GeneticGenes &, const GeneticGenes &);  . #include <TMVA/GeneticGenes.h>; Constructor & Destructor Documentation. ◆ GeneticGenes() [1/2]. TMVA::GeneticGenes::GeneticGenes ; (; ). inline . Definition at line 45 of file GeneticGenes.h. ◆ GeneticGenes() [2/2]. TMVA::GeneticGenes::GeneticGenes ; (; std::vector< Double_t > & ; f). Constructor: set the factors of this individual. ; Definition at line 44 of file GeneticGenes.cxx. ◆ ~GeneticGenes(). virtual TMVA::GeneticGenes::~GeneticGenes ; (; ). inlinevirtual . Definition at line 47 of file GeneticGenes.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticGenes::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GeneticGenes::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Gene",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticGenes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticGenes.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:3451,Integrability,message,message,3451,";  ; void TrimPopulation ();  trim the population to the predefined size ;  ; std::vector< Double_t > VariableDistribution (Int_t varNumber);  gives back all the values of coefficient ""varNumber"" of the current generation ;  ; TH1F * VariableDistribution (Int_t varNumber, Int_t bins, Int_t min, Int_t max);  give back a histogram with the distribution of the coefficients. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  ; GeneticGenes MakeSex (GeneticGenes male, GeneticGenes female);  this function takes two individuals and produces offspring by mixing (recombining) their coefficients. ;  . Private Attributes; std::vector< TMVA::GeneticGenes > fGenePool;  the ""genePool"" where the individuals of the current generation are stored ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t fPopulationSizeLimit;  ; TRandom3 * fRandomGenerator;  random Generator for this population ;  ; std::vector< TMVA::GeneticRange * > fRanges;  contains the ranges in between the values of the coefficients have to be ;  . #include <TMVA/GeneticPopulation.h>; Constructor & Destructor Documentation. ◆ GeneticPopulation(). TMVA::GeneticPopulation::GeneticPopulation ; (; const std::vector< TMVA::Interval * > & ; ranges, . Int_t ; size, . UInt_t ; seed = 0 . ). Constructor. ; Definition at line 49 of file GeneticPopulation.cxx. ◆ ~GeneticPopulation(). TMVA::GeneticPopulation::~GeneticPopulation ; (; ). virtual . destructor ; Definition at line 78 of file GeneticPopulation.cxx. Member Function Documentation. ◆ AddPopulation() [1/2]. void TMVA::GeneticPopulation::AddPopulation ; (; GeneticPopulation & ; strangers). add another population (strangers) to the one of this GeneticPopulation ; Definition at line 291 of file GeneticPopulation.cxx. ◆ AddPopulation() [2/2]. void TMVA::GeneticPopulation::AddPopulat",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:11613,Integrability,message,message,11613,"e population to the predefined size ; Definition at line 299 of file GeneticPopulation.cxx. ◆ VariableDistribution() [1/2]. vector< Double_t > TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber). gives back all the values of coefficient ""varNumber"" of the current generation ; Definition at line 268 of file GeneticPopulation.cxx. ◆ VariableDistribution() [2/2]. TH1F * TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber, . Int_t ; bins, . Int_t ; min, . Int_t ; max . ). give back a histogram with the distribution of the coefficients. ; Parameters:. int bins : number of bins of the histogram; int min : histogram minimum; int max : maximum value of the histogram . Definition at line 251 of file GeneticPopulation.cxx. Member Data Documentation. ◆ fGenePool. std::vector<TMVA::GeneticGenes> TMVA::GeneticPopulation::fGenePool. private . the ""genePool"" where the individuals of the current generation are stored ; Definition at line 94 of file GeneticPopulation.h. ◆ fLogger. MsgLogger* TMVA::GeneticPopulation::fLogger. mutableprivate . ! message logger ; Definition at line 99 of file GeneticPopulation.h. ◆ fPopulationSizeLimit. Int_t TMVA::GeneticPopulation::fPopulationSizeLimit. private . Definition at line 102 of file GeneticPopulation.h. ◆ fRandomGenerator. TRandom3* TMVA::GeneticPopulation::fRandomGenerator. private . random Generator for this population ; Definition at line 97 of file GeneticPopulation.h. ◆ fRanges. std::vector<TMVA::GeneticRange*> TMVA::GeneticPopulation::fRanges. private . contains the ranges in between the values of the coefficients have to be ; Definition at line 95 of file GeneticPopulation.h. Libraries for TMVA::GeneticPopulation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GeneticPopulation.h; tmva/tmva/src/GeneticPopulation.cxx. TMVAGeneticPopulation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:1394,Modifiability,variab,variables,1394,"t line 48 of file GeneticPopulation.h. Public Member Functions;  GeneticPopulation (const std::vector< TMVA::Interval * > &ranges, Int_t size, UInt_t seed=0);  Constructor. ;  ; virtual ~GeneticPopulation ();  destructor ;  ; void AddPopulation (GeneticPopulation &strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; void AddPopulation (GeneticPopulation *strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; Double_t GetFitness () const;  ; std::vector< TMVA::GeneticGenes > & GetGenePool ();  ; const std::vector< TMVA::GeneticGenes > & GetGenePool () const;  ; GeneticGenes * GetGenes (Int_t index);  gives back the ""Genes"" of the population with the given index. ;  ; Int_t GetPopulationSize () const;  ; std::vector< TMVA::GeneticRange * > & GetRanges ();  ; const std::vector< TMVA::GeneticRange * > & GetRanges () const;  ; void GiveHint (std::vector< Double_t > &hint, Double_t fitness=0);  add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ;  ; virtual TClass * IsA () const;  ; void MakeChildren ();  Creates children out of members of the current generation. ;  ; void MakeCopies (int number);  Produces offspring which is are copies of their parents. ;  ; void Mutate (Double_t probability=20, Int_t startIndex=0, Bool_t near=kFALSE, Double_t spread=0.1, Bool_t mirror=kFALSE);  Mutates the individuals in the genePool. ;  ; void NextGeneration ();  ; void Print (Int_t untilIndex=-1);  make a little printout of the individuals up to index ""untilIndex"" this means, . ;  ; void Print (std::ostream &out, Int_t utilIndex=-1);  make a little printout to the stream ""out"" of the individuals up to index ""untilIndex"" this means, . ;  ; void SetRandomSeed (UInt_t seed=0);  the random seed of the random generator ;  ; void Sort ();  sort the genepool according to the fitness of the individuals ;  ; vi",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:1444,Modifiability,variab,variables,1444,"t line 48 of file GeneticPopulation.h. Public Member Functions;  GeneticPopulation (const std::vector< TMVA::Interval * > &ranges, Int_t size, UInt_t seed=0);  Constructor. ;  ; virtual ~GeneticPopulation ();  destructor ;  ; void AddPopulation (GeneticPopulation &strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; void AddPopulation (GeneticPopulation *strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; Double_t GetFitness () const;  ; std::vector< TMVA::GeneticGenes > & GetGenePool ();  ; const std::vector< TMVA::GeneticGenes > & GetGenePool () const;  ; GeneticGenes * GetGenes (Int_t index);  gives back the ""Genes"" of the population with the given index. ;  ; Int_t GetPopulationSize () const;  ; std::vector< TMVA::GeneticRange * > & GetRanges ();  ; const std::vector< TMVA::GeneticRange * > & GetRanges () const;  ; void GiveHint (std::vector< Double_t > &hint, Double_t fitness=0);  add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ;  ; virtual TClass * IsA () const;  ; void MakeChildren ();  Creates children out of members of the current generation. ;  ; void MakeCopies (int number);  Produces offspring which is are copies of their parents. ;  ; void Mutate (Double_t probability=20, Int_t startIndex=0, Bool_t near=kFALSE, Double_t spread=0.1, Bool_t mirror=kFALSE);  Mutates the individuals in the genePool. ;  ; void NextGeneration ();  ; void Print (Int_t untilIndex=-1);  make a little printout of the individuals up to index ""untilIndex"" this means, . ;  ; void Print (std::ostream &out, Int_t utilIndex=-1);  make a little printout to the stream ""out"" of the individuals up to index ""untilIndex"" this means, . ;  ; void SetRandomSeed (UInt_t seed=0);  the random seed of the random generator ;  ; void Sort ();  sort the genepool according to the fitness of the individuals ;  ; vi",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:6620,Modifiability,variab,variables,6620,"l ; (; ); const. inline . Definition at line 65 of file GeneticPopulation.h. ◆ GetGenes(). TMVA::GeneticGenes * TMVA::GeneticPopulation::GetGenes ; (; Int_t ; index). gives back the ""Genes"" of the population with the given index. ; Definition at line 194 of file GeneticPopulation.cxx. ◆ GetPopulationSize(). Int_t TMVA::GeneticPopulation::GetPopulationSize ; (; ); const. inline . Definition at line 62 of file GeneticPopulation.h. ◆ GetRanges() [1/2]. std::vector< TMVA::GeneticRange * > & TMVA::GeneticPopulation::GetRanges ; (; ). inline . Definition at line 69 of file GeneticPopulation.h. ◆ GetRanges() [2/2]. const std::vector< TMVA::GeneticRange * > & TMVA::GeneticPopulation::GetRanges ; (; ); const. inline . Definition at line 66 of file GeneticPopulation.h. ◆ GiveHint(). void TMVA::GeneticPopulation::GiveHint ; (; std::vector< Double_t > & ; hint, . Double_t ; fitness = 0 . ). add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ; Definition at line 310 of file GeneticPopulation.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticPopulation::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticPopulation.h. ◆ Log(). MsgLogger & TMVA::GeneticPopulation::Log ; (; ); const. inlineprivate . Definition at line 100 of file GeneticPopulation.h. ◆ MakeChildren(). void TMVA::GeneticPopulation::MakeChildren ; (; ). Creates children out of members of the current generation. ; Children have a combination of the coefficients of their parents ; Definition at line 119 of file GeneticPopulation.cxx. ◆ MakeCopies(). void TMVA::GeneticPopulation::MakeCopies ; (; int ; number). Produces offspring which is are copies of their parents. ; Parameters:; int number : the number of the last individual to be copied . Definition at line 104 of file GeneticPopulation.cxx. ◆ MakeSex(). TMVA::GeneticGenes TMVA::GeneticPopulation::",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:6670,Modifiability,variab,variables,6670,"l ; (; ); const. inline . Definition at line 65 of file GeneticPopulation.h. ◆ GetGenes(). TMVA::GeneticGenes * TMVA::GeneticPopulation::GetGenes ; (; Int_t ; index). gives back the ""Genes"" of the population with the given index. ; Definition at line 194 of file GeneticPopulation.cxx. ◆ GetPopulationSize(). Int_t TMVA::GeneticPopulation::GetPopulationSize ; (; ); const. inline . Definition at line 62 of file GeneticPopulation.h. ◆ GetRanges() [1/2]. std::vector< TMVA::GeneticRange * > & TMVA::GeneticPopulation::GetRanges ; (; ). inline . Definition at line 69 of file GeneticPopulation.h. ◆ GetRanges() [2/2]. const std::vector< TMVA::GeneticRange * > & TMVA::GeneticPopulation::GetRanges ; (; ); const. inline . Definition at line 66 of file GeneticPopulation.h. ◆ GiveHint(). void TMVA::GeneticPopulation::GiveHint ; (; std::vector< Double_t > & ; hint, . Double_t ; fitness = 0 . ). add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ; Definition at line 310 of file GeneticPopulation.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticPopulation::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticPopulation.h. ◆ Log(). MsgLogger & TMVA::GeneticPopulation::Log ; (; ); const. inlineprivate . Definition at line 100 of file GeneticPopulation.h. ◆ MakeChildren(). void TMVA::GeneticPopulation::MakeChildren ; (; ). Creates children out of members of the current generation. ; Children have a combination of the coefficients of their parents ; Definition at line 119 of file GeneticPopulation.cxx. ◆ MakeCopies(). void TMVA::GeneticPopulation::MakeCopies ; (; int ; number). Produces offspring which is are copies of their parents. ; Parameters:; int number : the number of the last individual to be copied . Definition at line 104 of file GeneticPopulation.cxx. ◆ MakeSex(). TMVA::GeneticGenes TMVA::GeneticPopulation::",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:1472,Performance,perform,perform,1472,"t line 48 of file GeneticPopulation.h. Public Member Functions;  GeneticPopulation (const std::vector< TMVA::Interval * > &ranges, Int_t size, UInt_t seed=0);  Constructor. ;  ; virtual ~GeneticPopulation ();  destructor ;  ; void AddPopulation (GeneticPopulation &strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; void AddPopulation (GeneticPopulation *strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; Double_t GetFitness () const;  ; std::vector< TMVA::GeneticGenes > & GetGenePool ();  ; const std::vector< TMVA::GeneticGenes > & GetGenePool () const;  ; GeneticGenes * GetGenes (Int_t index);  gives back the ""Genes"" of the population with the given index. ;  ; Int_t GetPopulationSize () const;  ; std::vector< TMVA::GeneticRange * > & GetRanges ();  ; const std::vector< TMVA::GeneticRange * > & GetRanges () const;  ; void GiveHint (std::vector< Double_t > &hint, Double_t fitness=0);  add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ;  ; virtual TClass * IsA () const;  ; void MakeChildren ();  Creates children out of members of the current generation. ;  ; void MakeCopies (int number);  Produces offspring which is are copies of their parents. ;  ; void Mutate (Double_t probability=20, Int_t startIndex=0, Bool_t near=kFALSE, Double_t spread=0.1, Bool_t mirror=kFALSE);  Mutates the individuals in the genePool. ;  ; void NextGeneration ();  ; void Print (Int_t untilIndex=-1);  make a little printout of the individuals up to index ""untilIndex"" this means, . ;  ; void Print (std::ostream &out, Int_t utilIndex=-1);  make a little printout to the stream ""out"" of the individuals up to index ""untilIndex"" this means, . ;  ; void SetRandomSeed (UInt_t seed=0);  the random seed of the random generator ;  ; void Sort ();  sort the genepool according to the fitness of the individuals ;  ; vi",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:6698,Performance,perform,perform,6698,"l ; (; ); const. inline . Definition at line 65 of file GeneticPopulation.h. ◆ GetGenes(). TMVA::GeneticGenes * TMVA::GeneticPopulation::GetGenes ; (; Int_t ; index). gives back the ""Genes"" of the population with the given index. ; Definition at line 194 of file GeneticPopulation.cxx. ◆ GetPopulationSize(). Int_t TMVA::GeneticPopulation::GetPopulationSize ; (; ); const. inline . Definition at line 62 of file GeneticPopulation.h. ◆ GetRanges() [1/2]. std::vector< TMVA::GeneticRange * > & TMVA::GeneticPopulation::GetRanges ; (; ). inline . Definition at line 69 of file GeneticPopulation.h. ◆ GetRanges() [2/2]. const std::vector< TMVA::GeneticRange * > & TMVA::GeneticPopulation::GetRanges ; (; ); const. inline . Definition at line 66 of file GeneticPopulation.h. ◆ GiveHint(). void TMVA::GeneticPopulation::GiveHint ; (; std::vector< Double_t > & ; hint, . Double_t ; fitness = 0 . ). add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ; Definition at line 310 of file GeneticPopulation.cxx. ◆ IsA(). virtual TClass * TMVA::GeneticPopulation::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 104 of file GeneticPopulation.h. ◆ Log(). MsgLogger & TMVA::GeneticPopulation::Log ; (; ); const. inlineprivate . Definition at line 100 of file GeneticPopulation.h. ◆ MakeChildren(). void TMVA::GeneticPopulation::MakeChildren ; (; ). Creates children out of members of the current generation. ; Children have a combination of the coefficients of their parents ; Definition at line 119 of file GeneticPopulation.cxx. ◆ MakeCopies(). void TMVA::GeneticPopulation::MakeCopies ; (; int ; number). Produces offspring which is are copies of their parents. ; Parameters:; int number : the number of the last individual to be copied . Definition at line 104 of file GeneticPopulation.cxx. ◆ MakeSex(). TMVA::GeneticGenes TMVA::GeneticPopulation::",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:3459,Testability,log,logger,3459,";  ; void TrimPopulation ();  trim the population to the predefined size ;  ; std::vector< Double_t > VariableDistribution (Int_t varNumber);  gives back all the values of coefficient ""varNumber"" of the current generation ;  ; TH1F * VariableDistribution (Int_t varNumber, Int_t bins, Int_t min, Int_t max);  give back a histogram with the distribution of the coefficients. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  ; GeneticGenes MakeSex (GeneticGenes male, GeneticGenes female);  this function takes two individuals and produces offspring by mixing (recombining) their coefficients. ;  . Private Attributes; std::vector< TMVA::GeneticGenes > fGenePool;  the ""genePool"" where the individuals of the current generation are stored ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t fPopulationSizeLimit;  ; TRandom3 * fRandomGenerator;  random Generator for this population ;  ; std::vector< TMVA::GeneticRange * > fRanges;  contains the ranges in between the values of the coefficients have to be ;  . #include <TMVA/GeneticPopulation.h>; Constructor & Destructor Documentation. ◆ GeneticPopulation(). TMVA::GeneticPopulation::GeneticPopulation ; (; const std::vector< TMVA::Interval * > & ; ranges, . Int_t ; size, . UInt_t ; seed = 0 . ). Constructor. ; Definition at line 49 of file GeneticPopulation.cxx. ◆ ~GeneticPopulation(). TMVA::GeneticPopulation::~GeneticPopulation ; (; ). virtual . destructor ; Definition at line 78 of file GeneticPopulation.cxx. Member Function Documentation. ◆ AddPopulation() [1/2]. void TMVA::GeneticPopulation::AddPopulation ; (; GeneticPopulation & ; strangers). add another population (strangers) to the one of this GeneticPopulation ; Definition at line 291 of file GeneticPopulation.cxx. ◆ AddPopulation() [2/2]. void TMVA::GeneticPopulation::AddPopulat",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:11621,Testability,log,logger,11621,"e population to the predefined size ; Definition at line 299 of file GeneticPopulation.cxx. ◆ VariableDistribution() [1/2]. vector< Double_t > TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber). gives back all the values of coefficient ""varNumber"" of the current generation ; Definition at line 268 of file GeneticPopulation.cxx. ◆ VariableDistribution() [2/2]. TH1F * TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber, . Int_t ; bins, . Int_t ; min, . Int_t ; max . ). give back a histogram with the distribution of the coefficients. ; Parameters:. int bins : number of bins of the histogram; int min : histogram minimum; int max : maximum value of the histogram . Definition at line 251 of file GeneticPopulation.cxx. Member Data Documentation. ◆ fGenePool. std::vector<TMVA::GeneticGenes> TMVA::GeneticPopulation::fGenePool. private . the ""genePool"" where the individuals of the current generation are stored ; Definition at line 94 of file GeneticPopulation.h. ◆ fLogger. MsgLogger* TMVA::GeneticPopulation::fLogger. mutableprivate . ! message logger ; Definition at line 99 of file GeneticPopulation.h. ◆ fPopulationSizeLimit. Int_t TMVA::GeneticPopulation::fPopulationSizeLimit. private . Definition at line 102 of file GeneticPopulation.h. ◆ fRandomGenerator. TRandom3* TMVA::GeneticPopulation::fRandomGenerator. private . random Generator for this population ; Definition at line 97 of file GeneticPopulation.h. ◆ fRanges. std::vector<TMVA::GeneticRange*> TMVA::GeneticPopulation::fRanges. private . contains the ranges in between the values of the coefficients have to be ; Definition at line 95 of file GeneticPopulation.h. Libraries for TMVA::GeneticPopulation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GeneticPopulation.h; tmva/tmva/src/GeneticPopulation.cxx. TMVAGeneticPopulation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1GeneticPopulation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html
https://root.cern/doc/master/classTMVA_1_1GiniIndex.html:813,Availability,down,down,813,". ROOT: TMVA::GiniIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::GiniIndex Class ReferenceTMVA. ; Implementation of the GiniIndex as separation criterion. ; Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. Definition at line 63 of file GiniIndex.h. Public Member Functions;  GiniIndex ();  ;  GiniIndex (const GiniIndex &g);  ; virtual ~GiniIndex ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  what we use here is 2*Gini. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Publi",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndex.html
https://root.cern/doc/master/classTMVA_1_1GiniIndex.html:1285,Modifiability,inherit,inherited,1285,"niIndex Class ReferenceTMVA. ; Implementation of the GiniIndex as separation criterion. ; Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. Definition at line 63 of file GiniIndex.h. Public Member Functions;  GiniIndex ();  ;  GiniIndex (const GiniIndex &g);  ; virtual ~GiniIndex ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  what we use here is 2*Gini. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Mem",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndex.html
https://root.cern/doc/master/classTMVA_1_1GiniIndex.html:2020,Modifiability,inherit,inherited,2020,"ex ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  what we use here is 2*Gini. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/GiniIndex.h>. Inheritance diagram for TMVA::GiniIndex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GiniIndex() [1/2]. TMVA::GiniIndex::GiniIndex ; (; ). inline . Definition at line 68 of file GiniIndex.h. ◆ GiniIndex() [2/2]. TMVA::GiniIndex::GiniIndex ; (; const GiniIndex & ; g). inline . Definition at line 71 of file GiniIndex.h. ◆ ~GiniIndex(). virtual TMVA::GiniIndex::~GiniIndex ; (; ). inlinevirtual . Definition at line 74 of file GiniIndex.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GiniIndex::Class ; (; ). static .",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndex.html
https://root.cern/doc/master/classTMVA_1_1GiniIndex.html:2264,Modifiability,inherit,inherited,2264,"ctions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/GiniIndex.h>. Inheritance diagram for TMVA::GiniIndex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GiniIndex() [1/2]. TMVA::GiniIndex::GiniIndex ; (; ). inline . Definition at line 68 of file GiniIndex.h. ◆ GiniIndex() [2/2]. TMVA::GiniIndex::GiniIndex ; (; const GiniIndex & ; g). inline . Definition at line 71 of file GiniIndex.h. ◆ ~GiniIndex(). virtual TMVA::GiniIndex::~GiniIndex ; (; ). inlinevirtual . Definition at line 74 of file GiniIndex.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GiniIndex::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GiniIndex::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::GiniIndex::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion ",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndex.html
https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:859,Availability,down,down,859,". ROOT: TMVA::GiniIndexWithLaplace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::GiniIndexWithLaplace Class ReferenceTMVA. ; Implementation of the GiniIndex With Laplace correction as separation criterion. ; Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:; The Laplace's correction to the probability distribution would turn the \( \frac{c(1)}{N} \) into \( \frac{(c(1)+1)}{(N+2)} \) using this the simple Gini Index for two classes. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. turns into. \[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \]. Definition at line 59 of file GiniIndexWithLaplace.h. Public Member Functions;  GiniIndexWithLaplace ();  ;  GiniIndexWithLaplace (const GiniIndexWithLaplace &g);  ; virtual ~GiniIndexWithLaplace ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of ",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html
https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:1605,Modifiability,inherit,inherited,1605,"me amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:; The Laplace's correction to the probability distribution would turn the \( \frac{c(1)}{N} \) into \( \frac{(c(1)+1)}{(N+2)} \) using this the simple Gini Index for two classes. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. turns into. \[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \]. Definition at line 59 of file GiniIndexWithLaplace.h. Public Member Functions;  GiniIndexWithLaplace ();  ;  GiniIndexWithLaplace (const GiniIndexWithLaplace &g);  ; virtual ~GiniIndexWithLaplace ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; st",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html
https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:2340,Modifiability,inherit,inherited,2340,"  ; virtual ~GiniIndexWithLaplace ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/GiniIndexWithLaplace.h>. Inheritance diagram for TMVA::GiniIndexWithLaplace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GiniIndexWithLaplace() [1/2]. TMVA::GiniIndexWithLaplace::GiniIndexWithLaplace ; (; ). inline . Definition at line 64 of file GiniIndexWithLaplace.h. ◆ GiniIndexWithLaplace() [2/2]. TMVA::GiniIndexWithLaplace::GiniIndexWithLaplace ; (; const GiniIndexWithLaplace & ; g). inline . Definition at line 67 of file GiniIndexWithLaplace.h. ◆ ~GiniIndexWithLaplace(). virtual TMVA::GiniIndexWithLaplace::~GiniIndexWithLaplace ; (; ). in",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html
https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:2584,Modifiability,inherit,inherited,2584,"ctions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/GiniIndexWithLaplace.h>. Inheritance diagram for TMVA::GiniIndexWithLaplace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GiniIndexWithLaplace() [1/2]. TMVA::GiniIndexWithLaplace::GiniIndexWithLaplace ; (; ). inline . Definition at line 64 of file GiniIndexWithLaplace.h. ◆ GiniIndexWithLaplace() [2/2]. TMVA::GiniIndexWithLaplace::GiniIndexWithLaplace ; (; const GiniIndexWithLaplace & ; g). inline . Definition at line 67 of file GiniIndexWithLaplace.h. ◆ ~GiniIndexWithLaplace(). virtual TMVA::GiniIndexWithLaplace::~GiniIndexWithLaplace ; (; ). inlinevirtual . Definition at line 70 of file GiniIndexWithLaplace.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GiniIndexWithLaplace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GiniIndexWithLa",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html
https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:1011,Usability,simpl,simple,1011,". ROOT: TMVA::GiniIndexWithLaplace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::GiniIndexWithLaplace Class ReferenceTMVA. ; Implementation of the GiniIndex With Laplace correction as separation criterion. ; Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:; The Laplace's correction to the probability distribution would turn the \( \frac{c(1)}{N} \) into \( \frac{(c(1)+1)}{(N+2)} \) using this the simple Gini Index for two classes. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. turns into. \[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \]. Definition at line 59 of file GiniIndexWithLaplace.h. Public Member Functions;  GiniIndexWithLaplace ();  ;  GiniIndexWithLaplace (const GiniIndexWithLaplace &g);  ; virtual ~GiniIndexWithLaplace ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of ",MatchSource.WIKI,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html
https://root.cern/doc/master/classTMVA_1_1HuberLossFunction.html:1787,Modifiability,inherit,inherited,1787,"arching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::HuberLossFunction Class ReferenceTMVA. ; Huber Loss Function. ; Definition at line 144 of file LossFunction.h. Public Member Functions;  HuberLossFunction ();  huber constructor ;  ;  HuberLossFunction (Double_t quantile);  ;  ~HuberLossFunction ();  huber destructor ;  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  huber, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the net loss for a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sumOfWeights, bool abs);  huber, determine the quantile for a given input ;  ; Double_t CalculateSumOfWeights (const std::vector< LossFunctionEventInfo > &evs);  huber, calculate the sum of weights for the events in the vector ;  ; Int_t Id ();  ; void Init (std::vector< LossFunctionEventInfo > &evs);  figure out the residual that determines the separation between the ""core"" and the ""tails"" of the residuals distribution ;  ; TString Name ();  ; void SetSumOfWeights (std::vector< LossFunctionEventInfo > &evs);  huber, set the sum of weights given a collection of events ;  ; void SetTransitionPoint (std::vector< LossFunctionEventInfo > &evs);  huber, determine the transition point using the values for fQuantile and fSumOfWeights which presumably have already been set ;  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . Protected Attributes; Double_t fQuantile;  ; Double_t fSumOfWeights;  ; Double_t fTransitionPoint;  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::HuberLossFunction:. This browser is not able to show SVG: try Firefox, ",MatchSource.WIKI,doc/master/classTMVA_1_1HuberLossFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunction.html
https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html:1116,Modifiability,inherit,inherited,1116," Public Member Functions;  HuberLossFunctionBDT ();  ;  HuberLossFunctionBDT (Double_t quantile);  ;  ~HuberLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  huber BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  huber BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  huber BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::HuberLossFunction;  HuberLossFunction ();  huber constructor ;  ;  HuberLossFunction (Double_t quantile);  ;  ~HuberLossFunction ();  huber destructor ;  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  huber, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the net loss for a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sum",MatchSource.WIKI,doc/master/classTMVA_1_1HuberLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html:1235,Modifiability,inherit,inherited,1235," Public Member Functions;  HuberLossFunctionBDT ();  ;  HuberLossFunctionBDT (Double_t quantile);  ;  ~HuberLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  huber BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  huber BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  huber BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::HuberLossFunction;  HuberLossFunction ();  huber constructor ;  ;  HuberLossFunction (Double_t quantile);  ;  ~HuberLossFunction ();  huber destructor ;  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  huber, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the net loss for a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sum",MatchSource.WIKI,doc/master/classTMVA_1_1HuberLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html:1345,Modifiability,inherit,inherited,1345,"ns;  HuberLossFunctionBDT ();  ;  HuberLossFunctionBDT (Double_t quantile);  ;  ~HuberLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  huber BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  huber BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  huber BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::HuberLossFunction;  HuberLossFunction ();  huber constructor ;  ;  HuberLossFunction (Double_t quantile);  ;  ~HuberLossFunction ();  huber destructor ;  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  huber, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the net loss for a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sumOfWeights, bool abs);  huber, determine the quantile for a given input ;  ; Double_t CalculateSumOfWeights (const std::vector< LossFunctionEventInfo > &evs);  huber, calculate the sum of weights for the events in the vector ;  ; Int_t Id ();  ; void Init (std::vector< LossFunctionEventInfo > &evs);  figure out the residual that determines the sepa",MatchSource.WIKI,doc/master/classTMVA_1_1HuberLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html:2831,Modifiability,inherit,inherited,2831,"r a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sumOfWeights, bool abs);  huber, determine the quantile for a given input ;  ; Double_t CalculateSumOfWeights (const std::vector< LossFunctionEventInfo > &evs);  huber, calculate the sum of weights for the events in the vector ;  ; Int_t Id ();  ; void Init (std::vector< LossFunctionEventInfo > &evs);  figure out the residual that determines the separation between the ""core"" and the ""tails"" of the residuals distribution ;  ; TString Name ();  ; void SetSumOfWeights (std::vector< LossFunctionEventInfo > &evs);  huber, set the sum of weights given a collection of events ;  ; void SetTransitionPoint (std::vector< LossFunctionEventInfo > &evs);  huber, determine the transition point using the values for fQuantile and fSumOfWeights which presumably have already been set ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::HuberLossFunction; Double_t fQuantile;  ; Double_t fSumOfWeights;  ; Double_t fTransitionPoint;  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::HuberLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HuberLossFunctionBDT() [1/2]. TMVA::HuberLossFunctionBDT::HuberLossFunctionBDT ; (; ). Definition at line 240 of file LossFunction.cxx. ◆ HuberLossFunctionBDT() [2/2]. TMVA::HuberLossFunctionBDT::HuberLossFunctionBDT ; (; Double_t ; quantile). inline . Definition at line 183 of file LossFunction.h. ◆ ~HuberLossFunctionBDT(). TMVA::HuberLossFunctionBDT::~HuberLossFunctionBDT ; (; ). inline . Definition at line 184 of file LossFunction.h. Member Function Documentation. ◆ Fit(). Double_t TMVA::HuberLossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ; Impl",MatchSource.WIKI,doc/master/classTMVA_1_1HuberLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1957,Availability,avail,available,1957,". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writable file. ;  ; void SetModelPersistence (Bool_t status=kTRUE);  Method enable model persistence, then algorithms model is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; v",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:7590,Availability,error,error,7590,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:7679,Availability,error,error,7679,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:7834,Availability,error,error,7834,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:8131,Availability,error,error,8131,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:12215,Availability,error,error,12215,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr V",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:7596,Integrability,message,message,7596,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:8137,Integrability,message,message,8137,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:9127,Integrability,message,message,9127,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:12221,Integrability,message,message,12221,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr V",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:12594,Integrability,message,message,12594," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:17536,Integrability,message,message,17536,"tions are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/HyperParameterOptimisation.h>. Inheritance diagram for TMVA::HyperParameterOptimisation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::HyperParameterOptimisation ; (; TMVA::DataLoader * ; dataloader). Definition at line 70 of file HyperParameterOptimisation.cxx. ◆ ~HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::~HyperParameterOptimisation ; (; ). Definition at line 81 of file HyperParameterOptimisation.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::HyperParameterOptimisation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::HyperParameterOptimisation::C",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1038,Modifiability,inherit,inherited,1038,"meterOptimisation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::HyperParameterOptimisation Class ReferenceTMVA. . Definition at line 73 of file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to se",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:2695,Modifiability,inherit,inherited,2695,"del is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:4393,Modifiability,inherit,inherited,4393,"_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:6133,Modifiability,inherit,inherited,6133,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:7226,Modifiability,inherit,inheritance,7226,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:9225,Modifiability,inherit,inherits,9225,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:9342,Modifiability,inherit,inherits,9342,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:13095,Modifiability,inherit,inherited,13095,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< Factory > fClassifier;  ! ;  ; TString fFitType;  ! ;  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisation",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:13313,Modifiability,inherit,inherited,13313,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< Factory > fClassifier;  ! ;  ; TString fFitType;  ! ;  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisation",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:13535,Modifiability,inherit,inherited,13535,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< Factory > fClassifier;  ! ;  ; TString fFitType;  ! ;  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisation",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:13745,Modifiability,inherit,inherited,13745,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Envelope; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< Factory > fClassifier;  ! ;  ; TString fFitType;  ! ;  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisation",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:14500,Modifiability,inherit,inherited,14500,"ic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< Factory > fClassifier;  ! ;  ; TString fFitType;  ! ;  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisationResult fResults;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Envelope;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoader",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:15141,Modifiability,inherit,inherited,15141,"  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisationResult fResults;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Envelope;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const; ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:15240,Modifiability,inherit,inherited,15240,"  ; Bool_t fFoldStatus;  ! ;  ; TString fFomType;  ! ;  ; UInt_t fNumFolds;  ! ;  ; HyperParameterOptimisationResult fResults;  ! ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Envelope;  Envelope (const TString &name, DataLoader *dataloader=nullptr, TFile *file=nullptr, const TString options="""");  Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const; ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:16198,Modifiability,inherit,inherited,16198,"ds differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protec",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:16605,Modifiability,inherit,inherited,16605,"ds differents constructors then this is a generic one protected. ;  ; DataInputHandler & GetDataLoaderDataInput ();  Utility method to get TMVA::DataInputHandler reference from the DataLoader. ;  ; DataSetInfo & GetDataLoaderDataSetInfo ();  Utility method to get TMVA::DataSetInfo reference from the DataLoader. ;  ; DataSetManager * GetDataLoaderDataSetManager ();  Utility method to get TMVA::DataSetManager pointer from the DataLoader. ;  ; TDirectory * RootBaseDir ();  Utility method to get base dir directory from current file. ;  ; void WriteDataInformation (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protec",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:16810,Modifiability,inherit,inherited,16810,"ion (TMVA::DataSetInfo &fDataSetInfo, TMVA::Types::EAnalysisType fAnalysisType);  method to save Train/Test information into the output file. ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/HyperParameterOptimisation.h>. Inheritance diagram for TMVA::HyperParameterOptimisation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::HyperParameterOptimisation ; (; TMVA::DataLoader * ; dataloader). Definition a",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:17477,Modifiability,inherit,inherited,17477,"tions are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/HyperParameterOptimisation.h>. Inheritance diagram for TMVA::HyperParameterOptimisation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::HyperParameterOptimisation ; (; TMVA::DataLoader * ; dataloader). Definition at line 70 of file HyperParameterOptimisation.cxx. ◆ ~HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::~HyperParameterOptimisation ; (; ). Definition at line 81 of file HyperParameterOptimisation.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::HyperParameterOptimisation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::HyperParameterOptimisation::C",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:17578,Modifiability,inherit,inherited,17578,"tions are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/HyperParameterOptimisation.h>. Inheritance diagram for TMVA::HyperParameterOptimisation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::HyperParameterOptimisation ; (; TMVA::DataLoader * ; dataloader). Definition at line 70 of file HyperParameterOptimisation.cxx. ◆ ~HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::~HyperParameterOptimisation ; (; ). Definition at line 81 of file HyperParameterOptimisation.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::HyperParameterOptimisation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::HyperParameterOptimisation::C",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1244,Performance,perform,perform,1244," |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::HyperParameterOptimisation Class ReferenceTMVA. . Definition at line 73 of file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLo",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1406,Performance,perform,perform,1406," file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:5261,Security,hash,hash,5261,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:17349,Testability,test,test,17349,"tions are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/HyperParameterOptimisation.h>. Inheritance diagram for TMVA::HyperParameterOptimisation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::HyperParameterOptimisation ; (; TMVA::DataLoader * ; dataloader). Definition at line 70 of file HyperParameterOptimisation.cxx. ◆ ~HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::~HyperParameterOptimisation ; (; ). Definition at line 81 of file HyperParameterOptimisation.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::HyperParameterOptimisation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::HyperParameterOptimisation::C",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:17544,Testability,log,logger,17544,"tions are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::Envelope; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/HyperParameterOptimisation.h>. Inheritance diagram for TMVA::HyperParameterOptimisation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::HyperParameterOptimisation ; (; TMVA::DataLoader * ; dataloader). Definition at line 70 of file HyperParameterOptimisation.cxx. ◆ ~HyperParameterOptimisation(). TMVA::HyperParameterOptimisation::~HyperParameterOptimisation ; (; ). Definition at line 81 of file HyperParameterOptimisation.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::HyperParameterOptimisation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::HyperParameterOptimisation::C",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1225,Usability,learn,learning,1225," |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::HyperParameterOptimisation Class ReferenceTMVA. . Definition at line 73 of file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLo",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:1387,Usability,learn,learning,1387," file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,doc/master/classTMVA_1_1HyperParameterOptimisation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html
https://root.cern/doc/master/classTMVA_1_1IFitterTarget.html:326,Integrability,interface,interface,326,". ROOT: TMVA::IFitterTarget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::IFitterTarget Class ReferenceabstractTMVA. ; Interface for a fitter 'target'. ; Defines interface to the estimator function ; Definition at line 44 of file IFitterTarget.h. Public Member Functions;  IFitterTarget ();  constructor ;  ; virtual ~IFitterTarget ();  ; virtual Double_t EstimatorFunction (std::vector< Double_t > &parameters)=0;  ; virtual TClass * IsA () const;  ; virtual void ProgressNotifier (TString, TString);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/IFitterTarget.h>. Inheritance diagram for TMVA::IFitterTarget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IFitterTarget(). TMVA::IFitterTarget::IFitterTarget ; (; ). constructor ; Definition at line 43 of file IFitterTarget.cxx. ◆ ~IFitterTarget(). virtual TMVA::IFitterTarget::~IFitterTarget ; (; ). inlinevirtual . Definition at line 50 of file IFitterTarget.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::IFitterTarget::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::IFitterTarget::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::IFitterTarget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file IFitterTarget.h. ◆ DeclFileName(). static const char * TMVA::IFitterTarget::DeclFileName ; (; ). inlinestatic . ReturnsName of the file cont",MatchSource.WIKI,doc/master/classTMVA_1_1IFitterTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IFitterTarget.html
https://root.cern/doc/master/classTMVA_1_1Interval.html:366,Deployability,continuous,continuous,366,". ROOT: TMVA::Interval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TMVA::Interval Class ReferenceTMVA. ; The TMVA::Interval Class. ; Interval definition, continuous and discrete. Interval(min,max) : a continous interval [min,max]; Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers: min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. Interval(1,5,5) = 1,2,3,4,5; Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: bin counting starts from ZERO unlike in ROOT histograms. Interval definition, continuous and discrete; Interval(min,max) : a continous interval [min,max]; Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step=max; e.g.:; Interval(1,5,5)=1,2,3,4,5 . Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 . Example: Interval(.5,1.,6); ; [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0; ; bin 0 1 2 3 4 5; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61. Definition at line 61 of file Interval.h. Public Member Functions;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete Interval"" ;  ; virtual Double_t Ge",MatchSource.WIKI,doc/master/classTMVA_1_1Interval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html
https://root.cern/doc/master/classTMVA_1_1Interval.html:746,Deployability,continuous,continuous,746,". ROOT: TMVA::Interval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TMVA::Interval Class ReferenceTMVA. ; The TMVA::Interval Class. ; Interval definition, continuous and discrete. Interval(min,max) : a continous interval [min,max]; Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers: min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. Interval(1,5,5) = 1,2,3,4,5; Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: bin counting starts from ZERO unlike in ROOT histograms. Interval definition, continuous and discrete; Interval(min,max) : a continous interval [min,max]; Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step=max; e.g.:; Interval(1,5,5)=1,2,3,4,5 . Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 . Example: Interval(.5,1.,6); ; [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0; ; bin 0 1 2 3 4 5; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61. Definition at line 61 of file Interval.h. Public Member Functions;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete Interval"" ;  ; virtual Double_t Ge",MatchSource.WIKI,doc/master/classTMVA_1_1Interval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html
https://root.cern/doc/master/classTMVA_1_1Interval.html:2614,Deployability,continuous,continuous,2614,"ulates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete Interval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . Private Member Functions; MsgLogger & Log () const;  . #include <TMVA/Interval.h>. Inheritance diagram for TMVA::Interval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Interval() [1/2]. TMVA::Interval::Interval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). defines minimum and maximum of an interval . when nbins > 0, interval describes a discrete distribution (equally distributed in the interval); when nbins == 0, interval describes a continous interval . Definition at line 83 of file Interval.cxx. ◆ Interval() [2/2]. TMVA::Interval::Interval ; (; const Interval & ; other). Definition at line 99 of file Interval.cxx. ◆ ~Interval(). TMVA::Interval::~Interval ; (; ). virtual . destructor ; Definition at line 109 of file Interval.cxx. Member Function Documentation. ◆ Class(). static TCl",MatchSource.WIKI,doc/master/classTMVA_1_1Interval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html
https://root.cern/doc/master/classTMVA_1_1Interval.html:6931,Deployability,continuous,continuous,6931,"ze ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete Interval"" ; Reimplemented in TMVA::LogInterval.; Definition at line 135 of file Interval.cxx. ◆ GetWidth(). Double_t TMVA::Interval::GetWidth ; (; ); const. virtual . Reimplemented in TMVA::LogInterval.; Definition at line 155 of file Interval.cxx. ◆ IsA(). virtual TClass * TMVA::Interval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::LogInterval.; Definition at line 93 of file Interval.h. ◆ Log(). TMVA::MsgLogger & TMVA::Interval::Log ; (; ); const. private . Definition at line 171 of file Interval.cxx. ◆ Print(). void TMVA::Interval::Print ; (; std::ostream & ; os); const. virtual . Definition at line 164 of file Interval.cxx. ◆ SetMax(). void TMVA::Interval::SetMax ; (; Double_t ; m). inline . Definition at line 80 of file Interval.h. ◆ SetMin(). void TMVA::Interval::SetMin ; (; Double_t ; m). inline . Definition at line 81 of file Interval.h. ◆ Streamer(). virtual void TMVA::Interval::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::LogInterval. ◆ StreamerNVirtual(). void TMVA::Interval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file Interval.h. Member Data Documentation. ◆ fMax. Double_t TMVA::Interval::fMax. protected . the constraints of the Interval ; Definition at line 87 of file Interval.h. ◆ fMin. Double_t TMVA::Interval::fMin. protected . Definition at line 87 of file Interval.h. ◆ fNbins. Int_t TMVA::Interval::fNbins. protected . when >0 : number of bins (discrete interval); when ==0 continuous interval ; Definition at line 88 of file Interval.h. Libraries for TMVA::Interval:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Interval.h; tmva/tmva/src/Interval.cxx. TMVAInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1Interval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:496,Availability,error,error,496,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:678,Availability,error,error,678,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:305,Integrability,interface,interface,305,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:379,Integrability,interface,interface,379,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:512,Testability,test,test,512,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:1337,Testability,test,testEvents,1337,"l which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Documentation. ◆ IPruneTool(). TMVA::IPruneTool::IPruneTool ; (; ). inline . Definition at line 107 of file IPruneTool.h. ◆ ~IPruneTool(). TMVA::IPruneTool::~IPruneTool ; (; ). virtual . Definition at line 58 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). virtual PruningInfo * TMVA::IPruneTool::CalculatePruning",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:2411,Testability,test,testEvents,2411,"ngth () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Documentation. ◆ IPruneTool(). TMVA::IPruneTool::IPruneTool ; (; ). inline . Definition at line 107 of file IPruneTool.h. ◆ ~IPruneTool(). TMVA::IPruneTool::~IPruneTool ; (; ). virtual . Definition at line 58 of file ExpectedErrorPruneTool.cxx. Member Function Documentation. ◆ CalculatePruningInfo(). virtual PruningInfo * TMVA::IPruneTool::CalculatePruningInfo ; (; DecisionTree * ; dt, . const EventSample * ; testEvents = nullptr, . Bool_t ; isAutomatic = kFALSE . ). pure virtual . Implemented in TMVA::CostComplexityPruneTool, and TMVA::ExpectedErrorPruneTool. ◆ GetPruneStrength(). Double_t TMVA::IPruneTool::GetPruneStrength ; (; ); const. inline . Definition at line 90 of file IPruneTool.h. ◆ IsAutomatic(). Bool_t TMVA::IPruneTool::IsAutomatic ; (; ); const. inline . Definition at line 95 of file IPruneTool.h. ◆ SetAutomatic(). void TMVA::IPruneTool::SetAutomatic ; (; ). inline . Definition at line 94 of file IPruneTool.h. ◆ SetPruneStrength(). void TMVA::IPruneTool::SetPruneStrength ; (; Double_t ; alpha). inline . Definition at line 88 of file IPruneTool.h. Member Data Documentation. ◆ B. Double_t TMVA::IPruneTool::B. protected . Definition at line 104 of file IPruneTool.h. ◆ fPruneStrength. Double_t TMVA::IPruneTool::fPruneStrength. protected . ! regularization parameter in pruning ; Definition at line 101 of file IPruneTool.h. ◆ S. Double_t TMVA::IPruneTool::S. protected . Definition a",MatchSource.WIKI,doc/master/classTMVA_1_1IPruneTool.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html
https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html:341,Availability,error,errors,341,". ROOT: TMVA::IPythonInteractive Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::IPythonInteractive Class ReferenceTMVA. ; This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. ; It’s only initialized in Jupyter notebook context. In initialization we specify some title, and a TGraph will be created for every title. We can add new data points easily to all TGraphs. These graphs are added to a TMultiGraph, and during an interactive training we get this TMultiGraph object and plot it with JsROOT. ; Definition at line 94 of file MethodBase.h. Public Member Functions;  IPythonInteractive ();  standard constructor ;  ;  ~IPythonInteractive ();  standard destructor ;  ; void AddPoint (Double_t x, Double_t y1, Double_t y2);  This function is used only in 2 TGraph case, and it will add new data points to graphs. ;  ; void AddPoint (std::vector< Double_t > &dat);  This function can add data points to as many TGraphs as we have. ;  ; void ClearGraphs ();  This function sets the point number to 0 for all graphs. ;  ; TMultiGraph * Get ();  ; void Init (std::vector< TString > &graphTitles);  This function gets some title and it creates a TGraph for every title. ;  ; bool NotInitialized ();  . Private Attributes; std::vector< TGraph * > fGraphs;  ; Int_t fIndex;  ; TMultiGraph * fMultiGraph;  ; Int_t fNumGraphs;  . #include <TMVA/MethodBase.h>; Constructor & Destructor Documentation. ◆ IPythonInteractive(). TMVA::IPythonInteractive::IPythonInteractive ; (; ). standard constructor ; Definition at line 146 of file MethodBase.cxx. ◆ ~IPythonInteractive(). TMVA::IPythonInteractive::~IPythonInteractive ; (; ). standard destructor ; Definition at line 154 of file MethodBase.cxx. Member Function Documentation. ◆ AddPoint() [1/2]. void TMVA::IPythonInteractive::AddPoint ; (; Doubl",MatchSource.WIKI,doc/master/classTMVA_1_1IPythonInteractive.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:1205,Energy Efficiency,adapt,adaptive,1205,"  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::KDEKernel Class ReferenceTMVA. ; KDE Kernel for ""smoothing"" the PDFs. ; Definition at line 50 of file KDEKernel.h. Public Types; enum  EKernelBorder { kNoTreatment = 1; , kKernelRenorm = 2; , kSampleMirror = 3; };  ; enum  EKernelIter { kNonadaptiveKDE = 1; , kAdaptiveKDE = 2; };  ; enum  EKernelType { kNone = 0; , kGauss = 1; };  . Public Member Functions;  KDEKernel (EKernelIter kiter=kNonadaptiveKDE, const TH1 *hist=nullptr, Float_t lower_edge=0., Float_t upper_edge=1., EKernelBorder kborder=kNoTreatment, Float_t FineFactor=1.);  constructor sanity check ;  ; virtual ~KDEKernel (void);  destructor ;  ; Float_t GetBinKernelIntegral (Float_t lowr, Float_t highr, Float_t mean, Int_t binnum);  calculates the integral of the Kernel ;  ; const char * GetName () const;  ; virtual TClass * IsA () const;  ; void SetKernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:2284,Energy Efficiency,adapt,adaptive,2284,"r &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; Float_t fLowerEdge;  the lower edge of the PDF ;  ; Float_t fSigma;  Width of the Kernel function. ;  ; TH1F * fSigmaHist;  contains the Sigmas Widths for adaptive KDE ;  ; Float_t fUpperEdge;  the upper edge of the PDF ;  . #include <TMVA/KDEKernel.h>; Member Enumeration Documentation. ◆ EKernelBorder. enum TMVA::KDEKernel::EKernelBorder. EnumeratorkNoTreatment ; kKernelRenorm ; kSampleMirror . Definition at line 56 of file KDEKernel.h. ◆ EKernelIter. enum TMVA::KDEKernel::EKernelIter. EnumeratorkNonadaptiveKDE ; kAdaptiveKDE . Definition at line 55 of file KDEKernel.h. ◆ EKernelType. enum TMVA::KDEKernel::EKernelType. EnumeratorkNone ; kGauss . Definition at line 54 of file KDEKernel.h. Constructor & Destructor Documentation. ◆ KDEKernel(). TMVA::KDEKernel::KDEKernel ; (; EKernelIter ; kiter = kNonadaptiveKDE, . const TH1 * ; hist = nullptr, . Float_t ; lower_edge = 0., . Float_t ; upper_edge = 1., . EKernelBorder ; kborder = kNoTreatment, . Float_t ; FineFactor = 1. . ). constructor sanity check ; Definition at line 49 of file KDEKernel.cxx. ◆ ~KDEKernel(). TMVA::KDEKernel::~KDEKernel ; (; void ; ). virtual . destructor ; Definition at line",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:4708,Energy Efficiency,adapt,adaptive,4708,"at line 91 of file KDEKernel.h. ◆ DeclFileName(). static const char * TMVA::KDEKernel::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 91 of file KDEKernel.h. ◆ GetBinKernelIntegral(). Float_t TMVA::KDEKernel::GetBinKernelIntegral ; (; Float_t ; lowr, . Float_t ; highr, . Float_t ; mean, . Int_t ; binnum . ). calculates the integral of the Kernel ; Definition at line 217 of file KDEKernel.cxx. ◆ GetName(). const char * TMVA::KDEKernel::GetName ; (; ); const. inline . Definition at line 71 of file KDEKernel.h. ◆ IsA(). virtual TClass * TMVA::KDEKernel::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 91 of file KDEKernel.h. ◆ Log(). MsgLogger & TMVA::KDEKernel::Log ; (; ); const. inlineprivate . Definition at line 89 of file KDEKernel.h. ◆ SetKernelType(). void TMVA::KDEKernel::SetKernelType ; (; EKernelType ; ktype = kGauss). fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ; Definition at line 112 of file KDEKernel.cxx. ◆ Streamer(). virtual void TMVA::KDEKernel::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::KDEKernel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 91 of file KDEKernel.h. Member Data Documentation. ◆ fFineFactor. Float_t TMVA::KDEKernel::fFineFactor. private . fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ; Definition at line 79 of file KDEKernel.h. ◆ fFirstIterHist. TH1F* TMVA::KDEKernel::fFirstIterHist. private . histogram to be filled in the hidden iteration ; Definition at line 83 of file KDEKernel.h. ◆ fHiddenIteration. Bool_t TMVA::KDEKernel::fHiddenIteration. private . Defines if whats currently running is the. ; Definition at line 85 of file KDEKernel.h. ◆ fHist. TH1F* TMVA::KDEKernel::fHist. private . copy of input histogram ; Definition at line 82 of file KDEKernel.h. ◆ fIter. EKernelIter TMVA::KDEKernel::f",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:6574,Energy Efficiency,adapt,adaptive,6574,"t TMVA::KDEKernel::fFineFactor. private . fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ; Definition at line 79 of file KDEKernel.h. ◆ fFirstIterHist. TH1F* TMVA::KDEKernel::fFirstIterHist. private . histogram to be filled in the hidden iteration ; Definition at line 83 of file KDEKernel.h. ◆ fHiddenIteration. Bool_t TMVA::KDEKernel::fHiddenIteration. private . Defines if whats currently running is the. ; Definition at line 85 of file KDEKernel.h. ◆ fHist. TH1F* TMVA::KDEKernel::fHist. private . copy of input histogram ; Definition at line 82 of file KDEKernel.h. ◆ fIter. EKernelIter TMVA::KDEKernel::fIter. private . iteration number ; Definition at line 76 of file KDEKernel.h. ◆ fKDEborder. EKernelBorder TMVA::KDEKernel::fKDEborder. private . The method to take care about ""border"" effects. ; Definition at line 81 of file KDEKernel.h. ◆ fKernel_integ. TF1* TMVA::KDEKernel::fKernel_integ. private . the integral of the Kernel function ; Definition at line 80 of file KDEKernel.h. ◆ fLogger. MsgLogger* TMVA::KDEKernel::fLogger. mutableprivate . ! message logger ; Definition at line 88 of file KDEKernel.h. ◆ fLowerEdge. Float_t TMVA::KDEKernel::fLowerEdge. private . the lower edge of the PDF ; Definition at line 77 of file KDEKernel.h. ◆ fSigma. Float_t TMVA::KDEKernel::fSigma. private . Width of the Kernel function. ; Definition at line 75 of file KDEKernel.h. ◆ fSigmaHist. TH1F* TMVA::KDEKernel::fSigmaHist. private . contains the Sigmas Widths for adaptive KDE ; Definition at line 84 of file KDEKernel.h. ◆ fUpperEdge. Float_t TMVA::KDEKernel::fUpperEdge. private . the upper edge of the PDF ; Definition at line 78 of file KDEKernel.h. Libraries for TMVA::KDEKernel:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/KDEKernel.h; tmva/tmva/src/KDEKernel.cxx. TMVAKDEKernel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:2109,Integrability,message,message,2109,"KernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; Float_t fLowerEdge;  the lower edge of the PDF ;  ; Float_t fSigma;  Width of the Kernel function. ;  ; TH1F * fSigmaHist;  contains the Sigmas Widths for adaptive KDE ;  ; Float_t fUpperEdge;  the upper edge of the PDF ;  . #include <TMVA/KDEKernel.h>; Member Enumeration Documentation. ◆ EKernelBorder. enum TMVA::KDEKernel::EKernelBorder. EnumeratorkNoTreatment ; kKernelRenorm ; kSampleMirror . Definition at line 56 of file KDEKernel.h. ◆ EKernelIter. enum TMVA::KDEKernel::EKernelIter. EnumeratorkNonadaptiveKDE ; kAdaptiveKDE . Definition at line 55 of file KDEKernel.h. ◆ EKernelType. enum TMVA::KDEKernel::EKernelType. EnumeratorkNone ; kGauss . Definition at line 54 of file KDEKernel.h. Constructor & Destructor Documentation. ◆ KDEKernel(). TMVA::KDEKernel::KDEKernel ; (; EKernelIter ; kiter = kNonadaptiveKDE, . const TH1 * ; hist = nullptr, . Float_t ; lower_edge = 0., . Float_t ; upper_edge = 1., . EKernelBorder ; kborder = kNoTreatment, . Float_t ; FineFactor = 1. . ). cons",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:6164,Integrability,message,message,6164,"t TMVA::KDEKernel::fFineFactor. private . fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ; Definition at line 79 of file KDEKernel.h. ◆ fFirstIterHist. TH1F* TMVA::KDEKernel::fFirstIterHist. private . histogram to be filled in the hidden iteration ; Definition at line 83 of file KDEKernel.h. ◆ fHiddenIteration. Bool_t TMVA::KDEKernel::fHiddenIteration. private . Defines if whats currently running is the. ; Definition at line 85 of file KDEKernel.h. ◆ fHist. TH1F* TMVA::KDEKernel::fHist. private . copy of input histogram ; Definition at line 82 of file KDEKernel.h. ◆ fIter. EKernelIter TMVA::KDEKernel::fIter. private . iteration number ; Definition at line 76 of file KDEKernel.h. ◆ fKDEborder. EKernelBorder TMVA::KDEKernel::fKDEborder. private . The method to take care about ""border"" effects. ; Definition at line 81 of file KDEKernel.h. ◆ fKernel_integ. TF1* TMVA::KDEKernel::fKernel_integ. private . the integral of the Kernel function ; Definition at line 80 of file KDEKernel.h. ◆ fLogger. MsgLogger* TMVA::KDEKernel::fLogger. mutableprivate . ! message logger ; Definition at line 88 of file KDEKernel.h. ◆ fLowerEdge. Float_t TMVA::KDEKernel::fLowerEdge. private . the lower edge of the PDF ; Definition at line 77 of file KDEKernel.h. ◆ fSigma. Float_t TMVA::KDEKernel::fSigma. private . Width of the Kernel function. ; Definition at line 75 of file KDEKernel.h. ◆ fSigmaHist. TH1F* TMVA::KDEKernel::fSigmaHist. private . contains the Sigmas Widths for adaptive KDE ; Definition at line 84 of file KDEKernel.h. ◆ fUpperEdge. Float_t TMVA::KDEKernel::fUpperEdge. private . the upper edge of the PDF ; Definition at line 78 of file KDEKernel.h. Libraries for TMVA::KDEKernel:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/KDEKernel.h; tmva/tmva/src/KDEKernel.cxx. TMVAKDEKernel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:1205,Modifiability,adapt,adaptive,1205,"  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::KDEKernel Class ReferenceTMVA. ; KDE Kernel for ""smoothing"" the PDFs. ; Definition at line 50 of file KDEKernel.h. Public Types; enum  EKernelBorder { kNoTreatment = 1; , kKernelRenorm = 2; , kSampleMirror = 3; };  ; enum  EKernelIter { kNonadaptiveKDE = 1; , kAdaptiveKDE = 2; };  ; enum  EKernelType { kNone = 0; , kGauss = 1; };  . Public Member Functions;  KDEKernel (EKernelIter kiter=kNonadaptiveKDE, const TH1 *hist=nullptr, Float_t lower_edge=0., Float_t upper_edge=1., EKernelBorder kborder=kNoTreatment, Float_t FineFactor=1.);  constructor sanity check ;  ; virtual ~KDEKernel (void);  destructor ;  ; Float_t GetBinKernelIntegral (Float_t lowr, Float_t highr, Float_t mean, Int_t binnum);  calculates the integral of the Kernel ;  ; const char * GetName () const;  ; virtual TClass * IsA () const;  ; void SetKernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:2284,Modifiability,adapt,adaptive,2284,"r &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; Float_t fLowerEdge;  the lower edge of the PDF ;  ; Float_t fSigma;  Width of the Kernel function. ;  ; TH1F * fSigmaHist;  contains the Sigmas Widths for adaptive KDE ;  ; Float_t fUpperEdge;  the upper edge of the PDF ;  . #include <TMVA/KDEKernel.h>; Member Enumeration Documentation. ◆ EKernelBorder. enum TMVA::KDEKernel::EKernelBorder. EnumeratorkNoTreatment ; kKernelRenorm ; kSampleMirror . Definition at line 56 of file KDEKernel.h. ◆ EKernelIter. enum TMVA::KDEKernel::EKernelIter. EnumeratorkNonadaptiveKDE ; kAdaptiveKDE . Definition at line 55 of file KDEKernel.h. ◆ EKernelType. enum TMVA::KDEKernel::EKernelType. EnumeratorkNone ; kGauss . Definition at line 54 of file KDEKernel.h. Constructor & Destructor Documentation. ◆ KDEKernel(). TMVA::KDEKernel::KDEKernel ; (; EKernelIter ; kiter = kNonadaptiveKDE, . const TH1 * ; hist = nullptr, . Float_t ; lower_edge = 0., . Float_t ; upper_edge = 1., . EKernelBorder ; kborder = kNoTreatment, . Float_t ; FineFactor = 1. . ). constructor sanity check ; Definition at line 49 of file KDEKernel.cxx. ◆ ~KDEKernel(). TMVA::KDEKernel::~KDEKernel ; (; void ; ). virtual . destructor ; Definition at line",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:4708,Modifiability,adapt,adaptive,4708,"at line 91 of file KDEKernel.h. ◆ DeclFileName(). static const char * TMVA::KDEKernel::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 91 of file KDEKernel.h. ◆ GetBinKernelIntegral(). Float_t TMVA::KDEKernel::GetBinKernelIntegral ; (; Float_t ; lowr, . Float_t ; highr, . Float_t ; mean, . Int_t ; binnum . ). calculates the integral of the Kernel ; Definition at line 217 of file KDEKernel.cxx. ◆ GetName(). const char * TMVA::KDEKernel::GetName ; (; ); const. inline . Definition at line 71 of file KDEKernel.h. ◆ IsA(). virtual TClass * TMVA::KDEKernel::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 91 of file KDEKernel.h. ◆ Log(). MsgLogger & TMVA::KDEKernel::Log ; (; ); const. inlineprivate . Definition at line 89 of file KDEKernel.h. ◆ SetKernelType(). void TMVA::KDEKernel::SetKernelType ; (; EKernelType ; ktype = kGauss). fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ; Definition at line 112 of file KDEKernel.cxx. ◆ Streamer(). virtual void TMVA::KDEKernel::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::KDEKernel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 91 of file KDEKernel.h. Member Data Documentation. ◆ fFineFactor. Float_t TMVA::KDEKernel::fFineFactor. private . fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ; Definition at line 79 of file KDEKernel.h. ◆ fFirstIterHist. TH1F* TMVA::KDEKernel::fFirstIterHist. private . histogram to be filled in the hidden iteration ; Definition at line 83 of file KDEKernel.h. ◆ fHiddenIteration. Bool_t TMVA::KDEKernel::fHiddenIteration. private . Defines if whats currently running is the. ; Definition at line 85 of file KDEKernel.h. ◆ fHist. TH1F* TMVA::KDEKernel::fHist. private . copy of input histogram ; Definition at line 82 of file KDEKernel.h. ◆ fIter. EKernelIter TMVA::KDEKernel::f",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:6574,Modifiability,adapt,adaptive,6574,"t TMVA::KDEKernel::fFineFactor. private . fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ; Definition at line 79 of file KDEKernel.h. ◆ fFirstIterHist. TH1F* TMVA::KDEKernel::fFirstIterHist. private . histogram to be filled in the hidden iteration ; Definition at line 83 of file KDEKernel.h. ◆ fHiddenIteration. Bool_t TMVA::KDEKernel::fHiddenIteration. private . Defines if whats currently running is the. ; Definition at line 85 of file KDEKernel.h. ◆ fHist. TH1F* TMVA::KDEKernel::fHist. private . copy of input histogram ; Definition at line 82 of file KDEKernel.h. ◆ fIter. EKernelIter TMVA::KDEKernel::fIter. private . iteration number ; Definition at line 76 of file KDEKernel.h. ◆ fKDEborder. EKernelBorder TMVA::KDEKernel::fKDEborder. private . The method to take care about ""border"" effects. ; Definition at line 81 of file KDEKernel.h. ◆ fKernel_integ. TF1* TMVA::KDEKernel::fKernel_integ. private . the integral of the Kernel function ; Definition at line 80 of file KDEKernel.h. ◆ fLogger. MsgLogger* TMVA::KDEKernel::fLogger. mutableprivate . ! message logger ; Definition at line 88 of file KDEKernel.h. ◆ fLowerEdge. Float_t TMVA::KDEKernel::fLowerEdge. private . the lower edge of the PDF ; Definition at line 77 of file KDEKernel.h. ◆ fSigma. Float_t TMVA::KDEKernel::fSigma. private . Width of the Kernel function. ; Definition at line 75 of file KDEKernel.h. ◆ fSigmaHist. TH1F* TMVA::KDEKernel::fSigmaHist. private . contains the Sigmas Widths for adaptive KDE ; Definition at line 84 of file KDEKernel.h. ◆ fUpperEdge. Float_t TMVA::KDEKernel::fUpperEdge. private . the upper edge of the PDF ; Definition at line 78 of file KDEKernel.h. Libraries for TMVA::KDEKernel:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/KDEKernel.h; tmva/tmva/src/KDEKernel.cxx. TMVAKDEKernel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:851,Safety,sanity check,sanity check,851,"  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::KDEKernel Class ReferenceTMVA. ; KDE Kernel for ""smoothing"" the PDFs. ; Definition at line 50 of file KDEKernel.h. Public Types; enum  EKernelBorder { kNoTreatment = 1; , kKernelRenorm = 2; , kSampleMirror = 3; };  ; enum  EKernelIter { kNonadaptiveKDE = 1; , kAdaptiveKDE = 2; };  ; enum  EKernelType { kNone = 0; , kGauss = 1; };  . Public Member Functions;  KDEKernel (EKernelIter kiter=kNonadaptiveKDE, const TH1 *hist=nullptr, Float_t lower_edge=0., Float_t upper_edge=1., EKernelBorder kborder=kNoTreatment, Float_t FineFactor=1.);  constructor sanity check ;  ; virtual ~KDEKernel (void);  destructor ;  ; Float_t GetBinKernelIntegral (Float_t lowr, Float_t highr, Float_t mean, Int_t binnum);  calculates the integral of the Kernel ;  ; const char * GetName () const;  ; virtual TClass * IsA () const;  ; void SetKernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:3130,Safety,sanity check,sanity check,3130,"he lower edge of the PDF ;  ; Float_t fSigma;  Width of the Kernel function. ;  ; TH1F * fSigmaHist;  contains the Sigmas Widths for adaptive KDE ;  ; Float_t fUpperEdge;  the upper edge of the PDF ;  . #include <TMVA/KDEKernel.h>; Member Enumeration Documentation. ◆ EKernelBorder. enum TMVA::KDEKernel::EKernelBorder. EnumeratorkNoTreatment ; kKernelRenorm ; kSampleMirror . Definition at line 56 of file KDEKernel.h. ◆ EKernelIter. enum TMVA::KDEKernel::EKernelIter. EnumeratorkNonadaptiveKDE ; kAdaptiveKDE . Definition at line 55 of file KDEKernel.h. ◆ EKernelType. enum TMVA::KDEKernel::EKernelType. EnumeratorkNone ; kGauss . Definition at line 54 of file KDEKernel.h. Constructor & Destructor Documentation. ◆ KDEKernel(). TMVA::KDEKernel::KDEKernel ; (; EKernelIter ; kiter = kNonadaptiveKDE, . const TH1 * ; hist = nullptr, . Float_t ; lower_edge = 0., . Float_t ; upper_edge = 1., . EKernelBorder ; kborder = kNoTreatment, . Float_t ; FineFactor = 1. . ). constructor sanity check ; Definition at line 49 of file KDEKernel.cxx. ◆ ~KDEKernel(). TMVA::KDEKernel::~KDEKernel ; (; void ; ). virtual . destructor ; Definition at line 76 of file KDEKernel.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::KDEKernel::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::KDEKernel::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::KDEKernel::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 91 of file KDEKernel.h. ◆ DeclFileName(). static const char * TMVA::KDEKernel::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 91 of file KDEKernel.h. ◆ GetBinKernelIntegral(). Float_t TMVA::KDEKernel::GetBinKernelIntegral ; (; Float_t ; lowr, . Float_t ; highr, . Float_t ; mean, . Int_t ; binnum . ). calculates the integral of the Kernel ; Definition at line 21",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:2117,Testability,log,logger,2117,"KernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""border"" effects. ;  ; TF1 * fKernel_integ;  the integral of the Kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; Float_t fLowerEdge;  the lower edge of the PDF ;  ; Float_t fSigma;  Width of the Kernel function. ;  ; TH1F * fSigmaHist;  contains the Sigmas Widths for adaptive KDE ;  ; Float_t fUpperEdge;  the upper edge of the PDF ;  . #include <TMVA/KDEKernel.h>; Member Enumeration Documentation. ◆ EKernelBorder. enum TMVA::KDEKernel::EKernelBorder. EnumeratorkNoTreatment ; kKernelRenorm ; kSampleMirror . Definition at line 56 of file KDEKernel.h. ◆ EKernelIter. enum TMVA::KDEKernel::EKernelIter. EnumeratorkNonadaptiveKDE ; kAdaptiveKDE . Definition at line 55 of file KDEKernel.h. ◆ EKernelType. enum TMVA::KDEKernel::EKernelType. EnumeratorkNone ; kGauss . Definition at line 54 of file KDEKernel.h. Constructor & Destructor Documentation. ◆ KDEKernel(). TMVA::KDEKernel::KDEKernel ; (; EKernelIter ; kiter = kNonadaptiveKDE, . const TH1 * ; hist = nullptr, . Float_t ; lower_edge = 0., . Float_t ; upper_edge = 1., . EKernelBorder ; kborder = kNoTreatment, . Float_t ; FineFactor = 1. . ). cons",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:6172,Testability,log,logger,6172,"t TMVA::KDEKernel::fFineFactor. private . fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ; Definition at line 79 of file KDEKernel.h. ◆ fFirstIterHist. TH1F* TMVA::KDEKernel::fFirstIterHist. private . histogram to be filled in the hidden iteration ; Definition at line 83 of file KDEKernel.h. ◆ fHiddenIteration. Bool_t TMVA::KDEKernel::fHiddenIteration. private . Defines if whats currently running is the. ; Definition at line 85 of file KDEKernel.h. ◆ fHist. TH1F* TMVA::KDEKernel::fHist. private . copy of input histogram ; Definition at line 82 of file KDEKernel.h. ◆ fIter. EKernelIter TMVA::KDEKernel::fIter. private . iteration number ; Definition at line 76 of file KDEKernel.h. ◆ fKDEborder. EKernelBorder TMVA::KDEKernel::fKDEborder. private . The method to take care about ""border"" effects. ; Definition at line 81 of file KDEKernel.h. ◆ fKernel_integ. TF1* TMVA::KDEKernel::fKernel_integ. private . the integral of the Kernel function ; Definition at line 80 of file KDEKernel.h. ◆ fLogger. MsgLogger* TMVA::KDEKernel::fLogger. mutableprivate . ! message logger ; Definition at line 88 of file KDEKernel.h. ◆ fLowerEdge. Float_t TMVA::KDEKernel::fLowerEdge. private . the lower edge of the PDF ; Definition at line 77 of file KDEKernel.h. ◆ fSigma. Float_t TMVA::KDEKernel::fSigma. private . Width of the Kernel function. ; Definition at line 75 of file KDEKernel.h. ◆ fSigmaHist. TH1F* TMVA::KDEKernel::fSigmaHist. private . contains the Sigmas Widths for adaptive KDE ; Definition at line 84 of file KDEKernel.h. ◆ fUpperEdge. Float_t TMVA::KDEKernel::fUpperEdge. private . the upper edge of the PDF ; Definition at line 78 of file KDEKernel.h. Libraries for TMVA::KDEKernel:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/KDEKernel.h; tmva/tmva/src/KDEKernel.cxx. TMVAKDEKernel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1KDEKernel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html
https://root.cern/doc/master/classTMVA_1_1LDA.html:347,Availability,toler,tolerence,347,". ROOT: TMVA::LDA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::LDA Class ReferenceTMVA. . Definition at line 44 of file LDA.h. Public Member Functions;  LDA (Float_t tolerence=1.0e-5, Bool_t debug=false);  constructor ;  ;  ~LDA ();  destructor ;  ; Float_t GetLogLikelihood (const std::vector< Float_t > &x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > &",MatchSource.WIKI,doc/master/classTMVA_1_1LDA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html
https://root.cern/doc/master/classTMVA_1_1LDA.html:1496,Availability,toler,tolerence,1496,"x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Signal probability with Gaussian approximation. ; Definition at line 237 of file LDA.cxx. ◆ Initialize(). void TMVA::LDA::Initialize ; (; const LDAEvents & ; inputSignal, . const LDAEvents & ; inputBackground . ). Create LDA matrix using local events found by knn method.",MatchSource.WIKI,doc/master/classTMVA_1_1LDA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html
https://root.cern/doc/master/classTMVA_1_1LDA.html:1129,Integrability,message,message,1129,"ns |; Private Attributes |; List of all members ; TMVA::LDA Class ReferenceTMVA. . Definition at line 44 of file LDA.h. Public Member Functions;  LDA (Float_t tolerence=1.0e-5, Bool_t debug=false);  constructor ;  ;  ~LDA ();  destructor ;  ; Float_t GetLogLikelihood (const std::vector< Float_t > &x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_",MatchSource.WIKI,doc/master/classTMVA_1_1LDA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html
https://root.cern/doc/master/classTMVA_1_1LDA.html:2956,Integrability,message,message,2956,"roximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Signal probability with Gaussian approximation. ; Definition at line 237 of file LDA.cxx. ◆ Initialize(). void TMVA::LDA::Initialize ; (; const LDAEvents & ; inputSignal, . const LDAEvents & ; inputBackground . ). Create LDA matrix using local events found by knn method. ; Definition at line 66 of file LDA.cxx. ◆ Log(). MsgLogger & TMVA::LDA::Log ; (; ); const. inlineprivate . Definition at line 65 of file LDA.h. Member Data Documentation. ◆ fDebug. Bool_t TMVA::LDA::fDebug. private . documentation! ; Definition at line 76 of file LDA.h. ◆ fEventFraction. std::map<Int_t, Float_t> TMVA::LDA::fEventFraction. private . documentation! ; Definition at line 75 of file LDA.h. ◆ fLogger. MsgLogger* TMVA::LDA::fLogger. mutableprivate . ! message logging service ; Definition at line 78 of file LDA.h. ◆ fMu. std::map<Int_t, std::vector<Float_t> > TMVA::LDA::fMu. private . documentation! ; Definition at line 72 of file LDA.h. ◆ fNumParams. UInt_t TMVA::LDA::fNumParams. private . documentation! ; Definition at line 71 of file LDA.h. ◆ fSigma. TMatrixF* TMVA::LDA::fSigma. private . documentation! ; Definition at line 73 of file LDA.h. ◆ fSigmaInverse. TMatrixF* TMVA::LDA::fSigmaInverse. private . documentation! ; Definition at line 74 of file LDA.h. ◆ fTolerence. Float_t TMVA::LDA::fTolerence. private . documentation! ; Definition at line 70 of file LDA.h. Libraries for TMVA::LDA:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LDA.h; tmva/tmva/src/LDA.cxx. TMVALDA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1LDA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html
https://root.cern/doc/master/classTMVA_1_1LDA.html:1137,Testability,log,logging,1137,"ns |; Private Attributes |; List of all members ; TMVA::LDA Class ReferenceTMVA. . Definition at line 44 of file LDA.h. Public Member Functions;  LDA (Float_t tolerence=1.0e-5, Bool_t debug=false);  constructor ;  ;  ~LDA ();  destructor ;  ; Float_t GetLogLikelihood (const std::vector< Float_t > &x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_",MatchSource.WIKI,doc/master/classTMVA_1_1LDA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html
https://root.cern/doc/master/classTMVA_1_1LDA.html:2964,Testability,log,logging,2964,"roximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Signal probability with Gaussian approximation. ; Definition at line 237 of file LDA.cxx. ◆ Initialize(). void TMVA::LDA::Initialize ; (; const LDAEvents & ; inputSignal, . const LDAEvents & ; inputBackground . ). Create LDA matrix using local events found by knn method. ; Definition at line 66 of file LDA.cxx. ◆ Log(). MsgLogger & TMVA::LDA::Log ; (; ); const. inlineprivate . Definition at line 65 of file LDA.h. Member Data Documentation. ◆ fDebug. Bool_t TMVA::LDA::fDebug. private . documentation! ; Definition at line 76 of file LDA.h. ◆ fEventFraction. std::map<Int_t, Float_t> TMVA::LDA::fEventFraction. private . documentation! ; Definition at line 75 of file LDA.h. ◆ fLogger. MsgLogger* TMVA::LDA::fLogger. mutableprivate . ! message logging service ; Definition at line 78 of file LDA.h. ◆ fMu. std::map<Int_t, std::vector<Float_t> > TMVA::LDA::fMu. private . documentation! ; Definition at line 72 of file LDA.h. ◆ fNumParams. UInt_t TMVA::LDA::fNumParams. private . documentation! ; Definition at line 71 of file LDA.h. ◆ fSigma. TMatrixF* TMVA::LDA::fSigma. private . documentation! ; Definition at line 73 of file LDA.h. ◆ fSigmaInverse. TMatrixF* TMVA::LDA::fSigmaInverse. private . documentation! ; Definition at line 74 of file LDA.h. ◆ fTolerence. Float_t TMVA::LDA::fTolerence. private . documentation! ; Definition at line 70 of file LDA.h. Libraries for TMVA::LDA:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LDA.h; tmva/tmva/src/LDA.cxx. TMVALDA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1LDA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html
https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunction.html:893,Modifiability,inherit,inherited,893,". ROOT: TMVA::LeastSquaresLossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LeastSquaresLossFunction Class ReferenceTMVA. ; Least Squares Loss Function. ; Definition at line 200 of file LossFunction.h. Public Member Functions;  LeastSquaresLossFunction ();  ;  ~LeastSquaresLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  least squares , determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LeastSquaresLossFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LeastSquaresLossFunction(). TMVA::LeastSquaresLossFunction::LeastSquaresLossFunction ; (; ). inline . Definition at line 203 of file LossFunction.h. ◆ ~LeastSquaresLossFunction(). TMVA::LeastSquaresLossFunction::~LeastSquaresLossFunction ; (; ). inline . Definition at line 204 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). Double_t TMVA::LeastSquaresLossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). virtual . least squares , determine the loss for a single event ; Implements TMVA::LossFunction.; Definition at line 368 of file LossFunction.cxx. ◆ CalculateMeanLoss(). Double_t TMVA::LeastSquaresLossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . least squares , determine the mean loss for a collection of eve",MatchSource.WIKI,doc/master/classTMVA_1_1LeastSquaresLossFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunction.html
https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html:1130,Modifiability,inherit,inherited,1130,"No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LeastSquaresLossFunctionBDT Class ReferenceTMVA. ; Least Squares BDT Loss Function. ; Definition at line 222 of file LossFunction.h. Public Member Functions;  LeastSquaresLossFunctionBDT ();  ;  ~LeastSquaresLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  least squares BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  least squares BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  least squares BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::LeastSquaresLossFunction;  LeastSquaresLossFunction ();  ;  ~LeastSquaresLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  least squares , determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LeastSquaresLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Document",MatchSource.WIKI,doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html:1249,Modifiability,inherit,inherited,1249,"No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LeastSquaresLossFunctionBDT Class ReferenceTMVA. ; Least Squares BDT Loss Function. ; Definition at line 222 of file LossFunction.h. Public Member Functions;  LeastSquaresLossFunctionBDT ();  ;  ~LeastSquaresLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  least squares BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  least squares BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  least squares BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::LeastSquaresLossFunction;  LeastSquaresLossFunction ();  ;  ~LeastSquaresLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  least squares , determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LeastSquaresLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Document",MatchSource.WIKI,doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html:1359,Modifiability,inherit,inherited,1359,"No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LeastSquaresLossFunctionBDT Class ReferenceTMVA. ; Least Squares BDT Loss Function. ; Definition at line 222 of file LossFunction.h. Public Member Functions;  LeastSquaresLossFunctionBDT ();  ;  ~LeastSquaresLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  least squares BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  least squares BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  least squares BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::LeastSquaresLossFunction;  LeastSquaresLossFunction ();  ;  ~LeastSquaresLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  least squares , determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LeastSquaresLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Document",MatchSource.WIKI,doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1LogInterval.html:323,Deployability,continuous,continuous,323,". ROOT: TMVA::LogInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::LogInterval Class ReferenceTMVA. ; The TMVA::Interval Class. . LogInterval definition, continuous and discrete; LogInterval(min,max) : a continous interval [min,max]; LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; 1,10,100,1000; 1,2,4,8,16,32,64,128,512,1024; or alike .. Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999; ; LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000; ; LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; TMVA::LogIntervalThe TMVA::Interval Class.Definition LogInterval.h:83. Definition at line 83 of file LogInterval.h. Public Member Functions;  LogInterval (const LogInterval &other);  ;  LogInterval (Double_t min, Double_t max, Int_t nbins=0);  ; virtual ~LogInterval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger ",MatchSource.WIKI,doc/master/classTMVA_1_1LogInterval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html
https://root.cern/doc/master/classTMVA_1_1LogInterval.html:3218,Deployability,continuous,continuous,3218,"oid StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Interval;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Interval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Interval; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . #include <TMVA/LogInterval.h>. Inheritance diagram for TMVA::LogInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LogInterval() [1/2]. TMVA::LogInterval::LogInterval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). Definition at line 89 of file LogInterval.cxx. ◆ LogInterval() [2/2]. TMVA::LogInterval::LogInterval ; (; const LogInterval & ; other). Definition at line 95 of file LogInterval.cxx. ◆ ~LogInterval(). TMVA::LogInterval::~LogInterval ; (; ). virtual . destructor ; Definition at line 103 of file LogInterval.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::LogInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::LogInterval::Class_Name ; (; ). static . ReturnsName o",MatchSource.WIKI,doc/master/classTMVA_1_1LogInterval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html
https://root.cern/doc/master/classTMVA_1_1LogInterval.html:2206,Modifiability,inherit,inherited,2206,"32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; TMVA::LogIntervalThe TMVA::Interval Class.Definition LogInterval.h:83. Definition at line 83 of file LogInterval.h. Public Member Functions;  LogInterval (const LogInterval &other);  ;  LogInterval (Double_t min, Double_t max, Int_t nbins=0);  ; virtual ~LogInterval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Interval;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Interval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TM",MatchSource.WIKI,doc/master/classTMVA_1_1LogInterval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html
https://root.cern/doc/master/classTMVA_1_1LogInterval.html:2808,Modifiability,inherit,inherited,2808," virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Interval;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Interval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Interval; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . #include <TMVA/LogInterval.h>. Inheritance diagram for TMVA::LogInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LogInterval() [1/2]. TMVA::LogInterval::LogInterval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). Definition at line 89 of file LogInterval.cxx. ◆ LogInterval() [2/2]. TMVA::LogInterval::LogInterval ; (; const LogInterval & ; other). Definition at line 95 of file LogInterval.cxx. ◆ ~LogInterval(). TMVA::LogInterval:",MatchSource.WIKI,doc/master/classTMVA_1_1LogInterval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html
https://root.cern/doc/master/classTMVA_1_1LogInterval.html:3046,Modifiability,inherit,inherited,3046,"oid StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Interval;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Interval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Interval; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . #include <TMVA/LogInterval.h>. Inheritance diagram for TMVA::LogInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LogInterval() [1/2]. TMVA::LogInterval::LogInterval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). Definition at line 89 of file LogInterval.cxx. ◆ LogInterval() [2/2]. TMVA::LogInterval::LogInterval ; (; const LogInterval & ; other). Definition at line 95 of file LogInterval.cxx. ◆ ~LogInterval(). TMVA::LogInterval::~LogInterval ; (; ). virtual . destructor ; Definition at line 103 of file LogInterval.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::LogInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::LogInterval::Class_Name ; (; ). static . ReturnsName o",MatchSource.WIKI,doc/master/classTMVA_1_1LogInterval.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html
https://root.cern/doc/master/classTMVA_1_1LossFunctionBDT.html:798,Modifiability,inherit,inherited,798,". ROOT: TMVA::LossFunctionBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LossFunctionBDT Class Referenceabstract. . Definition at line 124 of file LossFunction.h. Public Member Functions;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ; virtual Double_t Fit (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights)=0;  ; virtual void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap)=0;  ; virtual Double_t Target (LossFunctionEventInfo &e)=0;  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ; virtual Double_t CalculateLoss (LossFunctionEventInfo &e)=0;  ; virtual Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual Int_t Id ()=0;  ; virtual TString Name ()=0;  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LossFunctionBDT(). TMVA::LossFunctionBDT::LossFunctionBDT ; (; ). inline . Definition at line 129 of file LossFunction.h. ◆ ~LossFunctionBDT(). virtual TMVA::LossFunctionBDT::~LossFunctionBDT ; (; ). inlinevirtual . Definition at line 130 of file LossFunction.h. Member Function Documentation. ◆ Fit(). virtual Double_t TMVA::LossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). pure virtual . Implemented in TMVA::HuberLossFunctionBDT, TMVA::LeastSquaresLossFunctionBDT, and TMVA::AbsoluteDeviationLossFunctionBDT. ◆ Init(). virtual void TMVA::LossFunctionBDT::Init ; (; std::map< const TMV",MatchSource.WIKI,doc/master/classTMVA_1_1LossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html:527,Safety,predict,predictedValue,527,". ROOT: TMVA::LossFunctionEventInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::LossFunctionEventInfo Class Reference. . Definition at line 48 of file LossFunction.h. Public Member Functions;  LossFunctionEventInfo ();  ;  LossFunctionEventInfo (Double_t trueValue_, Double_t predictedValue_, Double_t weight_);  ;  ~LossFunctionEventInfo ();  . Public Attributes; Double_t predictedValue;  ; Double_t trueValue;  ; Double_t weight;  . #include <TMVA/LossFunction.h>; Constructor & Destructor Documentation. ◆ LossFunctionEventInfo() [1/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; ). inline . Definition at line 51 of file LossFunction.h. ◆ LossFunctionEventInfo() [2/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; Double_t ; trueValue_, . Double_t ; predictedValue_, . Double_t ; weight_ . ). inline . Definition at line 56 of file LossFunction.h. ◆ ~LossFunctionEventInfo(). TMVA::LossFunctionEventInfo::~LossFunctionEventInfo ; (; ). inline . Definition at line 61 of file LossFunction.h. Member Data Documentation. ◆ predictedValue. Double_t TMVA::LossFunctionEventInfo::predictedValue. Definition at line 64 of file LossFunction.h. ◆ trueValue. Double_t TMVA::LossFunctionEventInfo::trueValue. Definition at line 63 of file LossFunction.h. ◆ weight. Double_t TMVA::LossFunctionEventInfo::weight. Definition at line 65 of file LossFunction.h. Libraries for TMVA::LossFunctionEventInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/LossFunction.h. TMVALossFunctionEventInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1LossFunctionEventInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html
https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html:1203,Safety,predict,predictedValue,1203,". ROOT: TMVA::LossFunctionEventInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::LossFunctionEventInfo Class Reference. . Definition at line 48 of file LossFunction.h. Public Member Functions;  LossFunctionEventInfo ();  ;  LossFunctionEventInfo (Double_t trueValue_, Double_t predictedValue_, Double_t weight_);  ;  ~LossFunctionEventInfo ();  . Public Attributes; Double_t predictedValue;  ; Double_t trueValue;  ; Double_t weight;  . #include <TMVA/LossFunction.h>; Constructor & Destructor Documentation. ◆ LossFunctionEventInfo() [1/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; ). inline . Definition at line 51 of file LossFunction.h. ◆ LossFunctionEventInfo() [2/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; Double_t ; trueValue_, . Double_t ; predictedValue_, . Double_t ; weight_ . ). inline . Definition at line 56 of file LossFunction.h. ◆ ~LossFunctionEventInfo(). TMVA::LossFunctionEventInfo::~LossFunctionEventInfo ; (; ). inline . Definition at line 61 of file LossFunction.h. Member Data Documentation. ◆ predictedValue. Double_t TMVA::LossFunctionEventInfo::predictedValue. Definition at line 64 of file LossFunction.h. ◆ trueValue. Double_t TMVA::LossFunctionEventInfo::trueValue. Definition at line 63 of file LossFunction.h. ◆ weight. Double_t TMVA::LossFunctionEventInfo::weight. Definition at line 65 of file LossFunction.h. Libraries for TMVA::LossFunctionEventInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/LossFunction.h. TMVALossFunctionEventInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1LossFunctionEventInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html
https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html:1257,Safety,predict,predictedValue,1257,". ROOT: TMVA::LossFunctionEventInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::LossFunctionEventInfo Class Reference. . Definition at line 48 of file LossFunction.h. Public Member Functions;  LossFunctionEventInfo ();  ;  LossFunctionEventInfo (Double_t trueValue_, Double_t predictedValue_, Double_t weight_);  ;  ~LossFunctionEventInfo ();  . Public Attributes; Double_t predictedValue;  ; Double_t trueValue;  ; Double_t weight;  . #include <TMVA/LossFunction.h>; Constructor & Destructor Documentation. ◆ LossFunctionEventInfo() [1/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; ). inline . Definition at line 51 of file LossFunction.h. ◆ LossFunctionEventInfo() [2/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; Double_t ; trueValue_, . Double_t ; predictedValue_, . Double_t ; weight_ . ). inline . Definition at line 56 of file LossFunction.h. ◆ ~LossFunctionEventInfo(). TMVA::LossFunctionEventInfo::~LossFunctionEventInfo ; (; ). inline . Definition at line 61 of file LossFunction.h. Member Data Documentation. ◆ predictedValue. Double_t TMVA::LossFunctionEventInfo::predictedValue. Definition at line 64 of file LossFunction.h. ◆ trueValue. Double_t TMVA::LossFunctionEventInfo::trueValue. Definition at line 63 of file LossFunction.h. ◆ weight. Double_t TMVA::LossFunctionEventInfo::weight. Definition at line 65 of file LossFunction.h. Libraries for TMVA::LossFunctionEventInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/LossFunction.h. TMVALossFunctionEventInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1LossFunctionEventInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:6613,Availability,error,error,6613,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:6702,Availability,error,error,6702,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:6857,Availability,error,error,6857,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:7154,Availability,error,error,7154,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:11238,Availability,error,error,11238,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:758,Deployability,configurat,configuration,758,". ROOT: TMVA::MCFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MCFitter Class ReferenceTMVA. ; Fitter using Monte Carlo sampling of parameters. ; Definition at line 44 of file MCFitter.h. Public Member Functions;  MCFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MCFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles);  set MC fitter configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:17412,Deployability,configurat,configuration,17412,::MCFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 65 of file MCFitter.h. ◆ DeclareOptions(). void TMVA::MCFitter::DeclareOptions ; (; ). privatevirtual . Declare MCFitter options. ; Implements TMVA::FitterBase.; Definition at line 67 of file MCFitter.cxx. ◆ DeclFileName(). static const char * TMVA::MCFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 65 of file MCFitter.h. ◆ IsA(). virtual TClass * TMVA::MCFitter::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::FitterBase.; Definition at line 65 of file MCFitter.h. ◆ Run(). Double_t TMVA::MCFitter::Run ; (; std::vector< Double_t > & ; pars). virtual . Execute fitting. ; Implements TMVA::FitterBase.; Definition at line 86 of file MCFitter.cxx. ◆ SetParameters(). void TMVA::MCFitter::SetParameters ; (; Int_t ; cycles). set MC fitter configuration parameters ; Definition at line 78 of file MCFitter.cxx. ◆ Streamer(). virtual void TMVA::MCFitter::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::FitterBase. ◆ StreamerNVirtual(). void TMVA::MCFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file MCFitter.h. Member Data Documentation. ◆ fSamples. Int_t TMVA::MCFitter::fSamples. private . number of MC samples ; Definition at line 61 of file MCFitter.h. ◆ fSeed. UInt_t TMVA::MCFitter::fSeed. private . Seed for the random generator (0 takes random seeds) ; Definition at line 63 of file MCFitter.h. ◆ fSigma. Double_t TMVA::MCFitter::fSigma. private . new samples are generated randomly with a gaussian probability with fSigma around the current best value ; Definition at line 62 of file MCFitter.h. Libraries for TMVA::MCFitter:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MCFitter.,MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:1248,Integrability,interface,interface,1248,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MCFitter Class ReferenceTMVA. ; Fitter using Monte Carlo sampling of parameters. ; Definition at line 44 of file MCFitter.h. Public Member Functions;  MCFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MCFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles);  set MC fitter configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; templa",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:1446,Integrability,interface,interface,1446,"e of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writin",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:6619,Integrability,message,message,6619,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:7160,Integrability,message,message,7160,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:8150,Integrability,message,message,8150,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:11244,Integrability,message,message,11244,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:11617,Integrability,message,message,11617," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class (); ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:14446,Integrability,message,message,14446,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This br",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:15481,Integrability,message,message,15481," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MCFitter(). TMVA::MCFitter::MCFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file MCFitter.cxx. ◆ ~MCFitter(). virtual TMVA::MCFitter::~MCFitter ; (; ). inlinevirtual . Definition at line 51 of file MCFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MCFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:758,Modifiability,config,configuration,758,". ROOT: TMVA::MCFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MCFitter Class ReferenceTMVA. ; Fitter using Monte Carlo sampling of parameters. ; Definition at line 44 of file MCFitter.h. Public Member Functions;  MCFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MCFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles);  set MC fitter configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:954,Modifiability,inherit,inherited,954,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MCFitter Class ReferenceTMVA. ; Fitter using Monte Carlo sampling of parameters. ; Definition at line 44 of file MCFitter.h. Public Member Functions;  MCFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MCFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles);  set MC fitter configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; templa",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:1667,Modifiability,inherit,inherited,1667,"e of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writin",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:3416,Modifiability,inherit,inherited,3416,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:5156,Modifiability,inherit,inherited,5156,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:6249,Modifiability,inherit,inheritance,6249,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:8248,Modifiability,inherit,inherits,8248,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:8365,Modifiability,inherit,inherits,8365,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:12118,Modifiability,inherit,inherited,12118,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  Declare MCFitter options. ;  . Private Attributes; Int_t fSamples;  number of MC samples ;  ; UInt_t fSeed;  Seed for the random generator (0 takes ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:12338,Modifiability,inherit,inherited,12338,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  Declare MCFitter options. ;  . Private Attributes; Int_t fSamples;  number of MC samples ;  ; UInt_t fSeed;  Seed for the random generator (0 takes ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:12560,Modifiability,inherit,inherited,12560,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  Declare MCFitter options. ;  . Private Attributes; Int_t fSamples;  number of MC samples ;  ; UInt_t fSeed;  Seed for the random generator (0 takes ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:12770,Modifiability,inherit,inherited,12770,"ther TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::FitterBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  Declare MCFitter options. ;  . Private Attributes; Int_t fSamples;  number of MC samples ;  ; UInt_t fSeed;  Seed for the random generator (0 takes ",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:13646,Modifiability,inherit,inherited,13646,"st char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  Declare MCFitter options. ;  . Private Attributes; Int_t fSamples;  number of MC samples ;  ; UInt_t fSeed;  Seed for the random generator (0 takes random seeds) ;  ; Double_t fSigma;  new samples are generated randomly with a gaussian probability with fSigma around the current best value ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet fl",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:14287,Modifiability,inherit,inherited,14287,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This br",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:14386,Modifiability,inherit,inherited,14386,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This br",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:14494,Modifiability,inherit,inherited,14494,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This br",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:14901,Modifiability,inherit,inherited,14901,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This br",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:15106,Modifiability,inherit,inherited,15106," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MCFitter(). TMVA::MCFitter::MCFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file MCFitter.cxx. ◆ ~MCFitter(). virtual TMVA::MCFitter::~MCFitter ; (; ). inlinevirtual . Definition at line 51 of file MCFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MCFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:15422,Modifiability,inherit,inherited,15422," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MCFitter(). TMVA::MCFitter::MCFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file MCFitter.cxx. ◆ ~MCFitter(). virtual TMVA::MCFitter::~MCFitter ; (; ). inlinevirtual . Definition at line 51 of file MCFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MCFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:15523,Modifiability,inherit,inherited,15523," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MCFitter(). TMVA::MCFitter::MCFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file MCFitter.cxx. ◆ ~MCFitter(). virtual TMVA::MCFitter::~MCFitter ; (; ). inlinevirtual . Definition at line 51 of file MCFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MCFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:17412,Modifiability,config,configuration,17412,::MCFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 65 of file MCFitter.h. ◆ DeclareOptions(). void TMVA::MCFitter::DeclareOptions ; (; ). privatevirtual . Declare MCFitter options. ; Implements TMVA::FitterBase.; Definition at line 67 of file MCFitter.cxx. ◆ DeclFileName(). static const char * TMVA::MCFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 65 of file MCFitter.h. ◆ IsA(). virtual TClass * TMVA::MCFitter::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::FitterBase.; Definition at line 65 of file MCFitter.h. ◆ Run(). Double_t TMVA::MCFitter::Run ; (; std::vector< Double_t > & ; pars). virtual . Execute fitting. ; Implements TMVA::FitterBase.; Definition at line 86 of file MCFitter.cxx. ◆ SetParameters(). void TMVA::MCFitter::SetParameters ; (; Int_t ; cycles). set MC fitter configuration parameters ; Definition at line 78 of file MCFitter.cxx. ◆ Streamer(). virtual void TMVA::MCFitter::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::FitterBase. ◆ StreamerNVirtual(). void TMVA::MCFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file MCFitter.h. Member Data Documentation. ◆ fSamples. Int_t TMVA::MCFitter::fSamples. private . number of MC samples ; Definition at line 61 of file MCFitter.h. ◆ fSeed. UInt_t TMVA::MCFitter::fSeed. private . Seed for the random generator (0 takes random seeds) ; Definition at line 63 of file MCFitter.h. ◆ fSigma. Double_t TMVA::MCFitter::fSigma. private . new samples are generated randomly with a gaussian probability with fSigma around the current best value ; Definition at line 62 of file MCFitter.h. Libraries for TMVA::MCFitter:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MCFitter.,MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:4284,Security,hash,hash,4284,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:14454,Testability,log,logger,14454,"m TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This br",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MCFitter.html:15489,Testability,log,logger,15489," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MCFitter(). TMVA::MCFitter::MCFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file MCFitter.cxx. ◆ ~MCFitter(). virtual TMVA::MCFitter::~MCFitter ; (; ). inlinevirtual . Definition at line 51 of file MCFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MCFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA",MatchSource.WIKI,doc/master/classTMVA_1_1MCFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:18285,Availability,error,error,18285,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:18374,Availability,error,error,18374,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:18529,Availability,error,error,18529,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:18826,Availability,error,error,18826,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:22910,Availability,error,error,22910,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:12967,Deployability,configurat,configuration,12967,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:18291,Integrability,message,message,18291,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:18832,Integrability,message,message,18832,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:19822,Integrability,message,message,19822,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:22916,Integrability,message,message,22916,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:23289,Integrability,message,message,23289," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Cla",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:26367,Integrability,message,message,26367,"nt_t > *layout, std::vector< Double_t > *weights=nullptr, Bool_t fromFile=kFALSE);  build network given a layout (number of neurons in each layer) and optional weights array ;  ; void CreateWeightMonitoringHists (const TString &bulkname, std::vector< TH1 * > *hv=nullptr) const;  ; void ForceNetworkCalculations ();  calculate input values to each neuron ;  ; void ForceNetworkInputs (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; TNeuron * GetOutputNeuron (Int_t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ;  ; void PrintMessage (TString message, Bool_t force=kFALSE) const;  print messages, turn off printing by setting verbose and debug flag appropriately ;  ; void WaitForKeyboard ();  wait for keyboard input, for debugging ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:26411,Integrability,message,messages,26411,"ghts=nullptr, Bool_t fromFile=kFALSE);  build network given a layout (number of neurons in each layer) and optional weights array ;  ; void CreateWeightMonitoringHists (const TString &bulkname, std::vector< TH1 * > *hv=nullptr) const;  ; void ForceNetworkCalculations ();  calculate input values to each neuron ;  ; void ForceNetworkInputs (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; TNeuron * GetOutputNeuron (Int_t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ;  ; void PrintMessage (TString message, Bool_t force=kFALSE) const;  print messages, turn off printing by setting verbose and debug flag appropriately ;  ; void WaitForKeyboard ();  wait for keyboard input, for debugging ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (s",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:30500,Integrability,message,message,30500,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:40487,Integrability,message,message,40487,"MethodANNBase.h. ◆ MakeClassSpecific(). void TMVA::MethodANNBase::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. protectedvirtual . write specific classifier response ; Reimplemented from TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 1031 of file MethodANNBase.cxx. ◆ NumCycles(). Int_t TMVA::MethodANNBase::NumCycles ; (; ). inlineprotected . Definition at line 157 of file MethodANNBase.h. ◆ ParseLayoutString(). std::vector< Int_t > * TMVA::MethodANNBase::ParseLayoutString ; (; TString ; layerSpec). protected . parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ; Definition at line 172 of file MethodANNBase.cxx. ◆ PrintLayer(). void TMVA::MethodANNBase::PrintLayer ; (; TObjArray * ; layer); const. private . print a single layer, for debugging ; Definition at line 557 of file MethodANNBase.cxx. ◆ PrintMessage(). void TMVA::MethodANNBase::PrintMessage ; (; TString ; message, . Bool_t ; force = kFALSE . ); const. protected . print messages, turn off printing by setting verbose and debug flag appropriately ; Definition at line 510 of file MethodANNBase.cxx. ◆ PrintNetwork(). void TMVA::MethodANNBase::PrintNetwork ; (; ); const. virtual . print network representation, for debugging ; Definition at line 533 of file MethodANNBase.cxx. ◆ PrintNeuron(). void TMVA::MethodANNBase::PrintNeuron ; (; TNeuron * ; neuron); const. private . print a neuron, for debugging ; Definition at line 573 of file MethodANNBase.cxx. ◆ ProcessOptions(). void TMVA::MethodANNBase::ProcessOptions ; (; ). virtual . do nothing specific at this moment ; Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 157 of file MethodANNBase.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::Me",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:40552,Integrability,message,messages,40552," const. protectedvirtual . write specific classifier response ; Reimplemented from TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 1031 of file MethodANNBase.cxx. ◆ NumCycles(). Int_t TMVA::MethodANNBase::NumCycles ; (; ). inlineprotected . Definition at line 157 of file MethodANNBase.h. ◆ ParseLayoutString(). std::vector< Int_t > * TMVA::MethodANNBase::ParseLayoutString ; (; TString ; layerSpec). protected . parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ; Definition at line 172 of file MethodANNBase.cxx. ◆ PrintLayer(). void TMVA::MethodANNBase::PrintLayer ; (; TObjArray * ; layer); const. private . print a single layer, for debugging ; Definition at line 557 of file MethodANNBase.cxx. ◆ PrintMessage(). void TMVA::MethodANNBase::PrintMessage ; (; TString ; message, . Bool_t ; force = kFALSE . ); const. protected . print messages, turn off printing by setting verbose and debug flag appropriately ; Definition at line 510 of file MethodANNBase.cxx. ◆ PrintNetwork(). void TMVA::MethodANNBase::PrintNetwork ; (; ); const. virtual . print network representation, for debugging ; Definition at line 533 of file MethodANNBase.cxx. ◆ PrintNeuron(). void TMVA::MethodANNBase::PrintNeuron ; (; TNeuron * ; neuron); const. private . print a neuron, for debugging ; Definition at line 573 of file MethodANNBase.cxx. ◆ ProcessOptions(). void TMVA::MethodANNBase::ProcessOptions ; (; ). virtual . do nothing specific at this moment ; Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 157 of file MethodANNBase.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodANNBase::ReadWeightsFromStream ; (; std::istream & ; istr). virtual . destroy/clear the network then read it back in from the weights file ; ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:637,Modifiability,inherit,inherited,637,". ROOT: TMVA::MethodANNBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodANNBase Class ReferenceabstractTMVA. ; Base class for all TMVA methods using artificial neural networks. ; Definition at line 62 of file MethodANNBase.h. Public Types; enum  EEstimator { kMSE =0; , kCE; };  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodANNBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  standard constructor Note: Right now it is an option to choose the neuron input function, but only the input function ""sum"" leads to weight convergence – otherwise the weights go to nan and lead to an ABORT. ;  ;  MethodANNBase (Types::EMVA methodType, DataSetInfo &theData, const TString &theWeightFile);  construct the Method from the weight file ;  ; virtual ~MethodANNBase ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description of ANN class",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:733,Modifiability,inherit,inherited,733,". ROOT: TMVA::MethodANNBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodANNBase Class ReferenceabstractTMVA. ; Base class for all TMVA methods using artificial neural networks. ; Definition at line 62 of file MethodANNBase.h. Public Types; enum  EEstimator { kMSE =0; , kCE; };  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodANNBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  standard constructor Note: Right now it is an option to choose the neuron input function, but only the input function ""sum"" leads to weight convergence – otherwise the weights go to nan and lead to an ABORT. ;  ;  MethodANNBase (Types::EMVA methodType, DataSetInfo &theData, const TString &theWeightFile);  construct the Method from the weight file ;  ; virtual ~MethodANNBase ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description of ANN class",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:2072,Modifiability,variab,variables,2072,"1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodANNBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  standard constructor Note: Right now it is an option to choose the neuron input function, but only the input function ""sum"" leads to weight convergence – otherwise the weights go to nan and lead to an ABORT. ;  ;  MethodANNBase (Types::EMVA methodType, DataSetInfo &theData, const TString &theWeightFile);  construct the Method from the weight file ;  ; virtual ~MethodANNBase ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description of ANN classifier ;  ; const Ranking * CreateRanking ();  compute ranking of input variables by summing function of weights ;  ; Bool_t Debug () const;  who the hell makes such strange Debug flags that even use ""global pointers"".. ;  ; virtual void DeclareOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; template<typename WriteIterator > ; void GetLayerActivation (size_t layer, WriteIterator writeIterator);  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  get the multiclass classification values generated by the NN ;  ; virtual Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  get the mva value generated by the NN ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  get the regression value generated by the NN ;  ; void InitANNBase ();  initialize ANNBase object ;  ; virtual TClass * IsA () const;  ; virtual void Pri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:3788,Modifiability,inherit,inherited,3788,"> & GetRegressionValues ();  get the regression value generated by the NN ;  ; void InitANNBase ();  initialize ANNBase object ;  ; virtual TClass * IsA () const;  ; virtual void PrintNetwork () const;  print network representation, for debugging ;  ; virtual void ProcessOptions ();  do nothing specific at this moment ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (std::istream &istr);  destroy/clear the network then read it back in from the weights file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  read MLP from xml weight file ;  ; void SetActivation (TActivation *activation);  ; void SetNeuronInputCalculator (TNeuronInput *inputCalculator);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Train ()=0;  ; virtual void WriteMonitoringHistosToFile () const;  write histograms to file ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are henc",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:12967,Modifiability,config,configuration,12967,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:13070,Modifiability,inherit,inherited,13070,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:13339,Modifiability,inherit,inherited,13339,"ass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:15088,Modifiability,inherit,inherited,15088,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:16828,Modifiability,inherit,inherited,16828,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:17921,Modifiability,inherit,inheritance,17921,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:19920,Modifiability,inherit,inherits,19920,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:20037,Modifiability,inherit,inherits,20037,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:23790,Modifiability,inherit,inherited,23790,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TObjArray * fNetwork;  ;  Public Attributes inherited from TMVA::Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:24010,Modifiability,inherit,inherited,24010,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TObjArray * fNetwork;  ;  Public Attributes inherited from TMVA::Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:24227,Modifiability,inherit,inherited,24227,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TObjArray * fNetwork;  ;  Public Attributes inherited from TMVA::Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:24449,Modifiability,inherit,inherited,24449,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TObjArray * fNetwork;  ;  Public Attributes inherited from TMVA::Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:24659,Modifiability,inherit,inherited,24659,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TObjArray * fNetwork;  ;  Public Attributes inherited from TMVA::Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:25208,Modifiability,inherit,inherited,25208,"ions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TObjArray * fNetwork;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  . Protected Member Functions; virtual void BuildNetwork (std::vector< Int_t > *layout, std::vector< Double_t > *weights=nullptr, Bool_t fromFile=kFALSE);  build network given a layout (number of neurons in each layer) and optional weights array ;  ; void CreateWeightMonitoringHists (const TString &bulkname, std::vector< TH1 * > *hv=nullptr) const;  ; void ForceNetworkCalculations ();  calculate input values to each neuron ;  ; void ForceNetworkInputs (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; TNeuron * GetOutputNeuron (Int_t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout speci",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:26590,Modifiability,inherit,inherited,26590,"ng &bulkname, std::vector< TH1 * > *hv=nullptr) const;  ; void ForceNetworkCalculations ();  calculate input values to each neuron ;  ; void ForceNetworkInputs (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; TNeuron * GetOutputNeuron (Int_t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ;  ; void PrintMessage (TString message, Bool_t force=kFALSE) const;  print messages, turn off printing by setting verbose and debug flag appropriately ;  ; void WaitForKeyboard ();  wait for keyboard input, for debugging ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:27912,Modifiability,variab,variable,27912,"e given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:27953,Modifiability,variab,variables,27953,"e given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:27993,Modifiability,variab,variables,27993,"e given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:28147,Modifiability,inherit,inherited,28147,"e given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:28249,Modifiability,inherit,inherited,28249,"e given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:28656,Modifiability,inherit,inherited,28656,"e given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:29673,Modifiability,inherit,inherited,29673,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:30441,Modifiability,inherit,inherited,30441,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:30542,Modifiability,inherit,inherited,30542,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31075,Modifiability,layers,layers,31075,"tor< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron to its preceding layer ;  ; void BuildLayer (Int_t numNeurons, TObjArray *curLayer, TObjArray *prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Ch",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31860,Modifiability,inherit,inherited,31860,"m_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEstimator. enum TMVA::MethodANNBase::EEstimator. EnumeratorkMSE ; kCE . Definition at line 137 of file MethodANNBase.h. Constructor & Destructor Documentation. ◆ MethodANNBase() [1/2]. TMVA::MethodANNBase::MethodANNBase ; (; const TString & ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption . ). standard constructor Note: Right now it is an option to choose the neuron input function, but only the input function ""sum"" leads to weight convergence – otherwise the weights go to nan and lead to an ABORT. ; Definition at line 82 of file MethodANNBase.cxx. ◆ MethodANNBase() [2/2]. TMVA::MethodANNBase::MethodANNBase ; (; Types::EMVA ; methodType, . D",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:34167,Modifiability,layers,layers,34167,"umentation. ◆ AddPreLinks(). void TMVA::MethodANNBase::AddPreLinks ; (; TNeuron * ; neuron, . TObjArray * ; prevLayer . ). private . add synapses connecting a neuron to its preceding layer ; Definition at line 418 of file MethodANNBase.cxx. ◆ AddWeightsXMLTo(). void TMVA::MethodANNBase::AddWeightsXMLTo ; (; void * ; parent); const. virtual . create XML description of ANN classifier ; Implements TMVA::MethodBase.; Definition at line 699 of file MethodANNBase.cxx. ◆ BuildLayer(). void TMVA::MethodANNBase::BuildLayer ; (; Int_t ; numNeurons, . TObjArray * ; curLayer, . TObjArray * ; prevLayer, . Int_t ; layerIndex, . Int_t ; numLayers, . Bool_t ; from_file = false . ). private . build a single layer with neurons and synapses connecting this layer to the previous layer ; Definition at line 366 of file MethodANNBase.cxx. ◆ BuildLayers(). void TMVA::MethodANNBase::BuildLayers ; (; std::vector< Int_t > * ; layout, . Bool_t ; from_file = false . ). private . build the network layers ; Definition at line 330 of file MethodANNBase.cxx. ◆ BuildNetwork(). void TMVA::MethodANNBase::BuildNetwork ; (; std::vector< Int_t > * ; layout, . std::vector< Double_t > * ; weights = nullptr, . Bool_t ; fromFile = kFALSE . ). protectedvirtual . build network given a layout (number of neurons in each layer) and optional weights array ; Definition at line 288 of file MethodANNBase.cxx. ◆ Class(). static TClass * TMVA::MethodANNBase::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodANNBase::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodANNBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file MethodANNBase.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodANNBase::CreateRanking ; (; ). virtual . compute ranking of input variables by summing function of weights ; Implements TMVA::MethodBase.; Definition at ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:35098,Modifiability,variab,variables,35098,"_file = false . ). private . build the network layers ; Definition at line 330 of file MethodANNBase.cxx. ◆ BuildNetwork(). void TMVA::MethodANNBase::BuildNetwork ; (; std::vector< Int_t > * ; layout, . std::vector< Double_t > * ; weights = nullptr, . Bool_t ; fromFile = kFALSE . ). protectedvirtual . build network given a layout (number of neurons in each layer) and optional weights array ; Definition at line 288 of file MethodANNBase.cxx. ◆ Class(). static TClass * TMVA::MethodANNBase::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodANNBase::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodANNBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file MethodANNBase.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodANNBase::CreateRanking ; (; ). virtual . compute ranking of input variables by summing function of weights ; Implements TMVA::MethodBase.; Definition at line 910 of file MethodANNBase.cxx. ◆ CreateWeightMonitoringHists(). void TMVA::MethodANNBase::CreateWeightMonitoringHists ; (; const TString & ; bulkname, . std::vector< TH1 * > * ; hv = nullptr . ); const. protected . Definition at line 952 of file MethodANNBase.cxx. ◆ Debug(). Bool_t TMVA::MethodANNBase::Debug ; (; ); const. who the hell makes such strange Debug flags that even use ""global pointers"".. ; Definition at line 1160 of file MethodANNBase.cxx. ◆ DeclareOptions(). void TMVA::MethodANNBase::DeclareOptions ; (; ). virtual . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:35961,Modifiability,variab,variables,35961,"A::Ranking * TMVA::MethodANNBase::CreateRanking ; (; ). virtual . compute ranking of input variables by summing function of weights ; Implements TMVA::MethodBase.; Definition at line 910 of file MethodANNBase.cxx. ◆ CreateWeightMonitoringHists(). void TMVA::MethodANNBase::CreateWeightMonitoringHists ; (; const TString & ; bulkname, . std::vector< TH1 * > * ; hv = nullptr . ); const. protected . Definition at line 952 of file MethodANNBase.cxx. ◆ Debug(). Bool_t TMVA::MethodANNBase::Debug ; (; ); const. who the hell makes such strange Debug flags that even use ""global pointers"".. ; Definition at line 1160 of file MethodANNBase.cxx. ◆ DeclareOptions(). void TMVA::MethodANNBase::DeclareOptions ; (; ). virtual . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function used at the neuron . Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 125 of file MethodANNBase.cxx. ◆ DeclFileName(). static const char * TMVA::MethodANNBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file MethodANNBase.h. ◆ DeleteNetwork(). void TMVA::MethodANNBase::DeleteNetwork ; (; ). private . delete/clear network ; Definition at line 241 of file MethodANNBase.cxx. ◆ DeleteNetworkLayer(). void TMVA::MethodANNBase::DeleteNetworkLayer ; (; TObjArray *& ; layer). private . delete a network layer ; Definition at line 272 of file MethodANNBase.cxx. ◆ ForceNetworkCalculations(). void TMVA::MethodANNBase::ForceNetworkCalculations ; (; ). protected . calculate input values to each neuron ; Definition at line 487 of file MethodANNBase.cxx. ◆ ForceNetworkInputs(). ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:36043,Modifiability,layers,layers,36043,"A::Ranking * TMVA::MethodANNBase::CreateRanking ; (; ). virtual . compute ranking of input variables by summing function of weights ; Implements TMVA::MethodBase.; Definition at line 910 of file MethodANNBase.cxx. ◆ CreateWeightMonitoringHists(). void TMVA::MethodANNBase::CreateWeightMonitoringHists ; (; const TString & ; bulkname, . std::vector< TH1 * > * ; hv = nullptr . ); const. protected . Definition at line 952 of file MethodANNBase.cxx. ◆ Debug(). Bool_t TMVA::MethodANNBase::Debug ; (; ); const. who the hell makes such strange Debug flags that even use ""global pointers"".. ; Definition at line 1160 of file MethodANNBase.cxx. ◆ DeclareOptions(). void TMVA::MethodANNBase::DeclareOptions ; (; ). virtual . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function used at the neuron . Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 125 of file MethodANNBase.cxx. ◆ DeclFileName(). static const char * TMVA::MethodANNBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file MethodANNBase.h. ◆ DeleteNetwork(). void TMVA::MethodANNBase::DeleteNetwork ; (; ). private . delete/clear network ; Definition at line 241 of file MethodANNBase.cxx. ◆ DeleteNetworkLayer(). void TMVA::MethodANNBase::DeleteNetworkLayer ; (; TObjArray *& ; layer). private . delete a network layer ; Definition at line 272 of file MethodANNBase.cxx. ◆ ForceNetworkCalculations(). void TMVA::MethodANNBase::ForceNetworkCalculations ; (; ). protected . calculate input values to each neuron ; Definition at line 487 of file MethodANNBase.cxx. ◆ ForceNetworkInputs(). ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:10589,Performance,tune,tuned,10589,"TString &);  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; virtual void Init ()=0;  ; void InitIPythonInteractive ();  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:12056,Performance,tune,tuneParameters,12056,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31572,Performance,cache,cache,31572,"void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron to its preceding layer ;  ; void BuildLayer (Int_t numNeurons, TObjArray *curLayer, TObjArray *prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEstimator. enum TMVA::MethodANNBase::EEstimator. EnumeratorkMSE ; kCE . Definition at line 137 of file MethodANNBase.h. Constructor & Destructor Documentation. ◆ MethodANNBase() [1/2]. TMVA::MethodANNBase::MethodANNBase ; (; const TString & ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption . ). standard constructor Note: Right now it is an option to choose the neuron input function, but only the input f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31700,Performance,cache,cache,31700,"void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron to its preceding layer ;  ; void BuildLayer (Int_t numNeurons, TObjArray *curLayer, TObjArray *prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEstimator. enum TMVA::MethodANNBase::EEstimator. EnumeratorkMSE ; kCE . Definition at line 137 of file MethodANNBase.h. Constructor & Destructor Documentation. ◆ MethodANNBase() [1/2]. TMVA::MethodANNBase::MethodANNBase ; (; const TString & ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption . ). standard constructor Note: Right now it is an option to choose the neuron input function, but only the input f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:44810,Performance,cache,cache,44810,NBase.h. ◆ fEstimator. EEstimator TMVA::MethodANNBase::fEstimator. protected . Definition at line 171 of file MethodANNBase.h. ◆ fEstimatorHistTest. TH1F* TMVA::MethodANNBase::fEstimatorHistTest. protected . Definition at line 176 of file MethodANNBase.h. ◆ fEstimatorHistTrain. TH1F* TMVA::MethodANNBase::fEstimatorHistTrain. protected . Definition at line 175 of file MethodANNBase.h. ◆ fEstimatorS. TString TMVA::MethodANNBase::fEstimatorS. protected . Definition at line 172 of file MethodANNBase.h. ◆ fgDEBUG. const Bool_t TMVA::MethodANNBase::fgDEBUG = kTRUE. staticprivate . debug flag ; Definition at line 224 of file MethodANNBase.h. ◆ fIdentity. TActivation* TMVA::MethodANNBase::fIdentity. protected . Definition at line 165 of file MethodANNBase.h. ◆ fInputCalculator. TNeuronInput* TMVA::MethodANNBase::fInputCalculator. protected . Definition at line 167 of file MethodANNBase.h. ◆ fInputLayer. TObjArray* TMVA::MethodANNBase::fInputLayer. private . cache this for fast access ; Definition at line 219 of file MethodANNBase.h. ◆ fInvHessian. TMatrixD TMVA::MethodANNBase::fInvHessian. protected . zjh ; Definition at line 186 of file MethodANNBase.h. ◆ fLayerSpec. TString TMVA::MethodANNBase::fLayerSpec. private . layout specification option ; Definition at line 221 of file MethodANNBase.h. ◆ fNcycles. Int_t TMVA::MethodANNBase::fNcycles. protected . number of epochs to train ; Definition at line 192 of file MethodANNBase.h. ◆ fNetwork. TObjArray* TMVA::MethodANNBase::fNetwork. Definition at line 139 of file MethodANNBase.h. ◆ fNeuronInputType. TString TMVA::MethodANNBase::fNeuronInputType. protected . name of neuron input calculator class ; Definition at line 195 of file MethodANNBase.h. ◆ fNeuronType. TString TMVA::MethodANNBase::fNeuronType. protected . name of neuron activation function class ; Definition at line 194 of file MethodANNBase.h. ◆ fOutput. TActivation* TMVA::MethodANNBase::fOutput. protected . Definition at line 164 of file MethodANNBase.h. ◆ fOutputNeur,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:45921,Performance,cache,cache,45921,zjh ; Definition at line 186 of file MethodANNBase.h. ◆ fLayerSpec. TString TMVA::MethodANNBase::fLayerSpec. private . layout specification option ; Definition at line 221 of file MethodANNBase.h. ◆ fNcycles. Int_t TMVA::MethodANNBase::fNcycles. protected . number of epochs to train ; Definition at line 192 of file MethodANNBase.h. ◆ fNetwork. TObjArray* TMVA::MethodANNBase::fNetwork. Definition at line 139 of file MethodANNBase.h. ◆ fNeuronInputType. TString TMVA::MethodANNBase::fNeuronInputType. protected . name of neuron input calculator class ; Definition at line 195 of file MethodANNBase.h. ◆ fNeuronType. TString TMVA::MethodANNBase::fNeuronType. protected . name of neuron activation function class ; Definition at line 194 of file MethodANNBase.h. ◆ fOutput. TActivation* TMVA::MethodANNBase::fOutput. protected . Definition at line 164 of file MethodANNBase.h. ◆ fOutputNeurons. std::vector<TNeuron*> TMVA::MethodANNBase::fOutputNeurons. private . cache this for fast access ; Definition at line 220 of file MethodANNBase.h. ◆ fRandomSeed. Int_t TMVA::MethodANNBase::fRandomSeed. protected . random seed for initial synapse weights ; Definition at line 190 of file MethodANNBase.h. ◆ fRegulatorIdx. std::vector<Int_t> TMVA::MethodANNBase::fRegulatorIdx. protected . Definition at line 169 of file MethodANNBase.h. ◆ fRegulators. std::vector<Double_t> TMVA::MethodANNBase::fRegulators. protected . Definition at line 170 of file MethodANNBase.h. ◆ frgen. TRandom3* TMVA::MethodANNBase::frgen. protected . Definition at line 166 of file MethodANNBase.h. ◆ fSynapses. TObjArray* TMVA::MethodANNBase::fSynapses. protected . Definition at line 162 of file MethodANNBase.h. ◆ fUseRegulator. bool TMVA::MethodANNBase::fUseRegulator. protected . zjh ; Definition at line 187 of file MethodANNBase.h. Libraries for TMVA::MethodANNBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodANNBase.h; tmva/tmva/src/MethodANNBase.cxx. TMVA,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:15956,Security,hash,hash,15956,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31592,Security,access,access,31592,"void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron to its preceding layer ;  ; void BuildLayer (Int_t numNeurons, TObjArray *curLayer, TObjArray *prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEstimator. enum TMVA::MethodANNBase::EEstimator. EnumeratorkMSE ; kCE . Definition at line 137 of file MethodANNBase.h. Constructor & Destructor Documentation. ◆ MethodANNBase() [1/2]. TMVA::MethodANNBase::MethodANNBase ; (; const TString & ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption . ). standard constructor Note: Right now it is an option to choose the neuron input function, but only the input f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31720,Security,access,access,31720,"void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron to its preceding layer ;  ; void BuildLayer (Int_t numNeurons, TObjArray *curLayer, TObjArray *prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEstimator. enum TMVA::MethodANNBase::EEstimator. EnumeratorkMSE ; kCE . Definition at line 137 of file MethodANNBase.h. Constructor & Destructor Documentation. ◆ MethodANNBase() [1/2]. TMVA::MethodANNBase::MethodANNBase ; (; const TString & ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption . ). standard constructor Note: Right now it is an option to choose the neuron input function, but only the input f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:44830,Security,access,access,44830,NBase.h. ◆ fEstimator. EEstimator TMVA::MethodANNBase::fEstimator. protected . Definition at line 171 of file MethodANNBase.h. ◆ fEstimatorHistTest. TH1F* TMVA::MethodANNBase::fEstimatorHistTest. protected . Definition at line 176 of file MethodANNBase.h. ◆ fEstimatorHistTrain. TH1F* TMVA::MethodANNBase::fEstimatorHistTrain. protected . Definition at line 175 of file MethodANNBase.h. ◆ fEstimatorS. TString TMVA::MethodANNBase::fEstimatorS. protected . Definition at line 172 of file MethodANNBase.h. ◆ fgDEBUG. const Bool_t TMVA::MethodANNBase::fgDEBUG = kTRUE. staticprivate . debug flag ; Definition at line 224 of file MethodANNBase.h. ◆ fIdentity. TActivation* TMVA::MethodANNBase::fIdentity. protected . Definition at line 165 of file MethodANNBase.h. ◆ fInputCalculator. TNeuronInput* TMVA::MethodANNBase::fInputCalculator. protected . Definition at line 167 of file MethodANNBase.h. ◆ fInputLayer. TObjArray* TMVA::MethodANNBase::fInputLayer. private . cache this for fast access ; Definition at line 219 of file MethodANNBase.h. ◆ fInvHessian. TMatrixD TMVA::MethodANNBase::fInvHessian. protected . zjh ; Definition at line 186 of file MethodANNBase.h. ◆ fLayerSpec. TString TMVA::MethodANNBase::fLayerSpec. private . layout specification option ; Definition at line 221 of file MethodANNBase.h. ◆ fNcycles. Int_t TMVA::MethodANNBase::fNcycles. protected . number of epochs to train ; Definition at line 192 of file MethodANNBase.h. ◆ fNetwork. TObjArray* TMVA::MethodANNBase::fNetwork. Definition at line 139 of file MethodANNBase.h. ◆ fNeuronInputType. TString TMVA::MethodANNBase::fNeuronInputType. protected . name of neuron input calculator class ; Definition at line 195 of file MethodANNBase.h. ◆ fNeuronType. TString TMVA::MethodANNBase::fNeuronType. protected . name of neuron activation function class ; Definition at line 194 of file MethodANNBase.h. ◆ fOutput. TActivation* TMVA::MethodANNBase::fOutput. protected . Definition at line 164 of file MethodANNBase.h. ◆ fOutputNeur,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:45941,Security,access,access,45941,zjh ; Definition at line 186 of file MethodANNBase.h. ◆ fLayerSpec. TString TMVA::MethodANNBase::fLayerSpec. private . layout specification option ; Definition at line 221 of file MethodANNBase.h. ◆ fNcycles. Int_t TMVA::MethodANNBase::fNcycles. protected . number of epochs to train ; Definition at line 192 of file MethodANNBase.h. ◆ fNetwork. TObjArray* TMVA::MethodANNBase::fNetwork. Definition at line 139 of file MethodANNBase.h. ◆ fNeuronInputType. TString TMVA::MethodANNBase::fNeuronInputType. protected . name of neuron input calculator class ; Definition at line 195 of file MethodANNBase.h. ◆ fNeuronType. TString TMVA::MethodANNBase::fNeuronType. protected . name of neuron activation function class ; Definition at line 194 of file MethodANNBase.h. ◆ fOutput. TActivation* TMVA::MethodANNBase::fOutput. protected . Definition at line 164 of file MethodANNBase.h. ◆ fOutputNeurons. std::vector<TNeuron*> TMVA::MethodANNBase::fOutputNeurons. private . cache this for fast access ; Definition at line 220 of file MethodANNBase.h. ◆ fRandomSeed. Int_t TMVA::MethodANNBase::fRandomSeed. protected . random seed for initial synapse weights ; Definition at line 190 of file MethodANNBase.h. ◆ fRegulatorIdx. std::vector<Int_t> TMVA::MethodANNBase::fRegulatorIdx. protected . Definition at line 169 of file MethodANNBase.h. ◆ fRegulators. std::vector<Double_t> TMVA::MethodANNBase::fRegulators. protected . Definition at line 170 of file MethodANNBase.h. ◆ frgen. TRandom3* TMVA::MethodANNBase::frgen. protected . Definition at line 166 of file MethodANNBase.h. ◆ fSynapses. TObjArray* TMVA::MethodANNBase::fSynapses. protected . Definition at line 162 of file MethodANNBase.h. ◆ fUseRegulator. bool TMVA::MethodANNBase::fUseRegulator. protected . zjh ; Definition at line 187 of file MethodANNBase.h. Libraries for TMVA::MethodANNBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodANNBase.h; tmva/tmva/src/MethodANNBase.cxx. TMVA,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:11891,Testability,test,testTime,11891,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:12353,Testability,test,test,12353,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:12670,Testability,test,test,12670,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:26745,Testability,log,logProgress,26745,"uts (const Event *ev, Int_t ignoreIndex=-1);  force the input values of the input neurons force the value for each input neuron ;  ; TNeuron * GetInputNeuron (Int_t index);  ; Double_t GetNetworkOutput ();  ; TNeuron * GetOutputNeuron (Int_t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ;  ; void PrintMessage (TString message, Bool_t force=kFALSE) const;  print messages, turn off printing by setting verbose and debug flag appropriately ;  ; void WaitForKeyboard ();  wait for keyboard input, for debugging ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETree",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:26985,Testability,log,logProgress,26985,"t index=0);  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const;  write specific classifier response ;  ; Int_t NumCycles ();  ; std::vector< Int_t > * ParseLayoutString (TString layerSpec);  parse layout specification string and return a vector, each entry containing the number of neurons to go in each successive layer ;  ; void PrintMessage (TString message, Bool_t force=kFALSE) const;  print messages, turn off printing by setting verbose and debug flag appropriately ;  ; void WaitForKeyboard ();  wait for keyboard input, for debugging ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalise",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:30338,Testability,test,testing,30338,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:30508,Testability,log,logger,30508,"char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TActivation * fActivation;  ; std::vector< TH1 * > fEpochMonHistB;  ; std::vector< TH1 * > fEpochMonHistS;  ; std::vector< TH1 * > fEpochMonHistW;  ; EEstimator fEstimator;  ; TH1F * fEstimatorHistTest;  ; TH1F * fEstimatorHistTrain;  ; TString fEstimatorS;  ; TActivation * fIdentity;  ; TNeuronInput * fInputCalculator;  ; TMatrixD fInvHessian;  zjh ;  ; Int_t fNcycles;  number of epochs to train ;  ; TString fNeuronInputType;  name of neuron input calculator class ;  ; TString fNeuronType;  name of neuron activation function class ;  ; TActivation * fOutput;  ; Int_t fRandomSeed;  random seed for initial synapse weights ;  ; std::vector< Int_t > fRegulatorIdx;  ; std::vector< Double_t > fRegulators;  ; TRandom3 * frgen;  ; TObjArray * fSynapses;  ; bool fUseRegulator;  zjh ;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:3242,Usability,clear,clear,3242,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:31118,Usability,clear,clear,31118,"tor< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void AddPreLinks (TNeuron *neuron, TObjArray *prevLayer);  add synapses connecting a neuron to its preceding layer ;  ; void BuildLayer (Int_t numNeurons, TObjArray *curLayer, TObjArray *prevLayer, Int_t layerIndex, Int_t numLayers, Bool_t from_file=false);  build a single layer with neurons and synapses connecting this layer to the previous layer ;  ; void BuildLayers (std::vector< Int_t > *layout, Bool_t from_file=false);  build the network layers ;  ; void DeleteNetwork ();  delete/clear network ;  ; void DeleteNetworkLayer (TObjArray *&layer);  delete a network layer ;  ; void ForceWeights (std::vector< Double_t > *weights);  force the synapse weights ;  ; void InitWeights ();  initialize the synapse weights randomly ;  ; void PrintLayer (TObjArray *layer) const;  print a single layer, for debugging ;  ; void PrintNeuron (TNeuron *neuron) const;  print a neuron, for debugging ;  . Private Attributes; TObjArray * fInputLayer;  cache this for fast access ;  ; TString fLayerSpec;  layout specification option ;  ; std::vector< TNeuron * > fOutputNeurons;  cache this for fast access ;  . Static Private Attributes; static const Bool_t fgDEBUG = kTRUE;  debug flag ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodANNBase.h>. Inheritance diagram for TMVA::MethodANNBase:. This browser is not able to show SVG: try Firefox, Ch",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:36544,Usability,clear,clear,36544,"se ""global pointers"".. ; Definition at line 1160 of file MethodANNBase.cxx. ◆ DeclareOptions(). void TMVA::MethodANNBase::DeclareOptions ; (; ). virtual . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function used at the neuron . Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 125 of file MethodANNBase.cxx. ◆ DeclFileName(). static const char * TMVA::MethodANNBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file MethodANNBase.h. ◆ DeleteNetwork(). void TMVA::MethodANNBase::DeleteNetwork ; (; ). private . delete/clear network ; Definition at line 241 of file MethodANNBase.cxx. ◆ DeleteNetworkLayer(). void TMVA::MethodANNBase::DeleteNetworkLayer ; (; TObjArray *& ; layer). private . delete a network layer ; Definition at line 272 of file MethodANNBase.cxx. ◆ ForceNetworkCalculations(). void TMVA::MethodANNBase::ForceNetworkCalculations ; (; ). protected . calculate input values to each neuron ; Definition at line 487 of file MethodANNBase.cxx. ◆ ForceNetworkInputs(). void TMVA::MethodANNBase::ForceNetworkInputs ; (; const Event * ; ev, . Int_t ; ignoreIndex = -1 . ). protected . force the input values of the input neurons force the value for each input neuron ; Definition at line 469 of file MethodANNBase.cxx. ◆ ForceWeights(). void TMVA::MethodANNBase::ForceWeights ; (; std::vector< Double_t > * ; weights). private . force the synapse weights ; Definition at line 453 of file MethodANNBase.cxx. ◆ GetInputNeuron(). TNeuron * TMVA::MethodANNBase::GetInputNeuron ; (; Int_t ; index). inlineprotected . Definition at line 158 ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:41547,Usability,clear,clear,41547,"ng verbose and debug flag appropriately ; Definition at line 510 of file MethodANNBase.cxx. ◆ PrintNetwork(). void TMVA::MethodANNBase::PrintNetwork ; (; ); const. virtual . print network representation, for debugging ; Definition at line 533 of file MethodANNBase.cxx. ◆ PrintNeuron(). void TMVA::MethodANNBase::PrintNeuron ; (; TNeuron * ; neuron); const. private . print a neuron, for debugging ; Definition at line 573 of file MethodANNBase.cxx. ◆ ProcessOptions(). void TMVA::MethodANNBase::ProcessOptions ; (; ). virtual . do nothing specific at this moment ; Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 157 of file MethodANNBase.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodANNBase::ReadWeightsFromStream ; (; std::istream & ; istr). virtual . destroy/clear the network then read it back in from the weights file ; Implements TMVA::MethodBase.; Definition at line 889 of file MethodANNBase.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodANNBase::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . read MLP from xml weight file ; Implements TMVA::MethodBase.; Definition at line 767 of file MethodANNBase.cxx. ◆ SetActivation(). void TMVA::MethodANNBase::SetActivation ; (; TActivation * ; activation). inline . Definition at line 83 of file MethodANNBase.h. ◆ SetNeuronInputCalculator(). void TMVA::MethodANNBase::SetNeuronInputCalculator ; (; TNeuronInput * ; inputCalculator). inline . Definition at line 87 of file MethodANNBase.h. ◆ Streamer(). virtual void TMVA::MethodANNBase::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase.; Reimplemented in TMVA::Metho",MatchSource.WIKI,doc/master/classTMVA_1_1MethodANNBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:17852,Availability,error,error,17852,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:17941,Availability,error,error,17941,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:18096,Availability,error,error,18096,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:18393,Availability,error,error,18393,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:22477,Availability,error,error,22477,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:29712,Availability,avail,available,29712,"ee branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:64905,Availability,avail,available,64905," instances of the corresponding MVA method are stored ; Definition at line 2020 of file MethodBase.cxx. ◆ NoErrorCalc(). void TMVA::MethodBase::NoErrorCalc ; (; Double_t *const ; err, . Double_t *const ; errUpper . ). protected . Definition at line 837 of file MethodBase.cxx. ◆ OptimizeTuningParameters(). std::map< TString, Double_t > TMVA::MethodBase::OptimizeTuningParameters ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). virtual . call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 623 of file MethodBase.cxx. ◆ PrintHelpMessage(). void TMVA::MethodBase::PrintHelpMessage ; (; ); const. virtual . prints out method-specific help method ; Implements TMVA::IMethod.; Definition at line 3264 of file MethodBase.cxx. ◆ ProcessBaseOptions(). void TMVA::MethodBase::ProcessBaseOptions ; (; ). private . the option string is decoded, for available options see ""DeclareOptions"" ; Definition at line 540 of file MethodBase.cxx. ◆ ProcessOptions(). virtual void TMVA::MethodBase::ProcessOptions ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, TMVA::MethodTMlpANN, TMVA::PyMethodBase, TMVA::RMethodBase, and TMVA::MethodCompositeBase. ◆ ProcessSetup(). void TMVA::MethodBase::ProcessSetup ; (; ). process all options the ""CheckF",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:12534,Deployability,configurat,configuration,12534,"f methods ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; virtual void Train ()=0;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79050,Deployability,configurat,configuration,79050,"e(). Bool_t TMVA::MethodBase::Verbose ; (; ); const. inlineprotected . Definition at line 503 of file MethodBase.h. ◆ WriteEvaluationHistosToFile(). void TMVA::MethodBase::WriteEvaluationHistosToFile ; (; Types::ETreeType ; treetype). virtual . writes all MVA evaluation histograms to file ; Reimplemented in TMVA::MethodBoost.; Definition at line 2094 of file MethodBase.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBase::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Sy",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:12348,Energy Efficiency,monitor,monitoring,12348,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:78577,Energy Efficiency,monitor,monitoring,78577,"VA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ TrainingEnded(). bool TMVA::MethodBase::TrainingEnded ; (; ). inline . Definition at line 469 of file MethodBase.h. ◆ TrainMethod(). void TMVA::MethodBase::TrainMethod ; (; ). Definition at line 650 of file MethodBase.cxx. ◆ TxtWeightsOnly(). Bool_t TMVA::MethodBase::TxtWeightsOnly ; (; ); const. inlineprotected . Definition at line 534 of file MethodBase.h. ◆ Verbose(). Bool_t TMVA::MethodBase::Verbose ; (; ); const. inlineprotected . Definition at line 503 of file MethodBase.h. ◆ WriteEvaluationHistosToFile(). void TMVA::MethodBase::WriteEvaluationHistosToFile ; (; Types::ETreeType ; treetype). virtual . writes all MVA evaluation histograms to file ; Reimplemented in TMVA::MethodBoost.; Definition at line 2094 of file MethodBase.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBase::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:616,Integrability,depend,depends,616,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:17858,Integrability,message,message,17858,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:18399,Integrability,message,message,18399,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:19389,Integrability,message,message,19389,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:22483,Integrability,message,message,22483,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:22856,Integrability,message,message,22856," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:27929,Integrability,message,message,27929,"oseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual vo",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:40795,Integrability,message,message,40795,"A::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, TMVA::MethodTMlpANN, TMVA::PyMethodBase, TMVA::RMethodBase, and TMVA::MethodCompositeBase. ◆ Data(). DataSet * TMVA::MethodBase::Data ; (; ); const. inline . Definition at line 409 of file MethodBase.h. ◆ DataInfo(). DataSetInfo & TMVA::MethodBase::DataInfo ; (; ); const. inline . Definition at line 410 of file MethodBase.h. ◆ DeclareBaseOptions(). void TMVA::MethodBase::DeclareBaseOptions ; (; ). private . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. VariableTransform=None,Decorrelated,PCA to use transformed variables instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use in the method. Only the Likelihood Method can make proper use of independent transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message . Definition at line 509 of file MethodBase.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBase::DeclareCompatibilityOptions ; (; ). virtual . options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ; Reimplemented in TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodDT, TMVA::MethodKNN, TMVA::MethodLikelihood, TMVA::MethodPDEFoam, and TMVA::MethodSVM.; Definition at line 596 of file MethodBase.cxx. ◆ DeclareOptions(). virtual void TMVA::MethodBase::DeclareOptions ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandom",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:1979,Modifiability,variab,variables,1979,"icance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit too strong correlations. . Definition at line 111 of file MethodBase.h. Public Types; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption=""""",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:2151,Modifiability,inherit,inherited,2151,"{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit too strong correlations. . Definition at line 111 of file MethodBase.h. Public Types; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:12534,Modifiability,config,configuration,12534,"f methods ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; virtual void Train ()=0;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:12637,Modifiability,inherit,inherited,12637,"rNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; virtual void Train ()=0;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:12906,Modifiability,inherit,inherited,12906,"uble_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; virtual void Train ()=0;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:14655,Modifiability,inherit,inherited,14655,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:16395,Modifiability,inherit,inherited,16395,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:17488,Modifiability,inherit,inheritance,17488,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:19487,Modifiability,inherit,inherits,19487,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:19604,Modifiability,inherit,inherits,19604,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:23357,Modifiability,inherit,inherited,23357,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  . Protected Member Functions; virtual void AddWeightsXMLTo (void *parent) const =0;  ; virtual std::vector< Double_t > Get",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:23574,Modifiability,inherit,inherited,23574,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  . Protected Member Functions; virtual void AddWeightsXMLTo (void *parent) const =0;  ; virtual std::vector< Double_t > Get",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:23796,Modifiability,inherit,inherited,23796,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  . Protected Member Functions; virtual void AddWeightsXMLTo (void *parent) const =0;  ; virtual std::vector< Double_t > Get",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:24006,Modifiability,inherit,inherited,24006,"ither TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  . Protected Member Functions; virtual void AddWeightsXMLTo (void *parent) const =0;  ; virtual std::vector< Double_t > Get",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:26186,Modifiability,variab,variable,26186,"e current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *wghtnode)=0;  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:26227,Modifiability,variab,variables,26227,"e current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *wghtnode)=0;  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:26267,Modifiability,variab,variables,26267,"e current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *wghtnode)=0;  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:26421,Modifiability,inherit,inherited,26421,"e current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *wghtnode)=0;  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:26523,Modifiability,inherit,inherited,26523,"e current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *wghtnode)=0;  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:26930,Modifiability,inherit,inherited,26930,"e current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *wghtnode)=0;  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::IMethod; virtual void GetHelpMessage () const =0;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:27870,Modifiability,inherit,inherited,27870,"oseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual vo",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:27971,Modifiability,inherit,inherited,27971,"oseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual vo",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:28321,Modifiability,variab,variable,28321,"Ranking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual void AddMulticlassOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddRegressionOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:28451,Modifiability,variab,variable,28451,"Ranking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual void AddMulticlassOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddRegressionOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:28673,Modifiability,variab,variable,28673,"Ranking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual void AddMulticlassOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddRegressionOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:28799,Modifiability,variab,variable,28799,"Ranking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual void AddMulticlassOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddRegressionOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:29014,Modifiability,variab,variable,29014,"Ranking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual void AddMulticlassOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddRegressionOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:29094,Modifiability,variab,variables,29094,"Ranking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual void AddMulticlassOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddRegressionOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30078,Modifiability,variab,variable,30078,"ee branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30162,Modifiability,variab,variables,30162,"ee branch with the method's discriminating variable ;  ; void AddSpectatorsXMLTo (void *parent) const;  write spectator info to XML ;  ; void AddTargetsXMLTo (void *parent) const;  write target info to XML ;  ; void AddVarsXMLTo (void *parent) const;  write variable info to XML ;  ; void CreateMVAPdfs ();  Create PDFs of the MVA output variables. ;  ; void DeclareBaseOptions ();  define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ;  ; ECutOrientation GetCutOrientation () const;  ; Bool_t GetLine (std::istream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30404,Modifiability,variab,variables,30404,"ream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given data transformation method to the stream ;  . Private Attributes; TDirectory * fBaseDir;  ; Bool_t fConstructedFromWeightFile;  ; ECutOrientation fCutOrientation;  ; DataSetInfo & fDataSetInfo;  ; PDF * fDefaultPDF;  default PDF definitions ;  ; TH1 * fEffS;  efficiency histogram for rootfinder ;  ; std::vector< const std::vector< TMVA::Event * > * > fEventCollections;  ; TFile * fFile;  ; TString fFileDir;  unix sub-directory for weight files (default: DataLoader's Name + ""weights"") ;  ; Bool_t fHasMVAPdfs;  MVA Pdfs are created for this classifier. ;  ; Bool_t fHelp;  help flag ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30415,Modifiability,variab,variable,30415,"ream &fin, char *buf);  reads one line from the input stream checks for certain keywords and interprets the line if keywords are found ;  ; virtual Double_t GetValueForRoot (Double_t);  returns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given data transformation method to the stream ;  . Private Attributes; TDirectory * fBaseDir;  ; Bool_t fConstructedFromWeightFile;  ; ECutOrientation fCutOrientation;  ; DataSetInfo & fDataSetInfo;  ; PDF * fDefaultPDF;  default PDF definitions ;  ; TH1 * fEffS;  efficiency histogram for rootfinder ;  ; std::vector< const std::vector< TMVA::Event * > * > fEventCollections;  ; TFile * fFile;  ; TString fFileDir;  unix sub-directory for weight files (default: DataLoader's Name + ""weights"") ;  ; Bool_t fHasMVAPdfs;  MVA Pdfs are created for this classifier. ;  ; Bool_t fHelp;  help flag ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30575,Modifiability,variab,variables,30575,"eturns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given data transformation method to the stream ;  . Private Attributes; TDirectory * fBaseDir;  ; Bool_t fConstructedFromWeightFile;  ; ECutOrientation fCutOrientation;  ; DataSetInfo & fDataSetInfo;  ; PDF * fDefaultPDF;  default PDF definitions ;  ; TH1 * fEffS;  efficiency histogram for rootfinder ;  ; std::vector< const std::vector< TMVA::Event * > * > fEventCollections;  ; TFile * fFile;  ; TString fFileDir;  unix sub-directory for weight files (default: DataLoader's Name + ""weights"") ;  ; Bool_t fHasMVAPdfs;  MVA Pdfs are created for this classifier. ;  ; Bool_t fHelp;  help flag ;  ; Bool_t fIgnoreNegWeightsInTraining;  If true, events with negative weights are not used in training. ;  ; TString fJobName;  ; Double_t fMeanB;  mean (background) ;  ; Double_t fMeanS;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30586,Modifiability,variab,variable,30586,"eturns efficiency as function of cut ;  ; void InitBase ();  default initialization called by all constructors ;  ; void ProcessBaseOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given data transformation method to the stream ;  . Private Attributes; TDirectory * fBaseDir;  ; Bool_t fConstructedFromWeightFile;  ; ECutOrientation fCutOrientation;  ; DataSetInfo & fDataSetInfo;  ; PDF * fDefaultPDF;  default PDF definitions ;  ; TH1 * fEffS;  efficiency histogram for rootfinder ;  ; std::vector< const std::vector< TMVA::Event * > * > fEventCollections;  ; TFile * fFile;  ; TString fFileDir;  unix sub-directory for weight files (default: DataLoader's Name + ""weights"") ;  ; Bool_t fHasMVAPdfs;  MVA Pdfs are created for this classifier. ;  ; Bool_t fHelp;  help flag ;  ; Bool_t fIgnoreNegWeightsInTraining;  If true, events with negative weights are not used in training. ;  ; TString fJobName;  ; Double_t fMeanB;  mean (background) ;  ; Double_t fMeanS;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:30719,Modifiability,variab,variables,30719," available options see ""DeclareOptions"" ;  ; void ReadClassesFromXML (void *clsnode);  read number of classes from XML ;  ; void ReadSpectatorsFromXML (void *specnode);  read spectator info from XML ;  ; void ReadStateFromXML (void *parent);  ; void ReadTargetsFromXML (void *tarnode);  read target info from XML ;  ; void ReadVariablesFromXML (void *varnode);  read variable info from XML ;  ; void ReadVarsFromStream (std::istream &istr);  Read the variables (name, min, max) for a given data transformation method from the stream. ;  ; void ResetThisBase ();  ; void WriteStateToStream (std::ostream &tf) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteStateToXML (void *parent) const;  general method used in writing the header of the weight files where the used variables, variable transformation type etc. ;  ; void WriteVarsToStream (std::ostream &tf, const TString &prefix="""") const;  write the list of variables (name, min, max) for a given data transformation method to the stream ;  . Private Attributes; TDirectory * fBaseDir;  ; Bool_t fConstructedFromWeightFile;  ; ECutOrientation fCutOrientation;  ; DataSetInfo & fDataSetInfo;  ; PDF * fDefaultPDF;  default PDF definitions ;  ; TH1 * fEffS;  efficiency histogram for rootfinder ;  ; std::vector< const std::vector< TMVA::Event * > * > fEventCollections;  ; TFile * fFile;  ; TString fFileDir;  unix sub-directory for weight files (default: DataLoader's Name + ""weights"") ;  ; Bool_t fHasMVAPdfs;  MVA Pdfs are created for this classifier. ;  ; Bool_t fHelp;  help flag ;  ; Bool_t fIgnoreNegWeightsInTraining;  If true, events with negative weights are not used in training. ;  ; TString fJobName;  ; Double_t fMeanB;  mean (background) ;  ; Double_t fMeanS;  mean (signal) ;  ; TDirectory * fMethodBaseDir;  ; TString fMethodName;  ; Types::EMVA fMethodType;  ; Bool_t fModelPersistence;  ; PDF * fMVAPdfB;  background MVA PDF ;  ; PD",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:33088,Modifiability,variab,variable,33088,"Version;  ; Double_t fSignalReferenceCut;  the data set information (sometimes needed) ;  ; Double_t fSignalReferenceCutOrientation;  ; Bool_t fSilentFile;  ; PDF * fSplB;  PDFs of MVA distribution (background) ;  ; TSpline * fSpleffBvsS;  splines for signal eff. versus background eff. ;  ; TSpline1 * fSplRefB;  ; TSpline1 * fSplRefS;  ; PDF * fSplS;  PDFs of MVA distribution (signal) ;  ; PDF * fSplTrainB;  PDFs of training MVA distribution (background) ;  ; TSpline * fSplTrainEffBvsS;  splines for training signal eff. versus background eff. ;  ; TSpline1 * fSplTrainRefB;  ; TSpline1 * fSplTrainRefS;  ; PDF * fSplTrainS;  PDFs of training MVA distribution (signal) ;  ; Double_t fTestTime;  ; TString fTestvar;  ; UInt_t fTMVATrainingVersion;  ; Double_t fTrainTime;  ; TransformationHandler fTransformation;  the list of transformations ;  ; TransformationHandler * fTransformationPointer;  pointer to the rest of transformations ;  ; Bool_t fTxtWeightsOnly;  ; Bool_t fUseDecorr;  ; Types::ESBType fVariableTransformType;  ; TString fVariableTransformTypeString;  ; TString fVarTransformString;  labels variable transform method ;  ; Bool_t fVerbose;  verbose flag ;  ; EMsgType fVerbosityLevel;  verbosity level ;  ; TString fVerbosityLevelString;  verbosity level (user input string) ;  ; TString fWeightFile;  weight file name ;  ; Double_t fXmax;  maximum (signal and background) ;  ; Double_t fXmin;  minimum (signal and background) ;  . Friends; class CrossValidation;  ; class Experimental::Classification;  ; class Factory;  ; class MethodBoost;  ; class MethodCategory;  ; class MethodCompositeBase;  ; class MethodCrossValidation;  ; class MethodCuts;  ; class RootFinder;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodBase.h>. Inheritance diagram for TMVA::MethodBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeratio",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:33718,Modifiability,inherit,inherited,33718,"Double_t fTrainTime;  ; TransformationHandler fTransformation;  the list of transformations ;  ; TransformationHandler * fTransformationPointer;  pointer to the rest of transformations ;  ; Bool_t fTxtWeightsOnly;  ; Bool_t fUseDecorr;  ; Types::ESBType fVariableTransformType;  ; TString fVariableTransformTypeString;  ; TString fVarTransformString;  labels variable transform method ;  ; Bool_t fVerbose;  verbose flag ;  ; EMsgType fVerbosityLevel;  verbosity level ;  ; TString fVerbosityLevelString;  verbosity level (user input string) ;  ; TString fWeightFile;  weight file name ;  ; Double_t fXmax;  maximum (signal and background) ;  ; Double_t fXmin;  minimum (signal and background) ;  . Friends; class CrossValidation;  ; class Experimental::Classification;  ; class Factory;  ; class MethodBoost;  ; class MethodCategory;  ; class MethodCompositeBase;  ; class MethodCrossValidation;  ; class MethodCuts;  ; class RootFinder;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodBase.h>. Inheritance diagram for TMVA::MethodBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ECutOrientation. enum TMVA::MethodBase::ECutOrientation. private . EnumeratorkNegative ; kPositive . Definition at line 551 of file MethodBase.h. ◆ EWeightFileType. enum TMVA::MethodBase::EWeightFileType. EnumeratorkROOT ; kTEXT . Definition at line 122 of file MethodBase.h. Constructor & Destructor Documentation. ◆ MethodBase() [1/2]. TMVA::MethodBase::MethodBase ; (; const TString & ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; dsi, . const TString & ; theOption = """" . ). standard constructor ; Definition at line 237 of file MethodBase.cxx. ◆ MethodBase() [2/2]. TMVA::MethodBase::MethodBase ; (; Types::EMVA ; methodType, . DataSetInfo & ; dsi, . const TString & ; weightFile . ). c",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:35382,Modifiability,variab,variable,35382," ; jobName, . Types::EMVA ; methodType, . const TString & ; methodTitle, . DataSetInfo & ; dsi, . const TString & ; theOption = """" . ). standard constructor ; Definition at line 237 of file MethodBase.cxx. ◆ MethodBase() [2/2]. TMVA::MethodBase::MethodBase ; (; Types::EMVA ; methodType, . DataSetInfo & ; dsi, . const TString & ; weightFile . ). constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ; Definition at line 303 of file MethodBase.cxx. ◆ ~MethodBase(). TMVA::MethodBase::~MethodBase ; (; void ; ). virtual . destructor ; Definition at line 364 of file MethodBase.cxx. Member Function Documentation. ◆ AddClassesXMLTo(). void TMVA::MethodBase::AddClassesXMLTo ; (; void * ; parent); const. private . write class info to XML ; Definition at line 1801 of file MethodBase.cxx. ◆ AddClassifierOutput(). void TMVA::MethodBase::AddClassifierOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 869 of file MethodBase.cxx. ◆ AddClassifierOutputProb(). void TMVA::MethodBase::AddClassifierOutputProb ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 951 of file MethodBase.cxx. ◆ AddInfoItem(). void TMVA::MethodBase::AddInfoItem ; (; void * ; gi, . const TString & ; name, . const TString & ; value . ); const. private . xml writing ; Definition at line 1306 of file MethodBase.cxx. ◆ AddMulticlassOutput(). void TMVA::MethodBase::AddMulticlassOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 794 of file MethodBase.cxx. ◆ AddOutput(). void TMVA::MethodBase::AddOutput ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysisType . ). Definition at line 1315 of file MethodBase.cxx. ◆ AddRegressionOutput(). void TMVA::MethodBase::AddRegressionOutput ; (; Types::ETreeType ; type). privat",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:35617,Modifiability,variab,variable,35617,"ethodBase::MethodBase ; (; Types::EMVA ; methodType, . DataSetInfo & ; dsi, . const TString & ; weightFile . ). constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ; Definition at line 303 of file MethodBase.cxx. ◆ ~MethodBase(). TMVA::MethodBase::~MethodBase ; (; void ; ). virtual . destructor ; Definition at line 364 of file MethodBase.cxx. Member Function Documentation. ◆ AddClassesXMLTo(). void TMVA::MethodBase::AddClassesXMLTo ; (; void * ; parent); const. private . write class info to XML ; Definition at line 1801 of file MethodBase.cxx. ◆ AddClassifierOutput(). void TMVA::MethodBase::AddClassifierOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 869 of file MethodBase.cxx. ◆ AddClassifierOutputProb(). void TMVA::MethodBase::AddClassifierOutputProb ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 951 of file MethodBase.cxx. ◆ AddInfoItem(). void TMVA::MethodBase::AddInfoItem ; (; void * ; gi, . const TString & ; name, . const TString & ; value . ); const. private . xml writing ; Definition at line 1306 of file MethodBase.cxx. ◆ AddMulticlassOutput(). void TMVA::MethodBase::AddMulticlassOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 794 of file MethodBase.cxx. ◆ AddOutput(). void TMVA::MethodBase::AddOutput ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysisType . ). Definition at line 1315 of file MethodBase.cxx. ◆ AddRegressionOutput(). void TMVA::MethodBase::AddRegressionOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 744 of file MethodBase.cxx. ◆ AddSpectatorsXMLTo(). void TMVA::MethodBase::AddSpectatorsXMLTo ; (; void * ; parent); const. private . write s",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:36050,Modifiability,variab,variable,36050,"esXMLTo(). void TMVA::MethodBase::AddClassesXMLTo ; (; void * ; parent); const. private . write class info to XML ; Definition at line 1801 of file MethodBase.cxx. ◆ AddClassifierOutput(). void TMVA::MethodBase::AddClassifierOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 869 of file MethodBase.cxx. ◆ AddClassifierOutputProb(). void TMVA::MethodBase::AddClassifierOutputProb ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 951 of file MethodBase.cxx. ◆ AddInfoItem(). void TMVA::MethodBase::AddInfoItem ; (; void * ; gi, . const TString & ; name, . const TString & ; value . ); const. private . xml writing ; Definition at line 1306 of file MethodBase.cxx. ◆ AddMulticlassOutput(). void TMVA::MethodBase::AddMulticlassOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 794 of file MethodBase.cxx. ◆ AddOutput(). void TMVA::MethodBase::AddOutput ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysisType . ). Definition at line 1315 of file MethodBase.cxx. ◆ AddRegressionOutput(). void TMVA::MethodBase::AddRegressionOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 744 of file MethodBase.cxx. ◆ AddSpectatorsXMLTo(). void TMVA::MethodBase::AddSpectatorsXMLTo ; (; void * ; parent); const. private . write spectator info to XML ; Definition at line 1778 of file MethodBase.cxx. ◆ AddTargetsXMLTo(). void TMVA::MethodBase::AddTargetsXMLTo ; (; void * ; parent); const. private . write target info to XML ; Definition at line 1821 of file MethodBase.cxx. ◆ AddVarsXMLTo(). void TMVA::MethodBase::AddVarsXMLTo ; (; void * ; parent); const. private . write variable info to XML ; Definition at line 1762 of file MethodBase.cxx. ◆ AddWeightsXMLT",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:36446,Modifiability,variab,variable,36446,"ClassifierOutputProb(). void TMVA::MethodBase::AddClassifierOutputProb ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 951 of file MethodBase.cxx. ◆ AddInfoItem(). void TMVA::MethodBase::AddInfoItem ; (; void * ; gi, . const TString & ; name, . const TString & ; value . ); const. private . xml writing ; Definition at line 1306 of file MethodBase.cxx. ◆ AddMulticlassOutput(). void TMVA::MethodBase::AddMulticlassOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 794 of file MethodBase.cxx. ◆ AddOutput(). void TMVA::MethodBase::AddOutput ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysisType . ). Definition at line 1315 of file MethodBase.cxx. ◆ AddRegressionOutput(). void TMVA::MethodBase::AddRegressionOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 744 of file MethodBase.cxx. ◆ AddSpectatorsXMLTo(). void TMVA::MethodBase::AddSpectatorsXMLTo ; (; void * ; parent); const. private . write spectator info to XML ; Definition at line 1778 of file MethodBase.cxx. ◆ AddTargetsXMLTo(). void TMVA::MethodBase::AddTargetsXMLTo ; (; void * ; parent); const. private . write target info to XML ; Definition at line 1821 of file MethodBase.cxx. ◆ AddVarsXMLTo(). void TMVA::MethodBase::AddVarsXMLTo ; (; void * ; parent); const. private . write variable info to XML ; Definition at line 1762 of file MethodBase.cxx. ◆ AddWeightsXMLTo(). virtual void TMVA::MethodBase::AddWeightsXMLTo ; (; void * ; parent); const. protectedpure virtual . Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodCategory, T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:36963,Modifiability,variab,variable,36963,"al . prepare tree branch with the method's discriminating variable ; Definition at line 794 of file MethodBase.cxx. ◆ AddOutput(). void TMVA::MethodBase::AddOutput ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysisType . ). Definition at line 1315 of file MethodBase.cxx. ◆ AddRegressionOutput(). void TMVA::MethodBase::AddRegressionOutput ; (; Types::ETreeType ; type). privatevirtual . prepare tree branch with the method's discriminating variable ; Definition at line 744 of file MethodBase.cxx. ◆ AddSpectatorsXMLTo(). void TMVA::MethodBase::AddSpectatorsXMLTo ; (; void * ; parent); const. private . write spectator info to XML ; Definition at line 1778 of file MethodBase.cxx. ◆ AddTargetsXMLTo(). void TMVA::MethodBase::AddTargetsXMLTo ; (; void * ; parent); const. private . write target info to XML ; Definition at line 1821 of file MethodBase.cxx. ◆ AddVarsXMLTo(). void TMVA::MethodBase::AddVarsXMLTo ; (; void * ; parent); const. private . write variable info to XML ; Definition at line 1762 of file MethodBase.cxx. ◆ AddWeightsXMLTo(). virtual void TMVA::MethodBase::AddWeightsXMLTo ; (; void * ; parent); const. protectedpure virtual . Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, TMVA::MethodTMlpANN, TMVA::PyMethodBase, and TMVA::RMethodBase. ◆ BaseDir(). TDirectory * TMVA::MethodBase::BaseDir ; (; ); const. returns the ROOT directory where info/histograms etc of the corresponding MVA m",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:38895,Modifiability,variab,variables,38895,"dBase::BaseDir ; (; ); const. returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ; Definition at line 1980 of file MethodBase.cxx. ◆ CheckSetup(). void TMVA::MethodBase::CheckSetup ; (; ). virtual . check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ; Reimplemented in TMVA::MethodBoost, TMVA::MethodCuts, and TMVA::MethodFDA.; Definition at line 433 of file MethodBase.cxx. ◆ Class(). static TClass * TMVA::MethodBase::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBase::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 731 of file MethodBase.h. ◆ CreateMVAPdfs(). void TMVA::MethodBase::CreateMVAPdfs ; (; ). private . Create PDFs of the MVA output variables. ; Definition at line 2185 of file MethodBase.cxx. ◆ CreateRanking(). virtual const Ranking * TMVA::MethodBase::CreateRanking ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, TMVA::MethodTMlpANN, TMVA::PyMethodBase, TMVA::RMethodBase, and TMVA::MethodCompositeBase. ◆ Data(). DataSet * TMVA::MethodBase::Data ; (; ); const. inline . Definition at line 409 of f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:40318,Modifiability,variab,variables,40318,"::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, TMVA::MethodTMlpANN, TMVA::PyMethodBase, TMVA::RMethodBase, and TMVA::MethodCompositeBase. ◆ Data(). DataSet * TMVA::MethodBase::Data ; (; ); const. inline . Definition at line 409 of file MethodBase.h. ◆ DataInfo(). DataSetInfo & TMVA::MethodBase::DataInfo ; (; ); const. inline . Definition at line 410 of file MethodBase.h. ◆ DeclareBaseOptions(). void TMVA::MethodBase::DeclareBaseOptions ; (; ). private . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. VariableTransform=None,Decorrelated,PCA to use transformed variables instead of the original ones; VariableTransformType=Signal,Background which decorrelation matrix to use in the method. Only the Likelihood Method can make proper use of independent transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message . Definition at line 509 of file MethodBase.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBase::DeclareCompatibilityOptions ; (; ). virtual . options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ; Reimplemented in TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodDT, TMVA::MethodKNN, TMVA::MethodLikelihood, TMVA::MethodPDEFoam, and TMVA::M",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:67746,Modifiability,variab,variable,67746,":istream & ; tf). read the header from the weight files of the different MVA methods ; Definition at line 1590 of file MethodBase.cxx. ◆ ReadStateFromStream() [2/2]. void TMVA::MethodBase::ReadStateFromStream ; (; TFile & ; rf). write reference MVA distributions (and other information) to a ROOT type weight file ; Definition at line 1385 of file MethodBase.cxx. ◆ ReadStateFromXML(). void TMVA::MethodBase::ReadStateFromXML ; (; void * ; parent). private . Definition at line 1480 of file MethodBase.cxx. ◆ ReadStateFromXMLString(). void TMVA::MethodBase::ReadStateFromXMLString ; (; const char * ; xmlstr). for reading from memory ; Definition at line 1469 of file MethodBase.cxx. ◆ ReadTargetsFromXML(). void TMVA::MethodBase::ReadTargetsFromXML ; (; void * ; tarnode). private . read target info from XML ; Definition at line 1959 of file MethodBase.cxx. ◆ ReadVariablesFromXML(). void TMVA::MethodBase::ReadVariablesFromXML ; (; void * ; varnode). private . read variable info from XML ; Definition at line 1837 of file MethodBase.cxx. ◆ ReadVarsFromStream(). void TMVA::MethodBase::ReadVarsFromStream ; (; std::istream & ; istr). private . Read the variables (name, min, max) for a given data transformation method from the stream. ; In the stream we only expect the limits which will be set ; Definition at line 1725 of file MethodBase.cxx. ◆ ReadWeightsFromStream() [1/2]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). protectedpure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyRandomForest, TMVA::PyMethodBase, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodCFMlpANN, TM",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:67933,Modifiability,variab,variables,67933,"dStateFromStream ; (; TFile & ; rf). write reference MVA distributions (and other information) to a ROOT type weight file ; Definition at line 1385 of file MethodBase.cxx. ◆ ReadStateFromXML(). void TMVA::MethodBase::ReadStateFromXML ; (; void * ; parent). private . Definition at line 1480 of file MethodBase.cxx. ◆ ReadStateFromXMLString(). void TMVA::MethodBase::ReadStateFromXMLString ; (; const char * ; xmlstr). for reading from memory ; Definition at line 1469 of file MethodBase.cxx. ◆ ReadTargetsFromXML(). void TMVA::MethodBase::ReadTargetsFromXML ; (; void * ; tarnode). private . read target info from XML ; Definition at line 1959 of file MethodBase.cxx. ◆ ReadVariablesFromXML(). void TMVA::MethodBase::ReadVariablesFromXML ; (; void * ; varnode). private . read variable info from XML ; Definition at line 1837 of file MethodBase.cxx. ◆ ReadVarsFromStream(). void TMVA::MethodBase::ReadVarsFromStream ; (; std::istream & ; istr). private . Read the variables (name, min, max) for a given data transformation method from the stream. ; In the stream we only expect the limits which will be set ; Definition at line 1725 of file MethodBase.cxx. ◆ ReadWeightsFromStream() [1/2]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). protectedpure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyRandomForest, TMVA::PyMethodBase, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodK",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:74765,Modifiability,variab,variable,74765," other Classifiers.. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 644 of file MethodBase.cxx. ◆ SetupMethod(). void TMVA::MethodBase::SetupMethod ; (; ). setup of methods ; Definition at line 406 of file MethodBase.cxx. ◆ SetWeightFileDir(). void TMVA::MethodBase::SetWeightFileDir ; (; TString ; fileDir). protected . set directory of weight file ; Definition at line 2059 of file MethodBase.cxx. ◆ SetWeightFileName(). void TMVA::MethodBase::SetWeightFileName ; (; TString ; theWeightFile). protected . set the weight file name (depreciated) ; Definition at line 2068 of file MethodBase.cxx. ◆ Statistics(). void TMVA::MethodBase::Statistics ; (; Types::ETreeType ; treeType, . const TString & ; theVarName, . Double_t & ; meanS, . Double_t & ; meanB, . Double_t & ; rmsS, . Double_t & ; rmsB, . Double_t & ; xmin, . Double_t & ; xmax . ). protected . calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ; Definition at line 2942 of file MethodBase.cxx. ◆ Streamer(). virtual void TMVA::MethodBase::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IMethod.; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::MethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:74806,Modifiability,variab,variables,74806," other Classifiers.. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 644 of file MethodBase.cxx. ◆ SetupMethod(). void TMVA::MethodBase::SetupMethod ; (; ). setup of methods ; Definition at line 406 of file MethodBase.cxx. ◆ SetWeightFileDir(). void TMVA::MethodBase::SetWeightFileDir ; (; TString ; fileDir). protected . set directory of weight file ; Definition at line 2059 of file MethodBase.cxx. ◆ SetWeightFileName(). void TMVA::MethodBase::SetWeightFileName ; (; TString ; theWeightFile). protected . set the weight file name (depreciated) ; Definition at line 2068 of file MethodBase.cxx. ◆ Statistics(). void TMVA::MethodBase::Statistics ; (; Types::ETreeType ; treeType, . const TString & ; theVarName, . Double_t & ; meanS, . Double_t & ; meanB, . Double_t & ; rmsS, . Double_t & ; rmsB, . Double_t & ; xmin, . Double_t & ; xmax . ). protected . calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ; Definition at line 2942 of file MethodBase.cxx. ◆ Streamer(). virtual void TMVA::MethodBase::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IMethod.; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::MethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:74846,Modifiability,variab,variables,74846," other Classifiers.. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 644 of file MethodBase.cxx. ◆ SetupMethod(). void TMVA::MethodBase::SetupMethod ; (; ). setup of methods ; Definition at line 406 of file MethodBase.cxx. ◆ SetWeightFileDir(). void TMVA::MethodBase::SetWeightFileDir ; (; TString ; fileDir). protected . set directory of weight file ; Definition at line 2059 of file MethodBase.cxx. ◆ SetWeightFileName(). void TMVA::MethodBase::SetWeightFileName ; (; TString ; theWeightFile). protected . set the weight file name (depreciated) ; Definition at line 2068 of file MethodBase.cxx. ◆ Statistics(). void TMVA::MethodBase::Statistics ; (; Types::ETreeType ; treeType, . const TString & ; theVarName, . Double_t & ; meanS, . Double_t & ; meanB, . Double_t & ; rmsS, . Double_t & ; rmsB, . Double_t & ; xmin, . Double_t & ; xmax . ). protected . calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ; Definition at line 2942 of file MethodBase.cxx. ◆ Streamer(). virtual void TMVA::MethodBase::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IMethod.; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::MethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79050,Modifiability,config,configuration,79050,"e(). Bool_t TMVA::MethodBase::Verbose ; (; ); const. inlineprotected . Definition at line 503 of file MethodBase.h. ◆ WriteEvaluationHistosToFile(). void TMVA::MethodBase::WriteEvaluationHistosToFile ; (; Types::ETreeType ; treetype). virtual . writes all MVA evaluation histograms to file ; Reimplemented in TMVA::MethodBoost.; Definition at line 2094 of file MethodBase.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBase::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Sy",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79360,Modifiability,variab,variables,79360,"stograms to file ; Reimplemented in TMVA::MethodBoost.; Definition at line 2094 of file MethodBase.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBase::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 113 of file MethodBase.h. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 118 of file MethodBase.h. ◆ Factory. friend cl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79371,Modifiability,variab,variable,79371,"stograms to file ; Reimplemented in TMVA::MethodBoost.; Definition at line 2094 of file MethodBase.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBase::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 113 of file MethodBase.h. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 118 of file MethodBase.h. ◆ Factory. friend cl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79647,Modifiability,variab,variables,79647,"re --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 113 of file MethodBase.h. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 118 of file MethodBase.h. ◆ Factory. friend class Factory. friend . Definition at line 114 of file MethodBase.h. ◆ MethodBoost. friend class MethodBoost. friend . Definition at line 116 of file MethodBase.h. ◆ MethodCategory. friend class MethodCategory. friend . Definition at line 269 of file MethodBase.h. ◆ MethodCompositeBase. f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79658,Modifiability,variab,variable,79658,"re --------------— ; Implements TMVA::IMethod.; Reimplemented in TMVA::MethodANNBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit.; Definition at line 2133 of file MethodBase.cxx. ◆ WriteStateToFile(). void TMVA::MethodBase::WriteStateToFile ; (; ); const. write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 113 of file MethodBase.h. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 118 of file MethodBase.h. ◆ Factory. friend class Factory. friend . Definition at line 114 of file MethodBase.h. ◆ MethodBoost. friend class MethodBoost. friend . Definition at line 116 of file MethodBase.h. ◆ MethodCategory. friend class MethodCategory. friend . Definition at line 269 of file MethodBase.h. ◆ MethodCompositeBase. f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:79919,Modifiability,variab,variables,79919,". write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ; Definition at line 1404 of file MethodBase.cxx. ◆ WriteStateToStream(). void TMVA::MethodBase::WriteStateToStream ; (; std::ostream & ; tf); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1267 of file MethodBase.cxx. ◆ WriteStateToXML(). void TMVA::MethodBase::WriteStateToXML ; (; void * ; parent); const. private . general method used in writing the header of the weight files where the used variables, variable transformation type etc. ; is specified ; Definition at line 1331 of file MethodBase.cxx. ◆ WriteVarsToStream(). void TMVA::MethodBase::WriteVarsToStream ; (; std::ostream & ; tf, . const TString & ; prefix = """" . ); const. private . write the list of variables (name, min, max) for a given data transformation method to the stream ; Definition at line 1710 of file MethodBase.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 113 of file MethodBase.h. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 118 of file MethodBase.h. ◆ Factory. friend class Factory. friend . Definition at line 114 of file MethodBase.h. ◆ MethodBoost. friend class MethodBoost. friend . Definition at line 116 of file MethodBase.h. ◆ MethodCategory. friend class MethodCategory. friend . Definition at line 269 of file MethodBase.h. ◆ MethodCompositeBase. friend class MethodCompositeBase. friend . Definition at line 270 of file MethodBase.h. ◆ MethodCrossValidation. friend class MethodCrossValidation. friend . Definition at line 117 of file MethodBase.h. ◆ MethodCuts. friend class MethodCuts. friend . Definition at line 603 of file MethodBase.h. ◆ RootFinder. friend class RootFinder. friend .",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:90153,Modifiability,variab,variable,90153,line 695 of file MethodBase.h. ◆ fTransformation. TransformationHandler TMVA::MethodBase::fTransformation. private . the list of transformations ; Definition at line 672 of file MethodBase.h. ◆ fTransformationPointer. TransformationHandler* TMVA::MethodBase::fTransformationPointer. private . pointer to the rest of transformations ; Definition at line 671 of file MethodBase.h. ◆ fTxtWeightsOnly. Bool_t TMVA::MethodBase::fTxtWeightsOnly. private . Definition at line 725 of file MethodBase.h. ◆ fUseDecorr. Bool_t TMVA::MethodBase::fUseDecorr. private . Definition at line 723 of file MethodBase.h. ◆ fVariableTransformType. Types::ESBType TMVA::MethodBase::fVariableTransformType. private . Definition at line 611 of file MethodBase.h. ◆ fVariableTransformTypeString. TString TMVA::MethodBase::fVariableTransformTypeString. private . Definition at line 724 of file MethodBase.h. ◆ fVarTransformString. TString TMVA::MethodBase::fVarTransformString. private . labels variable transform method ; Definition at line 669 of file MethodBase.h. ◆ fVerbose. Bool_t TMVA::MethodBase::fVerbose. private . verbose flag ; Definition at line 676 of file MethodBase.h. ◆ fVerbosityLevel. EMsgType TMVA::MethodBase::fVerbosityLevel. private . verbosity level ; Definition at line 678 of file MethodBase.h. ◆ fVerbosityLevelString. TString TMVA::MethodBase::fVerbosityLevelString. private . verbosity level (user input string) ; Definition at line 677 of file MethodBase.h. ◆ fWeightFile. TString TMVA::MethodBase::fWeightFile. private . weight file name ; Definition at line 638 of file MethodBase.h. ◆ fXmax. Double_t TMVA::MethodBase::fXmax. private . maximum (signal and background) ; Definition at line 666 of file MethodBase.h. ◆ fXmin. Double_t TMVA::MethodBase::fXmin. private . minimum (signal and background) ; Definition at line 665 of file MethodBase.h. Libraries for TMVA::MethodBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodBase,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:580,Performance,perform,performance,580,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:750,Performance,perform,performance,750,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:9910,Performance,tune,tuned,9910,"ainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; virtual void Init ()=0;  ; void InitIPythonInteractive ();  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:11414,Performance,tune,tuneParameters,11414,"PrintHelpMessage () const;  prints out method-specific help method ;  ; virtual void ProcessOptions ()=0;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Do",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:64472,Performance,tune,tuned,64472,"NN.; Definition at line 520 of file MethodBase.h. ◆ MakeClassSpecificHeader(). virtual void TMVA::MethodBase::MakeClassSpecificHeader ; (; std::ostream & ; , . const TString & ; = """" . ); const. inlineprotectedvirtual . Reimplemented in TMVA::MethodBDT, TMVA::MethodCrossValidation, TMVA::MethodCFMlpANN, and TMVA::MethodLikelihood.; Definition at line 523 of file MethodBase.h. ◆ MethodBaseDir(). TDirectory * TMVA::MethodBase::MethodBaseDir ; (; ); const. returns the ROOT directory where all instances of the corresponding MVA method are stored ; Definition at line 2020 of file MethodBase.cxx. ◆ NoErrorCalc(). void TMVA::MethodBase::NoErrorCalc ; (; Double_t *const ; err, . Double_t *const ; errUpper . ). protected . Definition at line 837 of file MethodBase.cxx. ◆ OptimizeTuningParameters(). std::map< TString, Double_t > TMVA::MethodBase::OptimizeTuningParameters ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). virtual . call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 623 of file MethodBase.cxx. ◆ PrintHelpMessage(). void TMVA::MethodBase::PrintHelpMessage ; (; ); const. virtual . prints out method-specific help method ; Implements TMVA::IMethod.; Definition at line 3264 of file MethodBase.cxx. ◆ ProcessBaseOptions(). void TMVA::MethodBase::ProcessBaseOptions ; (; ). private . the option string is decoded, for available options see ""DeclareOptions"" ; Definition at line 540 of file MethodBase.cxx. ◆ ProcessOptions(). virtual void TMVA::MethodBase::ProcessOptions ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpAN",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:73645,Performance,tune,tuneParameters,73645,"rotected . Definition at line 497 of file MethodBase.h. ◆ SetSignalReferenceCut(). void TMVA::MethodBase::SetSignalReferenceCut ; (; Double_t ; cut). inline . Definition at line 364 of file MethodBase.h. ◆ SetSignalReferenceCutOrientation(). void TMVA::MethodBase::SetSignalReferenceCutOrientation ; (; Double_t ; cutOrientation). inline . Definition at line 365 of file MethodBase.h. ◆ SetSilentFile(). void TMVA::MethodBase::SetSilentFile ; (; Bool_t ; status). inline . Definition at line 378 of file MethodBase.h. ◆ SetTestTime(). void TMVA::MethodBase::SetTestTime ; (; Double_t ; testTime). inline . Definition at line 165 of file MethodBase.h. ◆ SetTestvarName(). void TMVA::MethodBase::SetTestvarName ; (; const TString & ; v = """"). inline . Definition at line 341 of file MethodBase.h. ◆ SetTrainTime(). void TMVA::MethodBase::SetTrainTime ; (; Double_t ; trainTime). inline . Definition at line 161 of file MethodBase.h. ◆ SetTuneParameters(). void TMVA::MethodBase::SetTuneParameters ; (; std::map< TString, Double_t > ; tuneParameters). virtual . set the tuning parameters according to the argument This is just a dummy . ; . have a look at the MethodBDT how you could perhaps implement the same thing for the other Classifiers.. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 644 of file MethodBase.cxx. ◆ SetupMethod(). void TMVA::MethodBase::SetupMethod ; (; ). setup of methods ; Definition at line 406 of file MethodBase.cxx. ◆ SetWeightFileDir(). void TMVA::MethodBase::SetWeightFileDir ; (; TString ; fileDir). protected . set directory of weight file ; Definition at line 2059 of file MethodBase.cxx. ◆ SetWeightFileName(). void TMVA::MethodBase::SetWeightFileName ; (; TString ; theWeightFile). protected . set the weight file name (depreciated) ; Definition at line 2068 of file MethodBase.cxx. ◆ Statistics(). void TMVA::MethodBase::Statistics ; (; Types::ETreeType ; treeType, . const TString & ; theVarName, . Double_t & ; meanS, . Double_t & ; m",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:15523,Security,hash,hash,15523,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:709,Testability,benchmark,benchmark,709,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:801,Testability,test,test,801,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:11249,Testability,test,testTime,11249,"PrintHelpMessage () const;  prints out method-specific help method ;  ; virtual void ProcessOptions ()=0;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Do",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:11749,Testability,test,test,11749,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:12066,Testability,test,test,12066,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:24779,Testability,log,logProgress,24779,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:25019,Testability,log,logProgress,25019,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:27767,Testability,test,testing,27767,"oseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual vo",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:27937,Testability,log,logger,27937,"oseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  ECutOrientation { kNegative = -1; , kPositive = +1; };  . Private Member Functions; void AddClassesXMLTo (void *parent) const;  write class info to XML ;  ; virtual void AddClassifierOutput (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; virtual void AddClassifierOutputProb (Types::ETreeType type);  prepare tree branch with the method's discriminating variable ;  ; void AddInfoItem (void *gi, const TString &name, const TString &value) const;  xml writing ;  ; virtual vo",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:43555,Testability,log,logProgress,43555,"2 of file MethodBase.h. ◆ DoMulticlass(). Bool_t TMVA::MethodBase::DoMulticlass ; (; ); const. inline . Definition at line 439 of file MethodBase.h. ◆ DoRegression(). Bool_t TMVA::MethodBase::DoRegression ; (; ); const. inline . Definition at line 438 of file MethodBase.h. ◆ ExitFromTraining(). void TMVA::MethodBase::ExitFromTraining ; (; ). inline . Definition at line 464 of file MethodBase.h. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::MethodBase::GetAnalysisType ; (; ); const. inline . Definition at line 437 of file MethodBase.h. ◆ GetCurrentIter(). UInt_t TMVA::MethodBase::GetCurrentIter ; (; ). inline . Definition at line 481 of file MethodBase.h. ◆ GetCutOrientation(). ECutOrientation TMVA::MethodBase::GetCutOrientation ; (; ); const. inlineprivate . Definition at line 552 of file MethodBase.h. ◆ GetDataMvaValues(). std::vector< Double_t > TMVA::MethodBase::GetDataMvaValues ; (; DataSet * ; data = nullptr, . Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). protectedvirtual . get all the MVA values for the events of the given Data type ; Definition at line 940 of file MethodBase.cxx. ◆ GetEfficiency(). Double_t TMVA::MethodBase::GetEfficiency ; (; const TString & ; theString, . Types::ETreeType ; type, . Double_t & ; effSerr . ). virtual . fill background efficiency (resp. ; rejection) versus signal efficiency plots returns signal efficiency at background efficiency indicated in theString ; Reimplemented in TMVA::MethodCuts.; Definition at line 2302 of file MethodBase.cxx. ◆ GetEvent() [1/4]. const TMVA::Event * TMVA::MethodBase::GetEvent ; (; ); const. inline . Definition at line 751 of file MethodBase.h. ◆ GetEvent() [2/4]. const TMVA::Event * TMVA::MethodBase::GetEvent ; (; const TMVA::Event * ; ev); const. inline . Definition at line 746 of file MethodBase.h. ◆ GetEvent() [3/4]. const TMVA::Event * TMVA::MethodBase::GetEvent ; (; Long64_t ; ievt); const. inline . Definition at line 759 of file MethodBase.h. ◆ GetEve",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:48390,Testability,test,testing,48390,"VA TMVA::MethodBase::GetMethodType ; (; ); const. inline . Definition at line 333 of file MethodBase.h. ◆ GetMethodTypeName(). TString TMVA::MethodBase::GetMethodTypeName ; (; ); const. inline . Definition at line 332 of file MethodBase.h. ◆ GetMulticlassConfusionMatrix(). TMatrixD TMVA::MethodBase::GetMulticlassConfusionMatrix ; (; Double_t ; effB, . Types::ETreeType ; type . ). virtual . Construct a confusion matrix for a multiclass classifier. ; The confusion matrix compares, in turn, each class agaist all other classes in a pair-wise fashion. In rows with index \( k_r = 0 ... K \), \( k_r \) is considered signal for the sake of comparison and for each column \( k_c = 0 ... K \) the corresponding class is considered background.; Note that the diagonal elements will be returned as NaN since this will compare a class against itself.; See alsoTMVA::ResultsMulticlass::GetConfusionMatrix; Parameters. [in]effBThe background efficiency for which to evaluate. ; [in]typeThe data set on which to evaluate (training, testing ...). ReturnsA matrix containing signal efficiencies for the given background efficiency. The diagonal elements are NaN since this measure is meaningless (comparing a class against itself). ; Definition at line 2750 of file MethodBase.cxx. ◆ GetMulticlassEfficiency(). std::vector< Float_t > TMVA::MethodBase::GetMulticlassEfficiency ; (; std::vector< std::vector< Float_t > > & ; purity). virtual . Definition at line 2703 of file MethodBase.cxx. ◆ GetMulticlassTrainingEfficiency(). std::vector< Float_t > TMVA::MethodBase::GetMulticlassTrainingEfficiency ; (; std::vector< std::vector< Float_t > > & ; purity). virtual . Definition at line 2715 of file MethodBase.cxx. ◆ GetMulticlassValues(). virtual const std::vector< Float_t > & TMVA::MethodBase::GetMulticlassValues ; (; ). inlinevirtual . Reimplemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodANNBase, TMVA::MethodBDT, TMV",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:50834,Testability,log,logProgress,50834,"rrLower = nullptr, . Double_t * ; errUpper = nullptr . ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, TMVA::MethodTMlpANN, TMVA::MethodPyKeras, TMVA::MethodPyTorch, TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyRandomForest, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::PyMethodBase, TMVA::RMethodBase, and TMVA::MethodCompositeBase. ◆ GetMvaValues(). std::vector< Double_t > TMVA::MethodBase::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). protectedvirtual . get all the MVA values for the events of the current Data type ; Reimplemented in TMVA::MethodPyKeras, TMVA::MethodPyTorch, TMVA::MethodDL, TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyRandomForest, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodCategory, and TMVA::PyMethodBase.; Definition at line 898 of file MethodBase.cxx. ◆ GetName(). const char * TMVA::MethodBase::GetName ; (; ); const. inlinevirtual . Implements TMVA::IMethod.; Definition at line 334 of file MethodBase.h. ◆ GetNEvents(). UInt_t TMVA::MethodBase::GetNEvents ; (; ); const. inline . Definition at line 416 of file MethodBase.h. ◆ GetNTargets(). UInt_t TMVA::MethodBase::GetNTargets ; (; ); const. inline . Definition at line 346 of file MethodBase.h. ◆ GetNvar(). UInt_t TMVA::MethodBase::GetNvar ; (; ); const. inline . Definition at line 344 of file MethodBase.h. ◆ GetNVariables(). UInt_t TMVA::MethodBase::GetNVariables ; (; ); const",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:73199,Testability,test,testTime,73199,"methodDir). inline . Definition at line 374 of file MethodBase.h. ◆ SetMethodDir(). void TMVA::MethodBase::SetMethodDir ; (; TDirectory * ; methodDir). inline . Definition at line 372 of file MethodBase.h. ◆ SetModelPersistence(). void TMVA::MethodBase::SetModelPersistence ; (; Bool_t ; status). inline . Definition at line 382 of file MethodBase.h. ◆ SetNormalised(). void TMVA::MethodBase::SetNormalised ; (; Bool_t ; norm). inlineprotected . Definition at line 497 of file MethodBase.h. ◆ SetSignalReferenceCut(). void TMVA::MethodBase::SetSignalReferenceCut ; (; Double_t ; cut). inline . Definition at line 364 of file MethodBase.h. ◆ SetSignalReferenceCutOrientation(). void TMVA::MethodBase::SetSignalReferenceCutOrientation ; (; Double_t ; cutOrientation). inline . Definition at line 365 of file MethodBase.h. ◆ SetSilentFile(). void TMVA::MethodBase::SetSilentFile ; (; Bool_t ; status). inline . Definition at line 378 of file MethodBase.h. ◆ SetTestTime(). void TMVA::MethodBase::SetTestTime ; (; Double_t ; testTime). inline . Definition at line 165 of file MethodBase.h. ◆ SetTestvarName(). void TMVA::MethodBase::SetTestvarName ; (; const TString & ; v = """"). inline . Definition at line 341 of file MethodBase.h. ◆ SetTrainTime(). void TMVA::MethodBase::SetTrainTime ; (; Double_t ; trainTime). inline . Definition at line 161 of file MethodBase.h. ◆ SetTuneParameters(). void TMVA::MethodBase::SetTuneParameters ; (; std::map< TString, Double_t > ; tuneParameters). virtual . set the tuning parameters according to the argument This is just a dummy . ; . have a look at the MethodBDT how you could perhaps implement the same thing for the other Classifiers.. ; Reimplemented in TMVA::MethodBDT, and TMVA::MethodSVM.; Definition at line 644 of file MethodBase.cxx. ◆ SetupMethod(). void TMVA::MethodBase::SetupMethod ; (; ). setup of methods ; Definition at line 406 of file MethodBase.cxx. ◆ SetWeightFileDir(). void TMVA::MethodBase::SetWeightFileDir ; (; TString ; fileDir). prote",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:76273,Testability,test,test,76273,"TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::MethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void TMVA::MethodBase::TestClassification ; (; ). virtual . initialization ; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodBoost, and TMVA::MethodCuts.; Definition at line 1127 of file MethodBase.cxx. ◆ TestMulticlass(). void TMVA::MethodBase::TestMulticlass ; (; ). virtual . test multiclass classification ; Definition at line 1100 of file MethodBase.cxx. ◆ TestRegression(). void TMVA::MethodBase::TestRegression ; (; Double_t & ; bias, . Double_t & ; biasT, . Double_t & ; dev, . Double_t & ; devT, . Double_t & ; rms, . Double_t & ; rmsT, . Double_t & ; mInf, . Double_t & ; mInfT, . Double_t & ; corr, . Types::ETreeType ; type . ). virtual . calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample . bias = average deviation; dev = average absolute deviation; rms = rms of deviation . Definition at line 992 of file MethodBase.cxx. ◆ Train(). virtual void TMVA::MethodBase::Train ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodHMatrix, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA:",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:76728,Testability,test,test,76728,"erNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void TMVA::MethodBase::TestClassification ; (; ). virtual . initialization ; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodBoost, and TMVA::MethodCuts.; Definition at line 1127 of file MethodBase.cxx. ◆ TestMulticlass(). void TMVA::MethodBase::TestMulticlass ; (; ). virtual . test multiclass classification ; Definition at line 1100 of file MethodBase.cxx. ◆ TestRegression(). void TMVA::MethodBase::TestRegression ; (; Double_t & ; bias, . Double_t & ; biasT, . Double_t & ; dev, . Double_t & ; devT, . Double_t & ; rms, . Double_t & ; rmsT, . Double_t & ; mInf, . Double_t & ; mInfT, . Double_t & ; corr, . Types::ETreeType ; type . ). virtual . calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample . bias = average deviation; dev = average absolute deviation; rms = rms of deviation . Definition at line 992 of file MethodBase.cxx. ◆ Train(). virtual void TMVA::MethodBase::Train ; (; ). pure virtual . Implements TMVA::IMethod.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodHMatrix, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodCompositeBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBase.html:88656,Testability,test,testing,88656,B. private . PDFs of training MVA distribution (background) ; Definition at line 655 of file MethodBase.h. ◆ fSplTrainEffBvsS. TSpline* TMVA::MethodBase::fSplTrainEffBvsS. private . splines for training signal eff. versus background eff. ; Definition at line 656 of file MethodBase.h. ◆ fSplTrainRefB. TSpline1* TMVA::MethodBase::fSplTrainRefB. private . Definition at line 706 of file MethodBase.h. ◆ fSplTrainRefS. TSpline1* TMVA::MethodBase::fSplTrainRefS. private . Definition at line 705 of file MethodBase.h. ◆ fSplTrainS. PDF* TMVA::MethodBase::fSplTrainS. private . PDFs of training MVA distribution (signal) ; Definition at line 654 of file MethodBase.h. ◆ fTestTime. Double_t TMVA::MethodBase::fTestTime. private . Definition at line 696 of file MethodBase.h. ◆ fTestvar. TString TMVA::MethodBase::fTestvar. private . Definition at line 617 of file MethodBase.h. ◆ fTmpData. DataSet* TMVA::MethodBase::fTmpData = nullptr. protected . temporary event when testing on a different DataSet than the own one ; Definition at line 446 of file MethodBase.h. ◆ fTmpEvent. const Event* TMVA::MethodBase::fTmpEvent. mutableprotected . Definition at line 445 of file MethodBase.h. ◆ fTMVATrainingVersion. UInt_t TMVA::MethodBase::fTMVATrainingVersion. private . Definition at line 618 of file MethodBase.h. ◆ fTrainHistory. TrainingHistory TMVA::MethodBase::fTrainHistory. Definition at line 425 of file MethodBase.h. ◆ fTrainTime. Double_t TMVA::MethodBase::fTrainTime. private . Definition at line 695 of file MethodBase.h. ◆ fTransformation. TransformationHandler TMVA::MethodBase::fTransformation. private . the list of transformations ; Definition at line 672 of file MethodBase.h. ◆ fTransformationPointer. TransformationHandler* TMVA::MethodBase::fTransformationPointer. private . pointer to the rest of transformations ; Definition at line 671 of file MethodBase.h. ◆ fTxtWeightsOnly. Bool_t TMVA::MethodBase::fTxtWeightsOnly. private . Definition at line 725 of file MethodBase.h. ◆ fUseDecorr,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:16284,Availability,error,error,16284,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:16373,Availability,error,error,16373,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:16528,Availability,error,error,16528,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:16825,Availability,error,error,16825,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:20909,Availability,error,error,20909,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:25699,Availability,avail,available,25699," Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; void ProcessOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Prote",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:31668,Availability,avail,available,31668,"virtual . Variable can handle classification with 2 classes. ; Implements TMVA::IMethod.; Definition at line 74 of file MethodBayesClassifier.cxx. ◆ Init(). void TMVA::MethodBayesClassifier::Init ; (; void ; ). virtual . default initialisation ; Implements TMVA::MethodBase.; Definition at line 84 of file MethodBayesClassifier.cxx. ◆ IsA(). virtual TClass * TMVA::MethodBayesClassifier::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodBase.; Definition at line 94 of file MethodBayesClassifier.h. ◆ MakeClassSpecific(). void TMVA::MethodBayesClassifier::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. protectedvirtual . write specific classifier response ; Reimplemented from TMVA::MethodBase.; Definition at line 145 of file MethodBayesClassifier.cxx. ◆ ProcessOptions(). void TMVA::MethodBayesClassifier::ProcessOptions ; (; ). privatevirtual . the option string is decoded, for available options see ""DeclareOptions"" ; Implements TMVA::MethodBase.; Definition at line 98 of file MethodBayesClassifier.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodBayesClassifier::ReadWeightsFromStream ; (; std::istream & ; istr). virtual . read back the training results from a file (stream) ; Implements TMVA::MethodBase.; Definition at line 125 of file MethodBayesClassifier.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodBayesClassifier::ReadWeightsFromXML ; (; void * ; ). inlinevirtual . Implements TMVA::MethodBase.; Definition at line 70 of file MethodBayesClassifier.h. ◆ Streamer(). virtual void TMVA::MethodBayesClassifier::Streamer ; (; T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:11075,Deployability,configurat,configuration,11075,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:10889,Energy Efficiency,monitor,monitoring,10889,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:16290,Integrability,message,message,16290,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:16831,Integrability,message,message,16831,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:17821,Integrability,message,message,17821,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:20915,Integrability,message,message,20915,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:21288,Integrability,message,message,21288," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Cla",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:23212,Integrability,message,message,23212,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:27557,Integrability,message,message,27557,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:30051,Integrability,message,message,30051,"t TMVA::MethodBayesClassifier::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 94 of file MethodBayesClassifier.h. ◆ CreateRanking(). const Ranking * TMVA::MethodBayesClassifier::CreateRanking ; (; ). inlinevirtual . Implements TMVA::MethodBase.; Definition at line 78 of file MethodBayesClassifier.h. ◆ DeclareOptions(). void TMVA::MethodBayesClassifier::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; Implements TMVA::MethodBase.; Definition at line 91 of file MethodBayesClassifier.cxx. ◆ DeclFileName(). static const char * TMVA::MethodBayesClassifier::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 94 of file MethodBayesClassifier.h. ◆ GetHelpMessage(). void TMVA::MethodBayesClassifier::GetHelpMessage ; (; ); const. protectedvirtual . get help message text ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 157 of file MethodBayesClassifier.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodBayesClassifier::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns MVA value for given event ; Implements TMVA::MethodBase.; Definition at line 132 of file MethodBayesClassifier.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodBayesClassifier::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . Variable can handle classification with 2 classes. ; Implements TMVA::IMethod.; Definition at line 74 of file MethodBayesClassifier.cxx. ◆ Init(). void TMVA::MethodBayesClassifier::Init ; (; void ; ). virtual . default initialisation ; Implements TMVA::MethodBase.; Definition at line 84 of file MethodBayesClassifier.cxx. ◆ IsA(). virtual TClass * TMVA::MethodBayesClassifier::IsA ; (; ); const. inlinevirtual . Returns",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:1648,Modifiability,inherit,inherited,1648,"ns MVA value for given event ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  Variable can handle classification with 2 classes. ;  ; void Init (void);  default initialisation ;  ; virtual TClass * IsA () const;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read back the training results from a file (stream) ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  some training ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetA",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:11075,Modifiability,config,configuration,11075,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:11178,Modifiability,inherit,inherited,11178,"l (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:11338,Modifiability,inherit,inherited,11338,"ation ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:13087,Modifiability,inherit,inherited,13087,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:14827,Modifiability,inherit,inherited,14827,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:15920,Modifiability,inherit,inheritance,15920,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:17919,Modifiability,inherit,inherits,17919,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:18036,Modifiability,inherit,inherits,18036,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:21789,Modifiability,inherit,inherited,21789,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:22009,Modifiability,inherit,inherited,22009,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:22226,Modifiability,inherit,inherited,22226,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:22448,Modifiability,inherit,inherited,22448,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:22658,Modifiability,inherit,inherited,22658,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void GetHelpMessage () const;  get help message text ;  ; void",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:23363,Modifiability,inherit,inherited,23363,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:24685,Modifiability,variab,variable,24685,"rstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:24726,Modifiability,variab,variables,24726,"rstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:24766,Modifiability,variab,variables,24766,"rstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:24920,Modifiability,inherit,inherited,24920,"rstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:25327,Modifiability,inherit,inherited,25327,"rstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:25787,Modifiability,inherit,inherited,25787,"ected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; void ProcessOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:25883,Modifiability,inherit,inherited,25883,"ected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; void ProcessOptions ();  the option string is decoded, for available options see ""DeclareOptions"" ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:26526,Modifiability,inherit,inherited,26526,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:26637,Modifiability,inherit,inherited,26637,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:26730,Modifiability,inherit,inherited,26730,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:27498,Modifiability,inherit,inherited,27498,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:27599,Modifiability,inherit,inherited,27599,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:8554,Performance,tune,tuned,8554,"tTrainingEfficiency (const TString &);  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; void InitIPythonInteractive ();  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:10021,Performance,tune,tuneParameters,10021,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:13955,Security,hash,hash,13955,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:9856,Testability,test,testTime,9856,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:10318,Testability,test,test,10318,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:10635,Testability,test,test,10635,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:23518,Testability,log,logProgress,23518,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:23758,Testability,log,logProgress,23758,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:27395,Testability,test,testing,27395,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:27565,Testability,log,logger,27565,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBayesClassifier.h>. Inheritance diagram for TMVA::MethodBayesClassifier:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBayesClassifier() [1/2]. TMVA::MethodBayesClassifier::MethodBayesClassifier ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TStri",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBayesClassifier.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:2797,Availability,error,error,2797,"hey are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likel",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:6862,Availability,avail,available,6862,"Type type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ;  ; void MakeClassSpecificHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ;  ; void ProcessOptions ();  The option string is decoded, for available options see ""DeclareOptions"". ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  Read the weights (BDT coefficients). ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *parent);  Reads the BDT from the xml file. ;  ; void Reset (void);  Reset the method, as if it had just been instantiated (forget all training etc.). ;  ; void SetAdaBoostBeta (Double_t b);  ; void SetBaggedSampleFraction (Double_t f);  ; void SetMaxDepth (Int_t d);  ; void SetMinNodeSize (Double_t sizeInPercent);  ; void SetMinNodeSize (TString sizeInPercent);  ; void SetNodePurityLimit (Double_t l);  ; void SetNTrees (Int_t d);  ; void SetShrinkage (Double_t s);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  Set the tuning parameters according to the argument. ;  ; void SetUseNvars (Int_t n);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &C",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:21877,Availability,error,error,21877,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:21966,Availability,error,error,21966,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:22121,Availability,error,error,22121,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:22418,Availability,error,error,22418,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:26502,Availability,error,error,26502,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:35025,Availability,error,error,35025,"agging in combination with boost on/off ;  ; Bool_t fBaggedGradBoost;  turn bagging in combination with grad boost on/off ;  ; Double_t fBaggedSampleFraction;  relative size of bagged event sample to original sample size ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  ntuple var: boost weight ;  ; std::vector< double > fBoostWeights;  the weights applied in the individual boosts ;  ; Double_t fCbb;  Cost factor. ;  ; Double_t fCss;  Cost factor. ;  ; Double_t fCtb_ss;  Cost factor. ;  ; Double_t fCts_sb;  Cost factor. ;  ; Bool_t fDoBoostMonitor;  create control plot with ROC integral vs tree number ;  ; Bool_t fDoPreselection;  do or do not perform automatic pre-selection of 100% eff. cuts ;  ; Double_t fErrorFraction;  ntuple var: misclassification error fraction ;  ; std::vector< const TMVA::Event * > fEventSample;  the training events ;  ; std::vector< DecisionTree * > fForest;  the collection of decision trees ;  ; Double_t fFValidationEvents;  fraction of events to use for pruning ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criter",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:43627,Availability,error,error,43627," was better than random guessing) and ""beta"" being a free parameter (standard: beta = 1) that modifies the boosting. ; Definition at line 1845 of file MethodBDT.cxx. ◆ AdaBoostR2(). Double_t TMVA::MethodBDT::AdaBoostR2 ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ; Definition at line 2192 of file MethodBDT.cxx. ◆ AdaCost(). Double_t TMVA::MethodBDT::AdaCost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ; true_signal true_bkg; ----------------------------------; sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; sel_bkg | Cts_sb Cbb; and takes this into account when calculating the mis class. cost (former: error fraction): err = sum_events ( weight* y_true*y_sel * beta(event) . Definition at line 2023 of file MethodBDT.cxx. ◆ AddWeightsXMLTo(). void TMVA::MethodBDT::AddWeightsXMLTo ; (; void * ; parent); const. virtual . Write weights to XML. ; Implements TMVA::MethodBase.; Definition at line 2309 of file MethodBDT.cxx. ◆ ApplyPreselectionCuts(). Double_t TMVA::MethodBDT::ApplyPreselectionCuts ; (; const Event * ; ev). private . Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ; . --> -1 for background +1 for Signal ; Definition at line 3132 of file MethodBDT.cxx. ◆ Bagging(). Double_t TMVA::MethodBDT::Bagging ; (; ). private . Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ; Definition at line 2139 of file MethodBDT.cxx. ◆ Boost(). Double_t TMVA::MethodBDT::Boost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). Apply the boosti",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:47306,Availability,error,error,47306,"options (their key words). ; That can be set in the option string.; know options:. nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..). Known:; AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost. AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment; IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them. MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; SkipNormali",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:55750,Availability,avail,available,55750," 1068 of file MethodBDT.cxx. ◆ PreProcessNegativeEventWeights(). void TMVA::MethodBDT::PreProcessNegativeEventWeights ; (; ). private . O.k. ; you know there are events with negative event weights. This routine will remove them by pairing them with the closest event(s) of the same event class with positive weights A first attempt is ""brute force"", I dont' try to be clever using search trees etc, just quick and dirty to see if the result is any good ; Definition at line 932 of file MethodBDT.cxx. ◆ PrivateGetMvaValue(). Double_t TMVA::MethodBDT::PrivateGetMvaValue ; (; const TMVA::Event * ; ev, . Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr, . UInt_t ; useNTrees = 0 . ). private . Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ; Definition at line 2467 of file MethodBDT.cxx. ◆ ProcessOptions(). void TMVA::MethodBDT::ProcessOptions ; (; ). virtual . The option string is decoded, for available options see ""DeclareOptions"". ; Implements TMVA::MethodBase.; Definition at line 470 of file MethodBDT.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodBDT::ReadWeightsFromStream ; (; std::istream & ; istr). virtual . Read the weights (BDT coefficients). ; Implements TMVA::MethodBase.; Definition at line 2407 of file MethodBDT.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodBDT::ReadWeightsFromXML ; (; void * ; parent). virtual . Reads the BDT from the xml file. ; Implements TMVA::MethodBase.; Definition at line 2340 of file MethodBDT.cxx. ◆ RegBoost(). Double_t TMVA::MethodBDT::RegBoost ; (; std::vector< const TMVA::Event * > ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:62605,Availability,error,error,62605,the weights applied in the individual boosts ; Definition at line 213 of file MethodBDT.h. ◆ fCbb. Double_t TMVA::MethodBDT::fCbb. private . Cost factor. ; Definition at line 272 of file MethodBDT.h. ◆ fCss. Double_t TMVA::MethodBDT::fCss. private . Cost factor. ; Definition at line 269 of file MethodBDT.h. ◆ fCtb_ss. Double_t TMVA::MethodBDT::fCtb_ss. private . Cost factor. ; Definition at line 271 of file MethodBDT.h. ◆ fCts_sb. Double_t TMVA::MethodBDT::fCts_sb. private . Cost factor. ; Definition at line 270 of file MethodBDT.h. ◆ fDoBoostMonitor. Bool_t TMVA::MethodBDT::fDoBoostMonitor. private . create control plot with ROC integral vs tree number ; Definition at line 260 of file MethodBDT.h. ◆ fDoPreselection. Bool_t TMVA::MethodBDT::fDoPreselection. private . do or do not perform automatic pre-selection of 100% eff. cuts ; Definition at line 274 of file MethodBDT.h. ◆ fErrorFraction. Double_t TMVA::MethodBDT::fErrorFraction. private . ntuple var: misclassification error fraction ; Definition at line 267 of file MethodBDT.h. ◆ fEventSample. std::vector<const TMVA::Event*> TMVA::MethodBDT::fEventSample. private . the training events ; Definition at line 206 of file MethodBDT.h. ◆ fForest. std::vector<DecisionTree*> TMVA::MethodBDT::fForest. private . the collection of decision trees ; Definition at line 212 of file MethodBDT.h. ◆ fFValidationEvents. Double_t TMVA::MethodBDT::fFValidationEvents. private . fraction of events to use for pruning ; Definition at line 247 of file MethodBDT.h. ◆ fgDebugLevel. const Int_t TMVA::MethodBDT::fgDebugLevel = 0. staticprivate . debug level determining some printout/control plots etc. ; Definition at line 302 of file MethodBDT.h. ◆ fHighBkgCut. std::vector<Double_t> TMVA::MethodBDT::fHighBkgCut. private . Definition at line 287 of file MethodBDT.h. ◆ fHighSigCut. std::vector<Double_t> TMVA::MethodBDT::fHighSigCut. private . Definition at line 286 of file MethodBDT.h. ◆ fHistoricBool. Bool_t TMVA::MethodBDT::fHistoricBool. pri,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16668,Deployability,configurat,configuration,16668,"ation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:33866,Deployability,update,update,33866,"ble_t GradBoostRegression (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Implementation of M_TreeBoost using any loss function as described by Friedman 1999. ;  ; void Init (void);  Common initialisation with defaults for the BDT-Method. ;  ; void InitGradBoost (std::vector< const TMVA::Event * > &);  Initialize targets for first tree. ;  ; void PreProcessNegativeEventWeights ();  O.k. ;  ; Double_t PrivateGetMvaValue (const TMVA::Event *ev, Double_t *err=nullptr, Double_t *errUpper=nullptr, UInt_t useNTrees=0);  Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ;  ; Double_t RegBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  A special boosting only for Regression (not implemented). ;  ; void UpdateTargets (std::vector< const TMVA::Event * > &, UInt_t cls=0);  Calculate residual for all events. ;  ; void UpdateTargetsRegression (std::vector< const TMVA::Event * > &, Bool_t first=kFALSE);  Calculate residuals for all events and update targets for next iter. ;  . Private Attributes; Double_t fAdaBoostBeta;  beta parameter for AdaBoost algorithm ;  ; TString fAdaBoostR2Loss;  loss type used in AdaBoostR2 (Linear,Quadratic or Exponential) ;  ; Bool_t fAutomatic;  use user given prune strength or automatically determined one using a validation sample ;  ; Bool_t fBaggedBoost;  turn bagging in combination with boost on/off ;  ; Bool_t fBaggedGradBoost;  turn bagging in combination with grad boost on/off ;  ; Double_t fBaggedSampleFraction;  relative size of bagged event sample to original sample size ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  ntuple var: boost weight ;  ; std::vector< double > fBoostWeights;  the weights applied in the individual boosts ;  ; Double_t fCbb;  Cost factor. ;  ; Double_t fCss;  Cost factor. ;  ; Double_t fCtb_ss;  Cost factor. ;  ; Double_t fCts_sb;  Cost factor. ;  ; Bool_t fDoBoostMonit",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:59659,Deployability,update,update,59659,"; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodBDT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 305 of file MethodBDT.h. ◆ TestTreeQuality(). Double_t TMVA::MethodBDT::TestTreeQuality ; (; DecisionTree * ; dt). Test the tree quality.. in terms of Misclassification. ; Definition at line 1696 of file MethodBDT.cxx. ◆ Train(). void TMVA::MethodBDT::Train ; (; void ; ). virtual . BDT training. ; Implements TMVA::MethodBase.; Definition at line 1142 of file MethodBDT.cxx. ◆ UpdateTargets(). void TMVA::MethodBDT::UpdateTargets ; (; std::vector< const TMVA::Event * > & ; eventSample, . UInt_t ; cls = 0 . ). private . Calculate residual for all events. ; Definition at line 1434 of file MethodBDT.cxx. ◆ UpdateTargetsRegression(). void TMVA::MethodBDT::UpdateTargetsRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . Bool_t ; first = kFALSE . ). private . Calculate residuals for all events and update targets for next iter. ; Parameters. [in]eventSampleThe collection of events currently under training. ; [in]firstShould be true when called before the first boosting iteration has been run . Definition at line 1556 of file MethodBDT.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBDT::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . Here we could write some histograms created during the processing to the output file. ; Reimplemented from TMVA::MethodBase.; Definition at line 2627 of file MethodBDT.cxx. Member Data Documentation. ◆ fAdaBoostBeta. Double_t TMVA::MethodBDT::fAdaBoostBeta. private . beta parameter for AdaBoost algorithm ; Definition at line 216 of file MethodBDT.h. ◆ fAdaBoostR2Loss. TString TMVA::MethodBDT::fAdaBoostR2Loss. private . loss type used in AdaBoostR2 (Linear,Quadratic or Exponential) ; Definition at line 217 of file MethodBDT.h. ◆ fAutomatic. Bool_t TMVA::MethodBDT::fAutomatic. private . use user given prune strength or automatic",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:2178,Energy Efficiency,adapt,adaptive,2178,"or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:31948,Energy Efficiency,monitor,monitoring,31948," to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Double_t AdaBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaBoost implementation. ;  ; Double_t AdaBoostR2 (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ;  ; Double_t AdaCost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ;  ; Double_t ApplyPreselectionCuts (const Event *ev);  Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ;  ; Double_t Bagging ();  Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ;  ; void BoostMonitor (Int_t iTree);  Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ;  ; void DeterminePreselectionCuts (const std::vector< const TMVA::Event * > &eventSample);  Find useful preselection cuts that will be applied before and Decision Tree training. ;  ; void GetBaggedSubSample (std::vector< const TMVA::Event * > &);  Fills fEventSample with fBaggedSampleFraction*NEvents random training events. ;  ; Double_t GetGradBoostMVA (const TMVA::Event *e, UInt_t nTrees);  Returns MVA value: -1 for background, 1 for signal. ;  ; Double_t GetMvaValue (Double_t *err, Double_t *errUpper, UInt_t useNTrees);  Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ;  ; Double_t GradBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Calculate the desired response value for each region. ;  ; Double_t GradBoostRegression (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Implementation of M_T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:36493,Energy Efficiency,monitor,monitoring,36493,"g ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Int_t fMinNodeEvents;  min number of events in node ;  ; Float_t fMinNodeSize;  min percentage of training events in node ;  ; TString fMinNodeSizeS;  string containing min percentage of training events in node ;  ; TTree * fMonitorNtuple;  monitoring ntuple ;  ; Int_t fNCuts;  grid used in cut applied in node splitting ;  ; TString fNegWeightTreatment;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be ad",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:44973,Energy Efficiency,monitor,monitoring,44973,"tionCuts(). Double_t TMVA::MethodBDT::ApplyPreselectionCuts ; (; const Event * ; ev). private . Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ; . --> -1 for background +1 for Signal ; Definition at line 3132 of file MethodBDT.cxx. ◆ Bagging(). Double_t TMVA::MethodBDT::Bagging ; (; ). private . Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ; Definition at line 2139 of file MethodBDT.cxx. ◆ Boost(). Double_t TMVA::MethodBDT::Boost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ; The return value is the boosting weight. ; Definition at line 1717 of file MethodBDT.cxx. ◆ BoostMonitor(). void TMVA::MethodBDT::BoostMonitor ; (; Int_t ; iTree). private . Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ; . but using the testing events ; Definition at line 1751 of file MethodBDT.cxx. ◆ Class(). static TClass * TMVA::MethodBDT::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBDT::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBDT::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 305 of file MethodBDT.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodBDT::CreateRanking ; (; ). virtual . Compute ranking of input variables. ; Implements TMVA::MethodBase.; Definition at line 2682 of file MethodBDT.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBDT::DeclareCompatibilityOptions ; (; ). protectedvirtual . Options that are used ONLY for the READER to ensure backward compatibility. ; Reimplemented from TMVA::MethodBase.; Definition at line 454 of file MethodBD",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:66090,Energy Efficiency,monitor,monitoring,66090, TMVA::MethodBDT::fLowSigCut. private . Definition at line 284 of file MethodBDT.h. ◆ fMaxDepth. UInt_t TMVA::MethodBDT::fMaxDepth. private . max depth ; Definition at line 242 of file MethodBDT.h. ◆ fMinLinCorrForFisher. Double_t TMVA::MethodBDT::fMinLinCorrForFisher. private . the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ; Definition at line 237 of file MethodBDT.h. ◆ fMinNodeEvents. Int_t TMVA::MethodBDT::fMinNodeEvents. private . min number of events in node ; Definition at line 231 of file MethodBDT.h. ◆ fMinNodeSize. Float_t TMVA::MethodBDT::fMinNodeSize. private . min percentage of training events in node ; Definition at line 232 of file MethodBDT.h. ◆ fMinNodeSizeS. TString TMVA::MethodBDT::fMinNodeSizeS. private . string containing min percentage of training events in node ; Definition at line 233 of file MethodBDT.h. ◆ fMonitorNtuple. TTree* TMVA::MethodBDT::fMonitorNtuple. private . monitoring ntuple ; Definition at line 264 of file MethodBDT.h. ◆ fNCuts. Int_t TMVA::MethodBDT::fNCuts. private . grid used in cut applied in node splitting ; Definition at line 235 of file MethodBDT.h. ◆ fNegWeightTreatment. TString TMVA::MethodBDT::fNegWeightTreatment. private . variable that holds the option of how to treat negative event weights in training ; Definition at line 255 of file MethodBDT.h. ◆ fNNodesMax. UInt_t TMVA::MethodBDT::fNNodesMax. private . max # of nodes ; Definition at line 241 of file MethodBDT.h. ◆ fNodePurityLimit. Double_t TMVA::MethodBDT::fNodePurityLimit. private . purity limit for sig/bkg nodes ; Definition at line 240 of file MethodBDT.h. ◆ fNoNegWeightsInTraining. Bool_t TMVA::MethodBDT::fNoNegWeightsInTraining. private . ignore negative event weights in the training ; Definition at line 256 of file MethodBDT.h. ◆ fNTrees. Int_t TMVA::MethodBDT::fNTrees. private . number of decision trees requested ; Definition at line 211 of file MethodBDT.h. ◆ fPairNegWeightsGlobal. Bool_t TMV,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:3744,Integrability,depend,depending,3744,"ree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. Public Member Functions;  MethodBDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  The standard constructor for the ""boosted decision trees"". ;  ;  MethodBDT (DataSetInfo &theData, const TString &theWeightFile);  ; virtual ~MethodBDT (void);  Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  Write weights to XML. ;  ; Double_t Boost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ;  ; const Ranking * CreateRanking ();  Compute ranking of input ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:5002,Integrability,message,message,5002,"is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. Public Member Functions;  MethodBDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  The standard constructor for the ""boosted decision trees"". ;  ;  MethodBDT (DataSetInfo &theData, const TString &theWeightFile);  ; virtual ~MethodBDT (void);  Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  Write weights to XML. ;  ; Double_t Boost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ;  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle cl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:21883,Integrability,message,message,21883,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:22424,Integrability,message,message,22424,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:23414,Integrability,message,message,23414,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:26508,Integrability,message,message,26508,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:26881,Integrability,message,message,26881," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Cla",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:41123,Integrability,message,message,41123,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:49706,Integrability,message,message,49706,"lso applied in the GetMVA .. --> -1 for background +1 for Signal) ; Definition at line 3035 of file MethodBDT.cxx. ◆ GetBaggedSubSample(). void TMVA::MethodBDT::GetBaggedSubSample ; (; std::vector< const TMVA::Event * > & ; eventSample). private . Fills fEventSample with fBaggedSampleFraction*NEvents random training events. ; Definition at line 2150 of file MethodBDT.cxx. ◆ GetBoostWeights(). const std::vector< double > & TMVA::MethodBDT::GetBoostWeights ; (; ); const. inline . Definition at line 312 of file MethodBDT.h. ◆ GetForest(). const std::vector< TMVA::DecisionTree * > & TMVA::MethodBDT::GetForest ; (; ); const. inline . Definition at line 310 of file MethodBDT.h. ◆ GetGradBoostMVA(). Double_t TMVA::MethodBDT::GetGradBoostMVA ; (; const TMVA::Event * ; e, . UInt_t ; nTrees . ). private . Returns MVA value: -1 for background, 1 for signal. ; Definition at line 1420 of file MethodBDT.cxx. ◆ GetHelpMessage(). void TMVA::MethodBDT::GetHelpMessage ; (; ); const. virtual . Get help message text. ; Implements TMVA::IMethod.; Definition at line 2699 of file MethodBDT.cxx. ◆ GetMulticlassValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetMulticlassValues ; (; ). virtual . Get the multiclass MVA response for the BDT classifier. ; Reimplemented from TMVA::MethodBase.; Definition at line 2494 of file MethodBDT.cxx. ◆ GetMvaValue() [1/2]. Double_t TMVA::MethodBDT::GetMvaValue ; (; Double_t * ; err, . Double_t * ; errUpper, . UInt_t ; useNTrees . ). private . Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ; Definition at line 2451 of file MethodBDT.cxx. ◆ GetMvaValue() [2/2]. Double_t TMVA::MethodBDT::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::MethodBase.; Definition at line 2442 of file MethodBDT.cxx. ◆ GetNTrees(). UInt_t TMVA::MethodBDT::GetNTrees ; (; ); const. inline . Definition at line 112 of file Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:54955,Integrability,rout,routine,54955,"ethodBase.; Definition at line 2756 of file MethodBDT.cxx. ◆ MakeClassSpecificHeader(). void TMVA::MethodBDT::MakeClassSpecificHeader ; (; std::ostream & ; fout, . const TString & ; className . ); const. virtual . Specific class header. ; Reimplemented from TMVA::MethodBase.; Definition at line 2876 of file MethodBDT.cxx. ◆ OptimizeTuningParameters(). std::map< TString, Double_t > TMVA::MethodBDT::OptimizeTuningParameters ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). virtual . Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Reimplemented from TMVA::MethodBase.; Definition at line 1068 of file MethodBDT.cxx. ◆ PreProcessNegativeEventWeights(). void TMVA::MethodBDT::PreProcessNegativeEventWeights ; (; ). private . O.k. ; you know there are events with negative event weights. This routine will remove them by pairing them with the closest event(s) of the same event class with positive weights A first attempt is ""brute force"", I dont' try to be clever using search trees etc, just quick and dirty to see if the result is any good ; Definition at line 932 of file MethodBDT.cxx. ◆ PrivateGetMvaValue(). Double_t TMVA::MethodBDT::PrivateGetMvaValue ; (; const TMVA::Event * ; ev, . Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr, . UInt_t ; useNTrees = 0 . ). private . Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ; Definition at line 2467 of file MethodBDT.cxx. ◆ ProcessOptions(). void TMVA::MethodBDT::ProcessOptions ; (; ). virtual . The option string is decoded, for available options see ""DeclareOptions"". ; Implements TMVA::MethodBase.; Definition at line 470 of file MethodBDT.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodBDT::ReadWeightsFromStream ; (;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:960,Modifiability,variab,variable,960,". ROOT: TMVA::MethodBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodBDT Class ReferenceTMVA. ; Analysis of Boosted Decision Trees. ; Boosted decision trees have been successfully used in High Energy Physics analysis for example by the MiniBooNE experiment (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the selection is done on a majority vote on the result of several decision trees, which are all derived from the same training sample by supplying different event weights during the training. Decision trees:; Successive decision nodes are used to categorize the events out of the sample as either signal or background. Each node uses only a single discriminating variable to decide if the event is signal-like (""goes right"") or background-like (""goes left""). This forms a tree like structure with ""baskets"" at the end (leave nodes), and an event is classified as either signal or background according to whether the basket where it ends up has been classified signal or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:1488,Modifiability,variab,variable,1488,"the MiniBooNE experiment (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the selection is done on a majority vote on the result of several decision trees, which are all derived from the same training sample by supplying different event weights during the training. Decision trees:; Successive decision nodes are used to categorize the events out of the sample as either signal or background. Each node uses only a single discriminating variable to decide if the event is signal-like (""goes right"") or background-like (""goes left""). This forms a tree like structure with ""baskets"" at the end (leave nodes), and an event is classified as either signal or background according to whether the basket where it ends up has been classified signal or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:2178,Modifiability,adapt,adaptive,2178,"or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:3432,Modifiability,variab,variables,3432,"n the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. Public Member Functions;  MethodBDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  The standard constructor for the ""boosted decision trees"". ;  ;  MethodBDT (DataSetInfo &theData, con",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:4752,Modifiability,variab,variables,4752," decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. Public Member Functions;  MethodBDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  The standard constructor for the ""boosted decision trees"". ;  ;  MethodBDT (DataSetInfo &theData, const TString &theWeightFile);  ; virtual ~MethodBDT (void);  Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  Write weights to XML. ;  ; Double_t Boost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ;  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:5499,Modifiability,variab,variable,5499,") const;  Write weights to XML. ;  ; Double_t Boost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ;  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-spec",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:5538,Modifiability,variab,variables,5538,") const;  Write weights to XML. ;  ; Double_t Boost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ;  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-spec",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:5662,Modifiability,variab,variable,5662,"  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ;  ; void MakeClassSpecificHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TS",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:5685,Modifiability,variab,variable,5685,"  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ;  ; void MakeClassSpecificHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TS",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:5774,Modifiability,variab,variable,5774,"  ; const Ranking * CreateRanking ();  Compute ranking of input variables. ;  ; void DeclareOptions ();  Define the options (their key words). ;  ; const std::vector< double > & GetBoostWeights () const;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; void GetHelpMessage () const;  Get help message text. ;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response for the BDT classifier. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; UInt_t GetNTrees () const;  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the BDTs. ;  ; const std::vector< const TMVA::Event * > & GetTrainingEvents () const;  ; std::vector< Double_t > GetVariableImportance ();  Return the relative variable importance, normalized to all variables together having the importance 1. ;  ; Double_t GetVariableImportance (UInt_t ivar);  Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ;  ; void MakeClassSpecificHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TS",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:8190,Modifiability,inherit,inherited,8190," ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TestTreeQuality (DecisionTree *dt);  Test the tree quality.. in terms of Misclassification. ;  ; void Train (void);  BDT training. ;  ; void WriteMonitoringHistosToFile (void) const;  Here we could write some histograms created during the processing to the output file. ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetAnalysisType () const;  ; UInt_t GetCurrentIter ();  ; virtual Double_t GetEfficiency (const TString &, Types::ETreeType, Double_t &err);  fill background efficiency (resp. ;  ; const Event * GetEvent () const;  ; const Event * GetEvent (const TMVA::Event *ev) const;  ; const Event * GetEvent (Long64_t ievt) const;  ; const Event * GetEvent (Long64_t ievt, Types::ETreeType type) const;  ; const std::vector< TMVA::Event * > & GetEventCollection (Types::ETreeType type);  returns the event collection (i.e. ;  ; TFile * GetFile () const;  ; const TString",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16668,Modifiability,config,configuration,16668,"ation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16771,Modifiability,inherit,inherited,16771,"stvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16931,Modifiability,inherit,inherited,16931,"Def_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:18680,Modifiability,inherit,inherited,18680,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:20420,Modifiability,inherit,inherited,20420,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:21513,Modifiability,inherit,inheritance,21513,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:23512,Modifiability,inherit,inherits,23512,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:23629,Modifiability,inherit,inherits,23629,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:27382,Modifiability,inherit,inherited,27382,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeclareCompatibilityOptions ();  Options that are used ON",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:27602,Modifiability,inherit,inherited,27602,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeclareCompatibilityOptions ();  Options that are used ON",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:27819,Modifiability,inherit,inherited,27819,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeclareCompatibilityOptions ();  Options that are used ON",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:28041,Modifiability,inherit,inherited,28041,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeclareCompatibilityOptions ();  Options that are used ON",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:28251,Modifiability,inherit,inherited,28251,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DeclareCompatibilityOptions ();  Options that are used ON",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:28912,Modifiability,inherit,inherited,28912,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:30150,Modifiability,variab,variable,30150,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:30191,Modifiability,variab,variables,30191,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:30231,Modifiability,variab,variables,30231,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:30385,Modifiability,inherit,inherited,30385,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:30792,Modifiability,inherit,inherited,30792,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:36182,Modifiability,variab,variables,36182,"g ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Int_t fMinNodeEvents;  min number of events in node ;  ; Float_t fMinNodeSize;  min percentage of training events in node ;  ; TString fMinNodeSizeS;  string containing min percentage of training events in node ;  ; TTree * fMonitorNtuple;  monitoring ntuple ;  ; Int_t fNCuts;  grid used in cut applied in node splitting ;  ; TString fNegWeightTreatment;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be ad",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:36609,Modifiability,variab,variable,36609,"g ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Int_t fMinNodeEvents;  min number of events in node ;  ; Float_t fMinNodeSize;  min percentage of training events in node ;  ; TString fMinNodeSizeS;  string containing min percentage of training events in node ;  ; TTree * fMonitorNtuple;  monitoring ntuple ;  ; Int_t fNCuts;  grid used in cut applied in node splitting ;  ; TString fNegWeightTreatment;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be ad",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:37341,Modifiability,variab,variables,37341,"nt;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be adjusted ;  ; Bool_t fRandomisedTrees;  choose a random subset of possible cut variables at each node during training ;  ; LossFunctionBDT * fRegressionLossFunctionBDTG;  ; TString fRegressionLossFunctionBDTGS;  the option string determining the loss function for BDT regression ;  ; std::map< const TMVA::Event *, std::vector< double > > fResiduals;  individual event residuals for gradient boost ;  ; SeparationBase * fSepType;  the separation used in node splitting ;  ; TString fSepTypeS;  the separation (option string) used in node splitting ;  ; Double_t fShrinkage;  learning rate for gradient boost; ;  ; Double_t fSigToBkgFraction;  Signal to Background fraction assumed during training. ;  ; Bool_t fSkipNormalization;  true for skipping normalization at initialization of trees ;  ; std::vector< const TMVA::Event * > fSubSample;  subsample for bagged grad boost ;  ; std::vector< const TMVA::Event * > * fTrainSample;  pointer to sample actually used in training (fEventSample or fSubSample) for example ;  ; Bool_t fTrainWithNegWeights;  yes there are negative event weights and we don't ignore them ;  ; Bool_t fUseExclusiveVars;  individual variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; U",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:38419,Modifiability,variab,variables,38419,"BDTG;  ; TString fRegressionLossFunctionBDTGS;  the option string determining the loss function for BDT regression ;  ; std::map< const TMVA::Event *, std::vector< double > > fResiduals;  individual event residuals for gradient boost ;  ; SeparationBase * fSepType;  the separation used in node splitting ;  ; TString fSepTypeS;  the separation (option string) used in node splitting ;  ; Double_t fShrinkage;  learning rate for gradient boost; ;  ; Double_t fSigToBkgFraction;  Signal to Background fraction assumed during training. ;  ; Bool_t fSkipNormalization;  true for skipping normalization at initialization of trees ;  ; std::vector< const TMVA::Event * > fSubSample;  subsample for bagged grad boost ;  ; std::vector< const TMVA::Event * > * fTrainSample;  pointer to sample actually used in training (fEventSample or fSubSample) for example ;  ; Bool_t fTrainWithNegWeights;  yes there are negative event weights and we don't ignore them ;  ; Bool_t fUseExclusiveVars;  individual variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; UInt_t fUseNTrainEvents;  number of randomly picked training events used in randomised (and bagged) trees ;  ; UInt_t fUseNvars;  the number of variables used in the randomised tree splitting ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseYesNoLeaf;  use sig or bkg classification in leave nodes or sig/bkg ;  ; std::vector< const TMVA::Event * > fValidationSample;  the Validation events ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:38748,Modifiability,variab,variables,38748,"BDTG;  ; TString fRegressionLossFunctionBDTGS;  the option string determining the loss function for BDT regression ;  ; std::map< const TMVA::Event *, std::vector< double > > fResiduals;  individual event residuals for gradient boost ;  ; SeparationBase * fSepType;  the separation used in node splitting ;  ; TString fSepTypeS;  the separation (option string) used in node splitting ;  ; Double_t fShrinkage;  learning rate for gradient boost; ;  ; Double_t fSigToBkgFraction;  Signal to Background fraction assumed during training. ;  ; Bool_t fSkipNormalization;  true for skipping normalization at initialization of trees ;  ; std::vector< const TMVA::Event * > fSubSample;  subsample for bagged grad boost ;  ; std::vector< const TMVA::Event * > * fTrainSample;  pointer to sample actually used in training (fEventSample or fSubSample) for example ;  ; Bool_t fTrainWithNegWeights;  yes there are negative event weights and we don't ignore them ;  ; Bool_t fUseExclusiveVars;  individual variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; UInt_t fUseNTrainEvents;  number of randomly picked training events used in randomised (and bagged) trees ;  ; UInt_t fUseNvars;  the number of variables used in the randomised tree splitting ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseYesNoLeaf;  use sig or bkg classification in leave nodes or sig/bkg ;  ; std::vector< const TMVA::Event * > fValidationSample;  the Validation events ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:39167,Modifiability,variab,variables,39167,"ation of trees ;  ; std::vector< const TMVA::Event * > fSubSample;  subsample for bagged grad boost ;  ; std::vector< const TMVA::Event * > * fTrainSample;  pointer to sample actually used in training (fEventSample or fSubSample) for example ;  ; Bool_t fTrainWithNegWeights;  yes there are negative event weights and we don't ignore them ;  ; Bool_t fUseExclusiveVars;  individual variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; UInt_t fUseNTrainEvents;  number of randomly picked training events used in randomised (and bagged) trees ;  ; UInt_t fUseNvars;  the number of variables used in the randomised tree splitting ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseYesNoLeaf;  use sig or bkg classification in leave nodes or sig/bkg ;  ; std::vector< const TMVA::Event * > fValidationSample;  the Validation events ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInval",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:39353,Modifiability,inherit,inherited,39353,"re not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; UInt_t fUseNTrainEvents;  number of randomly picked training events used in randomised (and bagged) trees ;  ; UInt_t fUseNvars;  the number of variables used in the randomised tree splitting ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseYesNoLeaf;  use sig or bkg classification in leave nodes or sig/bkg ;  ; std::vector< const TMVA::Event * > fValidationSample;  the Validation events ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:39449,Modifiability,inherit,inherited,39449,"re not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; UInt_t fUseNTrainEvents;  number of randomly picked training events used in randomised (and bagged) trees ;  ; UInt_t fUseNvars;  the number of variables used in the randomised tree splitting ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseYesNoLeaf;  use sig or bkg classification in leave nodes or sig/bkg ;  ; std::vector< const TMVA::Event * > fValidationSample;  the Validation events ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:40092,Modifiability,inherit,inherited,40092,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:40203,Modifiability,inherit,inherited,40203,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:40296,Modifiability,inherit,inherited,40296,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:41064,Modifiability,inherit,inherited,41064,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:41165,Modifiability,inherit,inherited,41165,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:45607,Modifiability,variab,variables,45607,"sionTree * ; dt, . UInt_t ; cls = 0 . ). Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ; The return value is the boosting weight. ; Definition at line 1717 of file MethodBDT.cxx. ◆ BoostMonitor(). void TMVA::MethodBDT::BoostMonitor ; (; Int_t ; iTree). private . Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ; . but using the testing events ; Definition at line 1751 of file MethodBDT.cxx. ◆ Class(). static TClass * TMVA::MethodBDT::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBDT::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBDT::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 305 of file MethodBDT.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodBDT::CreateRanking ; (; ). virtual . Compute ranking of input variables. ; Implements TMVA::MethodBase.; Definition at line 2682 of file MethodBDT.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBDT::DeclareCompatibilityOptions ; (; ). protectedvirtual . Options that are used ONLY for the READER to ensure backward compatibility. ; Reimplemented from TMVA::MethodBase.; Definition at line 454 of file MethodBDT.cxx. ◆ DeclareOptions(). void TMVA::MethodBDT::DeclareOptions ; (; ). virtual . Define the options (their key words). ; That can be set in the option string.; know options:. nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..). Known:; AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost. AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a pois",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:46464,Modifiability,variab,variables,46464,"st TMVA::Ranking * TMVA::MethodBDT::CreateRanking ; (; ). virtual . Compute ranking of input variables. ; Implements TMVA::MethodBase.; Definition at line 2682 of file MethodBDT.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBDT::DeclareCompatibilityOptions ; (; ). protectedvirtual . Options that are used ONLY for the READER to ensure backward compatibility. ; Reimplemented from TMVA::MethodBase.; Definition at line 454 of file MethodBDT.cxx. ◆ DeclareOptions(). void TMVA::MethodBDT::DeclareOptions ; (; ). virtual . Define the options (their key words). ; That can be set in the option string.; know options:. nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..). Known:; AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost. AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enoug",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:46497,Modifiability,variab,variables,46497,"st TMVA::Ranking * TMVA::MethodBDT::CreateRanking ; (; ). virtual . Compute ranking of input variables. ; Implements TMVA::MethodBase.; Definition at line 2682 of file MethodBDT.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBDT::DeclareCompatibilityOptions ; (; ). protectedvirtual . Options that are used ONLY for the READER to ensure backward compatibility. ; Reimplemented from TMVA::MethodBase.; Definition at line 454 of file MethodBDT.cxx. ◆ DeclareOptions(). void TMVA::MethodBDT::DeclareOptions ; (; ). virtual . Define the options (their key words). ; That can be set in the option string.; know options:. nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..). Known:; AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost. AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enoug",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:51249,Modifiability,variab,variable,51249,"ity vote from the total number of decision trees. ; Definition at line 2451 of file MethodBDT.cxx. ◆ GetMvaValue() [2/2]. Double_t TMVA::MethodBDT::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::MethodBase.; Definition at line 2442 of file MethodBDT.cxx. ◆ GetNTrees(). UInt_t TMVA::MethodBDT::GetNTrees ; (; ); const. inline . Definition at line 112 of file MethodBDT.h. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetRegressionValues ; (; ). virtual . Get the regression value generated by the BDTs. ; Reimplemented from TMVA::MethodBase.; Definition at line 2541 of file MethodBDT.cxx. ◆ GetTrainingEvents(). const std::vector< const TMVA::Event * > & TMVA::MethodBDT::GetTrainingEvents ; (; ); const. inline . Definition at line 311 of file MethodBDT.h. ◆ GetVariableImportance() [1/2]. vector< Double_t > TMVA::MethodBDT::GetVariableImportance ; (; ). Return the relative variable importance, normalized to all variables together having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2642 of file MethodBDT.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::MethodBDT::GetVariableImportance ; (; UInt_t ; ivar). Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ; Definition at line 2670 of file MethodBDT.cxx. ◆ GradBoost(). Double_t TMVA::MethodBDT::GradBoost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). private . Calculate the desired response value for each region. ; Definition at line 1594 of file MethodBDT.cxx. ◆ GradBoostRegression(). Double_t TMVA::MethodBDT::GradBoostRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Implementation",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:51288,Modifiability,variab,variables,51288,"ity vote from the total number of decision trees. ; Definition at line 2451 of file MethodBDT.cxx. ◆ GetMvaValue() [2/2]. Double_t TMVA::MethodBDT::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::MethodBase.; Definition at line 2442 of file MethodBDT.cxx. ◆ GetNTrees(). UInt_t TMVA::MethodBDT::GetNTrees ; (; ); const. inline . Definition at line 112 of file MethodBDT.h. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetRegressionValues ; (; ). virtual . Get the regression value generated by the BDTs. ; Reimplemented from TMVA::MethodBase.; Definition at line 2541 of file MethodBDT.cxx. ◆ GetTrainingEvents(). const std::vector< const TMVA::Event * > & TMVA::MethodBDT::GetTrainingEvents ; (; ); const. inline . Definition at line 311 of file MethodBDT.h. ◆ GetVariableImportance() [1/2]. vector< Double_t > TMVA::MethodBDT::GetVariableImportance ; (; ). Return the relative variable importance, normalized to all variables together having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2642 of file MethodBDT.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::MethodBDT::GetVariableImportance ; (; UInt_t ; ivar). Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ; Definition at line 2670 of file MethodBDT.cxx. ◆ GradBoost(). Double_t TMVA::MethodBDT::GradBoost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). private . Calculate the desired response value for each region. ; Definition at line 1594 of file MethodBDT.cxx. ◆ GradBoostRegression(). Double_t TMVA::MethodBDT::GradBoostRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Implementation",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:51401,Modifiability,variab,variable,51401,"DT::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::MethodBase.; Definition at line 2442 of file MethodBDT.cxx. ◆ GetNTrees(). UInt_t TMVA::MethodBDT::GetNTrees ; (; ); const. inline . Definition at line 112 of file MethodBDT.h. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetRegressionValues ; (; ). virtual . Get the regression value generated by the BDTs. ; Reimplemented from TMVA::MethodBase.; Definition at line 2541 of file MethodBDT.cxx. ◆ GetTrainingEvents(). const std::vector< const TMVA::Event * > & TMVA::MethodBDT::GetTrainingEvents ; (; ); const. inline . Definition at line 311 of file MethodBDT.h. ◆ GetVariableImportance() [1/2]. vector< Double_t > TMVA::MethodBDT::GetVariableImportance ; (; ). Return the relative variable importance, normalized to all variables together having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2642 of file MethodBDT.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::MethodBDT::GetVariableImportance ; (; UInt_t ; ivar). Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ; Definition at line 2670 of file MethodBDT.cxx. ◆ GradBoost(). Double_t TMVA::MethodBDT::GradBoost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). private . Calculate the desired response value for each region. ; Definition at line 1594 of file MethodBDT.cxx. ◆ GradBoostRegression(). Double_t TMVA::MethodBDT::GradBoostRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Implementation of M_TreeBoost using any loss function as described by Friedman 1999. ; Definition at line 1628 of file MethodBDT.cxx. ◆ HasAnalysisType(). Bo",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:51650,Modifiability,variab,variable,51650,"MethodBDT.h. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetRegressionValues ; (; ). virtual . Get the regression value generated by the BDTs. ; Reimplemented from TMVA::MethodBase.; Definition at line 2541 of file MethodBDT.cxx. ◆ GetTrainingEvents(). const std::vector< const TMVA::Event * > & TMVA::MethodBDT::GetTrainingEvents ; (; ); const. inline . Definition at line 311 of file MethodBDT.h. ◆ GetVariableImportance() [1/2]. vector< Double_t > TMVA::MethodBDT::GetVariableImportance ; (; ). Return the relative variable importance, normalized to all variables together having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2642 of file MethodBDT.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::MethodBDT::GetVariableImportance ; (; UInt_t ; ivar). Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ; Definition at line 2670 of file MethodBDT.cxx. ◆ GradBoost(). Double_t TMVA::MethodBDT::GradBoost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). private . Calculate the desired response value for each region. ; Definition at line 1594 of file MethodBDT.cxx. ◆ GradBoostRegression(). Double_t TMVA::MethodBDT::GradBoostRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Implementation of M_TreeBoost using any loss function as described by Friedman 1999. ; Definition at line 1628 of file MethodBDT.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodBDT::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . BDT can handle classification with multiple classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:51673,Modifiability,variab,variable,51673,"MethodBDT.h. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetRegressionValues ; (; ). virtual . Get the regression value generated by the BDTs. ; Reimplemented from TMVA::MethodBase.; Definition at line 2541 of file MethodBDT.cxx. ◆ GetTrainingEvents(). const std::vector< const TMVA::Event * > & TMVA::MethodBDT::GetTrainingEvents ; (; ); const. inline . Definition at line 311 of file MethodBDT.h. ◆ GetVariableImportance() [1/2]. vector< Double_t > TMVA::MethodBDT::GetVariableImportance ; (; ). Return the relative variable importance, normalized to all variables together having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2642 of file MethodBDT.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::MethodBDT::GetVariableImportance ; (; UInt_t ; ivar). Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ; Definition at line 2670 of file MethodBDT.cxx. ◆ GradBoost(). Double_t TMVA::MethodBDT::GradBoost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). private . Calculate the desired response value for each region. ; Definition at line 1594 of file MethodBDT.cxx. ◆ GradBoostRegression(). Double_t TMVA::MethodBDT::GradBoostRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Implementation of M_TreeBoost using any loss function as described by Friedman 1999. ; Definition at line 1628 of file MethodBDT.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodBDT::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . BDT can handle classification with multiple classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:51762,Modifiability,variab,variable,51762,"MethodBDT.h. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodBDT::GetRegressionValues ; (; ). virtual . Get the regression value generated by the BDTs. ; Reimplemented from TMVA::MethodBase.; Definition at line 2541 of file MethodBDT.cxx. ◆ GetTrainingEvents(). const std::vector< const TMVA::Event * > & TMVA::MethodBDT::GetTrainingEvents ; (; ); const. inline . Definition at line 311 of file MethodBDT.h. ◆ GetVariableImportance() [1/2]. vector< Double_t > TMVA::MethodBDT::GetVariableImportance ; (; ). Return the relative variable importance, normalized to all variables together having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2642 of file MethodBDT.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::MethodBDT::GetVariableImportance ; (; UInt_t ; ivar). Returns the measure for the variable importance of variable ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ; Definition at line 2670 of file MethodBDT.cxx. ◆ GradBoost(). Double_t TMVA::MethodBDT::GradBoost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). private . Calculate the desired response value for each region. ; Definition at line 1594 of file MethodBDT.cxx. ◆ GradBoostRegression(). Double_t TMVA::MethodBDT::GradBoostRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Implementation of M_TreeBoost using any loss function as described by Friedman 1999. ; Definition at line 1628 of file MethodBDT.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodBDT::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . BDT can handle classification with multiple classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at lin",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:65443,Modifiability,variab,variables,65443,"ool_t> TMVA::MethodBDT::fIsLowSigCut. private . Definition at line 289 of file MethodBDT.h. ◆ fITree. Int_t TMVA::MethodBDT::fITree. private . ntuple var: ith tree ; Definition at line 265 of file MethodBDT.h. ◆ fLossFunctionEventInfo. std::map< const TMVA::Event*, LossFunctionEventInfo> TMVA::MethodBDT::fLossFunctionEventInfo. private . map event to true value, predicted value, and weight used by different loss functions for BDT regression ; Definition at line 224 of file MethodBDT.h. ◆ fLowBkgCut. std::vector<Double_t> TMVA::MethodBDT::fLowBkgCut. private . Definition at line 285 of file MethodBDT.h. ◆ fLowSigCut. std::vector<Double_t> TMVA::MethodBDT::fLowSigCut. private . Definition at line 284 of file MethodBDT.h. ◆ fMaxDepth. UInt_t TMVA::MethodBDT::fMaxDepth. private . max depth ; Definition at line 242 of file MethodBDT.h. ◆ fMinLinCorrForFisher. Double_t TMVA::MethodBDT::fMinLinCorrForFisher. private . the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ; Definition at line 237 of file MethodBDT.h. ◆ fMinNodeEvents. Int_t TMVA::MethodBDT::fMinNodeEvents. private . min number of events in node ; Definition at line 231 of file MethodBDT.h. ◆ fMinNodeSize. Float_t TMVA::MethodBDT::fMinNodeSize. private . min percentage of training events in node ; Definition at line 232 of file MethodBDT.h. ◆ fMinNodeSizeS. TString TMVA::MethodBDT::fMinNodeSizeS. private . string containing min percentage of training events in node ; Definition at line 233 of file MethodBDT.h. ◆ fMonitorNtuple. TTree* TMVA::MethodBDT::fMonitorNtuple. private . monitoring ntuple ; Definition at line 264 of file MethodBDT.h. ◆ fNCuts. Int_t TMVA::MethodBDT::fNCuts. private . grid used in cut applied in node splitting ; Definition at line 235 of file MethodBDT.h. ◆ fNegWeightTreatment. TString TMVA::MethodBDT::fNegWeightTreatment. private . variable that holds the option of how to treat negative event weights in training ; Definition at line",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:66373,Modifiability,variab,variable,66373,"een two variables demanded for use in fisher criterium in node splitting ; Definition at line 237 of file MethodBDT.h. ◆ fMinNodeEvents. Int_t TMVA::MethodBDT::fMinNodeEvents. private . min number of events in node ; Definition at line 231 of file MethodBDT.h. ◆ fMinNodeSize. Float_t TMVA::MethodBDT::fMinNodeSize. private . min percentage of training events in node ; Definition at line 232 of file MethodBDT.h. ◆ fMinNodeSizeS. TString TMVA::MethodBDT::fMinNodeSizeS. private . string containing min percentage of training events in node ; Definition at line 233 of file MethodBDT.h. ◆ fMonitorNtuple. TTree* TMVA::MethodBDT::fMonitorNtuple. private . monitoring ntuple ; Definition at line 264 of file MethodBDT.h. ◆ fNCuts. Int_t TMVA::MethodBDT::fNCuts. private . grid used in cut applied in node splitting ; Definition at line 235 of file MethodBDT.h. ◆ fNegWeightTreatment. TString TMVA::MethodBDT::fNegWeightTreatment. private . variable that holds the option of how to treat negative event weights in training ; Definition at line 255 of file MethodBDT.h. ◆ fNNodesMax. UInt_t TMVA::MethodBDT::fNNodesMax. private . max # of nodes ; Definition at line 241 of file MethodBDT.h. ◆ fNodePurityLimit. Double_t TMVA::MethodBDT::fNodePurityLimit. private . purity limit for sig/bkg nodes ; Definition at line 240 of file MethodBDT.h. ◆ fNoNegWeightsInTraining. Bool_t TMVA::MethodBDT::fNoNegWeightsInTraining. private . ignore negative event weights in the training ; Definition at line 256 of file MethodBDT.h. ◆ fNTrees. Int_t TMVA::MethodBDT::fNTrees. private . number of decision trees requested ; Definition at line 211 of file MethodBDT.h. ◆ fPairNegWeightsGlobal. Bool_t TMVA::MethodBDT::fPairNegWeightsGlobal. private . pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ; Definition at line 258 of file MethodBDT.h. ◆ fPruneMethod. DecisionTree::EPruneMethod TMVA::MethodBDT::fPruneMethod. private . method used for pruning ; Definition at line 244 of file Meth",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:67876,Modifiability,variab,variables,67876,"raining ; Definition at line 256 of file MethodBDT.h. ◆ fNTrees. Int_t TMVA::MethodBDT::fNTrees. private . number of decision trees requested ; Definition at line 211 of file MethodBDT.h. ◆ fPairNegWeightsGlobal. Bool_t TMVA::MethodBDT::fPairNegWeightsGlobal. private . pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ; Definition at line 258 of file MethodBDT.h. ◆ fPruneMethod. DecisionTree::EPruneMethod TMVA::MethodBDT::fPruneMethod. private . method used for pruning ; Definition at line 244 of file MethodBDT.h. ◆ fPruneMethodS. TString TMVA::MethodBDT::fPruneMethodS. private . prune method option String ; Definition at line 245 of file MethodBDT.h. ◆ fPruneStrength. Double_t TMVA::MethodBDT::fPruneStrength. private . a parameter to set the ""amount"" of pruning..needs to be adjusted ; Definition at line 246 of file MethodBDT.h. ◆ fRandomisedTrees. Bool_t TMVA::MethodBDT::fRandomisedTrees. private . choose a random subset of possible cut variables at each node during training ; Definition at line 249 of file MethodBDT.h. ◆ fRegressionLossFunctionBDTG. LossFunctionBDT* TMVA::MethodBDT::fRegressionLossFunctionBDTG. private . Definition at line 299 of file MethodBDT.h. ◆ fRegressionLossFunctionBDTGS. TString TMVA::MethodBDT::fRegressionLossFunctionBDTGS. private . the option string determining the loss function for BDT regression ; Definition at line 296 of file MethodBDT.h. ◆ fResiduals. std::map< const TMVA::Event*,std::vector<double> > TMVA::MethodBDT::fResiduals. private . individual event residuals for gradient boost ; Definition at line 226 of file MethodBDT.h. ◆ fSepType. SeparationBase* TMVA::MethodBDT::fSepType. private . the separation used in node splitting ; Definition at line 229 of file MethodBDT.h. ◆ fSepTypeS. TString TMVA::MethodBDT::fSepTypeS. private . the separation (option string) used in node splitting ; Definition at line 230 of file MethodBDT.h. ◆ fShrinkage. Double_t TMVA::MethodBDT::fShrinkage. private . learning rat",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:69980,Modifiability,variab,variables,69980,"al to Background fraction assumed during training. ; Definition at line 214 of file MethodBDT.h. ◆ fSkipNormalization. Bool_t TMVA::MethodBDT::fSkipNormalization. private . true for skipping normalization at initialization of trees ; Definition at line 276 of file MethodBDT.h. ◆ fSubSample. std::vector<const TMVA::Event*> TMVA::MethodBDT::fSubSample. private . subsample for bagged grad boost ; Definition at line 208 of file MethodBDT.h. ◆ fTrainSample. std::vector<const TMVA::Event*>* TMVA::MethodBDT::fTrainSample. private . pointer to sample actually used in training (fEventSample or fSubSample) for example ; Definition at line 209 of file MethodBDT.h. ◆ fTrainWithNegWeights. Bool_t TMVA::MethodBDT::fTrainWithNegWeights. private . yes there are negative event weights and we don't ignore them ; Definition at line 259 of file MethodBDT.h. ◆ fUseExclusiveVars. Bool_t TMVA::MethodBDT::fUseExclusiveVars. private . individual variables already used in fisher criterium are not anymore analysed individually for node splitting ; Definition at line 238 of file MethodBDT.h. ◆ fUseFisherCuts. Bool_t TMVA::MethodBDT::fUseFisherCuts. private . use multivariate splits using the Fisher criterium ; Definition at line 236 of file MethodBDT.h. ◆ fUseNTrainEvents. UInt_t TMVA::MethodBDT::fUseNTrainEvents. private . number of randomly picked training events used in randomised (and bagged) trees ; Definition at line 252 of file MethodBDT.h. ◆ fUseNvars. UInt_t TMVA::MethodBDT::fUseNvars. private . the number of variables used in the randomised tree splitting ; Definition at line 250 of file MethodBDT.h. ◆ fUsePoissonNvars. Bool_t TMVA::MethodBDT::fUsePoissonNvars. private . use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ; Definition at line 251 of file MethodBDT.h. ◆ fUseYesNoLeaf. Bool_t TMVA::MethodBDT::fUseYesNoLeaf. private . use sig or bkg classification in leave nodes or sig/bkg ; Definition at line 239 of file MethodBDT.h. ◆ fValidationSample. st",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:70561,Modifiability,variab,variables,70561,"lly used in training (fEventSample or fSubSample) for example ; Definition at line 209 of file MethodBDT.h. ◆ fTrainWithNegWeights. Bool_t TMVA::MethodBDT::fTrainWithNegWeights. private . yes there are negative event weights and we don't ignore them ; Definition at line 259 of file MethodBDT.h. ◆ fUseExclusiveVars. Bool_t TMVA::MethodBDT::fUseExclusiveVars. private . individual variables already used in fisher criterium are not anymore analysed individually for node splitting ; Definition at line 238 of file MethodBDT.h. ◆ fUseFisherCuts. Bool_t TMVA::MethodBDT::fUseFisherCuts. private . use multivariate splits using the Fisher criterium ; Definition at line 236 of file MethodBDT.h. ◆ fUseNTrainEvents. UInt_t TMVA::MethodBDT::fUseNTrainEvents. private . number of randomly picked training events used in randomised (and bagged) trees ; Definition at line 252 of file MethodBDT.h. ◆ fUseNvars. UInt_t TMVA::MethodBDT::fUseNvars. private . the number of variables used in the randomised tree splitting ; Definition at line 250 of file MethodBDT.h. ◆ fUsePoissonNvars. Bool_t TMVA::MethodBDT::fUsePoissonNvars. private . use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ; Definition at line 251 of file MethodBDT.h. ◆ fUseYesNoLeaf. Bool_t TMVA::MethodBDT::fUseYesNoLeaf. private . use sig or bkg classification in leave nodes or sig/bkg ; Definition at line 239 of file MethodBDT.h. ◆ fValidationSample. std::vector<const TMVA::Event*> TMVA::MethodBDT::fValidationSample. private . the Validation events ; Definition at line 207 of file MethodBDT.h. ◆ fVariableImportance. std::vector<Double_t> TMVA::MethodBDT::fVariableImportance. private . the relative importance of the different variables ; Definition at line 278 of file MethodBDT.h. Libraries for TMVA::MethodBDT:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodBDT.h; tmva/tmva/src/MethodBDT.cxx. TMVAMethodBDT. ROOT master - Reference Gui",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:71324,Modifiability,variab,variables,71324," line 209 of file MethodBDT.h. ◆ fTrainWithNegWeights. Bool_t TMVA::MethodBDT::fTrainWithNegWeights. private . yes there are negative event weights and we don't ignore them ; Definition at line 259 of file MethodBDT.h. ◆ fUseExclusiveVars. Bool_t TMVA::MethodBDT::fUseExclusiveVars. private . individual variables already used in fisher criterium are not anymore analysed individually for node splitting ; Definition at line 238 of file MethodBDT.h. ◆ fUseFisherCuts. Bool_t TMVA::MethodBDT::fUseFisherCuts. private . use multivariate splits using the Fisher criterium ; Definition at line 236 of file MethodBDT.h. ◆ fUseNTrainEvents. UInt_t TMVA::MethodBDT::fUseNTrainEvents. private . number of randomly picked training events used in randomised (and bagged) trees ; Definition at line 252 of file MethodBDT.h. ◆ fUseNvars. UInt_t TMVA::MethodBDT::fUseNvars. private . the number of variables used in the randomised tree splitting ; Definition at line 250 of file MethodBDT.h. ◆ fUsePoissonNvars. Bool_t TMVA::MethodBDT::fUsePoissonNvars. private . use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ; Definition at line 251 of file MethodBDT.h. ◆ fUseYesNoLeaf. Bool_t TMVA::MethodBDT::fUseYesNoLeaf. private . use sig or bkg classification in leave nodes or sig/bkg ; Definition at line 239 of file MethodBDT.h. ◆ fValidationSample. std::vector<const TMVA::Event*> TMVA::MethodBDT::fValidationSample. private . the Validation events ; Definition at line 207 of file MethodBDT.h. ◆ fVariableImportance. std::vector<Double_t> TMVA::MethodBDT::fVariableImportance. private . the relative importance of the different variables ; Definition at line 278 of file MethodBDT.h. Libraries for TMVA::MethodBDT:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodBDT.h; tmva/tmva/src/MethodBDT.cxx. TMVAMethodBDT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:6791,Performance,tune,tuned,6791,"le ""ivar"" which is later used in GetVariableImportance() to calculate the relative variable importances. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  BDT can handle classification with multiple classes and regression with one regression-target. ;  ; void InitEventSample ();  Initialize the event sample (i.e. reset the boost-weights... etc). ;  ; virtual TClass * IsA () const;  ; void MakeClassInstantiateNode (DecisionTreeNode *n, std::ostream &fout, const TString &className) const;  Recursively descends a tree and writes the node instance to the output stream. ;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ;  ; void MakeClassSpecificHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ;  ; void ProcessOptions ();  The option string is decoded, for available options see ""DeclareOptions"". ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  Read the weights (BDT coefficients). ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *parent);  Reads the BDT from the xml file. ;  ; void Reset (void);  Reset the method, as if it had just been instantiated (forget all training etc.). ;  ; void SetAdaBoostBeta (Double_t b);  ; void SetBaggedSampleFraction (Double_t f);  ; void SetMaxDepth (Int_t d);  ; void SetMinNodeSize (Double_t sizeInPercent);  ; void SetMinNodeSize (TString sizeInPercent);  ; void SetNodePurityLimit (Double_t l);  ; void SetNTrees (Int_t d);  ; void SetShrinkage (Double_t s);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  Se",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:7671,Performance,tune,tuneParameters,7671,"cHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ;  ; void ProcessOptions ();  The option string is decoded, for available options see ""DeclareOptions"". ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  Read the weights (BDT coefficients). ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *parent);  Reads the BDT from the xml file. ;  ; void Reset (void);  Reset the method, as if it had just been instantiated (forget all training etc.). ;  ; void SetAdaBoostBeta (Double_t b);  ; void SetBaggedSampleFraction (Double_t f);  ; void SetMaxDepth (Int_t d);  ; void SetMinNodeSize (Double_t sizeInPercent);  ; void SetMinNodeSize (TString sizeInPercent);  ; void SetNodePurityLimit (Double_t l);  ; void SetNTrees (Int_t d);  ; void SetShrinkage (Double_t s);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  Set the tuning parameters according to the argument. ;  ; void SetUseNvars (Int_t n);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TestTreeQuality (DecisionTree *dt);  Test the tree quality.. in terms of Misclassification. ;  ; void Train (void);  BDT training. ;  ; void WriteMonitoringHistosToFile (void) const;  Here we could write some histograms created during the processing to the output file. ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:34914,Performance,perform,perform,34914," targets for next iter. ;  . Private Attributes; Double_t fAdaBoostBeta;  beta parameter for AdaBoost algorithm ;  ; TString fAdaBoostR2Loss;  loss type used in AdaBoostR2 (Linear,Quadratic or Exponential) ;  ; Bool_t fAutomatic;  use user given prune strength or automatically determined one using a validation sample ;  ; Bool_t fBaggedBoost;  turn bagging in combination with boost on/off ;  ; Bool_t fBaggedGradBoost;  turn bagging in combination with grad boost on/off ;  ; Double_t fBaggedSampleFraction;  relative size of bagged event sample to original sample size ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  ntuple var: boost weight ;  ; std::vector< double > fBoostWeights;  the weights applied in the individual boosts ;  ; Double_t fCbb;  Cost factor. ;  ; Double_t fCss;  Cost factor. ;  ; Double_t fCtb_ss;  Cost factor. ;  ; Double_t fCts_sb;  Cost factor. ;  ; Bool_t fDoBoostMonitor;  create control plot with ROC integral vs tree number ;  ; Bool_t fDoPreselection;  do or do not perform automatic pre-selection of 100% eff. cuts ;  ; Double_t fErrorFraction;  ntuple var: misclassification error fraction ;  ; std::vector< const TMVA::Event * > fEventSample;  the training events ;  ; std::vector< DecisionTree * > fForest;  the collection of decision trees ;  ; Double_t fFValidationEvents;  fraction of events to use for pruning ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunction",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:47599,Performance,optimiz,optimizing,47599,"son distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment; IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them. MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; SkipNormalization Skip normalization at initialization, to keep expectation value of BDT output according to the fraction of events . Implements TMVA::MethodBase.; Definition at line 333 of file MethodBDT.cxx. ◆ DeclFileName(). static const char * TMVA::MethodBDT::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 305 of file MethodBDT.h. ◆ DeterminePreselectionCuts(). void TMVA::MethodBDT::DeterminePreselectionCuts ; (; const std::vector< const TMVA::Event * > & ; eventSample). private ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:54687,Performance,tune,tuned,54687,"am & ; fout, . const TString & ; className . ); const. Recursively descends a tree and writes the node instance to the output stream. ; Definition at line 2990 of file MethodBDT.cxx. ◆ MakeClassSpecific(). void TMVA::MethodBDT::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. virtual . Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ; Reimplemented from TMVA::MethodBase.; Definition at line 2756 of file MethodBDT.cxx. ◆ MakeClassSpecificHeader(). void TMVA::MethodBDT::MakeClassSpecificHeader ; (; std::ostream & ; fout, . const TString & ; className . ); const. virtual . Specific class header. ; Reimplemented from TMVA::MethodBase.; Definition at line 2876 of file MethodBDT.cxx. ◆ OptimizeTuningParameters(). std::map< TString, Double_t > TMVA::MethodBDT::OptimizeTuningParameters ; (; TString ; fomType = ""ROCIntegral"", . TString ; fitType = ""FitGA"" . ). virtual . Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Reimplemented from TMVA::MethodBase.; Definition at line 1068 of file MethodBDT.cxx. ◆ PreProcessNegativeEventWeights(). void TMVA::MethodBDT::PreProcessNegativeEventWeights ; (; ). private . O.k. ; you know there are events with negative event weights. This routine will remove them by pairing them with the closest event(s) of the same event class with positive weights A first attempt is ""brute force"", I dont' try to be clever using search trees etc, just quick and dirty to see if the result is any good ; Definition at line 932 of file MethodBDT.cxx. ◆ PrivateGetMvaValue(). Double_t TMVA::MethodBDT::PrivateGetMvaValue ; (; const TMVA::Event * ; ev, . Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr, . UInt_t ; useNTrees = 0 . ). private . Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ; Definition at line 2467 of file MethodBDT.cxx. ◆ ProcessO",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:58297,Performance,tune,tuneParameters,58297,"◆ SetBaggedSampleFraction(). void TMVA::MethodBDT::SetBaggedSampleFraction ; (; Double_t ; f). inline . Definition at line 143 of file MethodBDT.h. ◆ SetMaxDepth(). void TMVA::MethodBDT::SetMaxDepth ; (; Int_t ; d). inline . Definition at line 134 of file MethodBDT.h. ◆ SetMinNodeSize() [1/2]. void TMVA::MethodBDT::SetMinNodeSize ; (; Double_t ; sizeInPercent). Definition at line 660 of file MethodBDT.cxx. ◆ SetMinNodeSize() [2/2]. void TMVA::MethodBDT::SetMinNodeSize ; (; TString ; sizeInPercent). Definition at line 674 of file MethodBDT.cxx. ◆ SetNodePurityLimit(). void TMVA::MethodBDT::SetNodePurityLimit ; (; Double_t ; l). inline . Definition at line 140 of file MethodBDT.h. ◆ SetNTrees(). void TMVA::MethodBDT::SetNTrees ; (; Int_t ; d). inline . Definition at line 138 of file MethodBDT.h. ◆ SetShrinkage(). void TMVA::MethodBDT::SetShrinkage ; (; Double_t ; s). inline . Definition at line 141 of file MethodBDT.h. ◆ SetTuneParameters(). void TMVA::MethodBDT::SetTuneParameters ; (; std::map< TString, Double_t > ; tuneParameters). virtual . Set the tuning parameters according to the argument. ; Reimplemented from TMVA::MethodBase.; Definition at line 1121 of file MethodBDT.cxx. ◆ SetUseNvars(). void TMVA::MethodBDT::SetUseNvars ; (; Int_t ; n). inline . Definition at line 142 of file MethodBDT.h. ◆ Streamer(). virtual void TMVA::MethodBDT::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodBDT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 305 of file MethodBDT.h. ◆ TestTreeQuality(). Double_t TMVA::MethodBDT::TestTreeQuality ; (; DecisionTree * ; dt). Test the tree quality.. in terms of Misclassification. ; Definition at line 1696 of file MethodBDT.cxx. ◆ Train(). void TMVA::MethodBDT::Train ; (; void ; ). virtual . BDT training. ; Implements TMVA::MethodBase.; Definition at line 1142 of file MethodBDT.cxx. ◆ UpdateTargets(). void TMVA::MethodBDT::UpdateTa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:62409,Performance,perform,perform,62409,_t TMVA::MethodBDT::fBoostWeight. private . ntuple var: boost weight ; Definition at line 266 of file MethodBDT.h. ◆ fBoostWeights. std::vector<double> TMVA::MethodBDT::fBoostWeights. private . the weights applied in the individual boosts ; Definition at line 213 of file MethodBDT.h. ◆ fCbb. Double_t TMVA::MethodBDT::fCbb. private . Cost factor. ; Definition at line 272 of file MethodBDT.h. ◆ fCss. Double_t TMVA::MethodBDT::fCss. private . Cost factor. ; Definition at line 269 of file MethodBDT.h. ◆ fCtb_ss. Double_t TMVA::MethodBDT::fCtb_ss. private . Cost factor. ; Definition at line 271 of file MethodBDT.h. ◆ fCts_sb. Double_t TMVA::MethodBDT::fCts_sb. private . Cost factor. ; Definition at line 270 of file MethodBDT.h. ◆ fDoBoostMonitor. Bool_t TMVA::MethodBDT::fDoBoostMonitor. private . create control plot with ROC integral vs tree number ; Definition at line 260 of file MethodBDT.h. ◆ fDoPreselection. Bool_t TMVA::MethodBDT::fDoPreselection. private . do or do not perform automatic pre-selection of 100% eff. cuts ; Definition at line 274 of file MethodBDT.h. ◆ fErrorFraction. Double_t TMVA::MethodBDT::fErrorFraction. private . ntuple var: misclassification error fraction ; Definition at line 267 of file MethodBDT.h. ◆ fEventSample. std::vector<const TMVA::Event*> TMVA::MethodBDT::fEventSample. private . the training events ; Definition at line 206 of file MethodBDT.h. ◆ fForest. std::vector<DecisionTree*> TMVA::MethodBDT::fForest. private . the collection of decision trees ; Definition at line 212 of file MethodBDT.h. ◆ fFValidationEvents. Double_t TMVA::MethodBDT::fFValidationEvents. private . fraction of events to use for pruning ; Definition at line 247 of file MethodBDT.h. ◆ fgDebugLevel. const Int_t TMVA::MethodBDT::fgDebugLevel = 0. staticprivate . debug level determining some printout/control plots etc. ; Definition at line 302 of file MethodBDT.h. ◆ fHighBkgCut. std::vector<Double_t> TMVA::MethodBDT::fHighBkgCut. private . Definition at line 287 of fil,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:35910,Safety,predict,predicted,35910,"g ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Int_t fMinNodeEvents;  min number of events in node ;  ; Float_t fMinNodeSize;  min percentage of training events in node ;  ; TString fMinNodeSizeS;  string containing min percentage of training events in node ;  ; TTree * fMonitorNtuple;  monitoring ntuple ;  ; Int_t fNCuts;  grid used in cut applied in node splitting ;  ; TString fNegWeightTreatment;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be ad",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:47542,Safety,avoid,avoided,47542,"trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment; IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them. MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; SkipNormalization Skip normalization at initialization, to keep expectation value of BDT output according to the fraction of events . Implements TMVA::MethodBase.; Definition at line 333 of file MethodBDT.cxx. ◆ DeclFileName(). static const char * TMVA::MethodBDT::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 305 of file MethodBDT.h. ◆ DeterminePreselectionCuts(). void TMVA::MethodBDT::DeterminePreselectio",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:64840,Safety,predict,predicted,64840,"ostNegWeights. Bool_t TMVA::MethodBDT::fInverseBoostNegWeights. private . boost ev. with neg. weights with 1/boostweight rather than boostweight ; Definition at line 257 of file MethodBDT.h. ◆ fIsHighBkgCut. std::vector<Bool_t> TMVA::MethodBDT::fIsHighBkgCut. private . Definition at line 292 of file MethodBDT.h. ◆ fIsHighSigCut. std::vector<Bool_t> TMVA::MethodBDT::fIsHighSigCut. private . Definition at line 291 of file MethodBDT.h. ◆ fIsLowBkgCut. std::vector<Bool_t> TMVA::MethodBDT::fIsLowBkgCut. private . Definition at line 290 of file MethodBDT.h. ◆ fIsLowSigCut. std::vector<Bool_t> TMVA::MethodBDT::fIsLowSigCut. private . Definition at line 289 of file MethodBDT.h. ◆ fITree. Int_t TMVA::MethodBDT::fITree. private . ntuple var: ith tree ; Definition at line 265 of file MethodBDT.h. ◆ fLossFunctionEventInfo. std::map< const TMVA::Event*, LossFunctionEventInfo> TMVA::MethodBDT::fLossFunctionEventInfo. private . map event to true value, predicted value, and weight used by different loss functions for BDT regression ; Definition at line 224 of file MethodBDT.h. ◆ fLowBkgCut. std::vector<Double_t> TMVA::MethodBDT::fLowBkgCut. private . Definition at line 285 of file MethodBDT.h. ◆ fLowSigCut. std::vector<Double_t> TMVA::MethodBDT::fLowSigCut. private . Definition at line 284 of file MethodBDT.h. ◆ fMaxDepth. UInt_t TMVA::MethodBDT::fMaxDepth. private . max depth ; Definition at line 242 of file MethodBDT.h. ◆ fMinLinCorrForFisher. Double_t TMVA::MethodBDT::fMinLinCorrForFisher. private . the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ; Definition at line 237 of file MethodBDT.h. ◆ fMinNodeEvents. Int_t TMVA::MethodBDT::fMinNodeEvents. private . min number of events in node ; Definition at line 231 of file MethodBDT.h. ◆ fMinNodeSize. Float_t TMVA::MethodBDT::fMinNodeSize. private . min percentage of training events in node ; Definition at line 232 of file MethodBDT.h. ◆ fMinNodeSizeS. TString TMVA::MethodBDT",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:19548,Security,hash,hash,19548,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:34173,Security,validat,validation,34173,"tr, Double_t *errUpper=nullptr, UInt_t useNTrees=0);  Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ;  ; Double_t RegBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  A special boosting only for Regression (not implemented). ;  ; void UpdateTargets (std::vector< const TMVA::Event * > &, UInt_t cls=0);  Calculate residual for all events. ;  ; void UpdateTargetsRegression (std::vector< const TMVA::Event * > &, Bool_t first=kFALSE);  Calculate residuals for all events and update targets for next iter. ;  . Private Attributes; Double_t fAdaBoostBeta;  beta parameter for AdaBoost algorithm ;  ; TString fAdaBoostR2Loss;  loss type used in AdaBoostR2 (Linear,Quadratic or Exponential) ;  ; Bool_t fAutomatic;  use user given prune strength or automatically determined one using a validation sample ;  ; Bool_t fBaggedBoost;  turn bagging in combination with boost on/off ;  ; Bool_t fBaggedGradBoost;  turn bagging in combination with grad boost on/off ;  ; Double_t fBaggedSampleFraction;  relative size of bagged event sample to original sample size ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  ntuple var: boost weight ;  ; std::vector< double > fBoostWeights;  the weights applied in the individual boosts ;  ; Double_t fCbb;  Cost factor. ;  ; Double_t fCss;  Cost factor. ;  ; Double_t fCtb_ss;  Cost factor. ;  ; Double_t fCts_sb;  Cost factor. ;  ; Bool_t fDoBoostMonitor;  create control plot with ROC integral vs tree number ;  ; Bool_t fDoPreselection;  do or do not perform automatic pre-selection of 100% eff. cuts ;  ; Double_t fErrorFraction;  ntuple var: misclassification error fraction ;  ; std::vector< const TMVA::Event * > fEventSample;  the training events ;  ; std::vector< DecisionTree * > fForest;  the collection of decision trees ;  ; Double_t fFValidationEvents;  fraction of events to use for pruning ;  ; std::vector< Double",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:60682,Security,validat,validation,60682," next iter. ; Parameters. [in]eventSampleThe collection of events currently under training. ; [in]firstShould be true when called before the first boosting iteration has been run . Definition at line 1556 of file MethodBDT.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBDT::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . Here we could write some histograms created during the processing to the output file. ; Reimplemented from TMVA::MethodBase.; Definition at line 2627 of file MethodBDT.cxx. Member Data Documentation. ◆ fAdaBoostBeta. Double_t TMVA::MethodBDT::fAdaBoostBeta. private . beta parameter for AdaBoost algorithm ; Definition at line 216 of file MethodBDT.h. ◆ fAdaBoostR2Loss. TString TMVA::MethodBDT::fAdaBoostR2Loss. private . loss type used in AdaBoostR2 (Linear,Quadratic or Exponential) ; Definition at line 217 of file MethodBDT.h. ◆ fAutomatic. Bool_t TMVA::MethodBDT::fAutomatic. private . use user given prune strength or automatically determined one using a validation sample ; Definition at line 248 of file MethodBDT.h. ◆ fBaggedBoost. Bool_t TMVA::MethodBDT::fBaggedBoost. private . turn bagging in combination with boost on/off ; Definition at line 220 of file MethodBDT.h. ◆ fBaggedGradBoost. Bool_t TMVA::MethodBDT::fBaggedGradBoost. private . turn bagging in combination with grad boost on/off ; Definition at line 221 of file MethodBDT.h. ◆ fBaggedSampleFraction. Double_t TMVA::MethodBDT::fBaggedSampleFraction. private . relative size of bagged event sample to original sample size ; Definition at line 254 of file MethodBDT.h. ◆ fBoostType. TString TMVA::MethodBDT::fBoostType. private . string specifying the boost type ; Definition at line 215 of file MethodBDT.h. ◆ fBoostWeight. Double_t TMVA::MethodBDT::fBoostWeight. private . ntuple var: boost weight ; Definition at line 266 of file MethodBDT.h. ◆ fBoostWeights. std::vector<double> TMVA::MethodBDT::fBoostWeights. private . the weights applied in the individual boosts ; Definition a",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:2822,Testability,log,log,2822,"hey are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likel",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:3545,Testability,test,test,3545,"ne ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. Public Member Functions;  MethodBDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  The standard constructor for the ""boosted decision trees"". ;  ;  MethodBDT (DataSetInfo &theData, const TString &theWeightFile);  ; virtual ~MethodBDT (void);  Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  Write weights to XML. ;  ; Double_t Boost (std::vector< const TMVA::Event * > &, Decis",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:15752,Testability,test,testTime,15752,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16054,Testability,test,test,16054,"MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  d",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:16371,Testability,test,test,16371,"TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:29067,Testability,log,logProgress,29067,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:29307,Testability,log,logProgress,29307,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:31929,Testability,test,testSample,31929," to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Double_t AdaBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaBoost implementation. ;  ; Double_t AdaBoostR2 (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ;  ; Double_t AdaCost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ;  ; Double_t ApplyPreselectionCuts (const Event *ev);  Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ;  ; Double_t Bagging ();  Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ;  ; void BoostMonitor (Int_t iTree);  Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ;  ; void DeterminePreselectionCuts (const std::vector< const TMVA::Event * > &eventSample);  Find useful preselection cuts that will be applied before and Decision Tree training. ;  ; void GetBaggedSubSample (std::vector< const TMVA::Event * > &);  Fills fEventSample with fBaggedSampleFraction*NEvents random training events. ;  ; Double_t GetGradBoostMVA (const TMVA::Event *e, UInt_t nTrees);  Returns MVA value: -1 for background, 1 for signal. ;  ; Double_t GetMvaValue (Double_t *err, Double_t *errUpper, UInt_t useNTrees);  Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ;  ; Double_t GradBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Calculate the desired response value for each region. ;  ; Double_t GradBoostRegression (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Implementation of M_T",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:40961,Testability,test,testing,40961,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:41131,Testability,log,logger,41131,"= (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBDT.h>. Inheritance diagram for TMVA::MethodBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBDT() [1/2]. TMVA::MethodBDT::MethodBDT ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). The standard constructor for the ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:44954,Testability,test,testSample,44954,"tionCuts(). Double_t TMVA::MethodBDT::ApplyPreselectionCuts ; (; const Event * ; ev). private . Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ; . --> -1 for background +1 for Signal ; Definition at line 3132 of file MethodBDT.cxx. ◆ Bagging(). Double_t TMVA::MethodBDT::Bagging ; (; ). private . Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ; Definition at line 2139 of file MethodBDT.cxx. ◆ Boost(). Double_t TMVA::MethodBDT::Boost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ; The return value is the boosting weight. ; Definition at line 1717 of file MethodBDT.cxx. ◆ BoostMonitor(). void TMVA::MethodBDT::BoostMonitor ; (; Int_t ; iTree). private . Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ; . but using the testing events ; Definition at line 1751 of file MethodBDT.cxx. ◆ Class(). static TClass * TMVA::MethodBDT::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBDT::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBDT::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 305 of file MethodBDT.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodBDT::CreateRanking ; (; ). virtual . Compute ranking of input variables. ; Implements TMVA::MethodBase.; Definition at line 2682 of file MethodBDT.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBDT::DeclareCompatibilityOptions ; (; ). protectedvirtual . Options that are used ONLY for the READER to ensure backward compatibility. ; Reimplemented from TMVA::MethodBase.; Definition at line 454 of file MethodBD",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:45030,Testability,test,testing,45030,"ate . Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ; . --> -1 for background +1 for Signal ; Definition at line 3132 of file MethodBDT.cxx. ◆ Bagging(). Double_t TMVA::MethodBDT::Bagging ; (; ). private . Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ; Definition at line 2139 of file MethodBDT.cxx. ◆ Boost(). Double_t TMVA::MethodBDT::Boost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt, . UInt_t ; cls = 0 . ). Apply the boosting algorithm (the algorithm is selecte via the ""option"" given in the constructor. ; The return value is the boosting weight. ; Definition at line 1717 of file MethodBDT.cxx. ◆ BoostMonitor(). void TMVA::MethodBDT::BoostMonitor ; (; Int_t ; iTree). private . Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ; . but using the testing events ; Definition at line 1751 of file MethodBDT.cxx. ◆ Class(). static TClass * TMVA::MethodBDT::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBDT::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBDT::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 305 of file MethodBDT.h. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodBDT::CreateRanking ; (; ). virtual . Compute ranking of input variables. ; Implements TMVA::MethodBase.; Definition at line 2682 of file MethodBDT.cxx. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBDT::DeclareCompatibilityOptions ; (; ). protectedvirtual . Options that are used ONLY for the READER to ensure backward compatibility. ; Reimplemented from TMVA::MethodBase.; Definition at line 454 of file MethodBDT.cxx. ◆ DeclareOptions(). void TMVA::MethodBDT::DeclareOptions ; (; ). virtual . Define t",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:3150,Usability,simpl,simple,3150,"ground events from the training sample. Boosting:; The idea behind adaptive boosting (AdaBoost) is, that signal events from the training sample, that end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Gradient boosting works more like a function expansion approach, where each tree corresponds to a summand. The parameters for each summand (tree) are determined by the minimization of a error function (binomial log- likelihood for classification and Huber loss for regression). A greedy algorithm is used, which means, that only one tree is modified at a time, while the other trees stay fixed. Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it uses the bagging algorithm together and bases the determination of the best node-split during the training on a random subset of variables only which is individually chosen for each split. Analysis:; Applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 63 of file MethodBDT.h. ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:31381,Usability,simpl,simple,31381," const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Double_t AdaBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaBoost implementation. ;  ; Double_t AdaBoostR2 (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ;  ; Double_t AdaCost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ;  ; Double_t ApplyPreselectionCuts (const Event *ev);  Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ;  ; Double_t Bagging ();  Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ;  ; void BoostMonitor (Int_t iTree);  Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ;  ; void DeterminePreselectionCuts (const std::vector< const TMVA::Event * > &eventSample);  Find useful preselection cuts that will be applied before and Decision Tree training. ;  ; void GetBaggedSubSample (std::vector< const TMVA::Event * > &);  Fills fEventSample with fBaggedSampleFraction*NEvents random training events. ;  ; Double_t GetGradBoostMVA (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:37837,Usability,learn,learning,37837,"nt;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be adjusted ;  ; Bool_t fRandomisedTrees;  choose a random subset of possible cut variables at each node during training ;  ; LossFunctionBDT * fRegressionLossFunctionBDTG;  ; TString fRegressionLossFunctionBDTGS;  the option string determining the loss function for BDT regression ;  ; std::map< const TMVA::Event *, std::vector< double > > fResiduals;  individual event residuals for gradient boost ;  ; SeparationBase * fSepType;  the separation used in node splitting ;  ; TString fSepTypeS;  the separation (option string) used in node splitting ;  ; Double_t fShrinkage;  learning rate for gradient boost; ;  ; Double_t fSigToBkgFraction;  Signal to Background fraction assumed during training. ;  ; Bool_t fSkipNormalization;  true for skipping normalization at initialization of trees ;  ; std::vector< const TMVA::Event * > fSubSample;  subsample for bagged grad boost ;  ; std::vector< const TMVA::Event * > * fTrainSample;  pointer to sample actually used in training (fEventSample or fSubSample) for example ;  ; Bool_t fTrainWithNegWeights;  yes there are negative event weights and we don't ignore them ;  ; Bool_t fUseExclusiveVars;  individual variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; U",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:43267,Usability,simpl,simple,43267,"ree * ; dt . ). private . The AdaBoost implementation. ; a new training sample is generated by weighting events that are misclassified by the decision tree. The weight applied is \( w = \frac{(1-err)}{err} \) or more general: \( w = (\frac{(1-err)}{err})^\beta \) where \(err\) is the fraction of misclassified events in the tree ( <0.5 assuming demanding the that previous selection was better than random guessing) and ""beta"" being a free parameter (standard: beta = 1) that modifies the boosting. ; Definition at line 1845 of file MethodBDT.cxx. ◆ AdaBoostR2(). Double_t TMVA::MethodBDT::AdaBoostR2 ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ; Definition at line 2192 of file MethodBDT.cxx. ◆ AdaCost(). Double_t TMVA::MethodBDT::AdaCost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ; true_signal true_bkg; ----------------------------------; sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; sel_bkg | Cts_sb Cbb; and takes this into account when calculating the mis class. cost (former: error fraction): err = sum_events ( weight* y_true*y_sel * beta(event) . Definition at line 2023 of file MethodBDT.cxx. ◆ AddWeightsXMLTo(). void TMVA::MethodBDT::AddWeightsXMLTo ; (; void * ; parent); const. virtual . Write weights to XML. ; Implements TMVA::MethodBase.; Definition at line 2309 of file MethodBDT.cxx. ◆ ApplyPreselectionCuts(). Double_t TMVA::MethodBDT::ApplyPreselectionCuts ; (; const Event * ; ev). private . Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ; . --> -1 for background +1 for Signal ; Definition at line 3132 of file MethodBDT.cxx. ◆ Bagging(). Double_t TMVA::MethodB",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:47100,Usability,simpl,simply,47100,"options (their key words). ; That can be set in the option string.; know options:. nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..). Known:; AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost. AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment; IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them. MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; SkipNormali",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:68885,Usability,learn,learning,68885,"tion at line 249 of file MethodBDT.h. ◆ fRegressionLossFunctionBDTG. LossFunctionBDT* TMVA::MethodBDT::fRegressionLossFunctionBDTG. private . Definition at line 299 of file MethodBDT.h. ◆ fRegressionLossFunctionBDTGS. TString TMVA::MethodBDT::fRegressionLossFunctionBDTGS. private . the option string determining the loss function for BDT regression ; Definition at line 296 of file MethodBDT.h. ◆ fResiduals. std::map< const TMVA::Event*,std::vector<double> > TMVA::MethodBDT::fResiduals. private . individual event residuals for gradient boost ; Definition at line 226 of file MethodBDT.h. ◆ fSepType. SeparationBase* TMVA::MethodBDT::fSepType. private . the separation used in node splitting ; Definition at line 229 of file MethodBDT.h. ◆ fSepTypeS. TString TMVA::MethodBDT::fSepTypeS. private . the separation (option string) used in node splitting ; Definition at line 230 of file MethodBDT.h. ◆ fShrinkage. Double_t TMVA::MethodBDT::fShrinkage. private . learning rate for gradient boost; ; Definition at line 219 of file MethodBDT.h. ◆ fSigToBkgFraction. Double_t TMVA::MethodBDT::fSigToBkgFraction. private . Signal to Background fraction assumed during training. ; Definition at line 214 of file MethodBDT.h. ◆ fSkipNormalization. Bool_t TMVA::MethodBDT::fSkipNormalization. private . true for skipping normalization at initialization of trees ; Definition at line 276 of file MethodBDT.h. ◆ fSubSample. std::vector<const TMVA::Event*> TMVA::MethodBDT::fSubSample. private . subsample for bagged grad boost ; Definition at line 208 of file MethodBDT.h. ◆ fTrainSample. std::vector<const TMVA::Event*>* TMVA::MethodBDT::fTrainSample. private . pointer to sample actually used in training (fEventSample or fSubSample) for example ; Definition at line 209 of file MethodBDT.h. ◆ fTrainWithNegWeights. Bool_t TMVA::MethodBDT::fTrainWithNegWeights. private . yes there are negative event weights and we don't ignore them ; Definition at line 259 of file MethodBDT.h. ◆ fUseExclusiveVars. Bool_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:16618,Availability,error,error,16618,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:16707,Availability,error,error,16707,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:16862,Availability,error,error,16862,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:17159,Availability,error,error,17159,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:21243,Availability,error,error,21243,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29516,Availability,error,error,29516," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:44195,Availability,error,error,44195,"BgdMVAHist. private . Definition at line 174 of file MethodBoost.h. ◆ fBTrainSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainSigMVAHist. private . Definition at line 173 of file MethodBoost.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodBoost::fDataSetManager. private . DSMTEST. ; Definition at line 193 of file MethodBoost.h. ◆ fDetailedMonitoring. Bool_t TMVA::MethodBoost::fDetailedMonitoring. private . produce detailed monitoring histograms (boost-wise) ; Definition at line 157 of file MethodBoost.h. ◆ fHistoricBoolOption. Bool_t TMVA::MethodBoost::fHistoricBoolOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 195 of file MethodBoost.h. ◆ fHistoricOption. TString TMVA::MethodBoost::fHistoricOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 194 of file MethodBoost.h. ◆ fMethodError. Double_t TMVA::MethodBoost::fMethodError. private . estimation of the level error of the classifier ; Definition at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva values for the last trained method ; Definition at line 191 of file MethodBoost.h. ◆ fOverlap_integral. Double_t TMVA::MethodBoost::fOverlap_integral. private . Definition at line 189 of file MethodBoost.h. ◆ fRandomSeed. UInt_t TMVA::MethodBoost::fRandomSeed. private . seed for random number generator used for bagging ; Definition at line 160 of file MethodBoost.h. ◆ fROC_training. Double_t TMVA::MethodBoost::fROC_training. private . roc integral of last trained method (on training sample) ; Definition at line 185 of file Method",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:11409,Deployability,configurat,configuration,11409,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:27833,Energy Efficiency,monitor,monitoring,27833,"erridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ClearAll ();  ; void CreateMVAHistorgrams ();  ; MethodBase * CurrentMethod ();  ; UInt_t CurrentMethodIdx ();  ; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodO",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:28486,Energy Efficiency,monitor,monitoring,28486," been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detail",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29247,Energy Efficiency,monitor,monitoring,29247," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29576,Energy Efficiency,monitor,monitor,29576," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29657,Energy Efficiency,monitor,monitor,29657," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:39103,Energy Efficiency,monitor,monitoring,39103,"AnalysisType(). Bool_t TMVA::MethodBoost::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . Boost can handle classification with 2 classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at line 166 of file MethodBoost.cxx. ◆ Init(). void TMVA::MethodBoost::Init ; (; void ; ). privatevirtual . Implements TMVA::MethodBase.; Definition at line 264 of file MethodBoost.cxx. ◆ InitHistos(). void TMVA::MethodBoost::InitHistos ; (; ). private . initialisation routine ; Definition at line 271 of file MethodBoost.cxx. ◆ IsA(). virtual TClass * TMVA::MethodBoost::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodCompositeBase.; Definition at line 202 of file MethodBoost.h. ◆ MonitorBoost(). void TMVA::MethodBoost::MonitorBoost ; (; Types::EBoostStage ; stage, . UInt_t ; methodIndex = 0 . ). private . fill various monitoring histograms from information of the individual classifiers that have been boosted. ; of course.... this depends very much on the individual classifiers, and so far, only for Decision Trees, this monitoring is actually implemented ; Definition at line 1305 of file MethodBoost.cxx. ◆ PrintResults(). void TMVA::MethodBoost::PrintResults ; (; const TString & ; , . std::vector< Double_t > & ; , . const Double_t ;  . ); const. private . ◆ ProcessOptions(). void TMVA::MethodBoost::ProcessOptions ; (; ). privatevirtual . process user options ; Implements TMVA::MethodCompositeBase.; Definition at line 663 of file MethodBoost.cxx. ◆ ResetBoostWeights(). void TMVA::MethodBoost::ResetBoostWeights ; (; ). private . resetting back the boosted weights of the events to 1 ; Definition at line 569 of file MethodBoost.cxx. ◆ SetBoostedMethodName(). void TMVA::MethodBoost::SetBoostedMethodName ; (; TString ; methodName). inline . Definition at line 86 of file MethodBoost.h. ◆ SingleBoost(). Double_t TMVA::MethodBoost::SingleBoost ; (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:39308,Energy Efficiency,monitor,monitoring,39308,"dle classification with 2 classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at line 166 of file MethodBoost.cxx. ◆ Init(). void TMVA::MethodBoost::Init ; (; void ; ). privatevirtual . Implements TMVA::MethodBase.; Definition at line 264 of file MethodBoost.cxx. ◆ InitHistos(). void TMVA::MethodBoost::InitHistos ; (; ). private . initialisation routine ; Definition at line 271 of file MethodBoost.cxx. ◆ IsA(). virtual TClass * TMVA::MethodBoost::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodCompositeBase.; Definition at line 202 of file MethodBoost.h. ◆ MonitorBoost(). void TMVA::MethodBoost::MonitorBoost ; (; Types::EBoostStage ; stage, . UInt_t ; methodIndex = 0 . ). private . fill various monitoring histograms from information of the individual classifiers that have been boosted. ; of course.... this depends very much on the individual classifiers, and so far, only for Decision Trees, this monitoring is actually implemented ; Definition at line 1305 of file MethodBoost.cxx. ◆ PrintResults(). void TMVA::MethodBoost::PrintResults ; (; const TString & ; , . std::vector< Double_t > & ; , . const Double_t ;  . ); const. private . ◆ ProcessOptions(). void TMVA::MethodBoost::ProcessOptions ; (; ). privatevirtual . process user options ; Implements TMVA::MethodCompositeBase.; Definition at line 663 of file MethodBoost.cxx. ◆ ResetBoostWeights(). void TMVA::MethodBoost::ResetBoostWeights ; (; ). private . resetting back the boosted weights of the events to 1 ; Definition at line 569 of file MethodBoost.cxx. ◆ SetBoostedMethodName(). void TMVA::MethodBoost::SetBoostedMethodName ; (; TString ; methodName). inline . Definition at line 86 of file MethodBoost.h. ◆ SingleBoost(). Double_t TMVA::MethodBoost::SingleBoost ; (; MethodBase * ; method). private . Definition at line 850 of file MethodBoost.cxx. ◆ SingleTrain(). void TMVA::MethodBoost::SingleTrain ; (; ). private . ini",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:41414,Energy Efficiency,monitor,monitoring,41414,"from TMVA::MethodCompositeBase. ◆ StreamerNVirtual(). void TMVA::MethodBoost::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file MethodBoost.h. ◆ TestClassification(). void TMVA::MethodBoost::TestClassification ; (; ). privatevirtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 609 of file MethodBoost.cxx. ◆ Train(). void TMVA::MethodBoost::Train ; (; void ; ). virtual . Implements TMVA::MethodCompositeBase.; Definition at line 351 of file MethodBoost.cxx. ◆ WriteEvaluationHistosToFile(). void TMVA::MethodBoost::WriteEvaluationHistosToFile ; (; Types::ETreeType ; treetype). privatevirtual . writes all MVA evaluation histograms to file ; Reimplemented from TMVA::MethodBase.; Definition at line 637 of file MethodBoost.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBoost::WriteMonitoringHistosToFile ; (; void ; ); const. privatevirtual . write special monitoring histograms to file dummy implementation here --------------— ; Reimplemented from TMVA::MethodBase.; Definition at line 579 of file MethodBoost.cxx. Friends And Related Symbol Documentation. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 61 of file MethodBoost.h. ◆ Factory. friend class Factory. friend . Definition at line 59 of file MethodBoost.h. ◆ Reader. friend class Reader. friend . Definition at line 60 of file MethodBoost.h. Member Data Documentation. ◆ fAdaBoostBeta. Double_t TMVA::MethodBoost::fAdaBoostBeta. private . ADA boost parameter, default is 1. ; Definition at line 159 of file MethodBoost.h. ◆ fBaggedSampleFraction. Double_t TMVA::MethodBoost::fBaggedSampleFraction. private . rel.Size of bagged sample ; Definition at line 161 of file MethodBoost.h. ◆ fBoostedMethodName. TString TMVA::MethodBoost::fBoostedMethodName. private . details of the boosted classifier ; Definition at line 163 of file MethodBoost.h. ◆ fBoostedMethodOptions. TString TMVA::Metho",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:43655,Energy Efficiency,monitor,monitoring,43655,"oost.h. ◆ fBoostNum. UInt_t TMVA::MethodBoost::fBoostNum. private . Number of times the classifier is boosted. ; Definition at line 153 of file MethodBoost.h. ◆ fBoostType. TString TMVA::MethodBoost::fBoostType. private . string specifying the boost type ; Definition at line 154 of file MethodBoost.h. ◆ fBoostWeight. Double_t TMVA::MethodBoost::fBoostWeight. private . the weight used to boost the next classifier ; Definition at line 182 of file MethodBoost.h. ◆ fBTrainBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainBgdMVAHist. private . Definition at line 174 of file MethodBoost.h. ◆ fBTrainSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainSigMVAHist. private . Definition at line 173 of file MethodBoost.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodBoost::fDataSetManager. private . DSMTEST. ; Definition at line 193 of file MethodBoost.h. ◆ fDetailedMonitoring. Bool_t TMVA::MethodBoost::fDetailedMonitoring. private . produce detailed monitoring histograms (boost-wise) ; Definition at line 157 of file MethodBoost.h. ◆ fHistoricBoolOption. Bool_t TMVA::MethodBoost::fHistoricBoolOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 195 of file MethodBoost.h. ◆ fHistoricOption. TString TMVA::MethodBoost::fHistoricOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 194 of file MethodBoost.h. ◆ fMethodError. Double_t TMVA::MethodBoost::fMethodError. private . estimation of the level error of the classifier ; Definition at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva valu",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:44351,Energy Efficiency,monitor,monitor,44351,"3 of file MethodBoost.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodBoost::fDataSetManager. private . DSMTEST. ; Definition at line 193 of file MethodBoost.h. ◆ fDetailedMonitoring. Bool_t TMVA::MethodBoost::fDetailedMonitoring. private . produce detailed monitoring histograms (boost-wise) ; Definition at line 157 of file MethodBoost.h. ◆ fHistoricBoolOption. Bool_t TMVA::MethodBoost::fHistoricBoolOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 195 of file MethodBoost.h. ◆ fHistoricOption. TString TMVA::MethodBoost::fHistoricOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 194 of file MethodBoost.h. ◆ fMethodError. Double_t TMVA::MethodBoost::fMethodError. private . estimation of the level error of the classifier ; Definition at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva values for the last trained method ; Definition at line 191 of file MethodBoost.h. ◆ fOverlap_integral. Double_t TMVA::MethodBoost::fOverlap_integral. private . Definition at line 189 of file MethodBoost.h. ◆ fRandomSeed. UInt_t TMVA::MethodBoost::fRandomSeed. private . seed for random number generator used for bagging ; Definition at line 160 of file MethodBoost.h. ◆ fROC_training. Double_t TMVA::MethodBoost::fROC_training. private . roc integral of last trained method (on training sample) ; Definition at line 185 of file MethodBoost.h. ◆ fTestBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTestBgdMVAHist. private . Definition at line 178 of file MethodBoost.h. ◆ fTestSigMVAHist. std::vector< TH1* > ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:44518,Energy Efficiency,monitor,monitor,44518,"t.h. ◆ fDetailedMonitoring. Bool_t TMVA::MethodBoost::fDetailedMonitoring. private . produce detailed monitoring histograms (boost-wise) ; Definition at line 157 of file MethodBoost.h. ◆ fHistoricBoolOption. Bool_t TMVA::MethodBoost::fHistoricBoolOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 195 of file MethodBoost.h. ◆ fHistoricOption. TString TMVA::MethodBoost::fHistoricOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 194 of file MethodBoost.h. ◆ fMethodError. Double_t TMVA::MethodBoost::fMethodError. private . estimation of the level error of the classifier ; Definition at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva values for the last trained method ; Definition at line 191 of file MethodBoost.h. ◆ fOverlap_integral. Double_t TMVA::MethodBoost::fOverlap_integral. private . Definition at line 189 of file MethodBoost.h. ◆ fRandomSeed. UInt_t TMVA::MethodBoost::fRandomSeed. private . seed for random number generator used for bagging ; Definition at line 160 of file MethodBoost.h. ◆ fROC_training. Double_t TMVA::MethodBoost::fROC_training. private . roc integral of last trained method (on training sample) ; Definition at line 185 of file MethodBoost.h. ◆ fTestBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTestBgdMVAHist. private . Definition at line 178 of file MethodBoost.h. ◆ fTestSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTestSigMVAHist. private . Definition at line 176 of file MethodBoost.h. ◆ fTrainBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fTrainB",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:16624,Integrability,message,message,16624,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:17165,Integrability,message,message,17165,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:18155,Integrability,message,message,18155,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:21249,Integrability,message,message,21249,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:21622,Integrability,message,message,21622," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClas",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:23775,Integrability,message,message,23775,"me ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void GetHelpMessage () const;  Get help message text. ;  ;  Protected Member Functions inherited from TMVA::MethodCompositeBase; MethodBase * GetCurrentMethod ();  ; MethodBase * GetCurrentMethod (UInt_t idx);  ; UInt_t GetCurrentMethodIndex ();  ; IMethod * GetLastMethod ();  ; IMethod * GetMethod (const Int_t index) const;  accessor by index in vector ;  ; IMethod * GetMethod (const TString &title) const;  accessor by name ;  ; IMethod * GetPreviousMethod ();  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarN",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:27740,Integrability,rout,routine,27740,"erridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ClearAll ();  ; void CreateMVAHistorgrams ();  ; MethodBase * CurrentMethod ();  ; UInt_t CurrentMethodIdx ();  ; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodO",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:32349,Integrability,message,message,32349,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:37699,Integrability,message,message,37699," ). inline . Definition at line 88 of file MethodBoost.h. ◆ GetBoostROCIntegral(). Double_t TMVA::MethodBoost::GetBoostROCIntegral ; (; Bool_t ; singleMethod, . Types::ETreeType ; eTT, . Bool_t ; CalcOverlapIntergral = kFALSE . ). private . Calculate the ROC integral of a single classifier or even the whole boosted classifier. ; The tree type (training or testing sample) is specified by 'eTT'.; If tree type kTraining is set, the original training sample is used to compute the ROC integral (original weights). singleMethod - if kTRUE, return ROC integral of single (last trained) classifier; if kFALSE, return ROC integral of full classifier; eTT - tree type (Types::kTraining / Types::kTesting); CalcOverlapIntergral - if kTRUE, the overlap integral of the signal/background MVA distributions is calculated and stored in 'fOverlap_integral' . Definition at line 1156 of file MethodBoost.cxx. ◆ GetHelpMessage(). void TMVA::MethodBoost::GetHelpMessage ; (; ); const. protectedvirtual . Get help message text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 1049 of file MethodBoost.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodBoost::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . return boosted MVA response ; Implements TMVA::MethodBase.; Definition at line 1095 of file MethodBoost.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodBoost::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . Boost can handle classification with 2 classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at line 166 of file MethodBoost.cxx. ◆ Init(). void TMVA::MethodBoost::Init ; (; void ; ). privatevirtual . Implements TMVA::MethodBase.; Definition at line 264 of file MethodBoost.cxx. ◆ InitHistos(). void TMVA::MethodBoost::InitHistos ; (; ). private . initialisation routine ; Defi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:38687,Integrability,rout,routine,38687,"e text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 1049 of file MethodBoost.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodBoost::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . return boosted MVA response ; Implements TMVA::MethodBase.; Definition at line 1095 of file MethodBoost.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodBoost::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . Boost can handle classification with 2 classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at line 166 of file MethodBoost.cxx. ◆ Init(). void TMVA::MethodBoost::Init ; (; void ; ). privatevirtual . Implements TMVA::MethodBase.; Definition at line 264 of file MethodBoost.cxx. ◆ InitHistos(). void TMVA::MethodBoost::InitHistos ; (; ). private . initialisation routine ; Definition at line 271 of file MethodBoost.cxx. ◆ IsA(). virtual TClass * TMVA::MethodBoost::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodCompositeBase.; Definition at line 202 of file MethodBoost.h. ◆ MonitorBoost(). void TMVA::MethodBoost::MonitorBoost ; (; Types::EBoostStage ; stage, . UInt_t ; methodIndex = 0 . ). private . fill various monitoring histograms from information of the individual classifiers that have been boosted. ; of course.... this depends very much on the individual classifiers, and so far, only for Decision Trees, this monitoring is actually implemented ; Definition at line 1305 of file MethodBoost.cxx. ◆ PrintResults(). void TMVA::MethodBoost::PrintResults ; (; const TString & ; , . std::vector< Double_t > & ; , . const Double_t ;  . ); const. private . ◆ ProcessOptions(). void TMVA::MethodBoost::ProcessOptions ; (; ). privatevirtual . process user options ; Implements TMVA::MethodCompositeBase.; Definition a",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:39217,Integrability,depend,depends,39217,"dle classification with 2 classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at line 166 of file MethodBoost.cxx. ◆ Init(). void TMVA::MethodBoost::Init ; (; void ; ). privatevirtual . Implements TMVA::MethodBase.; Definition at line 264 of file MethodBoost.cxx. ◆ InitHistos(). void TMVA::MethodBoost::InitHistos ; (; ). private . initialisation routine ; Definition at line 271 of file MethodBoost.cxx. ◆ IsA(). virtual TClass * TMVA::MethodBoost::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodCompositeBase.; Definition at line 202 of file MethodBoost.h. ◆ MonitorBoost(). void TMVA::MethodBoost::MonitorBoost ; (; Types::EBoostStage ; stage, . UInt_t ; methodIndex = 0 . ). private . fill various monitoring histograms from information of the individual classifiers that have been boosted. ; of course.... this depends very much on the individual classifiers, and so far, only for Decision Trees, this monitoring is actually implemented ; Definition at line 1305 of file MethodBoost.cxx. ◆ PrintResults(). void TMVA::MethodBoost::PrintResults ; (; const TString & ; , . std::vector< Double_t > & ; , . const Double_t ;  . ); const. private . ◆ ProcessOptions(). void TMVA::MethodBoost::ProcessOptions ; (; ). privatevirtual . process user options ; Implements TMVA::MethodCompositeBase.; Definition at line 663 of file MethodBoost.cxx. ◆ ResetBoostWeights(). void TMVA::MethodBoost::ResetBoostWeights ; (; ). private . resetting back the boosted weights of the events to 1 ; Definition at line 569 of file MethodBoost.cxx. ◆ SetBoostedMethodName(). void TMVA::MethodBoost::SetBoostedMethodName ; (; TString ; methodName). inline . Definition at line 86 of file MethodBoost.h. ◆ SingleBoost(). Double_t TMVA::MethodBoost::SingleBoost ; (; MethodBase * ; method). private . Definition at line 850 of file MethodBoost.cxx. ◆ SingleTrain(). void TMVA::MethodBoost::SingleTrain ; (; ). private . ini",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:1710,Modifiability,inherit,inherited,1710," classifier will be created ;  ; void CleanBoostOptions ();  ; const Ranking * CreateRanking ();  ; Int_t GetBoostNum ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return boosted MVA response ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  Boost can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void SetBoostedMethodName (TString methodName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~MethodCompositeBase (void);  delete methods ;  ; void AddWeightsXMLTo (void *parent) const;  ; Double_t GetMvaValue (const TMVA::Event *const ev, Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return composite MVA response ;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  text streamer ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  XML streamer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Appli",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:2740,Modifiability,inherit,inherited,2740,"uble_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return composite MVA response ;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  text streamer ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  XML streamer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetAnalysisType () const;  ; UInt_t GetCurrentIter ();  ; virtual Double_t GetEfficiency (const TString &, Types::ETreeType, Double_t &err);  fill background efficiency (resp. ;  ; const Event * GetEvent () const;  ; const Event * GetEvent (const TMVA::Event *ev) const;  ; const Event * GetEvent (Long64_t ievt) const;  ; const Event * GetEvent (Long64_t ievt, Types::ETreeType type) const;  ; const std::vector< TMVA::Event * > & GetEventCollection (Types::ETreeType type);  returns the event collection (i.e. ;  ; TFile * GetFile () const;  ; const TString & GetInputLabel (Int_t i) const;  ; const char ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:11409,Modifiability,config,configuration,11409,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:11512,Modifiability,inherit,inherited,11512,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:11672,Modifiability,inherit,inherited,11672,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:13421,Modifiability,inherit,inherited,13421,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:15161,Modifiability,inherit,inherited,15161,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:16254,Modifiability,inherit,inheritance,16254,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:18253,Modifiability,inherit,inherits,18253,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:18370,Modifiability,inherit,inherits,18370,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:22123,Modifiability,inherit,inherited,22123," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:22352,Modifiability,inherit,inherited,22352," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:22572,Modifiability,inherit,inherited,22572," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:22789,Modifiability,inherit,inherited,22789," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:23011,Modifiability,inherit,inherited,23011," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:23221,Modifiability,inherit,inherited,23221," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:23822,Modifiability,inherit,inherited,23822,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:24232,Modifiability,inherit,inherited,24232,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:25632,Modifiability,variab,variable,25632,"ues for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:25673,Modifiability,variab,variables,25673,"ues for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:25713,Modifiability,variab,variables,25713,"ues for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:25867,Modifiability,inherit,inherited,25867,"ues for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:26274,Modifiability,inherit,inherited,26274,"ues for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29325,Modifiability,variab,variable,29325," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:29414,Modifiability,variab,variable,29414," ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detailed monitoring histograms (boost-wise) ;  ; Bool_t fHistoricBoolOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; TString fHistoricOption;  historic variable, only needed for ""CompatibilityOptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:30345,Modifiability,inherit,inherited,30345,"ptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:30441,Modifiability,inherit,inherited,30441,"ptions"" ;  ; Double_t fMethodError;  estimation of the level error of the classifier ;  ; Bool_t fMonitorBoostedMethod;  monitor the MVA response of every classifier ;  ; TTree * fMonitorTree;  tree to monitor values during the boosting ;  ; std::vector< Float_t > * fMVAvalues;  mva values for the last trained method ;  ; Double_t fOverlap_integral;  ; UInt_t fRandomSeed;  seed for random number generator used for bagging ;  ; Double_t fROC_training;  roc integral of last trained method (on training sample) ;  ; std::vector< TH1 * > fTestBgdMVAHist;  ; std::vector< TH1 * > fTestSigMVAHist;  ; std::vector< TH1 * > fTrainBgdMVAHist;  ; std::vector< TH1 * > fTrainSigMVAHist;  ; TString fTransformString;  min and max values for the classifier response ;  . Friends; class Experimental::Classification;  ; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:31084,Modifiability,inherit,inherited,31084,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:31195,Modifiability,inherit,inherited,31195,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:31288,Modifiability,inherit,inherited,31288,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:31522,Modifiability,inherit,inherited,31522,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:32290,Modifiability,inherit,inherited,32290,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:32391,Modifiability,inherit,inherited,32391,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:43827,Modifiability,variab,variable,43827,"VA::MethodBoost::fBoostType. private . string specifying the boost type ; Definition at line 154 of file MethodBoost.h. ◆ fBoostWeight. Double_t TMVA::MethodBoost::fBoostWeight. private . the weight used to boost the next classifier ; Definition at line 182 of file MethodBoost.h. ◆ fBTrainBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainBgdMVAHist. private . Definition at line 174 of file MethodBoost.h. ◆ fBTrainSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainSigMVAHist. private . Definition at line 173 of file MethodBoost.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodBoost::fDataSetManager. private . DSMTEST. ; Definition at line 193 of file MethodBoost.h. ◆ fDetailedMonitoring. Bool_t TMVA::MethodBoost::fDetailedMonitoring. private . produce detailed monitoring histograms (boost-wise) ; Definition at line 157 of file MethodBoost.h. ◆ fHistoricBoolOption. Bool_t TMVA::MethodBoost::fHistoricBoolOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 195 of file MethodBoost.h. ◆ fHistoricOption. TString TMVA::MethodBoost::fHistoricOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 194 of file MethodBoost.h. ◆ fMethodError. Double_t TMVA::MethodBoost::fMethodError. private . estimation of the level error of the classifier ; Definition at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva values for the last trained method ; Definition at line 191 of file MethodBoost.h. ◆ fOverlap_integral. Double_t TMVA::MethodBoost::fOverlap_integral. private . Definition at line 189 of ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:44006,Modifiability,variab,variable,44006,"rivate . the weight used to boost the next classifier ; Definition at line 182 of file MethodBoost.h. ◆ fBTrainBgdMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainBgdMVAHist. private . Definition at line 174 of file MethodBoost.h. ◆ fBTrainSigMVAHist. std::vector< TH1* > TMVA::MethodBoost::fBTrainSigMVAHist. private . Definition at line 173 of file MethodBoost.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodBoost::fDataSetManager. private . DSMTEST. ; Definition at line 193 of file MethodBoost.h. ◆ fDetailedMonitoring. Bool_t TMVA::MethodBoost::fDetailedMonitoring. private . produce detailed monitoring histograms (boost-wise) ; Definition at line 157 of file MethodBoost.h. ◆ fHistoricBoolOption. Bool_t TMVA::MethodBoost::fHistoricBoolOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 195 of file MethodBoost.h. ◆ fHistoricOption. TString TMVA::MethodBoost::fHistoricOption. private . historic variable, only needed for ""CompatibilityOptions"" ; Definition at line 194 of file MethodBoost.h. ◆ fMethodError. Double_t TMVA::MethodBoost::fMethodError. private . estimation of the level error of the classifier ; Definition at line 183 of file MethodBoost.h. ◆ fMonitorBoostedMethod. Bool_t TMVA::MethodBoost::fMonitorBoostedMethod. private . monitor the MVA response of every classifier ; Definition at line 167 of file MethodBoost.h. ◆ fMonitorTree. TTree* TMVA::MethodBoost::fMonitorTree. private . tree to monitor values during the boosting ; Definition at line 181 of file MethodBoost.h. ◆ fMVAvalues. std::vector<Float_t>* TMVA::MethodBoost::fMVAvalues. private . mva values for the last trained method ; Definition at line 191 of file MethodBoost.h. ◆ fOverlap_integral. Double_t TMVA::MethodBoost::fOverlap_integral. private . Definition at line 189 of file MethodBoost.h. ◆ fRandomSeed. UInt_t TMVA::MethodBoost::fRandomSeed. private . seed for random number generator used for bagging ; Definition at line 160 of file MethodBoost.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:587,Performance,perform,performed,587,". ROOT: TMVA::MethodBoost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBoost Class ReferenceTMVA. ; Class for boosting a TMVA method. ; This class is meant to boost a single classifier. Boosting means training the classifier a few times. Every time the weights of the events are modified according to how well the classifier performed on the test sample. ; Definition at line 58 of file MethodBoost.h. Public Member Functions;  MethodBoost (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodBoost (DataSetInfo &dsi, const TString &theWeightFile);  ; virtual ~MethodBoost (void);  destructor ;  ; Bool_t BookMethod (Types::EMVA theMethod, TString methodTitle, TString theOption);  just registering the string from which the boosted classifier will be created ;  ; void CleanBoostOptions ();  ; const Ranking * CreateRanking ();  ; Int_t GetBoostNum ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return boosted MVA response ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  Boost can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void SetBoostedMethodName (TString methodName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; v",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:9209,Performance,tune,tuned,9209,"tTrainingEfficiency (const TString &);  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; void InitIPythonInteractive ();  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:10676,Performance,tune,tuneParameters,10676,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:14289,Security,hash,hash,14289,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:24063,Security,access,accessor,24063,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:24147,Security,access,accessor,24147,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:604,Testability,test,test,604,". ROOT: TMVA::MethodBoost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBoost Class ReferenceTMVA. ; Class for boosting a TMVA method. ; This class is meant to boost a single classifier. Boosting means training the classifier a few times. Every time the weights of the events are modified according to how well the classifier performed on the test sample. ; Definition at line 58 of file MethodBoost.h. Public Member Functions;  MethodBoost (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodBoost (DataSetInfo &dsi, const TString &theWeightFile);  ; virtual ~MethodBoost (void);  destructor ;  ; Bool_t BookMethod (Types::EMVA theMethod, TString methodTitle, TString theOption);  just registering the string from which the boosted classifier will be created ;  ; void CleanBoostOptions ();  ; const Ranking * CreateRanking ();  ; Int_t GetBoostNum ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return boosted MVA response ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  Boost can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void SetBoostedMethodName (TString methodName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; v",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:10511,Testability,test,testTime,10511,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:10916,Testability,test,test,10916,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:11233,Testability,test,test,11233,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:24387,Testability,log,logProgress,24387,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:24627,Testability,log,logProgress,24627,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:32187,Testability,test,testing,32187,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:32357,Testability,log,logger,32357,"s { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MethodBoost.h>. Inheritance diagram for TMVA::MethodBoost:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodBoost() [1/2]. TMVA::MethodBoost::MethodBoost ; (; const TString & ; jobName, . cons",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:37058,Testability,test,testing,37058,"Options ; (; ). privatevirtual . Implements TMVA::MethodCompositeBase.; Definition at line 176 of file MethodBoost.cxx. ◆ DeclFileName(). static const char * TMVA::MethodBoost::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 202 of file MethodBoost.h. ◆ FindMVACut(). void TMVA::MethodBoost::FindMVACut ; (; MethodBase * ; method). private . find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ; Definition at line 690 of file MethodBoost.cxx. ◆ GetBoostNum(). Int_t TMVA::MethodBoost::GetBoostNum ; (; ). inline . Definition at line 88 of file MethodBoost.h. ◆ GetBoostROCIntegral(). Double_t TMVA::MethodBoost::GetBoostROCIntegral ; (; Bool_t ; singleMethod, . Types::ETreeType ; eTT, . Bool_t ; CalcOverlapIntergral = kFALSE . ). private . Calculate the ROC integral of a single classifier or even the whole boosted classifier. ; The tree type (training or testing sample) is specified by 'eTT'.; If tree type kTraining is set, the original training sample is used to compute the ROC integral (original weights). singleMethod - if kTRUE, return ROC integral of single (last trained) classifier; if kFALSE, return ROC integral of full classifier; eTT - tree type (Types::kTraining / Types::kTesting); CalcOverlapIntergral - if kTRUE, the overlap integral of the signal/background MVA distributions is calculated and stored in 'fOverlap_integral' . Definition at line 1156 of file MethodBoost.cxx. ◆ GetHelpMessage(). void TMVA::MethodBoost::GetHelpMessage ; (; ); const. protectedvirtual . Get help message text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 1049 of file MethodBoost.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodBoost::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . return boosted MVA response ; Impl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodBoost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:16629,Availability,error,error,16629,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:16718,Availability,error,error,16718,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:16873,Availability,error,error,16873,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:17170,Availability,error,error,17170,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:21254,Availability,error,error,21254,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void GetHelpMessage () const;  ;  Protected Member Functions inherited from TMVA::RMethodBase; void LoadData ();  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:11420,Deployability,configurat,configuration,11420,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:11234,Energy Efficiency,monitor,monitoring,11234,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:16635,Integrability,message,message,16635,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:17176,Integrability,message,message,17176,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:18166,Integrability,message,message,18166,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:21260,Integrability,message,message,21260,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void GetHelpMessage () const;  ;  Protected Member Functions inherited from TMVA::RMethodBase; void LoadData ();  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:21633,Integrability,message,message,21633," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void GetHelpMessage () const;  ;  Protected Member Functions inherited from TMVA::RMethodBase; void LoadData ();  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstru",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:25933,Integrability,message,message,25933,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:1623,Modifiability,inherit,inherited,1623," void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ; virtual ~RMethodBase ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddO",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:2193,Modifiability,inherit,inherited,2193,"ader class for method (classification only at present) ;  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ; virtual ~RMethodBase ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are henc",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:11420,Modifiability,config,configuration,11420,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:11523,Modifiability,inherit,inherited,11523,"tupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:11683,Modifiability,inherit,inherited,11683,"ation ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:13432,Modifiability,inherit,inherited,13432,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:15172,Modifiability,inherit,inherited,15172,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:16265,Modifiability,inherit,inheritance,16265,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:18264,Modifiability,inherit,inherits,18264,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:18381,Modifiability,inherit,inherits,18381,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:22004,Modifiability,inherit,inherited,22004,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:22087,Modifiability,inherit,inherited,22087,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:23303,Modifiability,variab,variable,23303,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:23344,Modifiability,variab,variables,23344,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:23384,Modifiability,variab,variables,23384,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:23538,Modifiability,inherit,inherited,23538,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:23945,Modifiability,inherit,inherited,23945,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:24777,Modifiability,inherit,inherited,24777,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:25106,Modifiability,inherit,inherited,25106,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:25874,Modifiability,inherit,inherited,25874,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:25975,Modifiability,inherit,inherited,25975,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:26292,Modifiability,inherit,inherited,26292,"ategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""C50"");  . Private Attributes; DataSetManager * fDataSetManager;  . Friends; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:26388,Modifiability,inherit,inherited,26388,"ategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""C50"");  . Private Attributes; DataSetManager * fDataSetManager;  . Friends; class Factory;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:27044,Modifiability,inherit,inherited,27044,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:27265,Modifiability,inherit,inherited,27265,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:27485,Modifiability,inherit,inherited,27485,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:27702,Modifiability,inherit,inherited,27702,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:27924,Modifiability,inherit,inherited,27924,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:28134,Modifiability,inherit,inherited,28134,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TMVA::RMethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompl",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:28639,Modifiability,inherit,inherited,28639,"TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodC50.h>. Inheritance diagram for TMVA::MethodC50:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodC50() [1/2]. MethodC50::MethodC50 ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). Definition at line 50 of file MethodC50.cxx. ◆ MethodC50() [2/2]. MethodC50::MethodC50 ; (; DataSetInfo & ; dsi, . const TString & ; theWeightFile . ). Definition at line 82 of file MethodC50.cxx. ◆ ~MethodC50(). MethodC50::~MethodC50 ; (; void ; ). Definition at line 109 of file MethodC50.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). virtual void TMVA::MethodC50::AddWeightsXMLTo ; (; void * ; ); const. inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 70 of file MethodC50.h. ◆ Creat",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:28750,Modifiability,inherit,inherited,28750,"TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodC50.h>. Inheritance diagram for TMVA::MethodC50:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodC50() [1/2]. MethodC50::MethodC50 ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). Definition at line 50 of file MethodC50.cxx. ◆ MethodC50() [2/2]. MethodC50::MethodC50 ; (; DataSetInfo & ; dsi, . const TString & ; theWeightFile . ). Definition at line 82 of file MethodC50.cxx. ◆ ~MethodC50(). MethodC50::~MethodC50 ; (; void ; ). Definition at line 109 of file MethodC50.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). virtual void TMVA::MethodC50::AddWeightsXMLTo ; (; void * ; ); const. inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 70 of file MethodC50.h. ◆ Creat",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:8956,Performance,tune,tuned,8956,"t * GetTestingEvent (Long64_t ievt) const;  ; Double_t GetTestTime () const;  ; const TString & GetTestvarName () const;  ; virtual Double_t GetTrainingEfficiency (const TString &);  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; void InitIPythonInteractive ();  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:10423,Performance,tune,tuneParameters,10423,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:24743,Safety,predict,predict,24743,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:35374,Safety,predict,predict,35374,"cted . Definition at line 93 of file MethodC50.h. ◆ fControlNoGlobalPruning. Bool_t TMVA::MethodC50::fControlNoGlobalPruning. protected . Definition at line 91 of file MethodC50.h. ◆ fControlSample. Double_t TMVA::MethodC50::fControlSample. protected . Definition at line 95 of file MethodC50.h. ◆ fControlSeed. Int_t TMVA::MethodC50::fControlSeed. protected . Definition at line 96 of file MethodC50.h. ◆ fControlSubset. Bool_t TMVA::MethodC50::fControlSubset. protected . Definition at line 88 of file MethodC50.h. ◆ fControlWinnow. Bool_t TMVA::MethodC50::fControlWinnow. protected . Definition at line 90 of file MethodC50.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodC50::fDataSetManager. private . Definition at line 79 of file MethodC50.h. ◆ fModel. ROOT::R::TRObject* TMVA::MethodC50::fModel. protected . Definition at line 106 of file MethodC50.h. ◆ fModelControl. ROOT::R::TRObject TMVA::MethodC50::fModelControl. protected . Definition at line 107 of file MethodC50.h. ◆ fMvaCounter. UInt_t TMVA::MethodC50::fMvaCounter. protected . Definition at line 99 of file MethodC50.h. ◆ fNTrials. UInt_t TMVA::MethodC50::fNTrials. protected . Definition at line 84 of file MethodC50.h. ◆ fRules. Bool_t TMVA::MethodC50::fRules. protected . Definition at line 85 of file MethodC50.h. ◆ IsModuleLoaded. Bool_t MethodC50::IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""C50""). staticprotected . Definition at line 100 of file MethodC50.h. ◆ ListOfVariables. std::vector<TString > TMVA::MethodC50::ListOfVariables. protected . Definition at line 108 of file MethodC50.h. ◆ predict. ROOT::R::TRFunctionImport TMVA::MethodC50::predict. protected . Definition at line 102 of file MethodC50.h. Libraries for TMVA::MethodC50:. [legend]; The documentation for this class was generated from the following files:; tmva/rmva/inc/TMVA/MethodC50.h; tmva/rmva/src/MethodC50.cxx. TMVAMethodC50. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:35426,Safety,predict,predict,35426,"cted . Definition at line 93 of file MethodC50.h. ◆ fControlNoGlobalPruning. Bool_t TMVA::MethodC50::fControlNoGlobalPruning. protected . Definition at line 91 of file MethodC50.h. ◆ fControlSample. Double_t TMVA::MethodC50::fControlSample. protected . Definition at line 95 of file MethodC50.h. ◆ fControlSeed. Int_t TMVA::MethodC50::fControlSeed. protected . Definition at line 96 of file MethodC50.h. ◆ fControlSubset. Bool_t TMVA::MethodC50::fControlSubset. protected . Definition at line 88 of file MethodC50.h. ◆ fControlWinnow. Bool_t TMVA::MethodC50::fControlWinnow. protected . Definition at line 90 of file MethodC50.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodC50::fDataSetManager. private . Definition at line 79 of file MethodC50.h. ◆ fModel. ROOT::R::TRObject* TMVA::MethodC50::fModel. protected . Definition at line 106 of file MethodC50.h. ◆ fModelControl. ROOT::R::TRObject TMVA::MethodC50::fModelControl. protected . Definition at line 107 of file MethodC50.h. ◆ fMvaCounter. UInt_t TMVA::MethodC50::fMvaCounter. protected . Definition at line 99 of file MethodC50.h. ◆ fNTrials. UInt_t TMVA::MethodC50::fNTrials. protected . Definition at line 84 of file MethodC50.h. ◆ fRules. Bool_t TMVA::MethodC50::fRules. protected . Definition at line 85 of file MethodC50.h. ◆ IsModuleLoaded. Bool_t MethodC50::IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""C50""). staticprotected . Definition at line 100 of file MethodC50.h. ◆ ListOfVariables. std::vector<TString > TMVA::MethodC50::ListOfVariables. protected . Definition at line 108 of file MethodC50.h. ◆ predict. ROOT::R::TRFunctionImport TMVA::MethodC50::predict. protected . Definition at line 102 of file MethodC50.h. Libraries for TMVA::MethodC50:. [legend]; The documentation for this class was generated from the following files:; tmva/rmva/inc/TMVA/MethodC50.h; tmva/rmva/src/MethodC50.cxx. TMVAMethodC50. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:14300,Security,hash,hash,14300,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:910,Testability,log,logProgress,910," Public Member Functions;  MethodC50 (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodC50 (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodC50 (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:10258,Testability,test,testTime,10258,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:10663,Testability,test,test,10663,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:10980,Testability,test,test,10980,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:22242,Testability,log,logProgress,22242,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:25771,Testability,test,testing,25771,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:25941,Testability,log,logger,25941,andler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRFunctionImport asfactor;  ; ROOT::R::TRFunctionImport C50;  ; ROOT::R::TRFunctionImport C50Control;  ; UInt_t fControlBands;  ; Double_t fControlCF;  ; Bool_t fControlEarlyStopping;  ; Bool_t fControlFuzzyThreshold;  ; UInt_t fControlMinCases;  ; Bool_t fControlNoGlobalPruning;  ; Double_t fControlSample;  ; Int_t fControlSeed;  ; Bool_t fControlSubset;  ; Bool_t fControlWinnow;  ; ROOT::R::TRObject * fModel;  ; ROOT::R::TRObject fModelControl;  ; UInt_t fMvaCounter;  ; UInt_t fNTrials;  ; Bool_t fRules;  ; std::vector< TString > ListOfVariables;  ; ROOT::R::TRFunctionImport predict;  ;  Protected Attributes inherited from TMVA::RMethodBase; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t IsM,MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodC50.html:30525,Testability,log,logProgress,30525," AddWeightsXMLTo(). virtual void TMVA::MethodC50::AddWeightsXMLTo ; (; void * ; ); const. inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 70 of file MethodC50.h. ◆ CreateRanking(). const Ranking * TMVA::MethodC50::CreateRanking ; (; ). inlinevirtual . Implements TMVA::RMethodBase.; Definition at line 54 of file MethodC50.h. ◆ DeclareOptions(). void MethodC50::DeclareOptions ; (; ). virtual . Implements TMVA::RMethodBase.; Definition at line 156 of file MethodC50.cxx. ◆ GetHelpMessage(). void MethodC50::GetHelpMessage ; (; ); const. protectedvirtual . Implements TMVA::IMethod.; Definition at line 304 of file MethodC50.cxx. ◆ GetMvaValue(). Double_t MethodC50::GetMvaValue ; (; Double_t * ; errLower = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::RMethodBase.; Definition at line 225 of file MethodC50.cxx. ◆ GetMvaValues(). std::vector< Double_t > MethodC50::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). virtual . get all the MVA values for the events of the current Data type ; Reimplemented from TMVA::MethodBase.; Definition at line 246 of file MethodC50.cxx. ◆ HasAnalysisType(). Bool_t MethodC50::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . Implements TMVA::RMethodBase.; Definition at line 115 of file MethodC50.cxx. ◆ Init(). void MethodC50::Init ; (; void ; ). virtual . Implements TMVA::RMethodBase.; Definition at line 123 of file MethodC50.cxx. ◆ MakeClass(). void TMVA::MethodC50::MakeClass ; (; const TString & ; classFileName = TString("""")); const. virtual . create reader class for method (classification only at present) ; Reimplemented from TMVA::MethodBase.; Definition at line 339 of file MethodC50.cxx. ◆ ProcessOptions(). void MethodC50::ProcessOptions ; (; ). virtual . Implements TMVA::RMethodBase.; Definition at line 196 of file MethodC50.cxx. ◆ ReadModelFromFile(). void TMVA::MethodC50:",MatchSource.WIKI,doc/master/classTMVA_1_1MethodC50.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:17819,Availability,error,error,17819,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:17908,Availability,error,error,17908,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:18063,Availability,error,error,18063,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:18360,Availability,error,error,18360,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:22444,Availability,error,error,22444,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:12610,Deployability,configurat,configuration,12610,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:12424,Energy Efficiency,monitor,monitoring,12424,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:17825,Integrability,message,message,17825,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:18366,Integrability,message,message,18366,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:19356,Integrability,message,message,19356,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:22450,Integrability,message,message,22450,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:22823,Integrability,message,message,22823," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClas",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25119,Integrability,message,message,25119,"able; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TMVA::DataSetInfo & CreateCategoryDSI (const TCut &, const TString &, const TString &);  create a DataSetInfo object for a sub-classifier ;  ; void GetHelpMessage () const;  Get help message text. ;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  returns the mva values of the right sub-classifier ;  ;  Protected Member Functions inherited from TMVA::MethodCompositeBase; MethodBase * GetCurrentMethod ();  ; MethodBase * GetCurrentMethod (UInt_t idx);  ; UInt_t GetCurrentMethodIndex ();  ; IMethod * GetLastMethod ();  ; IMethod * GetMethod (const Int_t index) const;  accessor by index in vector ;  ; IMethod * GetMethod (const TString &title) const;  accessor by name ;  ; IMethod * GetPreviousMethod ();  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVar",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:29096,Integrability,message,message,29096," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:33619,Integrability,message,message,33619,"eateCategoryDSI(). TMVA::DataSetInfo & TMVA::MethodCategory::CreateCategoryDSI ; (; const TCut & ; theCut, . const TString & ; theVariables, . const TString & ; theTitle . ). protected . create a DataSetInfo object for a sub-classifier ; Definition at line 200 of file MethodCategory.cxx. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodCategory::CreateRanking ; (; ). virtual . no ranking ; Implements TMVA::MethodCompositeBase.; Definition at line 562 of file MethodCategory.cxx. ◆ DeclareOptions(). void TMVA::MethodCategory::DeclareOptions ; (; ). privatevirtual . options for this method ; Implements TMVA::MethodCompositeBase.; Definition at line 131 of file MethodCategory.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 143 of file MethodCategory.h. ◆ GetHelpMessage(). void TMVA::MethodCategory::GetHelpMessage ; (; ); const. protectedvirtual . Get help message text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 547 of file MethodCategory.cxx. ◆ GetMulticlassValues(). const std::vector< Float_t > & TMVA::MethodCategory::GetMulticlassValues ; (; ). virtual . returns the mva values of the multi-class right sub-classifier ; Reimplemented from TMVA::MethodBase.; Definition at line 710 of file MethodCategory.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodCategory::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns the mva value of the right sub-classifier ; Implements TMVA::MethodBase.; Definition at line 600 of file MethodCategory.cxx. ◆ GetMvaValues(). std::vector< Double_t > TMVA::MethodCategory::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). protectedvirtual . returns the mva values of the right sub-classifier ; Reimplemented from TMVA",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:567,Modifiability,variab,variables,567,". ROOT: TMVA::MethodCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodCategory Class ReferenceTMVA. ; Class for categorizing the phase space. ; This class is meant to allow categorisation of the data. For different categories, different classifiers may be booked and different variables may be considered. The aim is to account for the difference that is due to different locations/angles. ; Definition at line 58 of file MethodCategory.h. Public Member Functions;  MethodCategory (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodCategory (DataSetInfo &dsi, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodCategory (void);  destructor ;  ; TMVA::IMethod * AddMethod (const TCut &, const TString &theVariables, Types::EMVA theMethod, const TString &theTitle, const TString &theOptions);  adds sub-classifier for a category ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description of Category classifier ;  ; const Ranking * CreateRanking ();  no ranking ;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  returns the mva values of the multi-class right sub-classifier ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the mva value of the right sub-classifier ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  returns the mva value of the right sub-classifier ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  check whether method category has analysis type the method type has to be the same for all sub-methods ;  ; virtual TClass * IsA () const;  ; v",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:2428,Modifiability,inherit,inherited,2428,"ing ();  no ranking ;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  returns the mva values of the multi-class right sub-classifier ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the mva value of the right sub-classifier ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  returns the mva value of the right sub-classifier ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  check whether method category has analysis type the method type has to be the same for all sub-methods ;  ; virtual TClass * IsA () const;  ; virtual void MakeClass (const TString &=TString("""")) const;  create reader class for method (classification only at present) ;  ; void ReadWeightsFromXML (void *wghtnode);  read weights of sub-classifiers of MethodCategory from xml weight file ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  train all sub-classifiers ;  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~MethodCompositeBase (void);  delete methods ;  ; void AddWeightsXMLTo (void *parent) const;  ; Double_t GetMvaValue (const TMVA::Event *const ev, Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return composite MVA response ;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  text streamer ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  XML streamer.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:3458,Modifiability,inherit,inherited,3458,"tr, Double_t *errUpper=nullptr);  return composite MVA response ;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  text streamer ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  XML streamer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAnalysisType GetAnalysisType () const;  ; UInt_t GetCurrentIter ();  ; virtual Double_t GetEfficiency (const TString &, Types::ETreeType, Double_t &err);  fill background efficiency (resp. ;  ; const Event * GetEvent () c",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:12610,Modifiability,config,configuration,12610,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:12713,Modifiability,inherit,inherited,12713,"l (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:12873,Modifiability,inherit,inherited,12873,"ation ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:14622,Modifiability,inherit,inherited,14622,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:16362,Modifiability,inherit,inherited,16362,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:17455,Modifiability,inherit,inheritance,17455,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:19454,Modifiability,inherit,inherits,19454,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:19571,Modifiability,inherit,inherits,19571,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:23324,Modifiability,inherit,inherited,23324," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:23553,Modifiability,inherit,inherited,23553," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:23773,Modifiability,inherit,inherited,23773," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:23990,Modifiability,inherit,inherited,23990," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:24212,Modifiability,inherit,inherited,24212," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:24422,Modifiability,inherit,inherited,24422," Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodCompositeBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25338,Modifiability,inherit,inherited,25338,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25748,Modifiability,inherit,inherited,25748,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:26964,Modifiability,variab,variable,26964,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:27005,Modifiability,variab,variables,27005,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:27045,Modifiability,variab,variables,27045,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:27199,Modifiability,inherit,inherited,27199,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:27606,Modifiability,inherit,inherited,27606,"rom TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:28035,Modifiability,inherit,inherited,28035," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:28269,Modifiability,inherit,inherited,28269," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:29037,Modifiability,inherit,inherited,29037," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:29138,Modifiability,inherit,inherited,29138," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:29865,Modifiability,inherit,inherited,29865,"wn one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process user options ;  . Private Attributes; std::vector< TTreeFormula * > fCatFormulas;  needed in conjunction with TTreeFormulas for evaluation category expressions ;  ; TTree * fCatTree;  ; DataSetManager * fDataSetManager;  . Friends; class Experimental::Classification;  ; class Factory;  ; class MethodBoost;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodCategory.h>. Inheritance diagram for TMVA::MethodCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor &",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:29961,Modifiability,inherit,inherited,29961,"wn one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process user options ;  . Private Attributes; std::vector< TTreeFormula * > fCatFormulas;  needed in conjunction with TTreeFormulas for evaluation category expressions ;  ; TTree * fCatTree;  ; DataSetManager * fDataSetManager;  . Friends; class Experimental::Classification;  ; class Factory;  ; class MethodBoost;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodCategory.h>. Inheritance diagram for TMVA::MethodCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor &",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:30604,Modifiability,inherit,inherited,30604,"taSetManager * fDataSetManager;  . Friends; class Experimental::Classification;  ; class Factory;  ; class MethodBoost;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodCategory.h>. Inheritance diagram for TMVA::MethodCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodCategory() [1/2]. TMVA::MethodCategory::MethodCategory ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). standard constructor ; Definition at line 80 of file MethodCategory.cxx. ◆ MethodCategory() [2/2]. TMVA::MethodCategory::MethodCategory ; (; DataSetInfo & ; dsi, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 93 of file MethodCategory.cxx. ◆ ~MethodCategory(). TMVA::MethodCategory::~MethodCategory ; (; void ; ). virtual . destructor ; Definition at line 104 of file MethodCategory.cxx. Member Function Documentation. ◆ AddMethod(). TMVA::IM",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:30715,Modifiability,inherit,inherited,30715,"taSetManager * fDataSetManager;  . Friends; class Experimental::Classification;  ; class Factory;  ; class MethodBoost;  ; class Reader;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/MethodCategory.h>. Inheritance diagram for TMVA::MethodCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodCategory() [1/2]. TMVA::MethodCategory::MethodCategory ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = """" . ). standard constructor ; Definition at line 80 of file MethodCategory.cxx. ◆ MethodCategory() [2/2]. TMVA::MethodCategory::MethodCategory ; (; DataSetInfo & ; dsi, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 93 of file MethodCategory.cxx. ◆ ~MethodCategory(). TMVA::MethodCategory::~MethodCategory ; (; void ; ). virtual . destructor ; Definition at line 104 of file MethodCategory.cxx. Member Function Documentation. ◆ AddMethod(). TMVA::IM",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:10089,Performance,tune,tuned,10089,"t * GetTestingEvent (Long64_t ievt) const;  ; Double_t GetTestTime () const;  ; const TString & GetTestvarName () const;  ; virtual Double_t GetTrainingEfficiency (const TString &);  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; void InitIPythonInteractive ();  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:11556,Performance,tune,tuneParameters,11556,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:15490,Security,hash,hash,15490,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25579,Security,access,accessor,25579,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25663,Security,access,accessor,25663,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:11391,Testability,test,testTime,11391,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:11853,Testability,test,test,11853,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:12170,Testability,test,test,12170,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25233,Testability,log,logProgress,25233,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:25903,Testability,log,logProgress,25903,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:28934,Testability,test,testing,28934," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:29104,Testability,log,logger,29104," ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< TCut > fCategoryCuts;  ; std::vector< UInt_t > fCategorySpecIdx;  ; std::vector< IMethod * > fMethods;  ; std::vector< std::vector< UInt_t > > fVarMaps;  ; std::vector< TString > fVars;  ;  Protected Attributes inherited from TMVA::MethodCompositeBase; MethodBase * fCurrentMethod;  ; UInt_t fCurrentMethodIdx;  ; std::vector< IMethod * > fMethods;  vector of all classifiers ;  ; std::vector< Double_t > fMethodWeight;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void DeclareOptions ();  options for this method ;  ; void Init ();  initialize the method ;  ; void InitCircularTree (const DataSetInfo &dsi);  initialize the circular tree ;  ; Bool_t PassesCut (const Event *ev, UInt_t methodIdx);  ; void ProcessOptions ();  process ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:34501,Testability,log,logProgress,34501,"gory.h. ◆ GetHelpMessage(). void TMVA::MethodCategory::GetHelpMessage ; (; ); const. protectedvirtual . Get help message text. ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 547 of file MethodCategory.cxx. ◆ GetMulticlassValues(). const std::vector< Float_t > & TMVA::MethodCategory::GetMulticlassValues ; (; ). virtual . returns the mva values of the multi-class right sub-classifier ; Reimplemented from TMVA::MethodBase.; Definition at line 710 of file MethodCategory.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodCategory::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns the mva value of the right sub-classifier ; Implements TMVA::MethodBase.; Definition at line 600 of file MethodCategory.cxx. ◆ GetMvaValues(). std::vector< Double_t > TMVA::MethodCategory::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). protectedvirtual . returns the mva values of the right sub-classifier ; Reimplemented from TMVA::MethodBase.; Definition at line 643 of file MethodCategory.cxx. ◆ GetRegressionValues(). const std::vector< Float_t > & TMVA::MethodCategory::GetRegressionValues ; (; ). virtual . returns the mva value of the right sub-classifier ; Reimplemented from TMVA::MethodBase.; Definition at line 752 of file MethodCategory.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodCategory::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . check whether method category has analysis type the method type has to be the same for all sub-methods ; Implements TMVA::IMethod.; Definition at line 116 of file MethodCategory.cxx. ◆ Init(). void TMVA::MethodCategory::Init ; (; void ; ). privatevirtual . initialize the method ; Implements TMVA::MethodBase.; Definition at line 309 of file MethodCategory.cxx. ◆ InitCircularTree(). void TMVA::Me",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCategory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:17809,Availability,error,error,17809,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:17898,Availability,error,error,17898,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:18053,Availability,error,error,18053,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:18350,Availability,error,error,18350,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:22434,Availability,error,error,22434,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:12600,Deployability,configurat,configuration,12600,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:1586,Energy Efficiency,power,power,1586," for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constructor ;  ;  MethodCFMlpANN (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodCFMlpANN (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to xml file ;  ; const Ranking * CreateRanking ();  ; Int_t GetClass (Int_t ivar) const;  ; Double_t GetData (Int_t isel, Int_t ivar) const;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns CFMlpANN output (normalised within [0,1]) ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numbe",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:12414,Energy Efficiency,monitor,monitoring,12414,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:35386,Energy Efficiency,efficient,efficiently,35386,"◆ MethodCFMlpANN() [1/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = ""3000:N-1:N-2"" . ). standard constructor ; option string: ""n_training_cycles:n_hidden_layers""; default is: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ MethodCFMlpANN() [2/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 149 of file MethodCFMlpANN.cxx. ◆ ~MethodCFMlpANN(). TMVA::MethodCFMlpANN::~MethodCFMlpANN ; (; void ; ). virtual . destructor ; Definition at line 269 of file MethodCFMlpANN.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). void TMVA::MethodCFMlpANN::AddWeightsXMLTo ; (; void * ; parent); const. virtual . write weights to xml file ; Implements TMVA::MethodBase.; Definition at line 537 of file MethodCFMlpANN.cxx.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:35749,Energy Efficiency,reduce,reduced,35749,"s: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ MethodCFMlpANN() [2/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 149 of file MethodCFMlpANN.cxx. ◆ ~MethodCFMlpANN(). TMVA::MethodCFMlpANN::~MethodCFMlpANN ; (; void ; ). virtual . destructor ; Definition at line 269 of file MethodCFMlpANN.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). void TMVA::MethodCFMlpANN::AddWeightsXMLTo ; (; void * ; parent); const. virtual . write weights to xml file ; Implements TMVA::MethodBase.; Definition at line 537 of file MethodCFMlpANN.cxx. ◆ Class(). static TClass * TMVA::MethodCFMlpANN::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodCFMlpANN::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodCFMlpANN",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:17815,Integrability,message,message,17815,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:18356,Integrability,message,message,18356,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:19346,Integrability,message,message,19346,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:22440,Integrability,message,message,22440,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:22813,Integrability,message,message,22813," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Cla",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:24815,Integrability,interface,interface,24815,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:24879,Integrability,message,message,24879,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33681,Integrability,message,message,33681,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:37300,Integrability,interface,interface,37300,"; parent); const. virtual . write weights to xml file ; Implements TMVA::MethodBase.; Definition at line 537 of file MethodCFMlpANN.cxx. ◆ Class(). static TClass * TMVA::MethodCFMlpANN::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodCFMlpANN::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodCFMlpANN::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 176 of file MethodCFMlpANN.h. ◆ CreateRanking(). const Ranking * TMVA::MethodCFMlpANN::CreateRanking ; (; ). inlinevirtual . Implements TMVA::MethodBase.; Definition at line 131 of file MethodCFMlpANN.h. ◆ DataInterface(). Int_t TMVA::MethodCFMlpANN::DataInterface ; (; Double_t * ; , . Double_t * ; , . Int_t * ; , . Int_t * ; , . Int_t * ; , . Int_t * ; nvar, . Double_t * ; xpg, . Int_t * ; iclass, . Int_t * ; ikend . ). protectedvirtual . data interface function ; Implements TMVA::MethodCFMlpANN_Utils.; Definition at line 506 of file MethodCFMlpANN.cxx. ◆ DeclareOptions(). void TMVA::MethodCFMlpANN::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string know options: NCycles=xx :the number of training cycles HiddenLayser=""N-1,N-2"" :the specification of the hidden layers ; Implements TMVA::MethodBase.; Definition at line 176 of file MethodCFMlpANN.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCFMlpANN::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 176 of file MethodCFMlpANN.h. ◆ EvalANN(). Double_t TMVA::MethodCFMlpANN::EvalANN ; (; std::vector< Double_t > & ; inVar, . Bool_t & ; isOK . ). private . evaluates NN value as function of input variables ; Definition at line 343 of file MethodCFMlpANN.cxx. ◆ GetClass(). Int_t TMVA::MethodCFMlpANN::GetClass ; (; Int_t ; ivar); const. inline . Definition at line 127 of file Me",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:38604,Integrability,message,message,38604,"on of the hidden layers ; Implements TMVA::MethodBase.; Definition at line 176 of file MethodCFMlpANN.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCFMlpANN::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 176 of file MethodCFMlpANN.h. ◆ EvalANN(). Double_t TMVA::MethodCFMlpANN::EvalANN ; (; std::vector< Double_t > & ; inVar, . Bool_t & ; isOK . ). private . evaluates NN value as function of input variables ; Definition at line 343 of file MethodCFMlpANN.cxx. ◆ GetClass(). Int_t TMVA::MethodCFMlpANN::GetClass ; (; Int_t ; ivar); const. inline . Definition at line 127 of file MethodCFMlpANN.h. ◆ GetData(). Double_t TMVA::MethodCFMlpANN::GetData ; (; Int_t ; isel, . Int_t ; ivar . ); const. inline . Definition at line 126 of file MethodCFMlpANN.h. ◆ GetHelpMessage(). void TMVA::MethodCFMlpANN::GetHelpMessage ; (; ); const. protectedvirtual . get help message text ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 711 of file MethodCFMlpANN.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodCFMlpANN::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns CFMlpANN output (normalised within [0,1]) ; Implements TMVA::MethodBase.; Definition at line 321 of file MethodCFMlpANN.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodCFMlpANN::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ;  . ). virtual . CFMlpANN can handle classification with 2 classes. ; Implements TMVA::IMethod.; Definition at line 165 of file MethodCFMlpANN.cxx. ◆ Init(). void TMVA::MethodCFMlpANN::Init ; (; void ; ). privatevirtual . default initialisation called by all constructors ; Implements TMVA::MethodBase.; Definition at line 257 of file MethodCFMlpANN.cxx. ◆ IsA(). virtual TClass * TMVA::MethodCFMlpANN::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:651,Modifiability,variab,variables,651,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:793,Modifiability,layers,layers,793,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:806,Modifiability,variab,variable,806,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:834,Modifiability,layers,layers,834,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:921,Modifiability,layers,layers,921,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:969,Modifiability,layers,layers,969,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:983,Modifiability,config,configured,983,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:3173,Modifiability,inherit,inherited,3173,"t (normalised within [0,1]) ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  CFMlpANN can handle classification with 2 classes. ;  ; virtual TClass * IsA () const;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read back the weight from the training from file (stream) ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  read weights from xml file ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  training of the Clement-Ferrand NN classifier ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ExitFromTraining ();  ; Types::EAn",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:12600,Modifiability,config,configuration,12600,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:12703,Modifiability,inherit,inherited,12703,"l (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:12863,Modifiability,inherit,inherited,12863,"ation ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType type);  calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample ;  ; bool TrainingEnded ();  ; void TrainMethod ();  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; virtual void WriteMonitoringHistosToFile () const;  write special monitoring histograms to file dummy implementation here --------------— ;  ; void WriteStateToFile () const;  write options and weights to file note that each one text file for the main configuration information and one ROOT file for ROOT objects are created ;  ;  Public Member Functions inherited from TMVA::IMethod;  IMethod ();  ; virtual ~IMethod ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:14612,Modifiability,inherit,inherited,14612,"  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed na",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:16352,Modifiability,inherit,inherited,16352,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:17445,Modifiability,inherit,inheritance,17445,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:19444,Modifiability,inherit,inherits,19444,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:19561,Modifiability,inherit,inherits,19561,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:23314,Modifiability,inherit,inherited,23314,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t DataInterface (Double_t *, Double_t *, Int_t *, Int_t *,",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:23534,Modifiability,inherit,inherited,23534,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t DataInterface (Double_t *, Double_t *, Int_t *, Int_t *,",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:23751,Modifiability,inherit,inherited,23751,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t DataInterface (Double_t *, Double_t *, Int_t *, Int_t *,",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:23973,Modifiability,inherit,inherited,23973,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t DataInterface (Double_t *, Double_t *, Int_t *, Int_t *,",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:24183,Modifiability,inherit,inherited,24183,"method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t DataInterface (Double_t *, Double_t *, Int_t *, Int_t *,",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:25117,Modifiability,inherit,inherited,25117,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:26355,Modifiability,variab,variable,26355,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:26396,Modifiability,variab,variables,26396,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:26436,Modifiability,variab,variables,26436,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:26590,Modifiability,inherit,inherited,26590,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:26997,Modifiability,inherit,inherited,26997,"virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void SetNormalised (Bool_t norm);  ; void SetWeightFileDir (TString fileDir);  set directory of weight file ;  ; void SetWeightFileName (TString);  set the weight file name (depreciated) ;  ; void Statistics (Types::ETreeType treeType, const TString &theVarName, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &);  calculates rms,mean, xmin, xmax of the event variable this can be either done for the variables as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ;  ; Bool_t TxtWeightsOnly () const;  ; Bool_t Verbose () const;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:27417,Modifiability,layers,layers,27417,"ble; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  define the options (their key words) that can be set in the option string know options: NCycles=xx :the number of training cycles HiddenLayser=""N-1,N-2"" :the specification of the hidden layers ;  ; Double_t EvalANN (std::vector< Double_t > &, Bool_t &isOK);  evaluates NN value as function of input variables ;  ; void Init (void);  default initialisation called by all constructors ;  ; void NN_ava (Double_t *);  auxiliary functions ;  ; Double_t NN_fonc (Int_t, Double_t) const;  activation function ;  ; void PrintWeights (std::ostream &o) const;  write the weights of the neural net ;  ; void ProcessOptions ();  decode the options in the option string ;  ;  Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils;  MethodCFMlpANN_Utils ();  default constructor ;  ; virtual ~MethodCFMlpANN_Utils ();  Destructor. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Arret (const char *mot);  ; void CollectVar (Int_t *nvar, Int_t *class__, Double_t *xpg);  [smart comments to be added] ;  ; void Cout (Int_t *, Double_t *xxx);  [smart comments to be added] ;  ; void Cout2 (Int_t *, Double_t *yyy);  [smart comments to be added] ;  ; void En_arriere (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant2 (Int_t *ievent);  [smart comments to be added] ;  ; void Entree_ne",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:27530,Modifiability,variab,variables,27530,"ble; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  define the options (their key words) that can be set in the option string know options: NCycles=xx :the number of training cycles HiddenLayser=""N-1,N-2"" :the specification of the hidden layers ;  ; Double_t EvalANN (std::vector< Double_t > &, Bool_t &isOK);  evaluates NN value as function of input variables ;  ; void Init (void);  default initialisation called by all constructors ;  ; void NN_ava (Double_t *);  auxiliary functions ;  ; Double_t NN_fonc (Int_t, Double_t) const;  activation function ;  ; void PrintWeights (std::ostream &o) const;  write the weights of the neural net ;  ; void ProcessOptions ();  decode the options in the option string ;  ;  Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils;  MethodCFMlpANN_Utils ();  default constructor ;  ; virtual ~MethodCFMlpANN_Utils ();  Destructor. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Arret (const char *mot);  ; void CollectVar (Int_t *nvar, Int_t *class__, Double_t *xpg);  [smart comments to be added] ;  ; void Cout (Int_t *, Double_t *xxx);  [smart comments to be added] ;  ; void Cout2 (Int_t *, Double_t *yyy);  [smart comments to be added] ;  ; void En_arriere (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant2 (Int_t *ievent);  [smart comments to be added] ;  ; void Entree_ne",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:27920,Modifiability,inherit,inherited,27920,"ble; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  define the options (their key words) that can be set in the option string know options: NCycles=xx :the number of training cycles HiddenLayser=""N-1,N-2"" :the specification of the hidden layers ;  ; Double_t EvalANN (std::vector< Double_t > &, Bool_t &isOK);  evaluates NN value as function of input variables ;  ; void Init (void);  default initialisation called by all constructors ;  ; void NN_ava (Double_t *);  auxiliary functions ;  ; Double_t NN_fonc (Int_t, Double_t) const;  activation function ;  ; void PrintWeights (std::ostream &o) const;  write the weights of the neural net ;  ; void ProcessOptions ();  decode the options in the option string ;  ;  Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils;  MethodCFMlpANN_Utils ();  default constructor ;  ; virtual ~MethodCFMlpANN_Utils ();  Destructor. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Arret (const char *mot);  ; void CollectVar (Int_t *nvar, Int_t *class__, Double_t *xpg);  [smart comments to be added] ;  ; void Cout (Int_t *, Double_t *xxx);  [smart comments to be added] ;  ; void Cout2 (Int_t *, Double_t *yyy);  [smart comments to be added] ;  ; void En_arriere (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant2 (Int_t *ievent);  [smart comments to be added] ;  ; void Entree_ne",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:31911,Modifiability,inherit,inherited,31911,"max_nLayers_ *max_nNodes_] ;  ;    Double_t   y [max_nLayers_ *max_nNodes_] ;  ; } fNeur_1 ;  ; struct { ;  ;    Double_t   eeps ;  ;    Double_t   epsmax ;  ;    Double_t   epsmin ;  ;    Double_t   eta ;  ;    Int_t   ichoi ;  ;    Int_t   itest ;  ;    Int_t   layerm ;  ;    Int_t   lclass ;  ;    Int_t   nblearn ;  ;    Int_t   ndiv ;  ;    Int_t   ndivis ;  ;    Int_t   nevl ;  ;    Int_t   nevt ;  ;    Int_t   nunap ;  ;    Int_t   nunilec ;  ;    Int_t   nunishort ;  ;    Int_t   nunisor ;  ;    Int_t   nvar ;  ; } fParam_1 ;  ; class TMVA::MethodCFMlpANN_Utils::VARn2 fVarn2_1;  ; class TMVA::MethodCFMlpANN_Utils::VARn2 fVarn3_1;  ; struct { ;  ;    Int_t   iclass ;  ;    Int_t   mclass [max_Events_] ;  ;    Int_t   nclass [max_Events_] ;  ;    Double_t   xmax [max_nVar_] ;  ;    Double_t   xmin [max_nVar_] ;  ; } fVarn_1 ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:32007,Modifiability,inherit,inherited,32007,"max_nLayers_ *max_nNodes_] ;  ;    Double_t   y [max_nLayers_ *max_nNodes_] ;  ; } fNeur_1 ;  ; struct { ;  ;    Double_t   eeps ;  ;    Double_t   epsmax ;  ;    Double_t   epsmin ;  ;    Double_t   eta ;  ;    Int_t   ichoi ;  ;    Int_t   itest ;  ;    Int_t   layerm ;  ;    Int_t   lclass ;  ;    Int_t   nblearn ;  ;    Int_t   ndiv ;  ;    Int_t   ndivis ;  ;    Int_t   nevl ;  ;    Int_t   nevt ;  ;    Int_t   nunap ;  ;    Int_t   nunilec ;  ;    Int_t   nunishort ;  ;    Int_t   nunisor ;  ;    Int_t   nvar ;  ; } fParam_1 ;  ; class TMVA::MethodCFMlpANN_Utils::VARn2 fVarn2_1;  ; class TMVA::MethodCFMlpANN_Utils::VARn2 fVarn3_1;  ; struct { ;  ;    Int_t   iclass ;  ;    Int_t   mclass [max_Events_] ;  ;    Int_t   nclass [max_Events_] ;  ;    Double_t   xmax [max_nVar_] ;  ;    Double_t   xmin [max_nVar_] ;  ; } fVarn_1 ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:32650,Modifiability,inherit,inherited,32650,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:32761,Modifiability,inherit,inherited,32761,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:32854,Modifiability,inherit,inherited,32854,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33622,Modifiability,inherit,inherited,33622,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33723,Modifiability,inherit,inherited,33723,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33816,Modifiability,inherit,inherited,33816,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:34041,Modifiability,inherit,inherited,34041,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:34827,Modifiability,layers,layers,34827,"tatic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodCFMlpANN() [1/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = ""3000:N-1:N-2"" . ). standard constructor ; option string: ""n_training_cycles:n_hidden_layers""; default is: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ Me",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:35060,Modifiability,variab,variables,35060,"from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodCFMlpANN() [1/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = ""3000:N-1:N-2"" . ). standard constructor ; option string: ""n_training_cycles:n_hidden_layers""; default is: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ MethodCFMlpANN() [2/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 149 of file M",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:37685,Modifiability,layers,layers,37685,"MVA::MethodCFMlpANN::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodCFMlpANN::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 176 of file MethodCFMlpANN.h. ◆ CreateRanking(). const Ranking * TMVA::MethodCFMlpANN::CreateRanking ; (; ). inlinevirtual . Implements TMVA::MethodBase.; Definition at line 131 of file MethodCFMlpANN.h. ◆ DataInterface(). Int_t TMVA::MethodCFMlpANN::DataInterface ; (; Double_t * ; , . Double_t * ; , . Int_t * ; , . Int_t * ; , . Int_t * ; , . Int_t * ; nvar, . Double_t * ; xpg, . Int_t * ; iclass, . Int_t * ; ikend . ). protectedvirtual . data interface function ; Implements TMVA::MethodCFMlpANN_Utils.; Definition at line 506 of file MethodCFMlpANN.cxx. ◆ DeclareOptions(). void TMVA::MethodCFMlpANN::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string know options: NCycles=xx :the number of training cycles HiddenLayser=""N-1,N-2"" :the specification of the hidden layers ; Implements TMVA::MethodBase.; Definition at line 176 of file MethodCFMlpANN.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCFMlpANN::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 176 of file MethodCFMlpANN.h. ◆ EvalANN(). Double_t TMVA::MethodCFMlpANN::EvalANN ; (; std::vector< Double_t > & ; inVar, . Bool_t & ; isOK . ). private . evaluates NN value as function of input variables ; Definition at line 343 of file MethodCFMlpANN.cxx. ◆ GetClass(). Int_t TMVA::MethodCFMlpANN::GetClass ; (; Int_t ; ivar); const. inline . Definition at line 127 of file MethodCFMlpANN.h. ◆ GetData(). Double_t TMVA::MethodCFMlpANN::GetData ; (; Int_t ; isel, . Int_t ; ivar . ); const. inline . Definition at line 126 of file MethodCFMlpANN.h. ◆ GetHelpMessage(). void TMVA::MethodCFMlpANN::GetHelpMessage ; (; ); const. protectedvirtual . get help messag",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:38144,Modifiability,variab,variables,38144," . Int_t * ; , . Int_t * ; , . Int_t * ; , . Int_t * ; nvar, . Double_t * ; xpg, . Int_t * ; iclass, . Int_t * ; ikend . ). protectedvirtual . data interface function ; Implements TMVA::MethodCFMlpANN_Utils.; Definition at line 506 of file MethodCFMlpANN.cxx. ◆ DeclareOptions(). void TMVA::MethodCFMlpANN::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string know options: NCycles=xx :the number of training cycles HiddenLayser=""N-1,N-2"" :the specification of the hidden layers ; Implements TMVA::MethodBase.; Definition at line 176 of file MethodCFMlpANN.cxx. ◆ DeclFileName(). static const char * TMVA::MethodCFMlpANN::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 176 of file MethodCFMlpANN.h. ◆ EvalANN(). Double_t TMVA::MethodCFMlpANN::EvalANN ; (; std::vector< Double_t > & ; inVar, . Bool_t & ; isOK . ). private . evaluates NN value as function of input variables ; Definition at line 343 of file MethodCFMlpANN.cxx. ◆ GetClass(). Int_t TMVA::MethodCFMlpANN::GetClass ; (; Int_t ; ivar); const. inline . Definition at line 127 of file MethodCFMlpANN.h. ◆ GetData(). Double_t TMVA::MethodCFMlpANN::GetData ; (; Int_t ; isel, . Int_t ; ivar . ); const. inline . Definition at line 126 of file MethodCFMlpANN.h. ◆ GetHelpMessage(). void TMVA::MethodCFMlpANN::GetHelpMessage ; (; ); const. protectedvirtual . get help message text ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 711 of file MethodCFMlpANN.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodCFMlpANN::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . returns CFMlpANN output (normalised within [0,1]) ; Implements TMVA::MethodBase.; Definition at line 321 of file MethodCFMlpANN.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodCFMlpANN::HasAnalysisType ; (; Types::EAnal",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:1235,Performance,perform,performed,1235,"tions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constructor ;  ;  MethodCFMlpANN (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodCFMlpANN (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to xml f",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:10079,Performance,tune,tuned,10079,"tTrainingEfficiency (const TString &);  ; const Event * GetTrainingEvent (Long64_t ievt) const;  ; virtual const std::vector< Float_t > & GetTrainingHistory (const char *);  ; UInt_t GetTrainingROOTVersionCode () const;  ; TString GetTrainingROOTVersionString () const;  calculates the ROOT version string from the training version code on the fly ;  ; UInt_t GetTrainingTMVAVersionCode () const;  ; TString GetTrainingTMVAVersionString () const;  calculates the TMVA version string from the training version code on the fly ;  ; Double_t GetTrainTime () const;  ; TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true);  ; const TransformationHandler & GetTransformationHandler (Bool_t takeReroutedIfAvailable=true) const;  ; TString GetWeightFileName () const;  retrieve weight file name ;  ; Double_t GetXmax (Int_t ivar) const;  ; Double_t GetXmin (Int_t ivar) const;  ; Bool_t HasMVAPdfs () const;  ; void InitIPythonInteractive ();  ; Bool_t IsModelPersistence () const;  ; virtual Bool_t IsSignalLike ();  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event would be selected as signal or background ;  ; virtual Bool_t IsSignalLike (Double_t mvaVal);  uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation) for a quick determination if an event with this mva output value would be selected as signal or background ;  ; Bool_t IsSilentFile () const;  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; TDirectory * MethodBaseDir () const;  returns the ROOT directory where all instances of the corresponding MVA method are stored ;  ; virtual std::map< TString, Double_t > OptimizeTuningParameters (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");  call the Optimizer with the set of parameters and ranges that are meant to be tuned.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:11546,Performance,tune,tuneParameters,11546,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:35578,Performance,perform,performance,35578,"g & ; theOption = ""3000:N-1:N-2"" . ). standard constructor ; option string: ""n_training_cycles:n_hidden_layers""; default is: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ MethodCFMlpANN() [2/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 149 of file MethodCFMlpANN.cxx. ◆ ~MethodCFMlpANN(). TMVA::MethodCFMlpANN::~MethodCFMlpANN ; (; void ; ). virtual . destructor ; Definition at line 269 of file MethodCFMlpANN.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). void TMVA::MethodCFMlpANN::AddWeightsXMLTo ; (; void * ; parent); const. virtual . write weights to xml file ; Implements TMVA::MethodBase.; Definition at line 537 of file MethodCFMlpANN.cxx. ◆ Class(). static TClass * TMVA::MethodCFMlpANN::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodCFMlpANN::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:15480,Security,hash,hash,15480,"ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:11381,Testability,test,testTime,11381,"hat are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void Reset ();  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:11843,Testability,test,test,11843,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:12160,Testability,test,test,12160,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:25272,Testability,log,logProgress,25272,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:25512,Testability,log,logProgress,25512,,MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33519,Testability,test,testing,33519,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33689,Testability,log,logger,33689,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:35398,Testability,test,tested,35398,"◆ MethodCFMlpANN() [1/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; const TString & ; jobName, . const TString & ; methodTitle, . DataSetInfo & ; theData, . const TString & ; theOption = ""3000:N-1:N-2"" . ). standard constructor ; option string: ""n_training_cycles:n_hidden_layers""; default is: n_training_cycles = 5000, n_layers = 4. note that the number of hidden layers in the NN is: n_hidden_layers = n_layers - 2; since there is one input and one output layer. The number of nodes (neurons) is predefined to be:; n_nodes[i] = nvars + 1 - i (where i=1..n_layers); with nvars being the number of variables used in the NN. Hence, the default case is: n_neurons(layer 1 (input)) : nvars; n_neurons(layer 2 (hidden)): nvars-1; n_neurons(layer 3 (hidden)): nvars-1; n_neurons(layer 4 (out)) : 2; This artificial neural network usually needs a relatively large number of cycles to converge (8000 and more). Overtraining can be efficiently tested by comparing the signal and background output of the NN for the events that were used for training and an independent data sample (with equal properties). If the separation performance is significantly better for the training sample, the NN interprets statistical effects, and is hence overtrained. In this case, the number of cycles should be reduced, or the size of the training sample increased. ; Definition at line 130 of file MethodCFMlpANN.cxx. ◆ MethodCFMlpANN() [2/2]. TMVA::MethodCFMlpANN::MethodCFMlpANN ; (; DataSetInfo & ; theData, . const TString & ; theWeightFile . ). constructor from weight file ; Definition at line 149 of file MethodCFMlpANN.cxx. ◆ ~MethodCFMlpANN(). TMVA::MethodCFMlpANN::~MethodCFMlpANN ; (; void ; ). virtual . destructor ; Definition at line 269 of file MethodCFMlpANN.cxx. Member Function Documentation. ◆ AddWeightsXMLTo(). void TMVA::MethodCFMlpANN::AddWeightsXMLTo ; (; void * ; parent); const. virtual . write weights to xml file ; Implements TMVA::MethodBase.; Definition at line 537 of file MethodCFMlpANN.cxx.",MatchSource.WIKI,doc/master/classTMVA_1_1MethodCFMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html
