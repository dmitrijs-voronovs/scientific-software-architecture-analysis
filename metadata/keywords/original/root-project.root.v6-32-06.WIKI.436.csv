id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1096,Integrability,Integrat,Integration,1096,"ss Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(c",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1163,Integrability,integrat,integration,1163,"HCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Ma",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1570,Integrability,integrat,integration,1570,"ortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1699,Integrability,Integrat,Integration,1699,"d semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorO",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1757,Integrability,Integrat,IntegratorOneDim,1757,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1884,Integrability,Integrat,IntegrationOneDim,1884,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1929,Integrability,Integrat,IntegrationOneDim,1929,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:2673,Integrability,Integrat,IntegratorOneDimIntegratorOneDim,2673,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:2718,Integrability,Integrat,IntegrationOneDim,2718,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:2749,Integrability,Integrat,IntegrationOneDim,2749,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:2875,Integrability,Integrat,IntegratorOneDimIntegratorOneDim,2875,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:2955,Integrability,Integrat,IntegrationOneDim,2955,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:2986,Integrability,Integrat,IntegrationOneDim,2986,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3169,Integrability,Integrat,IntegratorOneDimOptionsOptions,3169,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3472,Integrability,Integrat,IntegratorOneDimOptions,3472,"ef_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneD",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3641,Integrability,Integrat,IntegrationOneDim,3641,"uble a); ROOT::Math::IntegratorOneDimIntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3753,Integrability,Integrat,IntegratorOneDimIntegratorOneDim,3753,"gned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3804,Integrability,Integrat,IntegratorOneDim,3804,"gned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3836,Integrability,Integrat,IntegratorOneDim,3836,"gned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:3881,Integrability,Integrat,IntegratorOneDim,3881,"gned int size = 0, unsigned int rule = 0); ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4049,Integrability,integrat,integrator,4049,"Dim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVE",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4060,Integrability,interface,interface,4060,"Dim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0); stringName() const; intNEval() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVE",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4398,Integrability,Integrat,IntegratorOneDim,4398,"ions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::I",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4427,Integrability,Integrat,IntegrationOneDim,4427,"ions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::I",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4458,Integrability,Integrat,IntegrationOneDim,4458,"ions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::I",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4617,Integrability,Integrat,Integrator,4617,"ntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4667,Integrability,integrat,integration,4667,"l, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a functi",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4864,Integrability,integrat,integration,4864,"orOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adap",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5401,Integrability,Integrat,IntegratorOneDimOptions,5401,"tion& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5426,Integrability,Integrat,IntegratorOneDim,5426,"unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integrati",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5490,Integrability,Integrat,IntegrationOneDim,5490,"unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integrati",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5521,Integrability,Integrat,IntegrationOneDim,5521,"unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integrati",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5657,Integrability,Integrat,Integrator,5657," type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @p",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5687,Integrability,interface,interface,5687," type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @p",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5707,Integrability,integrat,integration,5707,"ram absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired r",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5732,Integrability,interface,interface,5732,"ram absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired r",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5777,Integrability,integrat,integration,5777,"ve Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @pa",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5974,Integrability,integrat,integration,5974,"ype values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointe",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6129,Integrability,Integrat,IntegratorOneDimOptions,6129," 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); in",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6221,Integrability,Integrat,IntegratorOneDim,6221,"es are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a low",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6285,Integrability,Integrat,IntegrationOneDim,6285,"es are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a low",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6316,Integrability,Integrat,IntegrationOneDim,6316,"es are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a low",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6461,Integrability,Integrat,Integrator,6461,"enFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6516,Integrability,integrat,integration,6516,"ol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function.",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6609,Integrability,integrat,integration,6609,"ol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function.",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6806,Integrability,integrat,integration,6806,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6862,Integrability,Integrat,IntegratorOneDim,6862,"elative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Inte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6926,Integrability,Integrat,IntegratorOneDim,6926,"onrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integratio",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6973,Integrability,Integrat,IntegratorOneDim,6973,"onrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integratio",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7085,Integrability,integrat,integration,7085,"values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). tem",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7203,Integrability,integrat,integration,7203,"OOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over th",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7336,Integrability,integrat,integration,7336," IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double In",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7386,Integrability,integrat,integration,7386," IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double In",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7560,Integrability,integrat,integration,7560,"nction (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7641,Integrability,interface,interface,7641,"absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Functio",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7680,Integrability,integrat,integration,7680,"absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Functio",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7730,Integrability,integrat,integration,7730,"absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Functio",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:7959,Integrability,integrat,integration,7959," IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return Int",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8215,Integrability,integrat,integration,8215,"erval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object impl",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8296,Integrability,interface,interface,8296,"t implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8460,Integrability,integrat,integration,8460,"onst ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @pa",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8593,Integrability,integrat,integration,8593,"b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8774,Integrability,integrat,integration,8774,"on interval. return Integral(const ROOT::Math::IGenFunction& f, const vector<double>& pts). double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8855,Integrability,interface,interface,8855,"enFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The fun",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:8894,Integrability,integrat,integration,8894,"enFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x). template<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The fun",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9108,Integrability,integrat,integration,9108,"ate<class Function>; double Integral(const Function & f);. evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9241,Integrability,integrat,integration,9241,"inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calcu",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9432,Integrability,integrat,integration,9432,"of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : f",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9513,Integrability,interface,interface,9513," callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrat",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9552,Integrability,integrat,integration,9552," callable object implementing operator()(double x); @param a lower value of the integration interval. template<class Function>; double IntegralUp(Function & f, double a);. evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrat",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9826,Integrability,integrat,integration,9826,"am f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. return IntegralUp(double a). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelT",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:9959,Integrability,integrat,integration,9959,"egralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:10009,Integrability,integrat,integration,10009,"egralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param b upper value of the integration interval. template<class Function>; double IntegralLow(Function & f, double b);. evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. return IntegralLow(double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:10644,Integrability,integrat,integrator,10644,"T::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c; @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval; @param c position of singularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); stat",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11166,Integrability,integrat,integrator,11166,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11244,Integrability,Integrat,IntegratorOneDimOptions,11244,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11385,Integrability,integrat,integrator,11385,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11432,Integrability,Integrat,Integrator,11432,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11467,Integrability,Integrat,IntegrationOneDim,11467,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11604,Integrability,Integrat,IntegrationOneDim,11604,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:11740,Integrability,Integrat,IntegrationOneDim,11740,"ularity. double operator()(double x). define operator() for IntegralLow. double Result() const. return the Result of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const. return the estimate of the absolute Error of the last Integral calculation. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const. return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. int NEval() const. return number of function evaluations in calculating the integral; (if integrator do not implement this function returns -1). { return fIntegrator == 0 ? -1 : fIntegrator->NEval(); }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. { if (fIntegrator) fIntegrator->SetRelTolerance(relTolerance); }. void SetAbsTolerance(double absTolerance). set the desired absolute Error. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTolerance); }. VirtualIntegratorOneDim * GetIntegrator(). return a pointer to integrator object. { return fIntegrator; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt). set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationOneDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationOneDim::Type ); static function to get a string from the enumeration. VirtualIntegratorOneDim * CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:402,Modifiability,plug-in,plug-in,402,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:604,Modifiability,adapt,adaptive,604,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:621,Modifiability,adapt,adaptive,621,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:868,Modifiability,adapt,adaptive,868,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:908,Modifiability,ADAPT,ADAPTIVESINGULAR,908,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1029,Modifiability,ADAPT,ADAPTIVE,1029,"ss Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(c",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1240,Modifiability,ADAPT,ADAPTIVESINGULAR,1240,"HCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Ma",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1326,Modifiability,ADAPT,ADAPTIVESINGULAR,1326,"ration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegr",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1496,Modifiability,ADAPT,ADAPTIVE,1496,"lgorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, do",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4091,Modifiability,Inherit,Inheritance,4091,"val() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS3",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4104,Modifiability,Inherit,Inherited,4104,"val() const; doubleoperator()(double x); ROOT::Math::IntegratorOneDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTolerance); voidSetFunction(const ROOT::Math::IGenFunction& f, bool copy = false); voidSetFunction(const ROOT::Math::IMultiGenFunction& f, unsigned int icoord, const double* x); voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); voidSetRelTolerance(double relTolerance); intStatus() const. protected:. ROOT::Math::VirtualIntegratorOneDim*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS3",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4645,Modifiability,adapt,adaptive,4645,"ntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4685,Modifiability,adapt,adaptive,4685,"l, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a functi",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4699,Modifiability,adapt,adaptive,4699,"l, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a functi",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5795,Modifiability,adapt,adaptive,5795,"ve Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @pa",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:5809,Modifiability,adapt,adaptive,5809,"ve Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @pa",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6005,Modifiability,ADAPT,ADAPTIVE,6005,"ype values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointe",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6627,Modifiability,adapt,adaptive,6627,"ol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function.",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6641,Modifiability,adapt,adaptive,6641,"ol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function.",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:6837,Modifiability,ADAPT,ADAPTIVE,6837,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:324,Performance,perform,performing,324,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:421,Performance,load,load,421,". ROOT::Math::IntegratorOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDim. class ROOT::Math::IntegratorOneDim. User Class for performing numerical integration of a function in one dimension.; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doub",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1385,Performance,perform,performances,1385,"lgorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, do",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4947,Usability,simpl,simple,4947,"e; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the defa",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:2773,Availability,toler,tolerance,2773,"efaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual po",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3100,Availability,toler,tolerance,3100,"efaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual po",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:14,Deployability,Integrat,IntegratorOneDimOptions,14,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:262,Deployability,Integrat,IntegratorOneDimOptions,262,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:305,Deployability,Integrat,IntegratorOneDimOptions,305,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:397,Deployability,integrat,integration,397,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:539,Deployability,Integrat,Integration,539,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:597,Deployability,Integrat,IntegratorOneDimOptions,597,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:968,Deployability,Integrat,IntegrationOneDim,968,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1308,Deployability,Integrat,IntegratorOneDimOptionsIntegratorOneDimOptions,1308,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1405,Deployability,Integrat,IntegratorOneDimOptionsIntegratorOneDimOptions,1405,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1470,Deployability,Integrat,IntegratorOneDimOptions,1470,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1513,Deployability,Integrat,IntegrationOneDim,1513,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1601,Deployability,Integrat,IntegratorOneDimOptions,1601,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1653,Deployability,Integrat,IntegratorOneDimOptions,1653,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3324,Deployability,Integrat,IntegratorOneDimOptions,3324,"signed int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3389,Deployability,Integrat,Integrator,3389,":Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultInteg",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3420,Deployability,integrat,integrator,3420,":Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultInteg",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3432,Deployability,Integrat,IntegratorOneDimOptions,3432,"ratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3612,Deployability,Integrat,IntegratorOneDimOptions,3612,"tions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void S",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3643,Deployability,Integrat,IntegratorOneDimOptions,3643,". Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegra",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3673,Deployability,Integrat,IntegratorOneDimOptions,3673,". Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegra",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3989,Deployability,integrat,integrator,3989,"ons; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4104,Deployability,Integrat,IntegrationOneDim,4104,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4128,Deployability,Integrat,IntegratorType,4128,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4164,Deployability,integrat,integrator,4164,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4216,Deployability,Integrat,IntegrationOneDim,4216,"ludes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. » Author: L. Moneta Fri Aug 15 2008 » Copyrigh",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4301,Deployability,integrat,integrator,4301,"Options & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last cha",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4689,Deployability,Integrat,IntegrationOneDim,4689,"he default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3896,Energy Efficiency,adapt,adaptive,3896,"ons; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:14,Integrability,Integrat,IntegratorOneDimOptions,14,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:262,Integrability,Integrat,IntegratorOneDimOptions,262,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:305,Integrability,Integrat,IntegratorOneDimOptions,305,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:397,Integrability,integrat,integration,397,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:539,Integrability,Integrat,Integration,539,". ROOT::Math::IntegratorOneDimOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorOneDimOptions. class ROOT::Math::IntegratorOneDimOptions: public ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultInte",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:597,Integrability,Integrat,IntegratorOneDimOptions,597,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:968,Integrability,Integrat,IntegrationOneDim,968,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1308,Integrability,Integrat,IntegratorOneDimOptionsIntegratorOneDimOptions,1308,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1405,Integrability,Integrat,IntegratorOneDimOptionsIntegratorOneDimOptions,1405,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1470,Integrability,Integrat,IntegratorOneDimOptions,1470,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1513,Integrability,Integrat,IntegrationOneDim,1513,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1601,Integrability,Integrat,IntegratorOneDimOptions,1601,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:1653,Integrability,Integrat,IntegratorOneDimOptions,1653,"tion Members (Methods); public:. virtual~IntegratorOneDimOptions(); doubleROOT::Math::BaseIntegratorOptions::AbsTolerance() const; ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); static ROOT::Math::IOptions&Default(const char* name); static doubleDefaultAbsTolerance(); static stringDefaultIntegrator(); static ROOT::Math::IntegrationOneDim::TypeDefaultIntegratorType(); static unsigned intDefaultNPoints(); static doubleDefaultRelTolerance(); static unsigned intDefaultWKSize(); ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); virtual stringIntegrator() const; ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(ROOT::Math::IOptions* extraOpts = 0); ROOT::Math::IntegratorOneDimOptionsIntegratorOneDimOptions(const ROOT::Math::IntegratorOneDimOptions& rhs); ROOT::Math::IntegrationOneDim::TypeIntegratorType() const; unsigned intNPoints() const; ROOT::Math::IntegratorOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseInt",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3324,Integrability,Integrat,IntegratorOneDimOptions,3324,"signed int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3389,Integrability,Integrat,Integrator,3389,":Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultInteg",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3420,Integrability,integrat,integrator,3420,":Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultInteg",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3432,Integrability,Integrat,IntegratorOneDimOptions,3432,"ratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3612,Integrability,Integrat,IntegratorOneDimOptions,3612,"tions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void S",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3643,Integrability,Integrat,IntegratorOneDimOptions,3643,". Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegra",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3673,Integrability,Integrat,IntegratorOneDimOptions,3673,". Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegra",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3989,Integrability,integrat,integrator,3989,"ons; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4104,Integrability,Integrat,IntegrationOneDim,4104,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4128,Integrability,Integrat,IntegratorType,4128,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4164,Integrability,integrat,integrator,4164,"ns::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only t",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4216,Integrability,Integrat,IntegrationOneDim,4216,"ludes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. » Author: L. Moneta Fri Aug 15 2008 » Copyrigh",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4301,Integrability,integrat,integrator,4301,"Options & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last cha",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:4689,Integrability,Integrat,IntegrationOneDim,4689,"he default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT::Math::IOptions & Default(const char* name); retrieve specific options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find specific options - return 0 if not existing. void PrintDefault(const char* name = 0, ostream& os = std::cout); print only the specified default options. » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3195,Modifiability,Inherit,Inheritance,3195,"ns(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (Integ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3208,Modifiability,Inherit,Inherited,3208,"ns(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (Integ",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:3896,Modifiability,adapt,adaptive,3896,"ons; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual ~IntegratorOneDimOptions(); {}. IntegratorOneDimOptions(const IntegratorOneDimOptions & rhs); copy constructor. {}. void SetNPoints(unsigned int n); specific method for one-dim; set number of points rule; values of 1,2,3,4,5,6 corresponds to 15,21,31,41,51,61 and they are used in GSL adaptive; values > 6 corresponds to the actual points and they are used by teh GaussLegendre integrator. { fNCalls = n; }. unsigned int NPoints() const; maximum number of function calls. { return fNCalls; }. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const char* name); set 1D integrator name. void Print(ostream& os = std::cout) const; print all the options. void SetDefaultIntegrator(const char* name); static methods for setting and retrieving the default options. void SetDefaultAbsTolerance(double tol). void SetDefaultRelTolerance(double tol). void SetDefaultWKSize(unsigned int size). void SetDefaultNPoints(unsigned int n). std::string DefaultIntegrator(). IntegrationOneDim::Type DefaultIntegratorType(). double DefaultAbsTolerance(). double DefaultRelTolerance(). unsigned int DefaultWKSize(). unsigned int DefaultNPoints(). ROOT",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:2670,Usability,Clear,ClearExtra,2670,"rOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual",MatchSource.WIKI,root/html602/ROOT__Math__IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:488,Availability,avail,available,488,". ROOT::Math::Interpolator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Interpolator. class ROOT::Math::Interpolator. Class for performing function interpolation of points.; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor.; See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL.; See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual</A> for more information.; The class provides additional methods for computing derivatives and integrals of interpolating functions. This class does not support copying.; @ingroup Interpolation. Function Members (Methods); public:. virtual~Interpolator(); doubleDeriv(double x) const; doubleDeriv2(double x) const; doubleEval(double x) const; doubleInteg(double a, double b) const; ROOT::Math::InterpolatorInterpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); ROOT::Math::InterpolatorInterpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); boolSetData(const vector<double>& x, const vector<double>& y); boolSetData(unsigned int ndata, const double* x, const double* y); stringType() const; stringTypeGet() const. private:. ROOT::Math::InterpolatorInterpolator(const ROOT::Math::Interpolator&); ROOT::Math::Interpolator&operator=(const ROOT::Math::Interpolator&). Data Members; private:. ROOT::Math::GSLInterpolator*fInterppointer to GSL interpolator class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from number of data points and with Int",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:2501,Deployability,continuous,continuous,2501,"nterpolator(const ROOT::Math::Interpolator&); ROOT::Math::Interpolator&operator=(const ROOT::Math::Interpolator&). Data Members; private:. ROOT::Math::GSLInterpolator*fInterppointer to GSL interpolator class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from number of data points and with Interpolation::Type type.; The data can be set later on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetData(const vector<double>& x, const vector<double>& y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size. bool SetData(unsigned int ndata, const double* x, const double* y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size. double Eval(double x) const. Return the interpolated value at point x. double Deriv(double x) const. Return the derivative of the interpolated function at point x. double Der",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:2873,Energy Efficiency,efficient,efficient,2873,"an interpolator class from number of data points and with Interpolation::Type type.; The data can be set later on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetData(const vector<double>& x, const vector<double>& y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size. bool SetData(unsigned int ndata, const double* x, const double* y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size. double Eval(double x) const. Return the interpolated value at point x. double Deriv(double x) const. Return the derivative of the interpolated function at point x. double Deriv2(double x) const. Return the second derivative of the interpolated function at point x. double Integ(double a, double b) const. Return the Integral of the interpolated function over the range [a,b]. std::string Type() const. Return the type of interpolation method. std::string TypeGet() const. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. F",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:3164,Energy Efficiency,efficient,efficient,3164,"on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetData(const vector<double>& x, const vector<double>& y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size. bool SetData(unsigned int ndata, const double* x, const double* y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size. double Eval(double x) const. Return the interpolated value at point x. double Deriv(double x) const. Return the derivative of the interpolated function at point x. double Deriv2(double x) const. Return the second derivative of the interpolated function at point x. double Integ(double a, double b) const. Return the Integral of the interpolated function over the range [a,b]. std::string Type() const. Return the type of interpolation method. std::string TypeGet() const. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:1750,Modifiability,Inherit,Inheritance,1750,"ating functions. This class does not support copying.; @ingroup Interpolation. Function Members (Methods); public:. virtual~Interpolator(); doubleDeriv(double x) const; doubleDeriv2(double x) const; doubleEval(double x) const; doubleInteg(double a, double b) const; ROOT::Math::InterpolatorInterpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); ROOT::Math::InterpolatorInterpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); boolSetData(const vector<double>& x, const vector<double>& y); boolSetData(unsigned int ndata, const double* x, const double* y); stringType() const; stringTypeGet() const. private:. ROOT::Math::InterpolatorInterpolator(const ROOT::Math::Interpolator&); ROOT::Math::Interpolator&operator=(const ROOT::Math::Interpolator&). Data Members; private:. ROOT::Math::GSLInterpolator*fInterppointer to GSL interpolator class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from number of data points and with Interpolation::Type type.; The data can be set later on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetDa",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:1763,Modifiability,Inherit,Inherited,1763,"ating functions. This class does not support copying.; @ingroup Interpolation. Function Members (Methods); public:. virtual~Interpolator(); doubleDeriv(double x) const; doubleDeriv2(double x) const; doubleEval(double x) const; doubleInteg(double a, double b) const; ROOT::Math::InterpolatorInterpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); ROOT::Math::InterpolatorInterpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); boolSetData(const vector<double>& x, const vector<double>& y); boolSetData(unsigned int ndata, const double* x, const double* y); stringType() const; stringTypeGet() const. private:. ROOT::Math::InterpolatorInterpolator(const ROOT::Math::Interpolator&); ROOT::Math::Interpolator&operator=(const ROOT::Math::Interpolator&). Data Members; private:. ROOT::Math::GSLInterpolator*fInterppointer to GSL interpolator class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from number of data points and with Interpolation::Type type.; The data can be set later on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetDa",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:307,Performance,perform,performing,307,". ROOT::Math::Interpolator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Interpolator. class ROOT::Math::Interpolator. Class for performing function interpolation of points.; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor.; See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL.; See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual</A> for more information.; The class provides additional methods for computing derivatives and integrals of interpolating functions. This class does not support copying.; @ingroup Interpolation. Function Members (Methods); public:. virtual~Interpolator(); doubleDeriv(double x) const; doubleDeriv2(double x) const; doubleEval(double x) const; doubleInteg(double a, double b) const; ROOT::Math::InterpolatorInterpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); ROOT::Math::InterpolatorInterpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE); boolSetData(const vector<double>& x, const vector<double>& y); boolSetData(unsigned int ndata, const double* x, const double* y); stringType() const; stringTypeGet() const. private:. ROOT::Math::InterpolatorInterpolator(const ROOT::Math::Interpolator&); ROOT::Math::Interpolator&operator=(const ROOT::Math::Interpolator&). Data Members; private:. ROOT::Math::GSLInterpolator*fInterppointer to GSL interpolator class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interpolator(unsigned int ndata = 0, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from number of data points and with Int",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:3019,Performance,perform,performed,3019,"an interpolator class from number of data points and with Interpolation::Type type.; The data can be set later on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetData(const vector<double>& x, const vector<double>& y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size. bool SetData(unsigned int ndata, const double* x, const double* y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size. double Eval(double x) const. Return the interpolated value at point x. double Deriv(double x) const. Return the derivative of the interpolated function at point x. double Deriv2(double x) const. Return the second derivative of the interpolated function at point x. double Integ(double a, double b) const. Return the Integral of the interpolated function over the range [a,b]. std::string Type() const. Return the type of interpolation method. std::string TypeGet() const. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. F",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__Interpolator.html:3319,Performance,perform,performed,3319,"on with the SetData method.; In case the data size is not known, better using the default of zero or the next constructor later on.; The default interpolation type is Cubic spline. Interpolator(const vector<double>& x, const vector<double>& y, ROOT::Math::Interpolation::Type type = Interpolation::kCSPLINE). Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline. virtual ~Interpolator(). Interpolator(const ROOT::Math::Interpolator& ); usually copying is non trivial, so we make this unaccessible. bool SetData(const vector<double>& x, const vector<double>& y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size. bool SetData(unsigned int ndata, const double* x, const double* y). Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size. double Eval(double x) const. Return the interpolated value at point x. double Deriv(double x) const. Return the derivative of the interpolated function at point x. double Deriv2(double x) const. Return the second derivative of the interpolated function at point x. double Integ(double a, double b) const. Return the Integral of the interpolated function over the range [a,b]. std::string Type() const. Return the type of interpolation method. std::string TypeGet() const. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Interpolator.html
https://root.cern/root/html602/ROOT__Math__IOptions.html:516,Availability,avail,available,516,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const",MatchSource.WIKI,root/html602/ROOT__Math__IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html
https://root.cern/root/html602/ROOT__Math__IOptions.html:316,Deployability,configurat,configuration,316,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const",MatchSource.WIKI,root/html602/ROOT__Math__IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html
https://root.cern/root/html602/ROOT__Math__IOptions.html:293,Integrability,interface,interface,293,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const",MatchSource.WIKI,root/html602/ROOT__Math__IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html
https://root.cern/root/html602/ROOT__Math__IOptions.html:316,Modifiability,config,configuration,316,". ROOT::Math::IOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IOptions. class ROOT::Math::IOptions. Generic interface for defining configuration options of a numerical algorithm. @ingroup NumAlgo. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IOptions(); virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const",MatchSource.WIKI,root/html602/ROOT__Math__IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html
https://root.cern/root/html602/ROOT__Math__IOptions.html:1544,Modifiability,Inherit,Inheritance,1544," virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const char* name) const. int IValue(const char* name) const. std::string NamedValue(const char* name) const. bool GetRealValue(const char* , double& ) const; methods to be re-implemented in the derived classes. { return false; }. bool GetIntValue(const char* , int& ) const; { return false; }. bool GetNamedValue(const char* , string& ) const; { return false; }. void SetRealValue(const char* , double ); method wich need to be re-implemented by the derived classes. {MATH_ERROR_MSG(""IOptions::SetRealValue"",""Invalid setter method called""); }. void SetIntValue(const char* ,",MatchSource.WIKI,root/html602/ROOT__Math__IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html
https://root.cern/root/html602/ROOT__Math__IOptions.html:1557,Modifiability,Inherit,Inherited,1557," virtual ROOT::Math::IOptions*Clone() const; virtual boolGetIntValue(const char*, int&) const; virtual boolGetNamedValue(const char*, string&) const; virtual boolGetRealValue(const char*, double&) const; ROOT::Math::IOptionsIOptions(); ROOT::Math::IOptionsIOptions(const ROOT::Math::IOptions&); intIValue(const char* name) const; stringNamedValue(const char* name) const; ROOT::Math::IOptions&operator=(const ROOT::Math::IOptions&); virtual voidPrint(ostream& = std::cout) const; doubleRValue(const char* name) const; virtual voidSetIntValue(const char*, int); virtual voidSetNamedValue(const char*, const char*); virtual voidSetRealValue(const char*, double); voidSetValue(const char* name, double val); voidSetValue(const char* name, int val); voidSetValue(const char* name, const char* val). private:. boolDoGetValue(const char* name, double& val) const; boolDoGetValue(const char* name, int& val) const; boolDoGetValue(const char* name, string& val) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IOptions(); {}. virtual ~IOptions(). IOptions * Clone() const; copy the options. void SetValue(const char* name, double val); generic methods for retrivieng options ; set option value. { SetRealValue(name,val);}. void SetValue(const char* name, int val); { SetIntValue(name,val);}. void SetValue(const char* name, const char* val); { SetNamedValue(name,val);}. double RValue(const char* name) const. int IValue(const char* name) const. std::string NamedValue(const char* name) const. bool GetRealValue(const char* , double& ) const; methods to be re-implemented in the derived classes. { return false; }. bool GetIntValue(const char* , int& ) const; { return false; }. bool GetNamedValue(const char* , string& ) const; { return false; }. void SetRealValue(const char* , double ); method wich need to be re-implemented by the derived classes. {MATH_ERROR_MSG(""IOptions::SetRealValue"",""Invalid setter method called""); }. void SetIntValue(const char* ,",MatchSource.WIKI,root/html602/ROOT__Math__IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IOptions.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:897,Availability,avail,available,897,". ROOT::Math::IParametricFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricFunctionMultiDim. class ROOT::Math::IParametricFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFun",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:480,Integrability,interface,interface,480,". ROOT::Math::IParametricFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricFunctionMultiDim. class ROOT::Math::IParametricFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFun",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:3032,Integrability,interface,interface,3032,"T::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricFunctionMultiDim&operator=(ROOT::Math::IParametricFunctionMultiDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(const double* x) const; virtual doubleDoEvalPar(const double* x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(const double* x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:2454,Modifiability,Inherit,Inheritance,2454,"T::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricFunctionMultiDim&operator=(ROOT::Math::IParametricFunctionMultiDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(const double* x) const; virtual doubleDoEvalPar(const double* x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(const double* x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:2467,Modifiability,Inherit,Inherited,2467,"T::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricFunctionMultiDim&operator=(ROOT::Math::IParametricFunctionMultiDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(const double* x) const; virtual doubleDoEvalPar(const double* x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(const double* x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:3062,Performance,cache,cached,3062,"T::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricFunctionMultiDim&operator=(ROOT::Math::IParametricFunctionMultiDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(const double* x) const; virtual doubleDoEvalPar(const double* x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(const double* x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html:579,Safety,avoid,avoid,579,". ROOT::Math::IParametricFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricFunctionMultiDim. class ROOT::Math::IParametricFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimIParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionMultiDim&operator=(const ROOT::Math::IParametricFun",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:889,Availability,avail,available,889,". ROOT::Math::IParametricFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricFunctionOneDim. class ROOT::Math::IParametricFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(R",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:472,Integrability,interface,interface,472,". ROOT::Math::IParametricFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricFunctionOneDim. class ROOT::Math::IParametricFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(R",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:2941,Integrability,interface,interface,2941,"intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(ROOT::Math::IParametricFunctionOneDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(double x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. double operator()(double x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:2370,Modifiability,Inherit,Inheritance,2370,"IBaseParam&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(ROOT::Math::IParametricFunctionOneDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(double x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. double operator()(double x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. » Author: L. Mon",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:2383,Modifiability,Inherit,Inherited,2383,"IBaseParam&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(ROOT::Math::IParametricFunctionOneDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(double x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. double operator()(double x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. » Author: L. Mon",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:2971,Performance,cache,cached,2971,"intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(ROOT::Math::IParametricFunctionOneDim&&); virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoEval(double x) const; virtual doubleDoEvalPar(double x, const double* p) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(const double* x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. return DoEvalPar(x, p). double DoEval(double x) const. Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. double operator()(double x, const double* p) const. Evaluate function at a point x and for given parameters p.; This method does not change the internal status of the function (internal parameter values).; If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be; called.; Use the pure virtual function DoEvalPar to implement it. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html:571,Safety,avoid,avoid,571,". ROOT::Math::IParametricFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricFunctionOneDim. class ROOT::Math::IParametricFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimIParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleoperator()(double x, const double* p) const; doubleoperator()(const double* x, const double* p) const; ROOT::Math::IParametricFunctionOneDim&operator=(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricFunctionOneDim&operator=(R",MatchSource.WIKI,root/html602/ROOT__Math__IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:884,Availability,avail,available,884,". ROOT::Math::IParametricGradFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricGradFunctionMultiDim. class ROOT::Math::IParametricGradFunctionMultiDim: public ROOT::Math::IParametricFunctionMultiDim. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricGradFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricGradFunctionMultiDimIParametricGradFunctionMultiDim(); ROOT::Math::IParametricGradFunctionMultiDimIParametricGradFunctionMultiDim(",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:467,Integrability,interface,interface,467,". ROOT::Math::IParametricGradFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricGradFunctionMultiDim. class ROOT::Math::IParametricGradFunctionMultiDim: public ROOT::Math::IParametricFunctionMultiDim. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricGradFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricGradFunctionMultiDimIParametricGradFunctionMultiDim(); ROOT::Math::IParametricGradFunctionMultiDimIParametricGradFunctionMultiDim(",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:3023,Modifiability,Inherit,Inheritance,3023,"im&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleROOT::Math::IParametricFunctionMultiDim::operator()(const double* x, const double* p) const; ROOT::Math::IParametricGradFunctionMultiDim&operator=(const ROOT::Math::IParametricGradFunctionMultiDim&); doubleParameterDerivative(const double* x, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidParameterGradient(const double* x, double* grad) const; virtual voidParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(const double* x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IParametricGradFunctionMultiDim(). Virtual Destructor (no operations). {}. void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcor",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:3036,Modifiability,Inherit,Inherited,3036,"im&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; virtual unsigned intROOT::Math::IBaseParam::NPar() const; doubleROOT::Math::IParametricFunctionMultiDim::operator()(const double* x, const double* p) const; ROOT::Math::IParametricGradFunctionMultiDim&operator=(const ROOT::Math::IParametricGradFunctionMultiDim&); doubleParameterDerivative(const double* x, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidParameterGradient(const double* x, double* grad) const; virtual voidParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(const double* x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IParametricGradFunctionMultiDim(). Virtual Destructor (no operations). {}. void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcor",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:3762,Performance,cache,cached,3762,"uble* x, const double* p) const; ROOT::Math::IParametricGradFunctionMultiDim&operator=(const ROOT::Math::IParametricGradFunctionMultiDim&); doubleParameterDerivative(const double* x, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidParameterGradient(const double* x, double* grad) const; virtual voidParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(const double* x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IParametricGradFunctionMultiDim(). Virtual Destructor (no operations). {}. void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:3895,Performance,cache,cached,3895,"uble* x, const double* p) const; ROOT::Math::IParametricGradFunctionMultiDim&operator=(const ROOT::Math::IParametricGradFunctionMultiDim&); doubleParameterDerivative(const double* x, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidParameterGradient(const double* x, double* grad) const; virtual voidParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(const double* x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IParametricGradFunctionMultiDim(). Virtual Destructor (no operations). {}. void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html:566,Safety,avoid,avoid,566,". ROOT::Math::IParametricGradFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricGradFunctionMultiDim. class ROOT::Math::IParametricGradFunctionMultiDim: public ROOT::Math::IParametricFunctionMultiDim. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricGradFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(ROOT::Math::IParametricFunctionMultiDim&&); ROOT::Math::IParametricFunctionMultiDimROOT::Math::IParametricFunctionMultiDim::IParametricFunctionMultiDim(const ROOT::Math::IParametricFunctionMultiDim&); ROOT::Math::IParametricGradFunctionMultiDimIParametricGradFunctionMultiDim(); ROOT::Math::IParametricGradFunctionMultiDimIParametricGradFunctionMultiDim(",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionMultiDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:876,Availability,avail,available,876,". ROOT::Math::IParametricGradFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricGradFunctionOneDim. class ROOT::Math::IParametricGradFunctionOneDim: public ROOT::Math::IParametricFunctionOneDim. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricGradFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricGradFunctionOneDimIParametricGradFunctionOneDim(); ROOT::Math::IParametricGradFunctionOneDimIParametricGradFunctionOneDim(const ROOT::Math::IParametricGradFunctionOneDim&); virtual",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:459,Integrability,interface,interface,459,". ROOT::Math::IParametricGradFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricGradFunctionOneDim. class ROOT::Math::IParametricGradFunctionOneDim: public ROOT::Math::IParametricFunctionOneDim. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricGradFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricGradFunctionOneDimIParametricGradFunctionOneDim(); ROOT::Math::IParametricGradFunctionOneDimIParametricGradFunctionOneDim(const ROOT::Math::IParametricGradFunctionOneDim&); virtual",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:3243,Modifiability,Inherit,Inheritance,3243,"nctionOneDim&operator=(const ROOT::Math::IParametricGradFunctionOneDim&); doubleParameterDerivative(double x, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, unsigned int ipar = 0) const; doubleParameterDerivative(double x, const double* p, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidParameterGradient(double x, double* grad) const; voidParameterGradient(const double* x, double* grad) const; virtual voidParameterGradient(double x, const double* p, double* grad) const; voidParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. return ParameterGradient(x, Parameters(), grad). double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. virtual ~IParametricGradFunctionOneDim(). Virtual Destructor (no operations). {}. void ParameterGradient(double x, const double* p, double* grad) const. Evaluate th",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:3256,Modifiability,Inherit,Inherited,3256,"nctionOneDim&operator=(const ROOT::Math::IParametricGradFunctionOneDim&); doubleParameterDerivative(double x, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, unsigned int ipar = 0) const; doubleParameterDerivative(double x, const double* p, unsigned int ipar = 0) const; doubleParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidParameterGradient(double x, double* grad) const; voidParameterGradient(const double* x, double* grad) const; virtual voidParameterGradient(double x, const double* p, double* grad) const; voidParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. return ParameterGradient(x, Parameters(), grad). double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. virtual ~IParametricGradFunctionOneDim(). Virtual Destructor (no operations). {}. void ParameterGradient(double x, const double* p, double* grad) const. Evaluate th",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:3898,Performance,cache,cached,3898,"le* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. return ParameterGradient(x, Parameters(), grad). double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. virtual ~IParametricGradFunctionOneDim(). Virtual Destructor (no operations). {}. void ParameterGradient(double x, const double* p, double* grad) const. Evaluate the derivatives of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency if needed. double ParameterDerivative(double x, const double* p, unsigned int ipar = 0) const. Partial derivative with respect a parameter. double ParameterDerivative(double x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:4080,Performance,cache,cached,4080,"e*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. return ParameterGradient(x, Parameters(), grad). double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. virtual ~IParametricGradFunctionOneDim(). Virtual Destructor (no operations). {}. void ParameterGradient(double x, const double* p, double* grad) const. Evaluate the derivatives of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency if needed. double ParameterDerivative(double x, const double* p, unsigned int ipar = 0) const. Partial derivative with respect a parameter. double ParameterDerivative(double x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:4664,Performance,cache,cached,4664,"e*ROOT::Math::IBaseParam::Parameters() const; virtual voidROOT::Math::IBaseParam::SetParameters(const double* p). private:. virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ParameterGradient(const double* x, const double* p, double* grad) const. Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency. double ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const. Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. return DoParameterDerivative(x, p, ipar). void ParameterGradient(const double* x, double* grad) const. Evaluate all derivatives using cached parameter values. return ParameterGradient(x, Parameters(), grad). double ParameterDerivative(const double* x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. virtual ~IParametricGradFunctionOneDim(). Virtual Destructor (no operations). {}. void ParameterGradient(double x, const double* p, double* grad) const. Evaluate the derivatives of the function with respect to the parameters at a point x.; It is optional to be implemented by the derived classes for better efficiency if needed. double ParameterDerivative(double x, const double* p, unsigned int ipar = 0) const. Partial derivative with respect a parameter. double ParameterDerivative(double x, unsigned int ipar = 0) const. Evaluate partial derivative using cached parameter values. » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html:558,Safety,avoid,avoid,558,". ROOT::Math::IParametricGradFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IParametricGradFunctionOneDim. class ROOT::Math::IParametricGradFunctionOneDim: public ROOT::Math::IParametricFunctionOneDim. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IParametricGradFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricGradFunctionOneDimIParametricGradFunctionOneDim(); ROOT::Math::IParametricGradFunctionOneDimIParametricGradFunctionOneDim(const ROOT::Math::IParametricGradFunctionOneDim&); virtual",MatchSource.WIKI,root/html602/ROOT__Math__IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IParametricGradFunctionOneDim.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:535,Availability,avail,available,535,". ROOT::Math::IRootFinderMethod. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IRootFinderMethod. class ROOT::Math::IRootFinderMethod. Interface for finding function roots of one-dimensional functions. @ingroup RootFinders. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:2082,Availability,error,error,2082,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:2146,Availability,error,error,2146,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:2361,Availability,error,error,2361,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:312,Integrability,Interface,Interface,312,". ROOT::Math::IRootFinderMethod. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IRootFinderMethod. class ROOT::Math::IRootFinderMethod. Interface for finding function roots of one-dimensional functions. @ingroup RootFinders. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:1196,Modifiability,Inherit,Inheritance,1196," » MATH; » MATHCORE; » ROOT::Math::IRootFinderMethod. class ROOT::Math::IRootFinderMethod. Interface for finding function roots of one-dimensional functions. @ingroup RootFinders. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:1209,Modifiability,Inherit,Inherited,1209," » MATH; » MATHCORE; » ROOT::Math::IRootFinderMethod. class ROOT::Math::IRootFinderMethod. Interface for finding function roots of one-dimensional functions. @ingroup RootFinders. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(); ROOT::Math::IRootFinderMethodIRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root",MatchSource.WIKI,root/html602/ROOT__Math__IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html
https://root.cern/root/html602/ROOT__Math__KDTree_-p1TDataPoint_1_double___.html:3087,Modifiability,Inherit,Inheritance,3087,"voidPrint(); voidReset(); voidSetOwner(Bool_t bIsOwner = true); voidSetSplitOption(ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::eSplitOption opt). private:. ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >KDTree<ROOT::Math::TDataPoint<1,double> >(); ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >KDTree<ROOT::Math::TDataPoint<1,double> >(const ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>&); ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>&operator=(const ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>&). Data Members; public:. static ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::eSplitOptionkBinContent; static ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::eSplitOptionkEffective. private:. Double_tfBucketSize; ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::BaseNode*fHead; Bool_tfIsFrozen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return _DataPoint::Dimension();}. void GetClosestPoints(const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type& rRef, UInt_t nPoints, vector<pair<const ROOT::Math::TDataPoint<1,double>*,Double_t> >& vFoundPoints) const. void GetPointsWithinDist(const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type& rRef, ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::value_type fDist, vector<const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type*>& vFoundPoints) const. Bool_t Insert(const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type& rData). void Print(int iRow = 0). BaseNode& operator=(const ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>& ); {return *this;}. Double_t GetEffectiveEntries() const; {return (GetSumw2()) ? std::pow(GetSumw(),2)/GetSumw2() : 0;}. UInt_t GetEntries() const; {return fEntries;}. void SetO",MatchSource.WIKI,root/html602/ROOT__Math__KDTree_-p1TDataPoint_1_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__KDTree_-p1TDataPoint_1_double___.html
https://root.cern/root/html602/ROOT__Math__KDTree_-p1TDataPoint_1_double___.html:3100,Modifiability,Inherit,Inherited,3100,"voidPrint(); voidReset(); voidSetOwner(Bool_t bIsOwner = true); voidSetSplitOption(ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::eSplitOption opt). private:. ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >KDTree<ROOT::Math::TDataPoint<1,double> >(); ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >KDTree<ROOT::Math::TDataPoint<1,double> >(const ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>&); ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>&operator=(const ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>&). Data Members; public:. static ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::eSplitOptionkBinContent; static ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::eSplitOptionkEffective. private:. Double_tfBucketSize; ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::BaseNode*fHead; Bool_tfIsFrozen. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UInt_t Dimension(); {return _DataPoint::Dimension();}. void GetClosestPoints(const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type& rRef, UInt_t nPoints, vector<pair<const ROOT::Math::TDataPoint<1,double>*,Double_t> >& vFoundPoints) const. void GetPointsWithinDist(const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type& rRef, ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::value_type fDist, vector<const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type*>& vFoundPoints) const. Bool_t Insert(const ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type& rData). void Print(int iRow = 0). BaseNode& operator=(const ROOT::Math::KDTree<ROOT::Math::KDTree<ROOT::Math::TDataPoint<1,double> >::point_type>& ); {return *this;}. Double_t GetEffectiveEntries() const; {return (GetSumw2()) ? std::pow(GetSumw(),2)/GetSumw2() : 0;}. UInt_t GetEntries() const; {return fEntries;}. void SetO",MatchSource.WIKI,root/html602/ROOT__Math__KDTree_-p1TDataPoint_1_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__KDTree_-p1TDataPoint_1_double___.html
https://root.cern/root/html602/ROOT__Math__KelvinFunctions.html:1212,Modifiability,Inherit,Inheritance,1212,"earch. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::KelvinFunctions. class ROOT::Math::KelvinFunctions. KelvinFunctions. Calculates the Kelvin Functions Ber(x), Bei(x), Ker(x), Kei(x), and; their first derivatives. Function Members (Methods); public:. virtual~KelvinFunctions(); static doubleBei(double x); static doubleBer(double x); static doubleDBei(double x); static doubleDBer(double x); static doubleDKei(double x); static doubleDKer(double x); static doubleF1(double x); static doubleF2(double x); static doubleG1(double x); static doubleG2(double x); static doubleKei(double x); ROOT::Math::KelvinFunctionsKelvinFunctions(); ROOT::Math::KelvinFunctionsKelvinFunctions(const ROOT::Math::KelvinFunctions&); static doubleKer(double x); static doubleM(double x); static doubleN(double x); ROOT::Math::KelvinFunctions&operator=(const ROOT::Math::KelvinFunctions&); static doublePhi(double x); static doubleTheta(double x). Data Members; protected:. static doublefgEpsilon; static doublefgMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Ber(double x); The Kelvin functions and their first derivatives. double Bei(double x). double Ker(double x). double Kei(double x). double DBer(double x). double DBei(double x). double DKer(double x). double DKei(double x). double F1(double x); Utility functions appearing in the calculations of the Kelvin; functions. double F2(double x). double G1(double x). double G2(double x). double M(double x). double Theta(double x). double N(double x). double Phi(double x). virtual ~KelvinFunctions(); Include and empty virtual desctructor to eliminate compiler warnings. {}. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__KelvinFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__KelvinFunctions.html
https://root.cern/root/html602/ROOT__Math__KelvinFunctions.html:1225,Modifiability,Inherit,Inherited,1225,"earch. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::KelvinFunctions. class ROOT::Math::KelvinFunctions. KelvinFunctions. Calculates the Kelvin Functions Ber(x), Bei(x), Ker(x), Kei(x), and; their first derivatives. Function Members (Methods); public:. virtual~KelvinFunctions(); static doubleBei(double x); static doubleBer(double x); static doubleDBei(double x); static doubleDBer(double x); static doubleDKei(double x); static doubleDKer(double x); static doubleF1(double x); static doubleF2(double x); static doubleG1(double x); static doubleG2(double x); static doubleKei(double x); ROOT::Math::KelvinFunctionsKelvinFunctions(); ROOT::Math::KelvinFunctionsKelvinFunctions(const ROOT::Math::KelvinFunctions&); static doubleKer(double x); static doubleM(double x); static doubleN(double x); ROOT::Math::KelvinFunctions&operator=(const ROOT::Math::KelvinFunctions&); static doublePhi(double x); static doubleTheta(double x). Data Members; protected:. static doublefgEpsilon; static doublefgMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Ber(double x); The Kelvin functions and their first derivatives. double Bei(double x). double Ker(double x). double Kei(double x). double DBer(double x). double DBei(double x). double DKer(double x). double DKei(double x). double F1(double x); Utility functions appearing in the calculations of the Kelvin; functions. double F2(double x). double G1(double x). double G2(double x). double M(double x). double Theta(double x). double N(double x). double Phi(double x). virtual ~KelvinFunctions(); Include and empty virtual desctructor to eliminate compiler warnings. {}. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__KelvinFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__KelvinFunctions.html
https://root.cern/root/html602/ROOT__Math__LocalCoordinateSystemTag.html:967,Modifiability,Inherit,Inheritance,967,. ROOT::Math::LocalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::LocalCoordinateSystemTag. class ROOT::Math::LocalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~LocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(ROOT::Math::LocalCoordinateSystemTag&&); ROOT::Math::LocalCoordinateSystemTag&operator=(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTag&operator=(ROOT::Math::LocalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html602/ROOT__Math__LocalCoordinateSystemTag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LocalCoordinateSystemTag.html
https://root.cern/root/html602/ROOT__Math__LocalCoordinateSystemTag.html:980,Modifiability,Inherit,Inherited,980,. ROOT::Math::LocalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::LocalCoordinateSystemTag. class ROOT::Math::LocalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~LocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTagLocalCoordinateSystemTag(ROOT::Math::LocalCoordinateSystemTag&&); ROOT::Math::LocalCoordinateSystemTag&operator=(const ROOT::Math::LocalCoordinateSystemTag&); ROOT::Math::LocalCoordinateSystemTag&operator=(ROOT::Math::LocalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html602/ROOT__Math__LocalCoordinateSystemTag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LocalCoordinateSystemTag.html
https://root.cern/root/html602/ROOT__Math__LorentzRotation.html:8025,Modifiability,Inherit,Inheritance,8025,"OT::Math::LorentzRotation::Scalar xt, ROOT::Math::LorentzRotation::Scalar yx, ROOT::Math::LorentzRotation::Scalar yy, ROOT::Math::LorentzRotation::Scalar yz, ROOT::Math::LorentzRotation::Scalar yt, ROOT::Math::LorentzRotation::Scalar zx, ROOT::Math::LorentzRotation::Scalar zy, ROOT::Math::LorentzRotation::Scalar zz, ROOT::Math::LorentzRotation::Scalar zt, ROOT::Math::LorentzRotation::Scalar tx, ROOT::Math::LorentzRotation::Scalar ty, ROOT::Math::LorentzRotation::Scalar tz, ROOT::Math::LorentzRotation::Scalar tt). Data Members; public:. static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTZ; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXZ; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYZ; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZZ. private:. ROOT::Math::LorentzRotation::ScalarfM[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzRotation.html
https://root.cern/root/html602/ROOT__Math__LorentzRotation.html:8038,Modifiability,Inherit,Inherited,8038,"OT::Math::LorentzRotation::Scalar xt, ROOT::Math::LorentzRotation::Scalar yx, ROOT::Math::LorentzRotation::Scalar yy, ROOT::Math::LorentzRotation::Scalar yz, ROOT::Math::LorentzRotation::Scalar yt, ROOT::Math::LorentzRotation::Scalar zx, ROOT::Math::LorentzRotation::Scalar zy, ROOT::Math::LorentzRotation::Scalar zz, ROOT::Math::LorentzRotation::Scalar zt, ROOT::Math::LorentzRotation::Scalar tx, ROOT::Math::LorentzRotation::Scalar ty, ROOT::Math::LorentzRotation::Scalar tz, ROOT::Math::LorentzRotation::Scalar tt). Data Members; public:. static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkTZ; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkXZ; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkYZ; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZT; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZX; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZY; static ROOT::Math::LorentzRotation::ELorentzRotationMatrixIndexkZZ. private:. ROOT::Math::LorentzRotation::ScalarfM[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzRotation.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:2479,Availability,toler,tolerance,2479,"Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d); ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15396,Availability,toler,tolerance,15396,"rn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinat",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:13023,Energy Efficiency,energy,energy,13023,"PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:14403,Energy Efficiency,energy,energy,14403,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::nume",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:14540,Energy Efficiency,energy,energy,14540,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mo,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15261,Energy Efficiency,energy,energy,15261,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15483,Energy Efficiency,energy,energy,15483,"(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15573,Energy Efficiency,energy,energy,15573,"^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:16974,Energy Efficiency,energy,energy,16974, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:10313,Modifiability,Inherit,Inheritance,10313,"T() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:10326,Modifiability,Inherit,Inherited,10326,"T() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:11216,Security,access,access,11216," Data Members; private:. ROOT::Math::PtEtaPhiE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:12572,Security,access,access,12572,"tzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:12640,Security,access,accessors,12640,"tzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15088,Testability,log,log,15088,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:15196,Testability,log,log,15196,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:2467,Availability,toler,tolerance,2467,"Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d); ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:15380,Availability,toler,tolerance,15380,"rn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinat",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:13007,Energy Efficiency,energy,energy,13007,"PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:14387,Energy Efficiency,energy,energy,14387,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::nume",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:14524,Energy Efficiency,energy,energy,14524,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mo,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:15245,Energy Efficiency,energy,energy,15245,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:15467,Energy Efficiency,energy,energy,15467,"(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:15557,Energy Efficiency,energy,energy,15557,"^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:16958,Energy Efficiency,energy,energy,16958, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:10297,Modifiability,Inherit,Inheritance,10297,"alarT() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiE4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:10310,Modifiability,Inherit,Inherited,10310,"alarT() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiE4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:11200,Security,access,access,11200,"nst. Data Members; private:. ROOT::Math::PtEtaPhiE4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:12556,Security,access,access,12556,"tzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:12624,Security,access,accessors,12624,"tzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:15072,Testability,log,log,15072,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:15180,Testability,log,log,15180,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:2479,Availability,toler,tolerance,2479,"Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d); ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15396,Availability,toler,tolerance,15396,"rn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinat",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:13023,Energy Efficiency,energy,energy,13023,"PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:14403,Energy Efficiency,energy,energy,14403,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::nume",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:14540,Energy Efficiency,energy,energy,14540,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mo,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15261,Energy Efficiency,energy,energy,15261,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15483,Energy Efficiency,energy,energy,15483,"(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15573,Energy Efficiency,energy,energy,15573,"^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:16974,Energy Efficiency,energy,energy,16974, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:10313,Modifiability,Inherit,Inheritance,10313,"T() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:10326,Modifiability,Inherit,Inherited,10326,"T() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:11216,Security,access,access,11216," Data Members; private:. ROOT::Math::PtEtaPhiM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:12572,Security,access,access,12572,"tzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:12640,Security,access,accessors,12640,"tzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15088,Testability,log,log,15088,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:15196,Testability,log,log,15196,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:2467,Availability,toler,tolerance,2467,"Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d); ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15380,Availability,toler,tolerance,15380,"rn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinat",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:13007,Energy Efficiency,energy,energy,13007,"PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:14387,Energy Efficiency,energy,energy,14387,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::nume",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:14524,Energy Efficiency,energy,energy,14524,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mo,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15245,Energy Efficiency,energy,energy,15245,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15467,Energy Efficiency,energy,energy,15467,"(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15557,Energy Efficiency,energy,energy,15557,"^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:16958,Energy Efficiency,energy,energy,16958, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:10297,Modifiability,Inherit,Inheritance,10297,"alarT() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiM4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:10310,Modifiability,Inherit,Inherited,10310,"alarT() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PtEtaPhiM4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordin",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:11200,Security,access,access,11200,"nst. Data Members; private:. ROOT::Math::PtEtaPhiM4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:12556,Security,access,access,12556,"tzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:12624,Security,access,accessors,12624,"tzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15072,Testability,log,log,15072,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px();",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15180,Testability,log,log,15180,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:2437,Availability,toler,tolerance,2437,":ScalarE() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d); ROOT::Math::LorentzVector<ROOT::Math::PxPy",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:15110,Availability,toler,tolerance,15110,"urn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinate",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:12739,Energy Efficiency,energy,energy,12739,"ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14119,Energy Efficiency,energy,energy,14119,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeri",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14256,Energy Efficiency,energy,energy,14256,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mome,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14977,Energy Efficiency,energy,energy,14977,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return f",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:15197,Energy Efficiency,energy,energy,15197,"t2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:15287,Energy Efficiency,energy,energy,15287,"p}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:16688,Energy Efficiency,energy,energy,16688, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<ROOT::Ma,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:10065,Modifiability,Inherit,Inheritance,10065,"zE4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:10078,Modifiability,Inherit,Inherited,10078,"zE4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:10952,Security,access,access,10952,"::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:12288,Security,access,access,12288,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:12356,Security,access,accessors,12356,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14804,Testability,log,log,14804,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14912,Testability,log,log,14912,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:2425,Availability,toler,tolerance,2425,":ScalarE() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >LorentzVector<ROOT::Math::PxPyPzE4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d); ROOT::Math::LorentzVector<ROOT::Math::PxPy",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:15094,Availability,toler,tolerance,15094,"urn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinate",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:12723,Energy Efficiency,energy,energy,12723,"ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:14103,Energy Efficiency,energy,energy,14103,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeri",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:14240,Energy Efficiency,energy,energy,14240,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mome,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:14961,Energy Efficiency,energy,energy,14961,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return f",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:15181,Energy Efficiency,energy,energy,15181,"t2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:15271,Energy Efficiency,energy,energy,15271,"p}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:16672,Energy Efficiency,energy,energy,16672, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<ROOT::Ma,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:10049,Modifiability,Inherit,Inheritance,10049,"xPyPzE4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:10062,Modifiability,Inherit,Inherited,10062,"xPyPzE4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:10936,Security,access,access,10936,"e> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:12272,Security,access,access,12272,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:12340,Security,access,accessors,12340,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:14788,Testability,log,log,14788,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:14896,Testability,log,log,14896,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:2437,Availability,toler,tolerance,2437,":ScalarE() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d); ROOT::Math::LorentzVector<ROOT::Math::PxPy",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:15110,Availability,toler,tolerance,15110,"urn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinate",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:12739,Energy Efficiency,energy,energy,12739,"ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14119,Energy Efficiency,energy,energy,14119,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeri",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14256,Energy Efficiency,energy,energy,14256,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mome,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14977,Energy Efficiency,energy,energy,14977,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return f",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:15197,Energy Efficiency,energy,energy,15197,"t2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:15287,Energy Efficiency,energy,energy,15287,"p}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:16688,Energy Efficiency,energy,energy,16688, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<ROOT::Ma,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:10065,Modifiability,Inherit,Inheritance,10065,"zM4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:10078,Modifiability,Inherit,Inherited,10078,"zM4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:10952,Security,access,access,10952,"::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:12288,Security,access,access,12288,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:12356,Security,access,accessors,12356,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14804,Testability,log,log,14804,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14912,Testability,log,log,14912,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:2425,Availability,toler,tolerance,2425,":ScalarE() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalare() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarenergy() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarEt() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarEt2() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarEta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalareta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarGamma() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const; boolisLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const; boolisSpacelike() const; boolisTimelike() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >&&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >&); ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >LorentzVector<ROOT::Math::PxPyPzM4D<double> >(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d); ROOT::Math::LorentzVector<ROOT::Math::PxPy",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:15094,Availability,toler,tolerance,15094,"urn the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinate",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:12723,Energy Efficiency,energy,energy,12723,"ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). {",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:14103,Energy Efficiency,energy,energy,14103,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeri",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:14240,Energy Efficiency,energy,energy,14240,+ Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if mome,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:14961,Energy Efficiency,energy,energy,14961,"\sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return f",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:15181,Energy Efficiency,energy,energy,15181,"t2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:15271,Energy Efficiency,energy,energy,15271,"p}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:16672,Energy Efficiency,energy,energy,16672, const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar rho() const; { return fCoordinates.Rho(); }. Scalar eta() const; { return fCoordinates.Eta(); }. Scalar pt() const; { return fCoordinates.Pt(); }. Scalar perp2() const; { return fCoordinates.Perp2(); }. Scalar mag2() const; { return fCoordinates.M2(); }. Scalar mag() const; { return fCoordinates.M(); }. Scalar mt() const; { return fCoordinates.Mt(); }. Scalar mt2() const; { return fCoordinates.Mt2(); }. Scalar energy() const; Methods requested by CMS ---. { return fCoordinates.E(); }. Scalar mass() const; { return fCoordinates.M(); }. Scalar mass2() const; { return fCoordinates.M2(); }. LorentzVector<CoordSystem>& SetE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a). Methods setting a Single-component; Work only if the component is one of which the vector is represented.; For example SetE will work for a PxPyPzE Vector but not for a PxPyPzM Vector. { fCoordinates.SetE (a); return *this; }. LorentzVector<CoordSystem>& SetEta(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a); { fCoordinates.SetEta(a); return *this; }. LorentzVector<CoordSystem>& SetM(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a); { fCoordinates.SetM (a); return *this; }. LorentzVector<CoordSystem>& SetPhi(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a); { fCoordinates.SetPhi(a); return *this; }. LorentzVector<CoordSystem>& SetPt(ROOT::Math::LorentzVector<ROOT::Ma,MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:10049,Modifiability,Inherit,Inheritance,10049,"xPyPzM4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:10062,Modifiability,Inherit,Inherited,10062,"xPyPzM4D<double> >::ScalarT() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalart() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarTheta() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalartheta() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar> >Vect() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarX() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarx() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarY() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalary() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::ScalarZ() const; ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scala",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:10936,Security,access,access,10936,"e> >::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::Lo",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:12272,Security,access,access,12272,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:12340,Security,access,accessors,12340,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:14788,Testability,log,log,14788,"(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:14896,Testability,log,log,14896,"ordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar ",MatchSource.WIKI,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html
https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html:650,Integrability,wrap,wraps,650,". ROOT::Math::LSResidualFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::LSResidualFunc. class ROOT::Math::LSResidualFunc: public ROOT::Math::IGradientFunctionMultiDim. LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivates which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin. Function Members (Methods); public:. virtual~LSResidualFunc(); virtual ROOT::Math::IMultiGenFunction*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::LSResidualFuncLSResidualFunc(); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); ROOT::Math::LSResi",MatchSource.WIKI,root/html602/ROOT__Math__LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html
https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html:692,Integrability,interface,interface,692,". ROOT::Math::LSResidualFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::LSResidualFunc. class ROOT::Math::LSResidualFunc: public ROOT::Math::IGradientFunctionMultiDim. LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivates which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin. Function Members (Methods); public:. virtual~LSResidualFunc(); virtual ROOT::Math::IMultiGenFunction*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::LSResidualFuncLSResidualFunc(); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); ROOT::Math::LSResi",MatchSource.WIKI,root/html602/ROOT__Math__LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html
https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html:2531,Modifiability,Inherit,Inheritance,2531,"ultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::LSResidualFuncLSResidualFunc(); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::FitMethodFunction& func, unsigned int i); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::LSResidualFunc&operator=(const ROOT::Math::LSResidualFunc& rhs). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; private:. const ROOT::Math::FitMethodFunction*fChi2; unsigned intfIndex; vector<double>fX2cached vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LSResidualFunc(); default ctor (required by CINT). {}. LSResidualFunc(const ROOT::Math::FitMethodFunction& func, unsigned int i); {}. LSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); copy ctor. operator=(const ROOT::Math::LSResidualFunc& rhs). IMultiGenFunction * Clone() const. unsigned int NDim() const; { return fChi2->NDim(); }. void Gradient(const double* x, double* g) const. FdF(x,f0,g). double DoEval(const double* x) const. double DoDerivative(const double* x, unsigned int icoord) const; return ROOT::Math::Derivator::Eval(*this, x, icoord, 1E-8);. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html
https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html:2544,Modifiability,Inherit,Inherited,2544,"ultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::LSResidualFuncLSResidualFunc(); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::FitMethodFunction& func, unsigned int i); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::LSResidualFunc&operator=(const ROOT::Math::LSResidualFunc& rhs). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; private:. const ROOT::Math::FitMethodFunction*fChi2; unsigned intfIndex; vector<double>fX2cached vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LSResidualFunc(); default ctor (required by CINT). {}. LSResidualFunc(const ROOT::Math::FitMethodFunction& func, unsigned int i); {}. LSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); copy ctor. operator=(const ROOT::Math::LSResidualFunc& rhs). IMultiGenFunction * Clone() const. unsigned int NDim() const; { return fChi2->NDim(); }. void Gradient(const double* x, double* g) const. FdF(x,f0,g). double DoEval(const double* x) const. double DoDerivative(const double* x, unsigned int icoord) const; return ROOT::Math::Derivator::Eval(*this, x, icoord, 1E-8);. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html
https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html:408,Security,access,accessing,408,". ROOT::Math::LSResidualFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::LSResidualFunc. class ROOT::Math::LSResidualFunc: public ROOT::Math::IGradientFunctionMultiDim. LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivates which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin. Function Members (Methods); public:. virtual~LSResidualFunc(); virtual ROOT::Math::IMultiGenFunction*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* g) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::LSResidualFuncLSResidualFunc(); ROOT::Math::LSResidualFuncLSResidualFunc(const ROOT::Math::LSResidualFunc& rhs); ROOT::Math::LSResi",MatchSource.WIKI,root/html602/ROOT__Math__LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__LSResidualFunc.html
https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html:742,Modifiability,Inherit,Inheritance,742,. ROOT::Math::MathMoreLibrary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MathMoreLibrary. class ROOT::Math::MathMoreLibrary. Function Members (Methods); public:. ~MathMoreLibrary(); static voidLoad(); ROOT::Math::MathMoreLibraryMathMoreLibrary(); ROOT::Math::MathMoreLibraryMathMoreLibrary(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibraryMathMoreLibrary(ROOT::Math::MathMoreLibrary&&); ROOT::Math::MathMoreLibrary&operator=(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibrary&operator=(ROOT::Math::MathMoreLibrary&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Load(); adding this method with force the auto-loading of the library. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html602/ROOT__Math__MathMoreLibrary.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html
https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html:755,Modifiability,Inherit,Inherited,755,. ROOT::Math::MathMoreLibrary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MathMoreLibrary. class ROOT::Math::MathMoreLibrary. Function Members (Methods); public:. ~MathMoreLibrary(); static voidLoad(); ROOT::Math::MathMoreLibraryMathMoreLibrary(); ROOT::Math::MathMoreLibraryMathMoreLibrary(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibraryMathMoreLibrary(ROOT::Math::MathMoreLibrary&&); ROOT::Math::MathMoreLibrary&operator=(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibrary&operator=(ROOT::Math::MathMoreLibrary&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Load(); adding this method with force the auto-loading of the library. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html602/ROOT__Math__MathMoreLibrary.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html
https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html:824,Performance,Load,Load,824,. ROOT::Math::MathMoreLibrary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MathMoreLibrary. class ROOT::Math::MathMoreLibrary. Function Members (Methods); public:. ~MathMoreLibrary(); static voidLoad(); ROOT::Math::MathMoreLibraryMathMoreLibrary(); ROOT::Math::MathMoreLibraryMathMoreLibrary(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibraryMathMoreLibrary(ROOT::Math::MathMoreLibrary&&); ROOT::Math::MathMoreLibrary&operator=(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibrary&operator=(ROOT::Math::MathMoreLibrary&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Load(); adding this method with force the auto-loading of the library. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html602/ROOT__Math__MathMoreLibrary.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html
https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html:871,Performance,load,loading,871,. ROOT::Math::MathMoreLibrary. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MathMoreLibrary. class ROOT::Math::MathMoreLibrary. Function Members (Methods); public:. ~MathMoreLibrary(); static voidLoad(); ROOT::Math::MathMoreLibraryMathMoreLibrary(); ROOT::Math::MathMoreLibraryMathMoreLibrary(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibraryMathMoreLibrary(ROOT::Math::MathMoreLibrary&&); ROOT::Math::MathMoreLibrary&operator=(const ROOT::Math::MathMoreLibrary&); ROOT::Math::MathMoreLibrary&operator=(ROOT::Math::MathMoreLibrary&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Load(); adding this method with force the auto-loading of the library. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html602/ROOT__Math__MathMoreLibrary.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MathMoreLibrary.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_3_3_.html:2045,Modifiability,Inherit,Inheritance,2045,"_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,3,3>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(ROOT::Math::MatRepStd<double,3,3>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,3,3>&operator=(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>&operator=(ROOT::Math::MatRepStd<double,3,3>&&); ROOT::Math::MatRepStd<double,3U,3U>&operator=<ROOT::Math::MatRepStd<double, 3, 3> >(const ROOT::Math::MatRepStd<double,3,3>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kSize. private:. Double32_tfArray[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_3_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_3_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_3_3_.html:2058,Modifiability,Inherit,Inherited,2058,"_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,3,3>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(ROOT::Math::MatRepStd<double,3,3>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,3,3>&operator=(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>&operator=(ROOT::Math::MatRepStd<double,3,3>&&); ROOT::Math::MatRepStd<double,3U,3U>&operator=<ROOT::Math::MatRepStd<double, 3, 3> >(const ROOT::Math::MatRepStd<double,3,3>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kSize. private:. Double32_tfArray[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_3_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_3_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_4_4_.html:2046,Modifiability,Inherit,Inheritance,2046,"4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,4,4>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(ROOT::Math::MatRepStd<double,4,4>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,4,4>&operator=(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>&operator=(ROOT::Math::MatRepStd<double,4,4>&&); ROOT::Math::MatRepStd<double,4U,4U>&operator=<ROOT::Math::MatRepStd<double, 4, 4> >(const ROOT::Math::MatRepStd<double,4,4>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kSize. private:. Double32_tfArray[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_4_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_4_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_4_4_.html:2059,Modifiability,Inherit,Inherited,2059,"4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,4,4>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(ROOT::Math::MatRepStd<double,4,4>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,4,4>&operator=(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>&operator=(ROOT::Math::MatRepStd<double,4,4>&&); ROOT::Math::MatRepStd<double,4U,4U>&operator=<ROOT::Math::MatRepStd<double, 4, 4> >(const ROOT::Math::MatRepStd<double,4,4>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kSize. private:. Double32_tfArray[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_4_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_4_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_5_5_.html:2046,Modifiability,Inherit,Inheritance,2046,"4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,5,5>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(ROOT::Math::MatRepStd<double,5,5>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,5,5>&operator=(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>&operator=(ROOT::Math::MatRepStd<double,5,5>&&); ROOT::Math::MatRepStd<double,5U,5U>&operator=<ROOT::Math::MatRepStd<double, 5, 5> >(const ROOT::Math::MatRepStd<double,5,5>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kSize. private:. Double32_tfArray[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_5_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_5_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_5_5_.html:2059,Modifiability,Inherit,Inherited,2059,"4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,5,5>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(ROOT::Math::MatRepStd<double,5,5>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,5,5>&operator=(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>&operator=(ROOT::Math::MatRepStd<double,5,5>&&); ROOT::Math::MatRepStd<double,5U,5U>&operator=<ROOT::Math::MatRepStd<double, 5, 5> >(const ROOT::Math::MatRepStd<double,5,5>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kSize. private:. Double32_tfArray[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_5_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_5_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_6_6_.html:2046,Modifiability,Inherit,Inheritance,2046,"4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,6,6>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(ROOT::Math::MatRepStd<double,6,6>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,6,6>&operator=(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>&operator=(ROOT::Math::MatRepStd<double,6,6>&&); ROOT::Math::MatRepStd<double,6U,6U>&operator=<ROOT::Math::MatRepStd<double, 6, 6> >(const ROOT::Math::MatRepStd<double,6,6>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kSize. private:. Double32_tfArray[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_6_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_6_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_6_6_.html:2059,Modifiability,Inherit,Inherited,2059,"4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,6,6>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(ROOT::Math::MatRepStd<double,6,6>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,6,6>&operator=(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>&operator=(ROOT::Math::MatRepStd<double,6,6>&&); ROOT::Math::MatRepStd<double,6U,6U>&operator=<ROOT::Math::MatRepStd<double, 6, 6> >(const ROOT::Math::MatRepStd<double,6,6>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kSize. private:. Double32_tfArray[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_Double32_t_6_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_Double32_t_6_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_2_2_.html:2029,Modifiability,Inherit,Inheritance,2029," & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,2,2>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,2,2>MatRepStd<double,2,2>(); ROOT::Math::MatRepStd<double,2,2>MatRepStd<double,2,2>(const ROOT::Math::MatRepStd<double,2,2>&); ROOT::Math::MatRepStd<double,2,2>MatRepStd<double,2,2>(ROOT::Math::MatRepStd<double,2,2>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,2,2>&operator=(const ROOT::Math::MatRepStd<double,2,2>&); ROOT::Math::MatRepStd<double,2,2>&operator=(ROOT::Math::MatRepStd<double,2,2>&&); ROOT::Math::MatRepStd<double,2U,2U>&operator=<ROOT::Math::MatRepStd<double, 2, 2> >(const ROOT::Math::MatRepStd<double,2,2>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,2,2>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,2,2>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,2,2>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_2_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_2_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_2_2_.html:2042,Modifiability,Inherit,Inherited,2042," & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,2,2>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,2,2>MatRepStd<double,2,2>(); ROOT::Math::MatRepStd<double,2,2>MatRepStd<double,2,2>(const ROOT::Math::MatRepStd<double,2,2>&); ROOT::Math::MatRepStd<double,2,2>MatRepStd<double,2,2>(ROOT::Math::MatRepStd<double,2,2>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,2,2>&operator=(const ROOT::Math::MatRepStd<double,2,2>&); ROOT::Math::MatRepStd<double,2,2>&operator=(ROOT::Math::MatRepStd<double,2,2>&&); ROOT::Math::MatRepStd<double,2U,2U>&operator=<ROOT::Math::MatRepStd<double, 2, 2> >(const ROOT::Math::MatRepStd<double,2,2>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,2,2>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,2,2>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,2,2>::(anonymous)kSize. private:. doublefArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_2_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_2_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_3_.html:2029,Modifiability,Inherit,Inheritance,2029," & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,3,3>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(ROOT::Math::MatRepStd<double,3,3>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,3,3>&operator=(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>&operator=(ROOT::Math::MatRepStd<double,3,3>&&); ROOT::Math::MatRepStd<double,3U,3U>&operator=<ROOT::Math::MatRepStd<double, 3, 3> >(const ROOT::Math::MatRepStd<double,3,3>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kSize. private:. doublefArray[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_3_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_3_.html:2042,Modifiability,Inherit,Inherited,2042," & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,3,3>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>MatRepStd<double,3,3>(ROOT::Math::MatRepStd<double,3,3>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,3,3>&operator=(const ROOT::Math::MatRepStd<double,3,3>&); ROOT::Math::MatRepStd<double,3,3>&operator=(ROOT::Math::MatRepStd<double,3,3>&&); ROOT::Math::MatRepStd<double,3U,3U>&operator=<ROOT::Math::MatRepStd<double, 3, 3> >(const ROOT::Math::MatRepStd<double,3,3>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,3,3>::(anonymous)kSize. private:. doublefArray[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_3_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_4_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,3,4>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,3,4>MatRepStd<double,3,4>(); ROOT::Math::MatRepStd<double,3,4>MatRepStd<double,3,4>(const ROOT::Math::MatRepStd<double,3,4>&); ROOT::Math::MatRepStd<double,3,4>MatRepStd<double,3,4>(ROOT::Math::MatRepStd<double,3,4>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,3,4>&operator=(const ROOT::Math::MatRepStd<double,3,4>&); ROOT::Math::MatRepStd<double,3,4>&operator=(ROOT::Math::MatRepStd<double,3,4>&&); ROOT::Math::MatRepStd<double,3U,4U>&operator=<ROOT::Math::MatRepStd<double, 3, 4> >(const ROOT::Math::MatRepStd<double,3,4>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,3,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,3,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,3,4>::(anonymous)kSize. private:. doublefArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_3_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_4_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,3,4>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,3,4>MatRepStd<double,3,4>(); ROOT::Math::MatRepStd<double,3,4>MatRepStd<double,3,4>(const ROOT::Math::MatRepStd<double,3,4>&); ROOT::Math::MatRepStd<double,3,4>MatRepStd<double,3,4>(ROOT::Math::MatRepStd<double,3,4>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,3,4>&operator=(const ROOT::Math::MatRepStd<double,3,4>&); ROOT::Math::MatRepStd<double,3,4>&operator=(ROOT::Math::MatRepStd<double,3,4>&&); ROOT::Math::MatRepStd<double,3U,4U>&operator=<ROOT::Math::MatRepStd<double, 3, 4> >(const ROOT::Math::MatRepStd<double,3,4>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,3,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,3,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,3,4>::(anonymous)kSize. private:. doublefArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_3_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_3_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_3_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,4,3>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,4,3>MatRepStd<double,4,3>(); ROOT::Math::MatRepStd<double,4,3>MatRepStd<double,4,3>(const ROOT::Math::MatRepStd<double,4,3>&); ROOT::Math::MatRepStd<double,4,3>MatRepStd<double,4,3>(ROOT::Math::MatRepStd<double,4,3>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,4,3>&operator=(const ROOT::Math::MatRepStd<double,4,3>&); ROOT::Math::MatRepStd<double,4,3>&operator=(ROOT::Math::MatRepStd<double,4,3>&&); ROOT::Math::MatRepStd<double,4U,3U>&operator=<ROOT::Math::MatRepStd<double, 4, 3> >(const ROOT::Math::MatRepStd<double,4,3>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,4,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,4,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,4,3>::(anonymous)kSize. private:. doublefArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_4_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_3_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,4,3>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,4,3>MatRepStd<double,4,3>(); ROOT::Math::MatRepStd<double,4,3>MatRepStd<double,4,3>(const ROOT::Math::MatRepStd<double,4,3>&); ROOT::Math::MatRepStd<double,4,3>MatRepStd<double,4,3>(ROOT::Math::MatRepStd<double,4,3>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,4,3>&operator=(const ROOT::Math::MatRepStd<double,4,3>&); ROOT::Math::MatRepStd<double,4,3>&operator=(ROOT::Math::MatRepStd<double,4,3>&&); ROOT::Math::MatRepStd<double,4U,3U>&operator=<ROOT::Math::MatRepStd<double, 4, 3> >(const ROOT::Math::MatRepStd<double,4,3>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,4,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,4,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,4,3>::(anonymous)kSize. private:. doublefArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_4_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_4_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,4,4>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(ROOT::Math::MatRepStd<double,4,4>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,4,4>&operator=(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>&operator=(ROOT::Math::MatRepStd<double,4,4>&&); ROOT::Math::MatRepStd<double,4U,4U>&operator=<ROOT::Math::MatRepStd<double, 4, 4> >(const ROOT::Math::MatRepStd<double,4,4>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kSize. private:. doublefArray[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_4_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_4_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,4,4>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>MatRepStd<double,4,4>(ROOT::Math::MatRepStd<double,4,4>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,4,4>&operator=(const ROOT::Math::MatRepStd<double,4,4>&); ROOT::Math::MatRepStd<double,4,4>&operator=(ROOT::Math::MatRepStd<double,4,4>&&); ROOT::Math::MatRepStd<double,4U,4U>&operator=<ROOT::Math::MatRepStd<double, 4, 4> >(const ROOT::Math::MatRepStd<double,4,4>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,4,4>::(anonymous)kSize. private:. doublefArray[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_4_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_4_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_5_5_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,5,5>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(ROOT::Math::MatRepStd<double,5,5>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,5,5>&operator=(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>&operator=(ROOT::Math::MatRepStd<double,5,5>&&); ROOT::Math::MatRepStd<double,5U,5U>&operator=<ROOT::Math::MatRepStd<double, 5, 5> >(const ROOT::Math::MatRepStd<double,5,5>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kSize. private:. doublefArray[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_5_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_5_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_5_5_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,5,5>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>MatRepStd<double,5,5>(ROOT::Math::MatRepStd<double,5,5>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,5,5>&operator=(const ROOT::Math::MatRepStd<double,5,5>&); ROOT::Math::MatRepStd<double,5,5>&operator=(ROOT::Math::MatRepStd<double,5,5>&&); ROOT::Math::MatRepStd<double,5U,5U>&operator=<ROOT::Math::MatRepStd<double, 5, 5> >(const ROOT::Math::MatRepStd<double,5,5>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,5,5>::(anonymous)kSize. private:. doublefArray[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_5_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_5_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_6_6_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,6,6>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(ROOT::Math::MatRepStd<double,6,6>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,6,6>&operator=(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>&operator=(ROOT::Math::MatRepStd<double,6,6>&&); ROOT::Math::MatRepStd<double,6U,6U>&operator=<ROOT::Math::MatRepStd<double, 6, 6> >(const ROOT::Math::MatRepStd<double,6,6>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kSize. private:. doublefArray[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_6_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_6_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_6_6_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,6,6>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>MatRepStd<double,6,6>(ROOT::Math::MatRepStd<double,6,6>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,6,6>&operator=(const ROOT::Math::MatRepStd<double,6,6>&); ROOT::Math::MatRepStd<double,6,6>&operator=(ROOT::Math::MatRepStd<double,6,6>&&); ROOT::Math::MatRepStd<double,6U,6U>&operator=<ROOT::Math::MatRepStd<double, 6, 6> >(const ROOT::Math::MatRepStd<double,6,6>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,6,6>::(anonymous)kSize. private:. doublefArray[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_6_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_6_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_7_7_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,7,7>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,7,7>MatRepStd<double,7,7>(); ROOT::Math::MatRepStd<double,7,7>MatRepStd<double,7,7>(const ROOT::Math::MatRepStd<double,7,7>&); ROOT::Math::MatRepStd<double,7,7>MatRepStd<double,7,7>(ROOT::Math::MatRepStd<double,7,7>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,7,7>&operator=(const ROOT::Math::MatRepStd<double,7,7>&); ROOT::Math::MatRepStd<double,7,7>&operator=(ROOT::Math::MatRepStd<double,7,7>&&); ROOT::Math::MatRepStd<double,7U,7U>&operator=<ROOT::Math::MatRepStd<double, 7, 7> >(const ROOT::Math::MatRepStd<double,7,7>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,7,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,7,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,7,7>::(anonymous)kSize. private:. doublefArray[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_7_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_7_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_7_7_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,7,7>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,7,7>MatRepStd<double,7,7>(); ROOT::Math::MatRepStd<double,7,7>MatRepStd<double,7,7>(const ROOT::Math::MatRepStd<double,7,7>&); ROOT::Math::MatRepStd<double,7,7>MatRepStd<double,7,7>(ROOT::Math::MatRepStd<double,7,7>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,7,7>&operator=(const ROOT::Math::MatRepStd<double,7,7>&); ROOT::Math::MatRepStd<double,7,7>&operator=(ROOT::Math::MatRepStd<double,7,7>&&); ROOT::Math::MatRepStd<double,7U,7U>&operator=<ROOT::Math::MatRepStd<double, 7, 7> >(const ROOT::Math::MatRepStd<double,7,7>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,7,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,7,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,7,7>::(anonymous)kSize. private:. doublefArray[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_7_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_7_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_9_7_.html:2030,Modifiability,Inherit,Inheritance,2030,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,9,7>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,9,7>MatRepStd<double,9,7>(); ROOT::Math::MatRepStd<double,9,7>MatRepStd<double,9,7>(const ROOT::Math::MatRepStd<double,9,7>&); ROOT::Math::MatRepStd<double,9,7>MatRepStd<double,9,7>(ROOT::Math::MatRepStd<double,9,7>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,9,7>&operator=(const ROOT::Math::MatRepStd<double,9,7>&); ROOT::Math::MatRepStd<double,9,7>&operator=(ROOT::Math::MatRepStd<double,9,7>&&); ROOT::Math::MatRepStd<double,9U,7U>&operator=<ROOT::Math::MatRepStd<double, 9, 7> >(const ROOT::Math::MatRepStd<double,9,7>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,9,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,9,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,9,7>::(anonymous)kSize. private:. doublefArray[63]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_9_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_9_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_double_9_7_.html:2043,Modifiability,Inherit,Inherited,2043,"& a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<double,9,7>(); doubleapply(unsigned int i) const; double*Array(); const double*Array() const; ROOT::Math::MatRepStd<double,9,7>MatRepStd<double,9,7>(); ROOT::Math::MatRepStd<double,9,7>MatRepStd<double,9,7>(const ROOT::Math::MatRepStd<double,9,7>&); ROOT::Math::MatRepStd<double,9,7>MatRepStd<double,9,7>(ROOT::Math::MatRepStd<double,9,7>&&); const double&operator()(unsigned int i, unsigned int j) const; double&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<double,9,7>&operator=(const ROOT::Math::MatRepStd<double,9,7>&); ROOT::Math::MatRepStd<double,9,7>&operator=(ROOT::Math::MatRepStd<double,9,7>&&); ROOT::Math::MatRepStd<double,9U,7U>&operator=<ROOT::Math::MatRepStd<double, 9, 7> >(const ROOT::Math::MatRepStd<double,9,7>& rhs); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<double,9,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<double,9,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<double,9,7>::(anonymous)kSize. private:. doublefArray[63]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_double_9_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_double_9_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_2_2_.html:1999,Modifiability,Inherit,Inheritance,1999,"c}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,2,2>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,2,2>MatRepStd<float,2,2>(); ROOT::Math::MatRepStd<float,2,2>MatRepStd<float,2,2>(const ROOT::Math::MatRepStd<float,2,2>&); ROOT::Math::MatRepStd<float,2,2>MatRepStd<float,2,2>(ROOT::Math::MatRepStd<float,2,2>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,2,2>&operator=(const ROOT::Math::MatRepStd<float,2,2>&); ROOT::Math::MatRepStd<float,2,2>&operator=(ROOT::Math::MatRepStd<float,2,2>&&); ROOT::Math::MatRepStd<float,2U,2U>&operator=<ROOT::Math::MatRepStd<float, 2, 2> >(const ROOT::Math::MatRepStd<float,2,2>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,2,2>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,2,2>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,2,2>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_2_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_2_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_2_2_.html:2012,Modifiability,Inherit,Inherited,2012,"c}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,2,2>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,2,2>MatRepStd<float,2,2>(); ROOT::Math::MatRepStd<float,2,2>MatRepStd<float,2,2>(const ROOT::Math::MatRepStd<float,2,2>&); ROOT::Math::MatRepStd<float,2,2>MatRepStd<float,2,2>(ROOT::Math::MatRepStd<float,2,2>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,2,2>&operator=(const ROOT::Math::MatRepStd<float,2,2>&); ROOT::Math::MatRepStd<float,2,2>&operator=(ROOT::Math::MatRepStd<float,2,2>&&); ROOT::Math::MatRepStd<float,2U,2U>&operator=<ROOT::Math::MatRepStd<float, 2, 2> >(const ROOT::Math::MatRepStd<float,2,2>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,2,2>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,2,2>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,2,2>::(anonymous)kSize. private:. floatfArray[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_2_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_2_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_3_.html:1999,Modifiability,Inherit,Inheritance,1999,"c}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,3,3>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,3,3>MatRepStd<float,3,3>(); ROOT::Math::MatRepStd<float,3,3>MatRepStd<float,3,3>(const ROOT::Math::MatRepStd<float,3,3>&); ROOT::Math::MatRepStd<float,3,3>MatRepStd<float,3,3>(ROOT::Math::MatRepStd<float,3,3>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,3,3>&operator=(const ROOT::Math::MatRepStd<float,3,3>&); ROOT::Math::MatRepStd<float,3,3>&operator=(ROOT::Math::MatRepStd<float,3,3>&&); ROOT::Math::MatRepStd<float,3U,3U>&operator=<ROOT::Math::MatRepStd<float, 3, 3> >(const ROOT::Math::MatRepStd<float,3,3>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,3,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,3,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,3,3>::(anonymous)kSize. private:. floatfArray[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_3_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_3_.html:2012,Modifiability,Inherit,Inherited,2012,"c}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,3,3>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,3,3>MatRepStd<float,3,3>(); ROOT::Math::MatRepStd<float,3,3>MatRepStd<float,3,3>(const ROOT::Math::MatRepStd<float,3,3>&); ROOT::Math::MatRepStd<float,3,3>MatRepStd<float,3,3>(ROOT::Math::MatRepStd<float,3,3>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,3,3>&operator=(const ROOT::Math::MatRepStd<float,3,3>&); ROOT::Math::MatRepStd<float,3,3>&operator=(ROOT::Math::MatRepStd<float,3,3>&&); ROOT::Math::MatRepStd<float,3U,3U>&operator=<ROOT::Math::MatRepStd<float, 3, 3> >(const ROOT::Math::MatRepStd<float,3,3>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,3,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,3,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,3,3>::(anonymous)kSize. private:. floatfArray[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_3_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_4_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,3,4>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,3,4>MatRepStd<float,3,4>(); ROOT::Math::MatRepStd<float,3,4>MatRepStd<float,3,4>(const ROOT::Math::MatRepStd<float,3,4>&); ROOT::Math::MatRepStd<float,3,4>MatRepStd<float,3,4>(ROOT::Math::MatRepStd<float,3,4>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,3,4>&operator=(const ROOT::Math::MatRepStd<float,3,4>&); ROOT::Math::MatRepStd<float,3,4>&operator=(ROOT::Math::MatRepStd<float,3,4>&&); ROOT::Math::MatRepStd<float,3U,4U>&operator=<ROOT::Math::MatRepStd<float, 3, 4> >(const ROOT::Math::MatRepStd<float,3,4>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,3,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,3,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,3,4>::(anonymous)kSize. private:. floatfArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_3_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_4_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,3,4>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,3,4>MatRepStd<float,3,4>(); ROOT::Math::MatRepStd<float,3,4>MatRepStd<float,3,4>(const ROOT::Math::MatRepStd<float,3,4>&); ROOT::Math::MatRepStd<float,3,4>MatRepStd<float,3,4>(ROOT::Math::MatRepStd<float,3,4>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,3,4>&operator=(const ROOT::Math::MatRepStd<float,3,4>&); ROOT::Math::MatRepStd<float,3,4>&operator=(ROOT::Math::MatRepStd<float,3,4>&&); ROOT::Math::MatRepStd<float,3U,4U>&operator=<ROOT::Math::MatRepStd<float, 3, 4> >(const ROOT::Math::MatRepStd<float,3,4>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,3,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,3,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,3,4>::(anonymous)kSize. private:. floatfArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_3_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_3_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_3_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,4,3>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,4,3>MatRepStd<float,4,3>(); ROOT::Math::MatRepStd<float,4,3>MatRepStd<float,4,3>(const ROOT::Math::MatRepStd<float,4,3>&); ROOT::Math::MatRepStd<float,4,3>MatRepStd<float,4,3>(ROOT::Math::MatRepStd<float,4,3>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,4,3>&operator=(const ROOT::Math::MatRepStd<float,4,3>&); ROOT::Math::MatRepStd<float,4,3>&operator=(ROOT::Math::MatRepStd<float,4,3>&&); ROOT::Math::MatRepStd<float,4U,3U>&operator=<ROOT::Math::MatRepStd<float, 4, 3> >(const ROOT::Math::MatRepStd<float,4,3>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,4,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,4,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,4,3>::(anonymous)kSize. private:. floatfArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_4_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_3_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,4,3>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,4,3>MatRepStd<float,4,3>(); ROOT::Math::MatRepStd<float,4,3>MatRepStd<float,4,3>(const ROOT::Math::MatRepStd<float,4,3>&); ROOT::Math::MatRepStd<float,4,3>MatRepStd<float,4,3>(ROOT::Math::MatRepStd<float,4,3>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,4,3>&operator=(const ROOT::Math::MatRepStd<float,4,3>&); ROOT::Math::MatRepStd<float,4,3>&operator=(ROOT::Math::MatRepStd<float,4,3>&&); ROOT::Math::MatRepStd<float,4U,3U>&operator=<ROOT::Math::MatRepStd<float, 4, 3> >(const ROOT::Math::MatRepStd<float,4,3>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,4,3>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,4,3>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,4,3>::(anonymous)kSize. private:. floatfArray[12]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_4_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_4_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,4,4>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,4,4>MatRepStd<float,4,4>(); ROOT::Math::MatRepStd<float,4,4>MatRepStd<float,4,4>(const ROOT::Math::MatRepStd<float,4,4>&); ROOT::Math::MatRepStd<float,4,4>MatRepStd<float,4,4>(ROOT::Math::MatRepStd<float,4,4>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,4,4>&operator=(const ROOT::Math::MatRepStd<float,4,4>&); ROOT::Math::MatRepStd<float,4,4>&operator=(ROOT::Math::MatRepStd<float,4,4>&&); ROOT::Math::MatRepStd<float,4U,4U>&operator=<ROOT::Math::MatRepStd<float, 4, 4> >(const ROOT::Math::MatRepStd<float,4,4>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,4,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,4,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,4,4>::(anonymous)kSize. private:. floatfArray[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_4_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_4_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,4,4>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,4,4>MatRepStd<float,4,4>(); ROOT::Math::MatRepStd<float,4,4>MatRepStd<float,4,4>(const ROOT::Math::MatRepStd<float,4,4>&); ROOT::Math::MatRepStd<float,4,4>MatRepStd<float,4,4>(ROOT::Math::MatRepStd<float,4,4>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,4,4>&operator=(const ROOT::Math::MatRepStd<float,4,4>&); ROOT::Math::MatRepStd<float,4,4>&operator=(ROOT::Math::MatRepStd<float,4,4>&&); ROOT::Math::MatRepStd<float,4U,4U>&operator=<ROOT::Math::MatRepStd<float, 4, 4> >(const ROOT::Math::MatRepStd<float,4,4>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,4,4>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,4,4>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,4,4>::(anonymous)kSize. private:. floatfArray[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_4_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_4_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_5_5_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,5,5>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,5,5>MatRepStd<float,5,5>(); ROOT::Math::MatRepStd<float,5,5>MatRepStd<float,5,5>(const ROOT::Math::MatRepStd<float,5,5>&); ROOT::Math::MatRepStd<float,5,5>MatRepStd<float,5,5>(ROOT::Math::MatRepStd<float,5,5>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,5,5>&operator=(const ROOT::Math::MatRepStd<float,5,5>&); ROOT::Math::MatRepStd<float,5,5>&operator=(ROOT::Math::MatRepStd<float,5,5>&&); ROOT::Math::MatRepStd<float,5U,5U>&operator=<ROOT::Math::MatRepStd<float, 5, 5> >(const ROOT::Math::MatRepStd<float,5,5>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,5,5>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,5,5>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,5,5>::(anonymous)kSize. private:. floatfArray[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_5_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_5_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_5_5_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,5,5>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,5,5>MatRepStd<float,5,5>(); ROOT::Math::MatRepStd<float,5,5>MatRepStd<float,5,5>(const ROOT::Math::MatRepStd<float,5,5>&); ROOT::Math::MatRepStd<float,5,5>MatRepStd<float,5,5>(ROOT::Math::MatRepStd<float,5,5>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,5,5>&operator=(const ROOT::Math::MatRepStd<float,5,5>&); ROOT::Math::MatRepStd<float,5,5>&operator=(ROOT::Math::MatRepStd<float,5,5>&&); ROOT::Math::MatRepStd<float,5U,5U>&operator=<ROOT::Math::MatRepStd<float, 5, 5> >(const ROOT::Math::MatRepStd<float,5,5>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,5,5>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,5,5>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,5,5>::(anonymous)kSize. private:. floatfArray[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_5_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_5_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_6_6_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,6,6>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,6,6>MatRepStd<float,6,6>(); ROOT::Math::MatRepStd<float,6,6>MatRepStd<float,6,6>(const ROOT::Math::MatRepStd<float,6,6>&); ROOT::Math::MatRepStd<float,6,6>MatRepStd<float,6,6>(ROOT::Math::MatRepStd<float,6,6>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,6,6>&operator=(const ROOT::Math::MatRepStd<float,6,6>&); ROOT::Math::MatRepStd<float,6,6>&operator=(ROOT::Math::MatRepStd<float,6,6>&&); ROOT::Math::MatRepStd<float,6U,6U>&operator=<ROOT::Math::MatRepStd<float, 6, 6> >(const ROOT::Math::MatRepStd<float,6,6>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,6,6>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,6,6>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,6,6>::(anonymous)kSize. private:. floatfArray[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_6_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_6_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_6_6_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,6,6>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,6,6>MatRepStd<float,6,6>(); ROOT::Math::MatRepStd<float,6,6>MatRepStd<float,6,6>(const ROOT::Math::MatRepStd<float,6,6>&); ROOT::Math::MatRepStd<float,6,6>MatRepStd<float,6,6>(ROOT::Math::MatRepStd<float,6,6>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,6,6>&operator=(const ROOT::Math::MatRepStd<float,6,6>&); ROOT::Math::MatRepStd<float,6,6>&operator=(ROOT::Math::MatRepStd<float,6,6>&&); ROOT::Math::MatRepStd<float,6U,6U>&operator=<ROOT::Math::MatRepStd<float, 6, 6> >(const ROOT::Math::MatRepStd<float,6,6>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,6,6>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,6,6>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,6,6>::(anonymous)kSize. private:. floatfArray[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_6_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_6_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_7_7_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,7,7>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,7,7>MatRepStd<float,7,7>(); ROOT::Math::MatRepStd<float,7,7>MatRepStd<float,7,7>(const ROOT::Math::MatRepStd<float,7,7>&); ROOT::Math::MatRepStd<float,7,7>MatRepStd<float,7,7>(ROOT::Math::MatRepStd<float,7,7>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,7,7>&operator=(const ROOT::Math::MatRepStd<float,7,7>&); ROOT::Math::MatRepStd<float,7,7>&operator=(ROOT::Math::MatRepStd<float,7,7>&&); ROOT::Math::MatRepStd<float,7U,7U>&operator=<ROOT::Math::MatRepStd<float, 7, 7> >(const ROOT::Math::MatRepStd<float,7,7>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,7,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,7,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,7,7>::(anonymous)kSize. private:. floatfArray[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_7_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_7_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_7_7_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,7,7>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,7,7>MatRepStd<float,7,7>(); ROOT::Math::MatRepStd<float,7,7>MatRepStd<float,7,7>(const ROOT::Math::MatRepStd<float,7,7>&); ROOT::Math::MatRepStd<float,7,7>MatRepStd<float,7,7>(ROOT::Math::MatRepStd<float,7,7>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,7,7>&operator=(const ROOT::Math::MatRepStd<float,7,7>&); ROOT::Math::MatRepStd<float,7,7>&operator=(ROOT::Math::MatRepStd<float,7,7>&&); ROOT::Math::MatRepStd<float,7U,7U>&operator=<ROOT::Math::MatRepStd<float, 7, 7> >(const ROOT::Math::MatRepStd<float,7,7>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,7,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,7,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,7,7>::(anonymous)kSize. private:. floatfArray[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_7_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_7_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_9_7_.html:2000,Modifiability,Inherit,Inheritance,2000,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,9,7>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,9,7>MatRepStd<float,9,7>(); ROOT::Math::MatRepStd<float,9,7>MatRepStd<float,9,7>(const ROOT::Math::MatRepStd<float,9,7>&); ROOT::Math::MatRepStd<float,9,7>MatRepStd<float,9,7>(ROOT::Math::MatRepStd<float,9,7>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,9,7>&operator=(const ROOT::Math::MatRepStd<float,9,7>&); ROOT::Math::MatRepStd<float,9,7>&operator=(ROOT::Math::MatRepStd<float,9,7>&&); ROOT::Math::MatRepStd<float,9U,7U>&operator=<ROOT::Math::MatRepStd<float, 9, 7> >(const ROOT::Math::MatRepStd<float,9,7>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,9,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,9,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,9,7>::(anonymous)kSize. private:. floatfArray[63]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_9_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_9_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepStd_float_9_7_.html:2013,Modifiability,Inherit,Inherited,2013,"}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~MatRepStd<float,9,7>(); floatapply(unsigned int i) const; float*Array(); const float*Array() const; ROOT::Math::MatRepStd<float,9,7>MatRepStd<float,9,7>(); ROOT::Math::MatRepStd<float,9,7>MatRepStd<float,9,7>(const ROOT::Math::MatRepStd<float,9,7>&); ROOT::Math::MatRepStd<float,9,7>MatRepStd<float,9,7>(ROOT::Math::MatRepStd<float,9,7>&&); const float&operator()(unsigned int i, unsigned int j) const; float&operator()(unsigned int i, unsigned int j); ROOT::Math::MatRepStd<float,9,7>&operator=(const ROOT::Math::MatRepStd<float,9,7>&); ROOT::Math::MatRepStd<float,9,7>&operator=(ROOT::Math::MatRepStd<float,9,7>&&); ROOT::Math::MatRepStd<float,9U,7U>&operator=<ROOT::Math::MatRepStd<float, 9, 7> >(const ROOT::Math::MatRepStd<float,9,7>& rhs); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepStd<float,9,7>::(anonymous)kCols; static ROOT::Math::MatRepStd<float,9,7>::(anonymous)kRows; static ROOT::Math::MatRepStd<float,9,7>::(anonymous)kSize. private:. floatfArray[63]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MatRepStd_float_9_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepStd_float_9_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_3_.html:2170,Modifiability,Inherit,Inheritance,2170,"c intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,3U>&operator+=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator-=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=<ROOT::Math::MatRepSym<double, 3> >(const ROOT::Math::MatRepSym<double,3>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,3>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,3>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,3>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,3>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_3_.html:2183,Modifiability,Inherit,Inherited,2183,"c intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,3U>&operator+=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator-=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=<ROOT::Math::MatRepSym<double, 3> >(const ROOT::Math::MatRepSym<double,3>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,3>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,3>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,3>::(anonymous)kSize. private:. Double32_tfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,3>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_4_.html:2171,Modifiability,Inherit,Inheritance,2171," intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,4U>&operator+=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator-=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=<ROOT::Math::MatRepSym<double, 4> >(const ROOT::Math::MatRepSym<double,4>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,4>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,4>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,4>::(anonymous)kSize. private:. Double32_tfArray[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,4>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_4_.html:2184,Modifiability,Inherit,Inherited,2184," intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,4U>&operator+=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator-=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=<ROOT::Math::MatRepSym<double, 4> >(const ROOT::Math::MatRepSym<double,4>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,4>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,4>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,4>::(anonymous)kSize. private:. Double32_tfArray[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,4>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_5_.html:2171,Modifiability,Inherit,Inheritance,2171," intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,5U>&operator+=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator-=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=<ROOT::Math::MatRepSym<double, 5> >(const ROOT::Math::MatRepSym<double,5>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,5>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,5>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,5>::(anonymous)kSize. private:. Double32_tfArray[15]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,5>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_5_.html:2184,Modifiability,Inherit,Inherited,2184," intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,5U>&operator+=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator-=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=<ROOT::Math::MatRepSym<double, 5> >(const ROOT::Math::MatRepSym<double,5>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,5>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,5>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,5>::(anonymous)kSize. private:. Double32_tfArray[15]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,5>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_6_.html:2171,Modifiability,Inherit,Inheritance,2171," intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,6U>&operator+=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator-=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=<ROOT::Math::MatRepSym<double, 6> >(const ROOT::Math::MatRepSym<double,6>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,6>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,6>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,6>::(anonymous)kSize. private:. Double32_tfArray[21]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,6>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_6_.html:2184,Modifiability,Inherit,Inherited,2184," intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,6U>&operator+=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator-=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=<ROOT::Math::MatRepSym<double, 6> >(const ROOT::Math::MatRepSym<double,6>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,6>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,6>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,6>::(anonymous)kSize. private:. Double32_tfArray[21]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,6>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_Double32_t_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_Double32_t_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_2_.html:2154,Modifiability,Inherit,Inheritance,2154,"tatic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,2U>&operator+=(const ROOT::Math::MatRepSym<double,2>& rhs); ROOT::Math::MatRepSym<double,2U>&operator-=(const ROOT::Math::MatRepSym<double,2>& rhs); ROOT::Math::MatRepSym<double,2U>&operator=(const ROOT::Math::MatRepSym<double,2>& rhs); ROOT::Math::MatRepSym<double,2U>&operator=<ROOT::Math::MatRepSym<double, 2> >(const ROOT::Math::MatRepSym<double,2>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,2>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,2>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,2>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,2>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,2>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,2>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_2_.html:2167,Modifiability,Inherit,Inherited,2167,"tatic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,2U>&operator+=(const ROOT::Math::MatRepSym<double,2>& rhs); ROOT::Math::MatRepSym<double,2U>&operator-=(const ROOT::Math::MatRepSym<double,2>& rhs); ROOT::Math::MatRepSym<double,2U>&operator=(const ROOT::Math::MatRepSym<double,2>& rhs); ROOT::Math::MatRepSym<double,2U>&operator=<ROOT::Math::MatRepSym<double, 2> >(const ROOT::Math::MatRepSym<double,2>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,2>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,2>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,2>::(anonymous)kSize. private:. doublefArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,2>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,2>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,2>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_3_.html:2154,Modifiability,Inherit,Inheritance,2154,"tatic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,3U>&operator+=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator-=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=<ROOT::Math::MatRepSym<double, 3> >(const ROOT::Math::MatRepSym<double,3>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,3>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,3>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,3>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,3>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_3_.html:2167,Modifiability,Inherit,Inherited,2167,"tatic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,3U>&operator+=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator-=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=(const ROOT::Math::MatRepSym<double,3>& rhs); ROOT::Math::MatRepSym<double,3U>&operator=<ROOT::Math::MatRepSym<double, 3> >(const ROOT::Math::MatRepSym<double,3>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,3>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,3>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,3>::(anonymous)kSize. private:. doublefArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,3>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,3>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_4_.html:2155,Modifiability,Inherit,Inheritance,2155,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,4U>&operator+=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator-=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=<ROOT::Math::MatRepSym<double, 4> >(const ROOT::Math::MatRepSym<double,4>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,4>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,4>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,4>::(anonymous)kSize. private:. doublefArray[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,4>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_4_.html:2168,Modifiability,Inherit,Inherited,2168,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,4U>&operator+=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator-=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=(const ROOT::Math::MatRepSym<double,4>& rhs); ROOT::Math::MatRepSym<double,4U>&operator=<ROOT::Math::MatRepSym<double, 4> >(const ROOT::Math::MatRepSym<double,4>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,4>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,4>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,4>::(anonymous)kSize. private:. doublefArray[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,4>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,4>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_5_.html:2155,Modifiability,Inherit,Inheritance,2155,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,5U>&operator+=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator-=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=<ROOT::Math::MatRepSym<double, 5> >(const ROOT::Math::MatRepSym<double,5>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,5>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,5>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,5>::(anonymous)kSize. private:. doublefArray[15]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,5>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_5_.html:2168,Modifiability,Inherit,Inherited,2168,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,5U>&operator+=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator-=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=(const ROOT::Math::MatRepSym<double,5>& rhs); ROOT::Math::MatRepSym<double,5U>&operator=<ROOT::Math::MatRepSym<double, 5> >(const ROOT::Math::MatRepSym<double,5>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,5>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,5>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,5>::(anonymous)kSize. private:. doublefArray[15]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,5>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,5>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_6_.html:2155,Modifiability,Inherit,Inheritance,2155,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,6U>&operator+=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator-=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=<ROOT::Math::MatRepSym<double, 6> >(const ROOT::Math::MatRepSym<double,6>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,6>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,6>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,6>::(anonymous)kSize. private:. doublefArray[21]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,6>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_6_.html:2168,Modifiability,Inherit,Inherited,2168,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,6U>&operator+=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator-=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=(const ROOT::Math::MatRepSym<double,6>& rhs); ROOT::Math::MatRepSym<double,6U>&operator=<ROOT::Math::MatRepSym<double, 6> >(const ROOT::Math::MatRepSym<double,6>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,6>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,6>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,6>::(anonymous)kSize. private:. doublefArray[21]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,6>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,6>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_7_.html:2155,Modifiability,Inherit,Inheritance,2155,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,7U>&operator+=(const ROOT::Math::MatRepSym<double,7>& rhs); ROOT::Math::MatRepSym<double,7U>&operator-=(const ROOT::Math::MatRepSym<double,7>& rhs); ROOT::Math::MatRepSym<double,7U>&operator=(const ROOT::Math::MatRepSym<double,7>& rhs); ROOT::Math::MatRepSym<double,7U>&operator=<ROOT::Math::MatRepSym<double, 7> >(const ROOT::Math::MatRepSym<double,7>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,7>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,7>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,7>::(anonymous)kSize. private:. doublefArray[28]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,7>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,7>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,7>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_double_7_.html:2168,Modifiability,Inherit,Inherited,2168,"atic intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); double&operator()(unsigned int i, unsigned int j); const double&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<double,7U>&operator+=(const ROOT::Math::MatRepSym<double,7>& rhs); ROOT::Math::MatRepSym<double,7U>&operator-=(const ROOT::Math::MatRepSym<double,7>& rhs); ROOT::Math::MatRepSym<double,7U>&operator=(const ROOT::Math::MatRepSym<double,7>& rhs); ROOT::Math::MatRepSym<double,7U>&operator=<ROOT::Math::MatRepSym<double, 7> >(const ROOT::Math::MatRepSym<double,7>&); double&operator[](unsigned int i); const double&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<double,7>::(anonymous)kCols; static ROOT::Math::MatRepSym<double,7>::(anonymous)kRows; static ROOT::Math::MatRepSym<double,7>::(anonymous)kSize. private:. doublefArray[28]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<double,7>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<double,7>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<double,7>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; Thi",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_double_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_double_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_2_.html:2125,Modifiability,Inherit,Inheritance,2125,"Sym<float,2>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,2U>&operator+=(const ROOT::Math::MatRepSym<float,2>& rhs); ROOT::Math::MatRepSym<float,2U>&operator-=(const ROOT::Math::MatRepSym<float,2>& rhs); ROOT::Math::MatRepSym<float,2U>&operator=(const ROOT::Math::MatRepSym<float,2>& rhs); ROOT::Math::MatRepSym<float,2U>&operator=<ROOT::Math::MatRepSym<float, 2> >(const ROOT::Math::MatRepSym<float,2>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,2>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,2>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,2>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,2>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,2>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,2>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_2_.html:2138,Modifiability,Inherit,Inherited,2138,"Sym<float,2>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,2U>&operator+=(const ROOT::Math::MatRepSym<float,2>& rhs); ROOT::Math::MatRepSym<float,2U>&operator-=(const ROOT::Math::MatRepSym<float,2>& rhs); ROOT::Math::MatRepSym<float,2U>&operator=(const ROOT::Math::MatRepSym<float,2>& rhs); ROOT::Math::MatRepSym<float,2U>&operator=<ROOT::Math::MatRepSym<float, 2> >(const ROOT::Math::MatRepSym<float,2>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,2>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,2>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,2>::(anonymous)kSize. private:. floatfArray[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,2>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,2>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,2>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_2_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_3_.html:2125,Modifiability,Inherit,Inheritance,2125,"Sym<float,3>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,3U>&operator+=(const ROOT::Math::MatRepSym<float,3>& rhs); ROOT::Math::MatRepSym<float,3U>&operator-=(const ROOT::Math::MatRepSym<float,3>& rhs); ROOT::Math::MatRepSym<float,3U>&operator=(const ROOT::Math::MatRepSym<float,3>& rhs); ROOT::Math::MatRepSym<float,3U>&operator=<ROOT::Math::MatRepSym<float, 3> >(const ROOT::Math::MatRepSym<float,3>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,3>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,3>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,3>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,3>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,3>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,3>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_3_.html:2138,Modifiability,Inherit,Inherited,2138,"Sym<float,3>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,3U>&operator+=(const ROOT::Math::MatRepSym<float,3>& rhs); ROOT::Math::MatRepSym<float,3U>&operator-=(const ROOT::Math::MatRepSym<float,3>& rhs); ROOT::Math::MatRepSym<float,3U>&operator=(const ROOT::Math::MatRepSym<float,3>& rhs); ROOT::Math::MatRepSym<float,3U>&operator=<ROOT::Math::MatRepSym<float, 3> >(const ROOT::Math::MatRepSym<float,3>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,3>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,3>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,3>::(anonymous)kSize. private:. floatfArray[6]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,3>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,3>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,3>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_3_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_4_.html:2126,Modifiability,Inherit,Inheritance,2126,"ym<float,4>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,4U>&operator+=(const ROOT::Math::MatRepSym<float,4>& rhs); ROOT::Math::MatRepSym<float,4U>&operator-=(const ROOT::Math::MatRepSym<float,4>& rhs); ROOT::Math::MatRepSym<float,4U>&operator=(const ROOT::Math::MatRepSym<float,4>& rhs); ROOT::Math::MatRepSym<float,4U>&operator=<ROOT::Math::MatRepSym<float, 4> >(const ROOT::Math::MatRepSym<float,4>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,4>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,4>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,4>::(anonymous)kSize. private:. floatfArray[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,4>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,4>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,4>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_4_.html:2139,Modifiability,Inherit,Inherited,2139,"ym<float,4>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,4U>&operator+=(const ROOT::Math::MatRepSym<float,4>& rhs); ROOT::Math::MatRepSym<float,4U>&operator-=(const ROOT::Math::MatRepSym<float,4>& rhs); ROOT::Math::MatRepSym<float,4U>&operator=(const ROOT::Math::MatRepSym<float,4>& rhs); ROOT::Math::MatRepSym<float,4U>&operator=<ROOT::Math::MatRepSym<float, 4> >(const ROOT::Math::MatRepSym<float,4>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,4>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,4>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,4>::(anonymous)kSize. private:. floatfArray[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,4>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,4>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,4>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_4_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_5_.html:2126,Modifiability,Inherit,Inheritance,2126,"ym<float,5>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,5U>&operator+=(const ROOT::Math::MatRepSym<float,5>& rhs); ROOT::Math::MatRepSym<float,5U>&operator-=(const ROOT::Math::MatRepSym<float,5>& rhs); ROOT::Math::MatRepSym<float,5U>&operator=(const ROOT::Math::MatRepSym<float,5>& rhs); ROOT::Math::MatRepSym<float,5U>&operator=<ROOT::Math::MatRepSym<float, 5> >(const ROOT::Math::MatRepSym<float,5>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,5>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,5>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,5>::(anonymous)kSize. private:. floatfArray[15]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,5>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,5>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,5>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_5_.html:2139,Modifiability,Inherit,Inherited,2139,"ym<float,5>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,5U>&operator+=(const ROOT::Math::MatRepSym<float,5>& rhs); ROOT::Math::MatRepSym<float,5U>&operator-=(const ROOT::Math::MatRepSym<float,5>& rhs); ROOT::Math::MatRepSym<float,5U>&operator=(const ROOT::Math::MatRepSym<float,5>& rhs); ROOT::Math::MatRepSym<float,5U>&operator=<ROOT::Math::MatRepSym<float, 5> >(const ROOT::Math::MatRepSym<float,5>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,5>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,5>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,5>::(anonymous)kSize. private:. floatfArray[15]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,5>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,5>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,5>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_5_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_6_.html:2126,Modifiability,Inherit,Inheritance,2126,"ym<float,6>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,6U>&operator+=(const ROOT::Math::MatRepSym<float,6>& rhs); ROOT::Math::MatRepSym<float,6U>&operator-=(const ROOT::Math::MatRepSym<float,6>& rhs); ROOT::Math::MatRepSym<float,6U>&operator=(const ROOT::Math::MatRepSym<float,6>& rhs); ROOT::Math::MatRepSym<float,6U>&operator=<ROOT::Math::MatRepSym<float, 6> >(const ROOT::Math::MatRepSym<float,6>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,6>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,6>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,6>::(anonymous)kSize. private:. floatfArray[21]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,6>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,6>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,6>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_6_.html:2139,Modifiability,Inherit,Inherited,2139,"ym<float,6>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,6U>&operator+=(const ROOT::Math::MatRepSym<float,6>& rhs); ROOT::Math::MatRepSym<float,6U>&operator-=(const ROOT::Math::MatRepSym<float,6>& rhs); ROOT::Math::MatRepSym<float,6U>&operator=(const ROOT::Math::MatRepSym<float,6>& rhs); ROOT::Math::MatRepSym<float,6U>&operator=<ROOT::Math::MatRepSym<float, 6> >(const ROOT::Math::MatRepSym<float,6>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,6>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,6>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,6>::(anonymous)kSize. private:. floatfArray[21]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,6>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,6>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,6>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_6_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_7_.html:2126,Modifiability,Inherit,Inheritance,2126,"ym<float,7>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,7U>&operator+=(const ROOT::Math::MatRepSym<float,7>& rhs); ROOT::Math::MatRepSym<float,7U>&operator-=(const ROOT::Math::MatRepSym<float,7>& rhs); ROOT::Math::MatRepSym<float,7U>&operator=(const ROOT::Math::MatRepSym<float,7>& rhs); ROOT::Math::MatRepSym<float,7U>&operator=<ROOT::Math::MatRepSym<float, 7> >(const ROOT::Math::MatRepSym<float,7>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,7>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,7>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,7>::(anonymous)kSize. private:. floatfArray[28]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,7>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,7>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,7>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_7_.html
https://root.cern/root/html602/ROOT__Math__MatRepSym_float_7_.html:2139,Modifiability,Inherit,Inherited,2139,"ym<float,7>&); static intoff(int i); static intoff0(int i); static intoff1(int i); static intoff2(int i, int j); static unsigned intoffset(unsigned int i, unsigned int j); float&operator()(unsigned int i, unsigned int j); const float&operator()(unsigned int i, unsigned int j) const; ROOT::Math::MatRepSym<float,7U>&operator+=(const ROOT::Math::MatRepSym<float,7>& rhs); ROOT::Math::MatRepSym<float,7U>&operator-=(const ROOT::Math::MatRepSym<float,7>& rhs); ROOT::Math::MatRepSym<float,7U>&operator=(const ROOT::Math::MatRepSym<float,7>& rhs); ROOT::Math::MatRepSym<float,7U>&operator=<ROOT::Math::MatRepSym<float, 7> >(const ROOT::Math::MatRepSym<float,7>&); float&operator[](unsigned int i); const float&operator[](unsigned int i) const. Data Members; public:. static ROOT::Math::MatRepSym<float,7>::(anonymous)kCols; static ROOT::Math::MatRepSym<float,7>::(anonymous)kRows; static ROOT::Math::MatRepSym<float,7>::(anonymous)kSize. private:. floatfArray[28]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T& operator()(unsigned int i, unsigned int j). T& operator[](unsigned int i); { return fArray[i]; }. const T& operator[](unsigned int i) const; { return fArray[i]; }. T apply(unsigned int i) const; { return fArray[i]; }. T* Array(); { return fArray; }. const T* Array() const; { return fArray; }. MatRepStd<T, D1, D2>& operator+=(const ROOT::Math::MatRepSym<float,7>& rhs). MatRepStd<T, D1, D2>& operator-=(const ROOT::Math::MatRepSym<float,7>& rhs). MatRepStd<T, D1, D2>& operator=(const ROOT::Math::MatRepSym<float,7>& rhs). return fArray[ off(int i). constexpr int off0(int i); { return i==0 ? 0 : off0(i-1)+i;}. constexpr int off2(int i, int j); { return j<i ? off0(i)+j : off0(j)+i; }. constexpr int off1(int i); { return off2(i/D, i%D);}. offset(unsigned int i, unsigned int j); if (j > i) std::swap(i, j);. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:23; This p",MatchSource.WIKI,root/html602/ROOT__Math__MatRepSym_float_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MatRepSym_float_7_.html
https://root.cern/root/html602/ROOT__Math__Minim1D.html:693,Usability,simpl,simplest,693,". ROOT::Math::Minim1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Minim1D. namespace ROOT::Math::Minim1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Minim1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minim1D.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:1336,Availability,error,error,1336,"tract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* covMat) const; virtual boolGetHessianMatrix(double* hMat) const; virtual boolGetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; v",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:1521,Availability,avail,available,1521,"h::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* covMat) const; virtual boolGetHessianMatrix(double* hMat) const; virtual boolGetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleGlobalCC(unsigned int ivar) const; virtual boolHesse(); virtual boolIsFixedVariable(unsigned int ivar) const; boolIsValidError() const; unsigned intMaxFunctionCalls() const; unsigned intMaxIterations() const; v",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:1945,Availability,Error,Errors,1945," virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5078,Availability,error,errors,5078,"l boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolSetVariableInitialRange(unsigned int, double, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double value); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8731,Availability,error,error,8731,"al range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8741,Availability,error,error,8741,"al range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8789,Availability,Error,Errors,8789,". double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array wil",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8812,Availability,error,errors,8812,". double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array wil",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9092,Availability,error,errors,9092,"hed from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accu",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9356,Availability,error,errors,9356,"nimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coeffi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10673,Availability,error,error,10673," filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10766,Availability,error,errors,10766," filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10886,Availability,error,error,10886," filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11018,Availability,error,error,11018," implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. in",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11254,Availability,error,error,11254,". double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. un",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11568,Availability,Error,ErrorUp,11568,"h is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { re",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12452,Availability,Toler,Tolerance,12452,rameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum it,MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12480,Availability,toler,tolerance,12480,rameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum it,MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12509,Availability,Toler,Tolerance,12509,tour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function cal,MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12868,Availability,Error,ErrorDef,12868,"ort storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int str",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12938,Availability,error,error,12938,"ort storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int str",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:13024,Availability,Error,ErrorDef,13024,"ame) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale f",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:13116,Availability,error,error,13116," a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:13619,Availability,toler,tolerance,13619,"tive function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automati",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:14050,Availability,error,errors,14050," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:14171,Availability,error,error,14171," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7228,Deployability,Release,ReleaseVariable,7228,"imit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigne",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7264,Deployability,release,release,7264,"imit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigne",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12166,Deployability,configurat,configuration,12166,"variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:327,Integrability,interface,interface,327,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:568,Integrability,interface,interface,568,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:680,Integrability,interface,interface,680,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:828,Integrability,interface,interface,828,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:892,Integrability,interface,interface,892,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:1089,Integrability,interface,interface,1089,"ss description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* covMat) const; virtual boolGetHessianMatrix(double* hMat) const; virtual boolGetMinosError(unsigned int ivar",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:1240,Integrability,interface,interface,1240,"tract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolGetCovMatrix(double* covMat) const; virtual boolGetHessianMatrix(double* hMat) const; virtual boolGetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; v",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9419,Integrability,interface,interface,9419,"free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:400,Modifiability,Plug-in,Plug-in,400,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:542,Modifiability,plug-in,plug-in,542,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:950,Modifiability,variab,variables,950,". ROOT::Math::Minimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Minimizer. class ROOT::Math::Minimizer. Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..); Plug-in's exist in ROOT to be able to instantiate the derived classes like; ROOT::Math::GSLMinimizer or ROOT::Math::Minuit2Minimizer via the; plug-in manager. Provides interface for setting the function to be minimized.; The function must implemente the multi-dimensional generic interface; ROOT::Math::IBaseFunctionMultiDim.; If the function provides gradient calculation; (implements the ROOT::Math::IGradientFunctionMultiDim interface) this will be; used by the Minimizer. It Defines also interface for setting the initial values for the function variables (which are the parameters in; of the model function in case of solving for fitting) and especifying their limits. It defines the interface to set and retrieve basic minimization parameters; (for specific Minimizer parameters one must use the derived classes). Then it defines the interface to retrieve the result of minimization ( minimum X values, function value,; gradient, error on the mimnimum, etc...). @ingroup MultiMin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Minimizer(); virtual voidClear(); virtual boolContour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleCorrelation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleErrorDef() const; virtual const double*Errors() const; virtual boolFixVariable(unsigned int iva",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5159,Modifiability,Inherit,Inheritance,5159,"ouble, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double value); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5172,Modifiability,Inherit,Inherited,5172,"ouble, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double value); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5824,Modifiability,variab,variable,5824,"le*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5964,Modifiability,variab,variable,5964,"er& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variab",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:6262,Modifiability,variab,variable,6262," documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:6401,Modifiability,variab,variable,6401,"opying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:6543,Modifiability,variab,variable,6543,"ons - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSetting",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:6625,Modifiability,variab,variables,6625,"SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::Pa",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:6803,Modifiability,variab,variable,6803,"ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:6917,Modifiability,variab,variable,6917,"ed int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const do",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7031,Modifiability,variab,variable,7031,"if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7150,Modifiability,variab,variable,7150,"ep, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return p",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7213,Modifiability,variab,variable,7213,"ng& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; nu",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7284,Modifiability,variab,variable,7284,"imit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigne",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7362,Modifiability,variab,variable,7362,"ned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return N",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7453,Modifiability,variab,variables,7453,"r supports them ). bool SetVariableValue(unsigned int ivar, double value); set the value of an already existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; numbe",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7569,Modifiability,variab,variable,7569,"etVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); t",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7592,Modifiability,variab,variable,7592,"etVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of the existing parameters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); t",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7742,Modifiability,variab,variable,7742,"ters). bool SetVariableStepSize(unsigned int ivar, double value); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool Provide",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8436,Modifiability,variab,variables,8436,"at by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Min",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8515,Modifiability,variab,variables,8515,"T::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessia",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8954,Modifiability,variab,variables,8954,"hed from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accu",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:8982,Modifiability,variab,variable,8982,"hed from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accu",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9046,Modifiability,variab,variables,9046,"hed from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accu",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9215,Modifiability,variab,variable,9215,"ion calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9328,Modifiability,variab,variables,9328,"nimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coeffi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9491,Modifiability,variab,variable,9491,"free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9723,Modifiability,variab,variable,9723,"n NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:9770,Modifiability,variab,variables,9770,"n NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. { return NULL; }. double CovMatrix(unsigned int ivar, unsigned int jvar) const; return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors. bool GetCovMatrix(double* covMat) const. Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10169,Modifiability,variab,variable,10169," passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10195,Modifiability,variab,variable,10195,"ariable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set b",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10332,Modifiability,variab,variable,10332,"e direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters. bool GetHessianMatrix(double* hMat) const. Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj).",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10683,Modifiability,variab,variable,10683," filled as h[i *ndim + j]. int CovMatrixStatus() const; return status of covariance matrix; using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; Minimizer who implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11170,Modifiability,variab,variable,11170,"etween variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimi",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11182,Modifiability,Variab,Variable,11182,". double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. un",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11829,Modifiability,Variab,VariableName,11829," run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistica",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11880,Modifiability,variab,variables,11880," run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistica",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11932,Modifiability,variab,variable,11932," run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistica",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:11975,Modifiability,variab,variable,11975," run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistica",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12002,Modifiability,Variab,VariableIndex,12002,", unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12056,Modifiability,variab,variable,12056,", unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12073,Modifiability,variab,variable,12073,", unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12109,Modifiability,variab,variable,12109,", unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:12166,Modifiability,config,configuration,12166,"variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:7779,Performance,perform,perform,7779,"ze of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). bool SetVariableInitialRange(unsigned int , double , double ); set the initial range of an existing variable. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. const double * X() const; return pointer to X values at the minimum. double Edm() const; return expected distance reached from the minimum (re-implement if minimizer provides it. { return -1; }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return NULL; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NIterations() const; number of iterations to reach the minimum. { return NCalls(); }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; (re-implement if minimizer supports bounded parameters). { return NDim(); }. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. cons",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:10965,Performance,perform,perform,10965," implements covariance matrix calculation will re-implement the method. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int ivar) const. return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented. bool GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0). minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; (This feature is not yet implemented). bool Hesse(). perform a full calculation of the Hessian matrix for error calculation. bool Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality. bool Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj). find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. in",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:13095,Performance,perform,performed,13095," a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:14154,Performance,perform,perform,14154," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5095,Security,validat,validated,5095,"l boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolSetVariableInitialRange(unsigned int, double, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double value); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:13122,Security,validat,validation,13122," a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__Minimizer.html:5459,Usability,Clear,Clear,5459,"oolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::MinimizerMinimizer(const ROOT::Math::Minimizer&); ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minimizer(). Default constructor. {}. virtual ~Minimizer(). Destructor (no operations). {}. Minimizer(const ROOT::Math::Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a new upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a new fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar,",MatchSource.WIKI,root/html602/ROOT__Math__Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:2559,Availability,error,error,2559,"s(int maxcall); static voidSetDefaultMaxIterations(int maxiter); static voidSetDefaultMinimizer(const char* type, const char* algo = 0); static voidSetDefaultPrecision(double prec); static voidSetDefaultPrintLevel(int level); static voidSetDefaultStrategy(int strat); static voidSetDefaultTolerance(double tol); voidSetErrorDef(double err); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetMaxFunctionCalls(unsigned int maxfcn); voidSetMaxIterations(unsigned int maxiter); voidSetMinimizerAlgorithm(const char* type); voidSetMinimizerType(const char* type); voidSetPrecision(double prec); voidSetPrintLevel(int level); voidSetStrategy(int stra); voidSetTolerance(double tol); intStrategy() const; doubleTolerance() const. Data Members; private:. stringfAlgoTypeMinimizer algorithmic specification (Migrad, Minimize, ...); doublefErrorDeferror definition (=1. for getting 1 sigma error for chi2 fits); ROOT::Math::IOptions*fExtraOptionsextra options; intfLeveldebug print level; intfMaxCallsmaximum number of function calls; intfMaxItermaximum number of iterations; stringfMinimTypeMinimizer type (Minuit, Minuit2, etc..; doublefPrecisionprecision of the objective function evaluation (value <=0 means left to default); intfStrategyminimizer strategy (used by Minuit); doublefToleranceminimize tolerance to reach solution. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultMinimizer(const char* type, const char* algo = 0); static methods for setting and retrieving the default options. void SetDefaultErrorDef(double up). void SetDefaultTolerance(double tol). void SetDefaultPrecision(double prec). void SetDefaultMaxFunctionCalls(int maxcall). void SetDefaultMaxIterations(int maxiter). void SetDefaultStrategy(int strat). void SetDefaultPrintLevel(int level). void SetDefaultExtraOptions(const ROOT::Math::IOptions* extraoptions). const std::string & DefaultMinimizerType(). const std::string & DefaultMinimizerAlgo(). double Defa",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:2973,Availability,toler,tolerance,2973," voidSetDefaultStrategy(int strat); static voidSetDefaultTolerance(double tol); voidSetErrorDef(double err); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetMaxFunctionCalls(unsigned int maxfcn); voidSetMaxIterations(unsigned int maxiter); voidSetMinimizerAlgorithm(const char* type); voidSetMinimizerType(const char* type); voidSetPrecision(double prec); voidSetPrintLevel(int level); voidSetStrategy(int stra); voidSetTolerance(double tol); intStrategy() const; doubleTolerance() const. Data Members; private:. stringfAlgoTypeMinimizer algorithmic specification (Migrad, Minimize, ...); doublefErrorDeferror definition (=1. for getting 1 sigma error for chi2 fits); ROOT::Math::IOptions*fExtraOptionsextra options; intfLeveldebug print level; intfMaxCallsmaximum number of function calls; intfMaxItermaximum number of iterations; stringfMinimTypeMinimizer type (Minuit, Minuit2, etc..; doublefPrecisionprecision of the objective function evaluation (value <=0 means left to default); intfStrategyminimizer strategy (used by Minuit); doublefToleranceminimize tolerance to reach solution. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultMinimizer(const char* type, const char* algo = 0); static methods for setting and retrieving the default options. void SetDefaultErrorDef(double up). void SetDefaultTolerance(double tol). void SetDefaultPrecision(double prec). void SetDefaultMaxFunctionCalls(int maxcall). void SetDefaultMaxIterations(int maxiter). void SetDefaultStrategy(int strat). void SetDefaultPrintLevel(int level). void SetDefaultExtraOptions(const ROOT::Math::IOptions* extraoptions). const std::string & DefaultMinimizerType(). const std::string & DefaultMinimizerAlgo(). double DefaultErrorDef(). double DefaultTolerance(). double DefaultPrecision(). int DefaultMaxFunctionCalls(). int DefaultMaxIterations(). int DefaultStrategy(). int DefaultPrintLevel(). IOptions * DefaultExtraOptions(). ROOT::Math::IOptions &",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:4796,Availability,Toler,Tolerance,4796,"tegy(). int DefaultPrintLevel(). IOptions * DefaultExtraOptions(). ROOT::Math::IOptions & Default(const char* name); retrieve extra options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. MinimizerOptions(); constructor using the default options. ~MinimizerOptions(); destructor. MinimizerOptions(const ROOT::Math::MinimizerOptions& opt); copy constructor. MinimizerOptions & operator=(const ROOT::Math::MinimizerOptions& opt); assignment operators. int PrintLevel() const; non-static methods for retrieving options ; set print level. { return fLevel; }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations() const; max iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. vo",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:4824,Availability,toler,tolerance,4824,"tegy(). int DefaultPrintLevel(). IOptions * DefaultExtraOptions(). ROOT::Math::IOptions & Default(const char* name); retrieve extra options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. MinimizerOptions(); constructor using the default options. ~MinimizerOptions(); destructor. MinimizerOptions(const ROOT::Math::MinimizerOptions& opt); copy constructor. MinimizerOptions & operator=(const ROOT::Math::MinimizerOptions& opt); assignment operators. int PrintLevel() const; non-static methods for retrieving options ; set print level. { return fLevel; }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations() const; max iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. vo",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:4999,Availability,Error,ErrorDef,4999,"indDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. MinimizerOptions(); constructor using the default options. ~MinimizerOptions(); destructor. MinimizerOptions(const ROOT::Math::MinimizerOptions& opt); copy constructor. MinimizerOptions & operator=(const ROOT::Math::MinimizerOptions& opt); assignment operators. int PrintLevel() const; non-static methods for retrieving options ; set print level. { return fLevel; }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations() const; max iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrateg",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:5017,Availability,error,error,5017,"indDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. MinimizerOptions(); constructor using the default options. ~MinimizerOptions(); destructor. MinimizerOptions(const ROOT::Math::MinimizerOptions& opt); copy constructor. MinimizerOptions & operator=(const ROOT::Math::MinimizerOptions& opt); assignment operators. int PrintLevel() const; non-static methods for retrieving options ; set print level. { return fLevel; }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fMaxCalls; }. unsigned int MaxIterations() const; max iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrateg",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:5848,Availability,toler,tolerance,5848,"ax iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrategy = stra; }. void SetErrorDef(double err); set error def. { fErrorDef = err; }. void SetMinimizerType(const char* type); set minimizer type. { fMinimType = type; }. void SetMinimizerAlgorithm(const char* type); set minimizer algorithm. { fAlgoType = type; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:6060,Availability,error,error,6060,"ax iterations. { return fMaxIter; }. int Strategy() const; strategy. { return fStrategy; }. double Tolerance() const; absolute tolerance. { return fTolerance; }. double Precision() const; precision in the objective funciton calculation (value <=0 means left to default). { return fPrecision; }. double ErrorDef() const; error definition. { return fErrorDef; }. const IOptions * ExtraOptions() const; return extra options (NULL pointer if they are not present). { return fExtraOptions; }. const std::string & MinimizerType() const; type of minimizer. { return fMinimType; }. const std::string & MinimizerAlgorithm() const; type of algorithm. { return fAlgoType; }. void Print(ostream& os = std::cout) const; print all the options. void ResetToDefaultOptions(); non-static methods for setting options . void SetPrintLevel(int level); set print level. { fLevel = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTolerance = tol; }. void SetPrecision(double prec); set the precision. { fPrecision = prec; }. void SetStrategy(int stra); set the strategy. { fStrategy = stra; }. void SetErrorDef(double err); set error def. { fErrorDef = err; }. void SetMinimizerType(const char* type); set minimizer type. { fMinimType = type; }. void SetMinimizerAlgorithm(const char* type); set minimizer algorithm. { fAlgoType = type; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:3016,Modifiability,Inherit,Inheritance,3016,"Math::IOptions& opt); voidSetMaxFunctionCalls(unsigned int maxfcn); voidSetMaxIterations(unsigned int maxiter); voidSetMinimizerAlgorithm(const char* type); voidSetMinimizerType(const char* type); voidSetPrecision(double prec); voidSetPrintLevel(int level); voidSetStrategy(int stra); voidSetTolerance(double tol); intStrategy() const; doubleTolerance() const. Data Members; private:. stringfAlgoTypeMinimizer algorithmic specification (Migrad, Minimize, ...); doublefErrorDeferror definition (=1. for getting 1 sigma error for chi2 fits); ROOT::Math::IOptions*fExtraOptionsextra options; intfLeveldebug print level; intfMaxCallsmaximum number of function calls; intfMaxItermaximum number of iterations; stringfMinimTypeMinimizer type (Minuit, Minuit2, etc..; doublefPrecisionprecision of the objective function evaluation (value <=0 means left to default); intfStrategyminimizer strategy (used by Minuit); doublefToleranceminimize tolerance to reach solution. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultMinimizer(const char* type, const char* algo = 0); static methods for setting and retrieving the default options. void SetDefaultErrorDef(double up). void SetDefaultTolerance(double tol). void SetDefaultPrecision(double prec). void SetDefaultMaxFunctionCalls(int maxcall). void SetDefaultMaxIterations(int maxiter). void SetDefaultStrategy(int strat). void SetDefaultPrintLevel(int level). void SetDefaultExtraOptions(const ROOT::Math::IOptions* extraoptions). const std::string & DefaultMinimizerType(). const std::string & DefaultMinimizerAlgo(). double DefaultErrorDef(). double DefaultTolerance(). double DefaultPrecision(). int DefaultMaxFunctionCalls(). int DefaultMaxIterations(). int DefaultStrategy(). int DefaultPrintLevel(). IOptions * DefaultExtraOptions(). ROOT::Math::IOptions & Default(const char* name); retrieve extra options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); ",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html:3029,Modifiability,Inherit,Inherited,3029,"Math::IOptions& opt); voidSetMaxFunctionCalls(unsigned int maxfcn); voidSetMaxIterations(unsigned int maxiter); voidSetMinimizerAlgorithm(const char* type); voidSetMinimizerType(const char* type); voidSetPrecision(double prec); voidSetPrintLevel(int level); voidSetStrategy(int stra); voidSetTolerance(double tol); intStrategy() const; doubleTolerance() const. Data Members; private:. stringfAlgoTypeMinimizer algorithmic specification (Migrad, Minimize, ...); doublefErrorDeferror definition (=1. for getting 1 sigma error for chi2 fits); ROOT::Math::IOptions*fExtraOptionsextra options; intfLeveldebug print level; intfMaxCallsmaximum number of function calls; intfMaxItermaximum number of iterations; stringfMinimTypeMinimizer type (Minuit, Minuit2, etc..; doublefPrecisionprecision of the objective function evaluation (value <=0 means left to default); intfStrategyminimizer strategy (used by Minuit); doublefToleranceminimize tolerance to reach solution. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultMinimizer(const char* type, const char* algo = 0); static methods for setting and retrieving the default options. void SetDefaultErrorDef(double up). void SetDefaultTolerance(double tol). void SetDefaultPrecision(double prec). void SetDefaultMaxFunctionCalls(int maxcall). void SetDefaultMaxIterations(int maxiter). void SetDefaultStrategy(int strat). void SetDefaultPrintLevel(int level). void SetDefaultExtraOptions(const ROOT::Math::IOptions* extraoptions). const std::string & DefaultMinimizerType(). const std::string & DefaultMinimizerAlgo(). double DefaultErrorDef(). double DefaultTolerance(). double DefaultPrecision(). int DefaultMaxFunctionCalls(). int DefaultMaxIterations(). int DefaultStrategy(). int DefaultPrintLevel(). IOptions * DefaultExtraOptions(). ROOT::Math::IOptions & Default(const char* name); retrieve extra options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); ",MatchSource.WIKI,root/html602/ROOT__Math__MinimizerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimizerOptions.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3306,Integrability,interface,interface,3306,"coord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3606,Integrability,interface,interface,3606,"imTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation(const double* x, const double* covInt, double* covExt) const; transform covariance matrix (internal -> external) at internal point x; use row storages for matrices m(i,j) = ",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:2804,Modifiability,variab,variables,2804,"inimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds); virtual unsigned intNDim() const; unsigned intNTot() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; const ROOT::Math::IMultiGradFunction*OriginalFunction() const; const double*Transformation(const double* x) const; voidTransformation(const double* xint, double* xext) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(c",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:2877,Modifiability,variab,variable,2877,"inimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds); virtual unsigned intNDim() const; unsigned intNTot() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; const ROOT::Math::IMultiGradFunction*OriginalFunction() const; const double*Transformation(const double* x) const; voidTransformation(const double* xint, double* xext) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(c",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:2989,Modifiability,Inherit,Inheritance,2989," >& bounds); virtual unsigned intNDim() const; unsigned intNTot() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; const ROOT::Math::IMultiGradFunction*OriginalFunction() const; const double*Transformation(const double* x) const; voidTransformation(const double* xint, double* xext) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3002,Modifiability,Inherit,Inherited,3002," >& bounds); virtual unsigned intNDim() const; unsigned intNTot() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; const ROOT::Math::IMultiGradFunction*OriginalFunction() const; const double*Transformation(const double* x) const; voidTransformation(const double* xint, double* xext) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3371,Modifiability,variab,variable,3371,"coord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3450,Modifiability,variab,variable,3450,"coord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3535,Modifiability,variab,variables,3535,"coord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3581,Modifiability,inherit,inherited,3581,"imTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation(const double* x, const double* covInt, double* covExt) const; transform covariance matrix (internal -> external) at internal point x; use row storages for matrices m(i,j) = ",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:2948,Performance,cache,cached,2948,"inimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds); virtual unsigned intNDim() const; unsigned intNTot() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; const ROOT::Math::IMultiGradFunction*OriginalFunction() const; const double*Transformation(const double* x) const; voidTransformation(const double* xint, double* xext) const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Math::MinimTransformFunctionMinimTransformFunction(const ROOT::Math::MinimTransformFunction&); ROOT::Math::MinimTransformFunction&operator=(const ROOT::Math::MinimTransformFunction&). Data Members; private:. const ROOT::Math::IMultiGradFunction*fFuncuser function; vector<unsigned int>fIndexvector with external indices for internal variables; vector<ROOT::Math::MinimTransformVariable>fVariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(c",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html:3896,Performance,cache,cached,3896,"ariablesvector of variable settings and tranformation function; vector<double>fXinternal cached of external values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformFunction(const ROOT::Math::IMultiGradFunction* f, const vector<ROOT::Math::EMinimVariableType>& types, const vector<double>& values, const map<unsigned int,pair<double,double> >& bounds). Constructor from a IMultiGradFunction interface (which is managed by the class); vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); variable values (used for the fixed ones) and a map with the bounds (for the bounded variables). unsigned int NDim() const; method inherited from IFunction interface. { return fIndex.size(); }. unsigned int NTot() const; { return fFunc->NDim(); }. IMultiGenFunction * Clone() const; clone: not supported (since auto_ptr used in the fVariables). const double * Transformation(const double* x) const; transform from internal to external; result is cached also inside the class. Transformation(x, &fX[0]). void InvTransformation(const double* xext, double* xint) const; inverse transformation (external -> internal). void InvStepTransformation(const double* x, const double* sext, double* sint) const; inverse transformation for steps (external -> internal) at external point x. void GradientTransformation(const double* x, const double* gExt, double* gInt) const; transform gradient vector (external -> internal) at internal point x. void MatrixTransformation(const double* x, const double* covInt, double* covExt) const; transform covariance matrix (internal -> external) at internal point x; use row storages for matrices m(i,j) = rep[ i * dim + j]. const IMultiGradFunction * OriginalFunction() const; return original function. { return fFunc; }. double DoEval(const double* x) const; function evaluation. double DoDerivative(const double* x, unsigned int icoord) const; calculate derivatives. MinimTransformF",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformFunction.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:1461,Modifiability,variab,variable,1461,"nalToExternal(double x) const; boolIsFixed() const; boolIsLimited() const; doubleLowerBound() const; ROOT::Math::MinimTransformVariableMinimTransformVariable(); ROOT::Math::MinimTransformVariableMinimTransformVariable(double value); ROOT::Math::MinimTransformVariableMinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, ROOT::Math::SqrtLowVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double upper, ROOT::Math::SqrtUpVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLi",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:1725,Modifiability,Inherit,Inheritance,1725,"mVariableMinimTransformVariable(double value); ROOT::Math::MinimTransformVariableMinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, ROOT::Math::SqrtLowVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double upper, ROOT::Math::SqrtUpVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. do",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:1738,Modifiability,Inherit,Inherited,1738,"mVariableMinimTransformVariable(double value); ROOT::Math::MinimTransformVariableMinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, ROOT::Math::SqrtLowVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double upper, ROOT::Math::SqrtUpVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. do",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:1865,Modifiability,variab,variable,1865,"ble(const ROOT::Math::MinimTransformVariable& rhs); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, ROOT::Math::SqrtLowVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double upper, ROOT::Math::SqrtUpVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. double LowerBound() const; { return fLower; }. double UpperBound() const; { return fUpper; }. double F",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:1939,Modifiability,variab,variable,1939,":MinimTransformVariableMinimTransformVariable(double lower, ROOT::Math::SqrtLowVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double upper, ROOT::Math::SqrtUpVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. double LowerBound() const; { return fLower; }. double UpperBound() const; { return fUpper; }. double FixValue() const; { return fLower; }. double InternalToExternal",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:2080,Modifiability,variab,variable,2080,"o); ROOT::Math::MinimTransformVariableMinimTransformVariable(double upper, ROOT::Math::SqrtUpVariableTransformation* trafo); ROOT::Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. double LowerBound() const; { return fLower; }. double UpperBound() const; { return fUpper; }. double FixValue() const; { return fLower; }. double InternalToExternal(double x) const; internal to external transformation. double DerivativeIntToExt(double x) const; derivative",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:2200,Modifiability,variab,variable,2200,"Math::MinimTransformVariableMinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. double LowerBound() const; { return fLower; }. double UpperBound() const; { return fUpper; }. double FixValue() const; { return fLower; }. double InternalToExternal(double x) const; internal to external transformation. double DerivativeIntToExt(double x) const; derivative of the internal to external transformation ( d Int2Ext / d int ). double ExternalToInternal(double x) const; etxernal to internal ",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html:2318,Modifiability,variab,variable,2318,"rafo); ROOT::Math::MinimTransformVariable&operator=(const ROOT::Math::MinimTransformVariable& rhs); doubleUpperBound() const. Data Members; private:. boolfBoundshas double bound; boolfFixfix variable; boolfLowBoundhas lower bound; doublefLowerlower parameter limit; auto_ptr<ROOT::Math::MinimizerVariableTransformation>fTransformpointer to the minimizer transformation; boolfUpBoundhas uppper bound param; doublefUpperupper parameter limit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinimTransformVariable(). Default Constructor for an unlimited variable. {}. MinimTransformVariable(double value); constructor for fixed variable. {}. MinimTransformVariable(double lower, double upper, ROOT::Math::SinVariableTransformation* trafo); constructor for double bound variable. { }. MinimTransformVariable(double lower, SqrtLowVariableTransformation * trafo); constructor for lower bound variable. {}. MinimTransformVariable(double upper, SqrtUpVariableTransformation * trafo); constructor for upper bound variable. {}. MinimTransformVariable(const ROOT::Math::MinimTransformVariable& rhs); copy constructor. MinimTransformVariable & operator=(const ROOT::Math::MinimTransformVariable& rhs); assignment. bool IsFixed() const; { return fFix; }. bool IsLimited() const; { return fBounds || fLowBound || fUpBound; }. bool HasLowerBound() const; { return fLowBound || fBounds; }. bool HasUpperBound() const; { return fUpBound || fBounds; }. double LowerBound() const; { return fLower; }. double UpperBound() const; { return fUpper; }. double FixValue() const; { return fLower; }. double InternalToExternal(double x) const; internal to external transformation. double DerivativeIntToExt(double x) const; derivative of the internal to external transformation ( d Int2Ext / d int ). double ExternalToInternal(double x) const; etxernal to internal transformation. » Author: L. Moneta 2009 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/",MatchSource.WIKI,root/html602/ROOT__Math__MinimTransformVariable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MinimTransformVariable.html
https://root.cern/root/html602/ROOT__Math__MiserParameters.html:1103,Modifiability,Inherit,Inheritance,1103,"eters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MiserParameters. class ROOT::Math::MiserParameters. Function Members (Methods); public:. ~MiserParameters(); ROOT::Math::MiserParametersMiserParameters(size_t dim = 10); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::MiserParameters&); ROOT::Math::MiserParametersMiserParameters(ROOT::Math::MiserParameters&&); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); ROOT::Math::IOptions*operator()() const; ROOT::Math::MiserParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::MiserParameters&operator=(const ROOT::Math::MiserParameters&); ROOT::Math::MiserParameters&operator=(ROOT::Math::MiserParameters&&); voidSetDefaultValues(size_t dim = 10). Data Members; public:. doublealpha; doubledither; doubleestimate_frac; size_tmin_calls; size_tmin_calls_per_bisection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters(size_t dim = 10); constructor of default parameters; needs dimension since min_calls = 16 * dim. { SetDefaultValues(dim); }. MiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); construct from GenAlgoOptions; parameter not specified are ignored. MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MiserParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MiserParameters.html
https://root.cern/root/html602/ROOT__Math__MiserParameters.html:1116,Modifiability,Inherit,Inherited,1116,"eters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::MiserParameters. class ROOT::Math::MiserParameters. Function Members (Methods); public:. ~MiserParameters(); ROOT::Math::MiserParametersMiserParameters(size_t dim = 10); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::MiserParameters&); ROOT::Math::MiserParametersMiserParameters(ROOT::Math::MiserParameters&&); ROOT::Math::MiserParametersMiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); ROOT::Math::IOptions*operator()() const; ROOT::Math::MiserParameters&operator=(const ROOT::Math::IOptions& opt); ROOT::Math::MiserParameters&operator=(const ROOT::Math::MiserParameters&); ROOT::Math::MiserParameters&operator=(ROOT::Math::MiserParameters&&); voidSetDefaultValues(size_t dim = 10). Data Members; public:. doublealpha; doubledither; doubleestimate_frac; size_tmin_calls; size_tmin_calls_per_bisection. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultValues(). VegasParameters & operator=(const ROOT::Math::IOptions& opt). ROOT::Math::IOptions * operator()() const; convert to options (return object is managed by the user). MiserParameters(size_t dim = 10); constructor of default parameters; needs dimension since min_calls = 16 * dim. { SetDefaultValues(dim); }. MiserParameters(const ROOT::Math::IOptions& opt, size_t dim = 10); construct from GenAlgoOptions; parameter not specified are ignored. MiserParameters & operator=(const ROOT::Math::IOptions& opt). » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__MiserParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__MiserParameters.html
https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html:1487,Availability,avail,available,1487,"Base template class for all Parametric Functions.; The template argument is the type of parameteric function interface is implementing like; Parameteric 1D, Multi-Dim or gradient parametric. A parameteric function is a Generic Function with parameters, so; it is a function object which carries a state, the parameters.; The parameters are described with a standard vector of doubles. This class contains the default implementations for the methods defined in the; IParamFunction interface for dealing with parameters; Specific parameteric function classes should derive from this class if they want to profit from; default implementations for the abstract methods.; The derived classes need to implement only the DoEvalPar( x, p) and Clone() methods for non-gradient; parameteric functions or DoParameterDerivative(x,p,ipar) for gradient par functions. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(ROOT::Math::IParametricFunctionOneDim&&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunctionOneDim::IParametricFunctionOneDim(const ROOT::Math::IParametricFunctionOneDim&); ROOT::Math::IParametricGradFunctionOneDimROO",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html
https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html:588,Integrability,interface,interface,588,". ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>. class ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>: public ROOT::Math::IParametricGradFunctionOneDim. Base template class for all Parametric Functions.; The template argument is the type of parameteric function interface is implementing like; Parameteric 1D, Multi-Dim or gradient parametric. A parameteric function is a Generic Function with parameters, so; it is a function object which carries a state, the parameters.; The parameters are described with a standard vector of doubles. This class contains the default implementations for the methods defined in the; IParamFunction interface for dealing with parameters; Specific parameteric function classes should derive from this class if they want to profit from; default implementations for the abstract methods.; The derived classes need to implement only the DoEvalPar( x, p) and Clone() methods for non-gradient; parameteric functions or DoParameterDerivative(x,p,ipar) for gradient par functions. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseP",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html
https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html:959,Integrability,interface,interface,959,"OOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>. class ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>: public ROOT::Math::IParametricGradFunctionOneDim. Base template class for all Parametric Functions.; The template argument is the type of parameteric function interface is implementing like; Parameteric 1D, Multi-Dim or gradient parametric. A parameteric function is a Generic Function with parameters, so; it is a function object which carries a state, the parameters.; The parameters are described with a standard vector of doubles. This class contains the default implementations for the methods defined in the; IParamFunction interface for dealing with parameters; Specific parameteric function classes should derive from this class if they want to profit from; default implementations for the abstract methods.; The derived classes need to implement only the DoEvalPar( x, p) and Clone() methods for non-gradient; parameteric functions or DoParameterDerivative(x,p,ipar) for gradient par functions. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBasePara",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html
https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html:4624,Modifiability,Inherit,Inheritance,4624,"ative(const double* x, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(double x, const double* p, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(double x, double* grad) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(const double* x, double* grad) const; virtual voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(double x, const double* p, double* grad) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*Parameters() const; ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(unsigned int npar = 0); ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(const ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>&); virtual voidSetParameters(const double* p). Data Members; protected:. vector<double>fParams. private:. unsigned intfNpar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const double * Parameters() const; copying constructors (can use default ones). Access the parameter values. { return &fParams.front(); }. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. unsigned int NPar() const. Return the number of parameters. { return fNpar; }. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html
https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html:4637,Modifiability,Inherit,Inherited,4637,"ative(const double* x, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(double x, const double* p, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(double x, double* grad) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(const double* x, double* grad) const; virtual voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(double x, const double* p, double* grad) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*Parameters() const; ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(unsigned int npar = 0); ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(const ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>&); virtual voidSetParameters(const double* p). Data Members; protected:. vector<double>fParams. private:. unsigned intfNpar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const double * Parameters() const; copying constructors (can use default ones). Access the parameter values. { return &fParams.front(); }. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. unsigned int NPar() const. Return the number of parameters. { return fNpar; }. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html
https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html:4781,Security,Access,Access,4781,"ative(const double* x, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(double x, const double* p, unsigned int ipar = 0) const; doubleROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative(const double* x, const double* p, unsigned int ipar = 0) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(double x, double* grad) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(const double* x, double* grad) const; virtual voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(double x, const double* p, double* grad) const; voidROOT::Math::IParametricGradFunctionOneDim::ParameterGradient(const double* x, const double* p, double* grad) const; virtual stringROOT::Math::IBaseParam::ParameterName(unsigned int i) const; virtual const double*Parameters() const; ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(unsigned int npar = 0); ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>(const ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>&); virtual voidSetParameters(const double* p). Data Members; protected:. vector<double>fParams. private:. unsigned intfNpar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const double * Parameters() const; copying constructors (can use default ones). Access the parameter values. { return &fParams.front(); }. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. unsigned int NPar() const. Return the number of parameters. { return fNpar; }. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunction_-p1IParametricGradFunctionOneDim_.html
https://root.cern/root/html602/ROOT__Math__ParamFunctor.html:892,Modifiability,Inherit,Inheritance,892,". ROOT::Math::ParamFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ParamFunctor. class ROOT::Math::ParamFunctor. Function Members (Methods); public:. virtual~ParamFunctor(); boolEmpty(); void*GetImpl(); doubleoperator()(double* x, double* p); ROOT::Math::ParamFunctor&operator=(const ROOT::Math::ParamFunctor& rhs); ROOT::Math::ParamFunctorParamFunctor(); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& f); ROOT::Math::ParamFunctorParamFunctor(ROOT::Math::ParamFunctor::FreeFunc f); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& rhs); voidSetFunction(ROOT::Math::ParamFunctor::Impl* f). Data Members; private:. ROOT::Math::ParamFunctor::Impl*fImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(double* x, double* p); virtual double operator() (const double * x, const double *p) const = 0;. ParamMemFunHandler& operator=(const ROOT::Math::ParamFunctor& rhs). ParamFunctor(). Default constructor. {}. ParamFunctor(const PtrObj& p, MemFn memFn). construct from a pointer to member function (multi-dim type). {}. explicit ParamFunctor( const Func & f). construct from another generic Functor of multi-dimension. {}. ParamFunctor(FreeFunc f). virtual ~ParamFunctor(). Destructor (no operations). void * GetImpl(); { return (void *) fImpl; }. bool Empty(); { return fImpl == 0; }. void SetFunction(ROOT::Math::ParamFunctor::Impl* f). » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunctor.html
https://root.cern/root/html602/ROOT__Math__ParamFunctor.html:905,Modifiability,Inherit,Inherited,905,". ROOT::Math::ParamFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ParamFunctor. class ROOT::Math::ParamFunctor. Function Members (Methods); public:. virtual~ParamFunctor(); boolEmpty(); void*GetImpl(); doubleoperator()(double* x, double* p); ROOT::Math::ParamFunctor&operator=(const ROOT::Math::ParamFunctor& rhs); ROOT::Math::ParamFunctorParamFunctor(); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& f); ROOT::Math::ParamFunctorParamFunctor(ROOT::Math::ParamFunctor::FreeFunc f); ROOT::Math::ParamFunctorParamFunctor(const ROOT::Math::ParamFunctor& rhs); voidSetFunction(ROOT::Math::ParamFunctor::Impl* f). Data Members; private:. ROOT::Math::ParamFunctor::Impl*fImpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double operator()(double* x, double* p); virtual double operator() (const double * x, const double *p) const = 0;. ParamMemFunHandler& operator=(const ROOT::Math::ParamFunctor& rhs). ParamFunctor(). Default constructor. {}. ParamFunctor(const PtrObj& p, MemFn memFn). construct from a pointer to member function (multi-dim type). {}. explicit ParamFunctor( const Func & f). construct from another generic Functor of multi-dimension. {}. ParamFunctor(FreeFunc f). virtual ~ParamFunctor(). Destructor (no operations). void * GetImpl(); { return (void *) fImpl; }. bool Empty(); { return fImpl == 0; }. void SetFunction(ROOT::Math::ParamFunctor::Impl* f). » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__ParamFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__ParamFunctor.html
https://root.cern/root/html602/ROOT__Math__Plane3D.html:716,Availability,avail,available,716,". ROOT::Math::Plane3D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Plane3D. class ROOT::Math::Plane3D. Class describing a geometrical plane in 3 dimensions.; A Plane3D is a 2 dimensional surface spanned by two linearly independent vectors.; The plane is described by the equation; \f$ a*x + b*y + c*z + d = 0 \f$ where (a,b,c) are the components of the; normal vector to the plane \f$ n = (a,b,c) \f$ and \f$ d = - n \dot x \f$, where x is any point; belonging to plane.; More information on the mathematics describing a plane in 3D is available on; <A HREF=http://mathworld.wolfram.com/Plane.html>MathWord</A>.; The Plane3D class contains the 4 scalar values in double which represent the; four coefficients, fA, fB, fC, fD. fA, fB, fC are the normal components normalized to 1,; i.e. fA**2 + fB**2 + fC**2 = 1. @ingroup GenVector. Function Members (Methods); public:. ~Plane3D(); ROOT::Math::Plane3D::ScalarA(); ROOT::Math::Plane3D::ScalarB(); ROOT::Math::Plane3D::ScalarC(); ROOT::Math::Plane3D::ScalarD(); ROOT::Math::Plane3D::ScalarDistance(const ROOT::Math::Plane3D::Point& p) const; ROOT::Math::Plane3D::ScalarDistance<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& p) const; ROOT::Math::Plane3D::ScalarHesseDistance() const; ROOT::Math::Plane3D::VectorNormal() const; booloperator!=(const ROOT::Math::Plane3D& rhs) const; ROOT::Math::Plane3D&operator=(const ROOT::Math::Plane3D& plane); booloperator==(const ROOT::Math::Plane3D& rhs) const; ROOT::Math::Plane3DPlane3D(); ROOT::Math::Plane3DPlane3D(const ROOT::Math::Plane3D&); ROOT::Math::Plane3DPlane3D(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p); ROOT::Math::Plane3DPlane3D(const ROOT::Math::Plan",MatchSource.WIKI,root/html602/ROOT__Math__Plane3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Plane3D.html
https://root.cern/root/html602/ROOT__Math__Plane3D.html:3107,Modifiability,Inherit,Inheritance,3107,":Math::Plane3D::Scalar& a, const ROOT::Math::Plane3D::Scalar& b, const ROOT::Math::Plane3D::Scalar& c, const ROOT::Math::Plane3D::Scalar& d); ROOT::Math::Plane3D::PointProjectOntoPlane(const ROOT::Math::Plane3D::Point& p) const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>ProjectOntoPlane<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& p) const. protected:. voidNormalize(). private:. voidBuildFrom3Points(const ROOT::Math::Plane3D::Point& p1, const ROOT::Math::Plane3D::Point& p2, const ROOT::Math::Plane3D::Point& p3); voidBuildFromVecAndPoint(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). Data Members; private:. ROOT::Math::Plane3D::ScalarfA; ROOT::Math::Plane3D::ScalarfB; ROOT::Math::Plane3D::ScalarfC; ROOT::Math::Plane3D::ScalarfD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; D(). default constructor create plane z = 0. { }. Plane3D(const ROOT::Math::Plane3D::Scalar& a, const ROOT::Math::Plane3D::Scalar& b, const ROOT::Math::Plane3D::Scalar& c, const ROOT::Math::Plane3D::Scalar& d). generic constructors from the four scalar values describing the plane; according to the equation ax + by + cz + d = 0; \param a scalar value; \param b scalar value; \param c scalar value; \param d sxcalar value. Plane3D(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). constructor a Plane3D from a normal vector and a point coplanar to the plane; \param n normal expressed as a ROOT::Math::DisplacementVector3D<Cartesian3D<double> >; \param p point expressed as a ROOT::Math::PositionVector3D<Cartesian3D<double> >. BuildFromVecAndPoint(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). Plane3D(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). Construct from",MatchSource.WIKI,root/html602/ROOT__Math__Plane3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Plane3D.html
https://root.cern/root/html602/ROOT__Math__Plane3D.html:3120,Modifiability,Inherit,Inherited,3120,":Math::Plane3D::Scalar& a, const ROOT::Math::Plane3D::Scalar& b, const ROOT::Math::Plane3D::Scalar& c, const ROOT::Math::Plane3D::Scalar& d); ROOT::Math::Plane3D::PointProjectOntoPlane(const ROOT::Math::Plane3D::Point& p) const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>ProjectOntoPlane<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& p) const. protected:. voidNormalize(). private:. voidBuildFrom3Points(const ROOT::Math::Plane3D::Point& p1, const ROOT::Math::Plane3D::Point& p2, const ROOT::Math::Plane3D::Point& p3); voidBuildFromVecAndPoint(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). Data Members; private:. ROOT::Math::Plane3D::ScalarfA; ROOT::Math::Plane3D::ScalarfB; ROOT::Math::Plane3D::ScalarfC; ROOT::Math::Plane3D::ScalarfD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; D(). default constructor create plane z = 0. { }. Plane3D(const ROOT::Math::Plane3D::Scalar& a, const ROOT::Math::Plane3D::Scalar& b, const ROOT::Math::Plane3D::Scalar& c, const ROOT::Math::Plane3D::Scalar& d). generic constructors from the four scalar values describing the plane; according to the equation ax + by + cz + d = 0; \param a scalar value; \param b scalar value; \param c scalar value; \param d sxcalar value. Plane3D(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). constructor a Plane3D from a normal vector and a point coplanar to the plane; \param n normal expressed as a ROOT::Math::DisplacementVector3D<Cartesian3D<double> >; \param p point expressed as a ROOT::Math::PositionVector3D<Cartesian3D<double> >. BuildFromVecAndPoint(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). Plane3D(const ROOT::Math::Plane3D::Vector& n, const ROOT::Math::Plane3D::Point& p). Construct from",MatchSource.WIKI,root/html602/ROOT__Math__Plane3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Plane3D.html
https://root.cern/root/html602/ROOT__Math__Polar2D_Double32_t_.html:1758,Modifiability,Inherit,Inheritance,1758,"e; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Polar2D<Double32_t>. class ROOT::Math::Polar2D<Double32_t>. Function Members (Methods); public:. ~Polar2D<double>(); voidGetCoordinates(ROOT::Math::Polar2D<double>::Scalar& r, ROOT::Math::Polar2D<double>::Scalar& phi) const; ROOT::Math::Polar2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>&operator=(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>&operator=<ROOT::Math::Polar2D<double> >(const ROOT::Math::Polar2D<double>& c); booloperator==(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>::ScalarPhi() const; ROOT::Math::Polar2D<double>Polar2D<double>(); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(double r, double phi); ROOT::Math::Polar2D<double>::ScalarR() const; voidRotate(double angle); voidScale(double a); voidSetCoordinates(ROOT::Math::Polar2D<double>::Scalar r, ROOT::Math::Polar2D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetXY(ROOT::Math::Polar2D<double>::Scalar a, ROOT::Math::Polar2D<double>::Scalar b); ROOT::Math::Polar2D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar2D<double>::ScalarY() const; doubley() const. private:. static doublepi(); voidRestrict(). Data Members; private:. Double32_tfPhi; Double32_tfR. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar2D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar2D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__Polar2D_Double32_t_.html:1771,Modifiability,Inherit,Inherited,1771,"e; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Polar2D<Double32_t>. class ROOT::Math::Polar2D<Double32_t>. Function Members (Methods); public:. ~Polar2D<double>(); voidGetCoordinates(ROOT::Math::Polar2D<double>::Scalar& r, ROOT::Math::Polar2D<double>::Scalar& phi) const; ROOT::Math::Polar2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>&operator=(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>&operator=<ROOT::Math::Polar2D<double> >(const ROOT::Math::Polar2D<double>& c); booloperator==(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>::ScalarPhi() const; ROOT::Math::Polar2D<double>Polar2D<double>(); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(double r, double phi); ROOT::Math::Polar2D<double>::ScalarR() const; voidRotate(double angle); voidScale(double a); voidSetCoordinates(ROOT::Math::Polar2D<double>::Scalar r, ROOT::Math::Polar2D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetXY(ROOT::Math::Polar2D<double>::Scalar a, ROOT::Math::Polar2D<double>::Scalar b); ROOT::Math::Polar2D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar2D<double>::ScalarY() const; doubley() const. private:. static doublepi(); voidRestrict(). Data Members; private:. Double32_tfPhi; Double32_tfR. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar2D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar2D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__Polar2D_double_.html:1738,Modifiability,Inherit,Inheritance,1738,"s:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Polar2D<double>. class ROOT::Math::Polar2D<double>. Function Members (Methods); public:. ~Polar2D<double>(); voidGetCoordinates(ROOT::Math::Polar2D<double>::Scalar& r, ROOT::Math::Polar2D<double>::Scalar& phi) const; ROOT::Math::Polar2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>&operator=(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>&operator=<ROOT::Math::Polar2D<double> >(const ROOT::Math::Polar2D<double>& c); booloperator==(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>::ScalarPhi() const; ROOT::Math::Polar2D<double>Polar2D<double>(); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(double r, double phi); ROOT::Math::Polar2D<double>::ScalarR() const; voidRotate(double angle); voidScale(double a); voidSetCoordinates(ROOT::Math::Polar2D<double>::Scalar r, ROOT::Math::Polar2D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetXY(ROOT::Math::Polar2D<double>::Scalar a, ROOT::Math::Polar2D<double>::Scalar b); ROOT::Math::Polar2D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar2D<double>::ScalarY() const; doubley() const. private:. static doublepi(); voidRestrict(). Data Members; private:. doublefPhi; doublefR. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar2D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar2D_double_.html
https://root.cern/root/html602/ROOT__Math__Polar2D_double_.html:1751,Modifiability,Inherit,Inherited,1751,"s:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::Polar2D<double>. class ROOT::Math::Polar2D<double>. Function Members (Methods); public:. ~Polar2D<double>(); voidGetCoordinates(ROOT::Math::Polar2D<double>::Scalar& r, ROOT::Math::Polar2D<double>::Scalar& phi) const; ROOT::Math::Polar2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>&operator=(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>&operator=<ROOT::Math::Polar2D<double> >(const ROOT::Math::Polar2D<double>& c); booloperator==(const ROOT::Math::Polar2D<double>& rhs) const; ROOT::Math::Polar2D<double>::ScalarPhi() const; ROOT::Math::Polar2D<double>Polar2D<double>(); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(const ROOT::Math::Polar2D<double>& v); ROOT::Math::Polar2D<double>Polar2D<double>(double r, double phi); ROOT::Math::Polar2D<double>::ScalarR() const; voidRotate(double angle); voidScale(double a); voidSetCoordinates(ROOT::Math::Polar2D<double>::Scalar r, ROOT::Math::Polar2D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetXY(ROOT::Math::Polar2D<double>::Scalar a, ROOT::Math::Polar2D<double>::Scalar b); ROOT::Math::Polar2D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar2D<double>::ScalarY() const; doubley() const. private:. static doublepi(); voidRestrict(). Data Members; private:. doublefPhi; doublefR. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar2D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar2D_double_.html
https://root.cern/root/html602/ROOT__Math__Polar3D_Double32_t_.html:2295,Modifiability,Inherit,Inheritance,2295,"calar& phi) const; ROOT::Math::Polar3D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>&operator=(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>&operator=<ROOT::Math::Polar3D<double> >(const ROOT::Math::Polar3D<double>& c); booloperator==(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>::ScalarPerp2() const; ROOT::Math::Polar3D<double>::ScalarPhi() const; ROOT::Math::Polar3D<double>Polar3D<double>(); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(double r, double theta, double phi); ROOT::Math::Polar3D<double>::ScalarR() const; ROOT::Math::Polar3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Polar3D<double>::Scalar r, ROOT::Math::Polar3D<double>::Scalar theta, ROOT::Math::Polar3D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetTheta(const double& theta); voidSetXYZ(ROOT::Math::Polar3D<double>::Scalar x, ROOT::Math::Polar3D<double>::Scalar y, ROOT::Math::Polar3D<double>::Scalar z); ROOT::Math::Polar3D<double>::ScalarTheta() const; ROOT::Math::Polar3D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar3D<double>::ScalarY() const; doubley() const; ROOT::Math::Polar3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Polar3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfPhi; Double32_tfR; Double32_tfTheta. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar3D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__Polar3D_Double32_t_.html:2308,Modifiability,Inherit,Inherited,2308,"calar& phi) const; ROOT::Math::Polar3D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>&operator=(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>&operator=<ROOT::Math::Polar3D<double> >(const ROOT::Math::Polar3D<double>& c); booloperator==(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>::ScalarPerp2() const; ROOT::Math::Polar3D<double>::ScalarPhi() const; ROOT::Math::Polar3D<double>Polar3D<double>(); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(double r, double theta, double phi); ROOT::Math::Polar3D<double>::ScalarR() const; ROOT::Math::Polar3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Polar3D<double>::Scalar r, ROOT::Math::Polar3D<double>::Scalar theta, ROOT::Math::Polar3D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetTheta(const double& theta); voidSetXYZ(ROOT::Math::Polar3D<double>::Scalar x, ROOT::Math::Polar3D<double>::Scalar y, ROOT::Math::Polar3D<double>::Scalar z); ROOT::Math::Polar3D<double>::ScalarTheta() const; ROOT::Math::Polar3D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar3D<double>::ScalarY() const; doubley() const; ROOT::Math::Polar3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Polar3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfPhi; Double32_tfR; Double32_tfTheta. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar3D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__Polar3D_double_.html:2271,Modifiability,Inherit,Inheritance,2271,"D<double>::Scalar& phi) const; ROOT::Math::Polar3D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>&operator=(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>&operator=<ROOT::Math::Polar3D<double> >(const ROOT::Math::Polar3D<double>& c); booloperator==(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>::ScalarPerp2() const; ROOT::Math::Polar3D<double>::ScalarPhi() const; ROOT::Math::Polar3D<double>Polar3D<double>(); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(double r, double theta, double phi); ROOT::Math::Polar3D<double>::ScalarR() const; ROOT::Math::Polar3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Polar3D<double>::Scalar r, ROOT::Math::Polar3D<double>::Scalar theta, ROOT::Math::Polar3D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetTheta(const double& theta); voidSetXYZ(ROOT::Math::Polar3D<double>::Scalar x, ROOT::Math::Polar3D<double>::Scalar y, ROOT::Math::Polar3D<double>::Scalar z); ROOT::Math::Polar3D<double>::ScalarTheta() const; ROOT::Math::Polar3D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar3D<double>::ScalarY() const; doubley() const; ROOT::Math::Polar3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Polar3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefPhi; doublefR; doublefTheta. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar3D_double_.html
https://root.cern/root/html602/ROOT__Math__Polar3D_double_.html:2284,Modifiability,Inherit,Inherited,2284,"D<double>::Scalar& phi) const; ROOT::Math::Polar3D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>&operator=(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>&operator=<ROOT::Math::Polar3D<double> >(const ROOT::Math::Polar3D<double>& c); booloperator==(const ROOT::Math::Polar3D<double>& rhs) const; ROOT::Math::Polar3D<double>::ScalarPerp2() const; ROOT::Math::Polar3D<double>::ScalarPhi() const; ROOT::Math::Polar3D<double>Polar3D<double>(); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(const ROOT::Math::Polar3D<double>& v); ROOT::Math::Polar3D<double>Polar3D<double>(double r, double theta, double phi); ROOT::Math::Polar3D<double>::ScalarR() const; ROOT::Math::Polar3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Polar3D<double>::Scalar r, ROOT::Math::Polar3D<double>::Scalar theta, ROOT::Math::Polar3D<double>::Scalar phi); voidSetPhi(const double& phi); voidSetR(const double& r); voidSetTheta(const double& theta); voidSetXYZ(ROOT::Math::Polar3D<double>::Scalar x, ROOT::Math::Polar3D<double>::Scalar y, ROOT::Math::Polar3D<double>::Scalar z); ROOT::Math::Polar3D<double>::ScalarTheta() const; ROOT::Math::Polar3D<double>::ScalarX() const; doublex() const; ROOT::Math::Polar3D<double>::ScalarY() const; doubley() const; ROOT::Math::Polar3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Polar3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefPhi; doublefR; doublefTheta. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polar3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polar3D_double_.html
https://root.cern/root/html602/ROOT__Math__Polynomial.html:777,Integrability,interface,interface,777,". ROOT::Math::Polynomial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Polynomial. class ROOT::Math::Polynomial: public ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>, public ROOT::Math::IGradientOneDim. Parametric Function class describing polynomials of order n. <em>P(x) = p[0] + p[1]*x + p[2]*x**2 + ....... + p[n]*x**n</em>. The class implements also the derivatives, \a dP(x)/dx and the \a dP(x)/dp[i]. The class provides also the method to find the roots of the polynomial.; It uses analytical methods up to quartic polynomials. Implements both the Parameteric function interface and the gradient interface; since it provides the analytical gradient with respect to x. @ingroup ParamFunc. Function Members (Methods); public:. virtual~Polynomial(); virtual ROOT::Math::IGenFunction*Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; const vector<complex<double> >&FindNumRoots(); vector<double>FindRealRoots(); const vector<complex<double> >&FindRoots(); voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunct",MatchSource.WIKI,root/html602/ROOT__Math__Polynomial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polynomial.html
https://root.cern/root/html602/ROOT__Math__Polynomial.html:804,Integrability,interface,interface,804,". ROOT::Math::Polynomial. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Polynomial. class ROOT::Math::Polynomial: public ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>, public ROOT::Math::IGradientOneDim. Parametric Function class describing polynomials of order n. <em>P(x) = p[0] + p[1]*x + p[2]*x**2 + ....... + p[n]*x**n</em>. The class implements also the derivatives, \a dP(x)/dx and the \a dP(x)/dp[i]. The class provides also the method to find the roots of the polynomial.; It uses analytical methods up to quartic polynomials. Implements both the Parameteric function interface and the gradient interface; since it provides the analytical gradient with respect to x. @ingroup ParamFunc. Function Members (Methods); public:. virtual~Polynomial(); virtual ROOT::Math::IGenFunction*Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; const vector<complex<double> >&FindNumRoots(); vector<double>FindRealRoots(); const vector<complex<double> >&FindRoots(); voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(); ROOT::Math::IBaseParamROOT::Math::IBaseParam::IBaseParam(const ROOT::Math::IBaseParam&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IParametricFunctionOneDimROOT::Math::IParametricFunct",MatchSource.WIKI,root/html602/ROOT__Math__Polynomial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polynomial.html
https://root.cern/root/html602/ROOT__Math__Polynomial.html:7373,Integrability,interface,interface,7373,"mial(double a, double b, double c, double d). Construct a Polynomial of degree 3 : a*x**3 + b*x**2 + c*x + d. Polynomial(double a, double b, double c, double d, double e). Construct a Polynomial of degree 4 : a*x**4 + b*x**3 + c*x**2 + dx + e. virtual ~Polynomial(); {}. const std::vector<std::complex <double> > & FindRoots(); use default copy-ctor and assignment operators; using ParamFunction::operator();. Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ). std::vector<double > FindRealRoots(). Find the only the real polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ). const std::vector<std::complex <double> > & FindNumRoots(). Find the polynomial roots using always an iterative numerical methods; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ). unsigned int Order() const. Order of Polynomial. { return fOrder; }. IGenFunction * Clone() const. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Implement the interface specified bby ROOT::Math::IGradientOneDim.; In the case of polynomial there is no advantage to compute both at the same time. double DoEvalPar(double x, const double* p) const. double DoDerivative(double x) const. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polynomial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polynomial.html
https://root.cern/root/html602/ROOT__Math__Polynomial.html:5537,Modifiability,Inherit,Inheritance,5537,"ath::IParametricGradFunctionOneDim>&); ROOT::Math::PolynomialPolynomial(unsigned int n = 0); ROOT::Math::PolynomialPolynomial(const ROOT::Math::Polynomial&); ROOT::Math::PolynomialPolynomial(double a, double b); ROOT::Math::PolynomialPolynomial(double a, double b, double c); ROOT::Math::PolynomialPolynomial(double a, double b, double c, double d); ROOT::Math::PolynomialPolynomial(double a, double b, double c, double d, double e); virtual voidROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>::SetParameters(const double* p). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEvalPar(double x, const double* p) const; virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Data Members; protected:. vector<double>ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>::fParams. private:. vector<double>fDerived_params; unsigned intfOrder; vector<complex<double> >fRoots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Polynomial(unsigned int n = 0). Construct a Polynomial function of order n.; The number of Parameters is n+1. Polynomial(double a, double b). Construct a Polynomial of degree 1 : a*x + b. Polynomial(double a, double b, double c). Construct a Polynomial of degree 2 : a*x**2 + b*x + c. Polynomial(double a, double b, double c, double d). Construct a Polynomial of degree 3 : a*x**3 + b*x**2 + c*x + d. Polynomial(double a, double b, double c, double d, double e). Construct a Polynomial of degree 4 : a*x**4 + b*x**3 + c*x**2 + dx + e. virtual ~Polynomial(); {}. const std::vector<std::complex <double> > & FindRoots(); use default copy-ctor and assignment operators; using ParamFunction::operator();. Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ",MatchSource.WIKI,root/html602/ROOT__Math__Polynomial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polynomial.html
https://root.cern/root/html602/ROOT__Math__Polynomial.html:5550,Modifiability,Inherit,Inherited,5550,"ath::IParametricGradFunctionOneDim>&); ROOT::Math::PolynomialPolynomial(unsigned int n = 0); ROOT::Math::PolynomialPolynomial(const ROOT::Math::Polynomial&); ROOT::Math::PolynomialPolynomial(double a, double b); ROOT::Math::PolynomialPolynomial(double a, double b, double c); ROOT::Math::PolynomialPolynomial(double a, double b, double c, double d); ROOT::Math::PolynomialPolynomial(double a, double b, double c, double d, double e); virtual voidROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>::SetParameters(const double* p). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEvalPar(double x, const double* p) const; virtual doubleDoParameterDerivative(double x, const double* p, unsigned int ipar) const. Data Members; protected:. vector<double>ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>::fParams. private:. vector<double>fDerived_params; unsigned intfOrder; vector<complex<double> >fRoots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Polynomial(unsigned int n = 0). Construct a Polynomial function of order n.; The number of Parameters is n+1. Polynomial(double a, double b). Construct a Polynomial of degree 1 : a*x + b. Polynomial(double a, double b, double c). Construct a Polynomial of degree 2 : a*x**2 + b*x + c. Polynomial(double a, double b, double c, double d). Construct a Polynomial of degree 3 : a*x**3 + b*x**2 + c*x + d. Polynomial(double a, double b, double c, double d, double e). Construct a Polynomial of degree 4 : a*x**4 + b*x**3 + c*x**2 + dx + e. virtual ~Polynomial(); {}. const std::vector<std::complex <double> > & FindRoots(); use default copy-ctor and assignment operators; using ParamFunction::operator();. Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ",MatchSource.WIKI,root/html602/ROOT__Math__Polynomial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polynomial.html
https://root.cern/root/html602/ROOT__Math__Polynomial.html:7264,Performance,Optimiz,Optimized,7264,"mial(double a, double b, double c, double d). Construct a Polynomial of degree 3 : a*x**3 + b*x**2 + c*x + d. Polynomial(double a, double b, double c, double d, double e). Construct a Polynomial of degree 4 : a*x**4 + b*x**3 + c*x**2 + dx + e. virtual ~Polynomial(); {}. const std::vector<std::complex <double> > & FindRoots(); use default copy-ctor and assignment operators; using ParamFunction::operator();. Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ). std::vector<double > FindRealRoots(). Find the only the real polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ). const std::vector<std::complex <double> > & FindNumRoots(). Find the polynomial roots using always an iterative numerical methods; The numerical method used is from GSL (see <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_6.html#SEC53"" ). unsigned int Order() const. Order of Polynomial. { return fOrder; }. IGenFunction * Clone() const. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Implement the interface specified bby ROOT::Math::IGradientOneDim.; In the case of polynomial there is no advantage to compute both at the same time. double DoEvalPar(double x, const double* p) const. double DoDerivative(double x) const. double DoParameterDerivative(double x, const double* p, unsigned int ipar) const. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Polynomial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Polynomial.html
https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html:6759,Modifiability,Inherit,Inheritance,6759,"efaultCoordinateSystemTag>&SetPhi(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar ang); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetR(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetX(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetXY(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html:6772,Modifiability,Inherit,Inherited,6772,"efaultCoordinateSystemTag>&SetPhi(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar ang); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetR(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetX(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetXY(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:6523,Modifiability,Inherit,Inheritance,6523,"::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetPhi(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar ang); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetR(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetX(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetXY(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:6536,Modifiability,Inherit,Inherited,6536,"::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetPhi(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar ang); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetR(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetX(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetXY(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9392,Modifiability,Inherit,Inheritance,9392,"itionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9405,Modifiability,Inherit,Inherited,9405,"itionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:9313,Modifiability,Inherit,Inheritance,9313,"OOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:9326,Modifiability,Inherit,Inherited,9326,"OOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:9234,Modifiability,Inherit,Inheritance,9234,">::Scalar a, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:9247,Modifiability,Inherit,Inherited,9247,">::Scalar a, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:9376,Modifiability,Inherit,Inheritance,9376,":PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:9389,Modifiability,Inherit,Inherited,9389,":PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9554,Modifiability,Inherit,Inheritance,9554,"ndrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9567,Modifiability,Inherit,Inherited,9567,"ndrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:9538,Modifiability,Inherit,Inheritance,9538,"Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:9551,Modifiability,Inherit,Inherited,9551,"Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9797,Modifiability,Inherit,Inheritance,9797,"inateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9810,Modifiability,Inherit,Inherited,9810,"inateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:9718,Modifiability,Inherit,Inheritance,9718,"::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:9731,Modifiability,Inherit,Inherited,9731,"::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:9639,Modifiability,Inherit,Inheritance,9639,"le>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:9652,Modifiability,Inherit,Inherited,9652,"le>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:9781,Modifiability,Inherit,Inheritance,9781,"oordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:9794,Modifiability,Inherit,Inherited,9794,"oordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9068,Modifiability,Inherit,Inheritance,9068,"Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9081,Modifiability,Inherit,Inherited,9081,"Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<Double32_t>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:9052,Modifiability,Inherit,Inheritance,9052,"OT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:9065,Modifiability,Inherit,Inherited,9065,"OT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar yy); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&SetZ(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar zz); ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarTheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalartheta() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<double>fCoordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_Double32_t_.html:3928,Modifiability,Inherit,Inheritance,3928,"ble>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiE4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt, ROOT::Math::PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetE(ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetEta(ROOT::Math::PtEtaPhiE4D<double>::Scalar eta); voidSetPhi(ROOT::Math::PtEtaPhiE4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiE4D<double>::Scalar px, ROOT::Math::PtEtaPhiE4D<double>::Scalar py, ROOT::Math::PtEtaPhiE4D<double>::Scalar pz, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiE4D<double>::Scalart() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiE4D<double>::Scalary() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiE4D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfE; Double32_tfEta; Double32_tfPhi; Double32_tfPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_Double32_t_.html:3941,Modifiability,Inherit,Inherited,3941,"ble>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiE4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt, ROOT::Math::PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetE(ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetEta(ROOT::Math::PtEtaPhiE4D<double>::Scalar eta); voidSetPhi(ROOT::Math::PtEtaPhiE4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiE4D<double>::Scalar px, ROOT::Math::PtEtaPhiE4D<double>::Scalar py, ROOT::Math::PtEtaPhiE4D<double>::Scalar pz, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiE4D<double>::Scalart() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiE4D<double>::Scalary() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiE4D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfE; Double32_tfEta; Double32_tfPhi; Double32_tfPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_double_.html:3900,Modifiability,Inherit,Inheritance,3900,":PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiE4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt, ROOT::Math::PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetE(ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetEta(ROOT::Math::PtEtaPhiE4D<double>::Scalar eta); voidSetPhi(ROOT::Math::PtEtaPhiE4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiE4D<double>::Scalar px, ROOT::Math::PtEtaPhiE4D<double>::Scalar py, ROOT::Math::PtEtaPhiE4D<double>::Scalar pz, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiE4D<double>::Scalart() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiE4D<double>::Scalary() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiE4D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefE; doublefEta; doublefPhi; doublefPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_double_.html:3913,Modifiability,Inherit,Inherited,3913,":PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiE4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt, ROOT::Math::PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetE(ROOT::Math::PtEtaPhiE4D<double>::Scalar e); voidSetEta(ROOT::Math::PtEtaPhiE4D<double>::Scalar eta); voidSetPhi(ROOT::Math::PtEtaPhiE4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiE4D<double>::Scalar px, ROOT::Math::PtEtaPhiE4D<double>::Scalar py, ROOT::Math::PtEtaPhiE4D<double>::Scalar pz, ROOT::Math::PtEtaPhiE4D<double>::Scalar e); ROOT::Math::PtEtaPhiE4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiE4D<double>::Scalart() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiE4D<double>::Scalary() const; ROOT::Math::PtEtaPhiE4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiE4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiE4D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefE; doublefEta; doublefPhi; doublefPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_Double32_t_.html:4017,Modifiability,Inherit,Inheritance,4017,"PhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); ROOT::Math::PtEtaPhiM4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiM4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt, ROOT::Math::PtEtaPhiM4D<double>::Scalar eta, ROOT::Math::PtEtaPhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetEta(ROOT::Math::PtEtaPhiM4D<double>::Scalar eta); voidSetM(ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetPhi(ROOT::Math::PtEtaPhiM4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiM4D<double>::Scalar px, ROOT::Math::PtEtaPhiM4D<double>::Scalar py, ROOT::Math::PtEtaPhiM4D<double>::Scalar pz, ROOT::Math::PtEtaPhiM4D<double>::Scalar e); ROOT::Math::PtEtaPhiM4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiM4D<double>::Scalart() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiM4D<double>::Scalary() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiM4D<double>::Scalarpi(); voidRestrictNegMass(); voidRestrictPhi(). Data Members; private:. Double32_tfEta; Double32_tfM; Double32_tfPhi; Double32_tfPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiM4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_Double32_t_.html:4030,Modifiability,Inherit,Inherited,4030,"PhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); ROOT::Math::PtEtaPhiM4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiM4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt, ROOT::Math::PtEtaPhiM4D<double>::Scalar eta, ROOT::Math::PtEtaPhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetEta(ROOT::Math::PtEtaPhiM4D<double>::Scalar eta); voidSetM(ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetPhi(ROOT::Math::PtEtaPhiM4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiM4D<double>::Scalar px, ROOT::Math::PtEtaPhiM4D<double>::Scalar py, ROOT::Math::PtEtaPhiM4D<double>::Scalar pz, ROOT::Math::PtEtaPhiM4D<double>::Scalar e); ROOT::Math::PtEtaPhiM4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiM4D<double>::Scalart() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiM4D<double>::Scalary() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiM4D<double>::Scalarpi(); voidRestrictNegMass(); voidRestrictPhi(). Data Members; private:. Double32_tfEta; Double32_tfM; Double32_tfPhi; Double32_tfPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiM4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_double_.html:3989,Modifiability,Inherit,Inheritance,3989,"OOT::Math::PtEtaPhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); ROOT::Math::PtEtaPhiM4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiM4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt, ROOT::Math::PtEtaPhiM4D<double>::Scalar eta, ROOT::Math::PtEtaPhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetEta(ROOT::Math::PtEtaPhiM4D<double>::Scalar eta); voidSetM(ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetPhi(ROOT::Math::PtEtaPhiM4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiM4D<double>::Scalar px, ROOT::Math::PtEtaPhiM4D<double>::Scalar py, ROOT::Math::PtEtaPhiM4D<double>::Scalar pz, ROOT::Math::PtEtaPhiM4D<double>::Scalar e); ROOT::Math::PtEtaPhiM4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiM4D<double>::Scalart() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiM4D<double>::Scalary() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiM4D<double>::Scalarpi(); voidRestrictNegMass(); voidRestrictPhi(). Data Members; private:. doublefEta; doublefM; doublefPhi; doublefPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiM4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_double_.html
https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_double_.html:4002,Modifiability,Inherit,Inherited,4002,"OOT::Math::PtEtaPhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); ROOT::Math::PtEtaPhiM4D<double>::ScalarPx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPy() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarPz() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarR() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarRho() const; voidScale(ROOT::Math::PtEtaPhiM4D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt, ROOT::Math::PtEtaPhiM4D<double>::Scalar eta, ROOT::Math::PtEtaPhiM4D<double>::Scalar phi, ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetEta(ROOT::Math::PtEtaPhiM4D<double>::Scalar eta); voidSetM(ROOT::Math::PtEtaPhiM4D<double>::Scalar mass); voidSetPhi(ROOT::Math::PtEtaPhiM4D<double>::Scalar phi); voidSetPt(ROOT::Math::PtEtaPhiM4D<double>::Scalar pt); voidSetPxPyPzE(ROOT::Math::PtEtaPhiM4D<double>::Scalar px, ROOT::Math::PtEtaPhiM4D<double>::Scalar py, ROOT::Math::PtEtaPhiM4D<double>::Scalar pz, ROOT::Math::PtEtaPhiM4D<double>::Scalar e); ROOT::Math::PtEtaPhiM4D<double>::ScalarT() const; ROOT::Math::PtEtaPhiM4D<double>::Scalart() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarTheta() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarX() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarx() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarY() const; ROOT::Math::PtEtaPhiM4D<double>::Scalary() const; ROOT::Math::PtEtaPhiM4D<double>::ScalarZ() const; ROOT::Math::PtEtaPhiM4D<double>::Scalarz() const. private:. static ROOT::Math::PtEtaPhiM4D<double>::Scalarpi(); voidRestrictNegMass(); voidRestrictPhi(). Data Members; private:. doublefEta; doublefM; doublefPhi; doublefPt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PtEtaPhiM4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PtEtaPhiM4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html:413,Energy Efficiency,energy,energy,413,". ROOT::Math::PxPyPzE4D<Double32_t>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::PxPyPzE4D<Double32_t>. class ROOT::Math::PxPyPzE4D<Double32_t>. Class describing a 4D cartesian coordinate system (x, y, z, t coordinates); or momentum-energy vectors stored as (Px, Py, Pz, E).; The metric used is (-,-,-,+). @ingroup GenVector. Function Members (Methods); public:. ~PxPyPzE4D<double>(); ROOT::Math::PxPyPzE4D<double>::ScalarE() const; ROOT::Math::PxPyPzE4D<double>::ScalarEt() const; ROOT::Math::PxPyPzE4D<double>::ScalarEt2() const; ROOT::Math::PxPyPzE4D<double>::ScalarEta() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const; ROOT::Math::PxPyPzE4D<double>::ScalarM() const; ROOT::Math::PxPyPzE4D<double>::ScalarM2() const; ROOT::Math::PxPyPzE4D<double>::ScalarMag() const; ROOT::Math::PxPyPzE4D<double>::ScalarMag2() const; ROOT::Math::PxPyPzE4D<double>::ScalarMt() const; ROOT::Math::PxPyPzE4D<double>::ScalarMt2() const; voidNegate(); booloperator!=(const ROOT::Math::PxPyPzE4D<double>& rhs) const; ROOT::Math::PxPyPzE4D<double>&operator=(const ROOT::Math::PxPyPzE4D<double>& v); ROOT::Math::PxPyPzE4D<double>&operator=<ROOT::Math::PxPyPzE4D<double> >(const ROOT::Math::PxPyPzE4D<double>& v); booloperator==(const ROOT::Math::PxPyPzE4D<double>& rhs) const; ROOT::Math::PxPyPzE4D<double>::ScalarP() const; ROOT::Math::PxPyPzE4D<double>::ScalarP2() const; ROOT::Math::PxPyPzE4D<double>::ScalarPerp() const; ROOT::Math::PxPyPzE4D<double>::ScalarPerp2() const; ROOT::Math::PxPyPzE4D<double>::ScalarPhi() const; ROOT::Math::PxPyPzE4D<double>::ScalarPt() const; ROOT::Math::PxPyPzE4D<double>::ScalarPt2() const; ROOT::Math::PxPyPzE",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html:6094,Energy Efficiency,energy,energy,6094,"{ return fY;}. Scalar Z() const; { return fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return fT*fT - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz). set Z value. void SetE(ROOT::Math::PxPyPzE4D<double>::Scalar e). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). set all values using cartesian coordinates. void Negate(); ------ Manipulations -------------. negate the 4-vector. { fX = -fX; fY = -fY; fZ = -fZ; fT = -fT;}. void Scale(const ROOT::Math::PxPyPzE4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==========",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html:6140,Energy Efficiency,energy,energy,6140,"fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return fT*fT - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz). set Z value. void SetE(ROOT::Math::PxPyPzE4D<double>::Scalar e). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). set all values using cartesian coordinates. void Negate(); ------ Manipulations -------------. negate the 4-vector. { fX = -fX; fY = -fY; fZ = -fZ; fT = -fT;}. void Scale(const ROOT::Math::PxPyPzE4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordina",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html:3877,Modifiability,Inherit,Inheritance,3877,"calar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetE(ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz); ROOT::Math::PxPyPzE4D<double>::ScalarT() const; ROOT::Math::PxPyPzE4D<double>::Scalart() const; ROOT::Math::PxPyPzE4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzE4D<double>::ScalarX() const; ROOT::Math::PxPyPzE4D<double>::Scalarx() const; ROOT::Math::PxPyPzE4D<double>::ScalarY() const; ROOT::Math::PxPyPzE4D<double>::Scalary() const; ROOT::Math::PxPyPzE4D<double>::ScalarZ() const; ROOT::Math::PxPyPzE4D<double>::Scalarz() const. Data Members; private:. Double32_tfT; Double32_tfX; Double32_tfY; Double32_tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; fT=src[3]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fT; }. void SetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fX=px; fY=py; fZ=pz; fT=e;}. void GetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; e=fT;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkows",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html:3890,Modifiability,Inherit,Inherited,3890,"calar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetE(ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz); ROOT::Math::PxPyPzE4D<double>::ScalarT() const; ROOT::Math::PxPyPzE4D<double>::Scalart() const; ROOT::Math::PxPyPzE4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzE4D<double>::ScalarX() const; ROOT::Math::PxPyPzE4D<double>::Scalarx() const; ROOT::Math::PxPyPzE4D<double>::ScalarY() const; ROOT::Math::PxPyPzE4D<double>::Scalary() const; ROOT::Math::PxPyPzE4D<double>::ScalarZ() const; ROOT::Math::PxPyPzE4D<double>::Scalarz() const. Data Members; private:. Double32_tfT; Double32_tfX; Double32_tfY; Double32_tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; fT=src[3]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fT; }. void SetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fX=px; fY=py; fZ=pz; fT=e;}. void GetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; e=fT;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkows",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html:4917,Security,access,accessors,4917,"tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; fT=src[3]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fT; }. void SetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fX=px; fY=py; fZ=pz; fT=e;}. void GetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; e=fT;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkowski)coordinate accessors. { return fX;}. Scalar Py() const; { return fY;}. Scalar Pz() const; { return fZ;}. Scalar E() const; { return fT;}. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return s",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html:401,Energy Efficiency,energy,energy,401,". ROOT::Math::PxPyPzE4D<double>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::PxPyPzE4D<double>. class ROOT::Math::PxPyPzE4D<double>. Class describing a 4D cartesian coordinate system (x, y, z, t coordinates); or momentum-energy vectors stored as (Px, Py, Pz, E).; The metric used is (-,-,-,+). @ingroup GenVector. Function Members (Methods); public:. ~PxPyPzE4D<double>(); ROOT::Math::PxPyPzE4D<double>::ScalarE() const; ROOT::Math::PxPyPzE4D<double>::ScalarEt() const; ROOT::Math::PxPyPzE4D<double>::ScalarEt2() const; ROOT::Math::PxPyPzE4D<double>::ScalarEta() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const; ROOT::Math::PxPyPzE4D<double>::ScalarM() const; ROOT::Math::PxPyPzE4D<double>::ScalarM2() const; ROOT::Math::PxPyPzE4D<double>::ScalarMag() const; ROOT::Math::PxPyPzE4D<double>::ScalarMag2() const; ROOT::Math::PxPyPzE4D<double>::ScalarMt() const; ROOT::Math::PxPyPzE4D<double>::ScalarMt2() const; voidNegate(); booloperator!=(const ROOT::Math::PxPyPzE4D<double>& rhs) const; ROOT::Math::PxPyPzE4D<double>&operator=(const ROOT::Math::PxPyPzE4D<double>& v); ROOT::Math::PxPyPzE4D<double>&operator=<ROOT::Math::PxPyPzE4D<double> >(const ROOT::Math::PxPyPzE4D<double>& v); booloperator==(const ROOT::Math::PxPyPzE4D<double>& rhs) const; ROOT::Math::PxPyPzE4D<double>::ScalarP() const; ROOT::Math::PxPyPzE4D<double>::ScalarP2() const; ROOT::Math::PxPyPzE4D<double>::ScalarPerp() const; ROOT::Math::PxPyPzE4D<double>::ScalarPerp2() const; ROOT::Math::PxPyPzE4D<double>::ScalarPhi() const; ROOT::Math::PxPyPzE4D<double>::ScalarPt() const; ROOT::Math::PxPyPzE4D<double>::ScalarPt2() const; ROOT::Math::PxPyPzE4D<double>::",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html:6066,Energy Efficiency,energy,energy,6066,"{ return fY;}. Scalar Z() const; { return fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return fT*fT - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz). set Z value. void SetE(ROOT::Math::PxPyPzE4D<double>::Scalar e). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). set all values using cartesian coordinates. void Negate(); ------ Manipulations -------------. negate the 4-vector. { fX = -fX; fY = -fY; fZ = -fZ; fT = -fT;}. void Scale(const ROOT::Math::PxPyPzE4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==========",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html:6112,Energy Efficiency,energy,energy,6112,"fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return fT*fT - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz). set Z value. void SetE(ROOT::Math::PxPyPzE4D<double>::Scalar e). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). set all values using cartesian coordinates. void Negate(); ------ Manipulations -------------. negate the 4-vector. { fX = -fX; fY = -fY; fZ = -fZ; fT = -fT;}. void Scale(const ROOT::Math::PxPyPzE4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordina",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html:3849,Modifiability,Inherit,Inheritance,3849,"PzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetE(ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz); ROOT::Math::PxPyPzE4D<double>::ScalarT() const; ROOT::Math::PxPyPzE4D<double>::Scalart() const; ROOT::Math::PxPyPzE4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzE4D<double>::ScalarX() const; ROOT::Math::PxPyPzE4D<double>::Scalarx() const; ROOT::Math::PxPyPzE4D<double>::ScalarY() const; ROOT::Math::PxPyPzE4D<double>::Scalary() const; ROOT::Math::PxPyPzE4D<double>::ScalarZ() const; ROOT::Math::PxPyPzE4D<double>::Scalarz() const. Data Members; private:. doublefT; doublefX; doublefY; doublefZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; fT=src[3]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fT; }. void SetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fX=px; fY=py; fZ=pz; fT=e;}. void GetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; e=fT;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkows",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html:3862,Modifiability,Inherit,Inherited,3862,"PzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetE(ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz); ROOT::Math::PxPyPzE4D<double>::ScalarT() const; ROOT::Math::PxPyPzE4D<double>::Scalart() const; ROOT::Math::PxPyPzE4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzE4D<double>::ScalarX() const; ROOT::Math::PxPyPzE4D<double>::Scalarx() const; ROOT::Math::PxPyPzE4D<double>::ScalarY() const; ROOT::Math::PxPyPzE4D<double>::Scalary() const; ROOT::Math::PxPyPzE4D<double>::ScalarZ() const; ROOT::Math::PxPyPzE4D<double>::Scalarz() const. Data Members; private:. doublefT; doublefX; doublefY; doublefZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; fT=src[3]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fT; }. void SetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fX=px; fY=py; fZ=pz; fT=e;}. void GetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; e=fT;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkows",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html:4889,Security,access,accessors,4889,"efZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; fT=src[3]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fT; }. void SetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fX=px; fY=py; fZ=pz; fT=e;}. void GetCoordinates(ROOT::Math::PxPyPzE4D<double>::Scalar& px, ROOT::Math::PxPyPzE4D<double>::Scalar& py, ROOT::Math::PxPyPzE4D<double>::Scalar& pz, ROOT::Math::PxPyPzE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; e=fT;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkowski)coordinate accessors. { return fX;}. Scalar Py() const; { return fY;}. Scalar Pz() const; { return fZ;}. Scalar E() const; { return fT;}. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return s",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzE4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzE4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_Double32_t_.html:3778,Modifiability,Inherit,Inheritance,3778,"e>(const ROOT::Math::PxPyPzM4D<double>& v); ROOT::Math::PxPyPzM4D<double>PxPyPzM4D<double>(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); ROOT::Math::PxPyPzM4D<double>::ScalarPy() const; ROOT::Math::PxPyPzM4D<double>::ScalarPz() const; ROOT::Math::PxPyPzM4D<double>::ScalarR() const; ROOT::Math::PxPyPzM4D<double>::ScalarRho() const; voidScale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetM(ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz); ROOT::Math::PxPyPzM4D<double>::ScalarT() const; ROOT::Math::PxPyPzM4D<double>::Scalart() const; ROOT::Math::PxPyPzM4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzM4D<double>::ScalarX() const; ROOT::Math::PxPyPzM4D<double>::Scalarx() const; ROOT::Math::PxPyPzM4D<double>::ScalarY() const; ROOT::Math::PxPyPzM4D<double>::Scalary() const; ROOT::Math::PxPyPzM4D<double>::ScalarZ() const; ROOT::Math::PxPyPzM4D<double>::Scalarz() const. private:. voidRestrictNegMass(). Data Members; private:. Double32_tfM; Double32_tfX; Double32_tfY; Double32_tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzM4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_Double32_t_.html:3791,Modifiability,Inherit,Inherited,3791,"e>(const ROOT::Math::PxPyPzM4D<double>& v); ROOT::Math::PxPyPzM4D<double>PxPyPzM4D<double>(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); ROOT::Math::PxPyPzM4D<double>::ScalarPy() const; ROOT::Math::PxPyPzM4D<double>::ScalarPz() const; ROOT::Math::PxPyPzM4D<double>::ScalarR() const; ROOT::Math::PxPyPzM4D<double>::ScalarRho() const; voidScale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetM(ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz); ROOT::Math::PxPyPzM4D<double>::ScalarT() const; ROOT::Math::PxPyPzM4D<double>::Scalart() const; ROOT::Math::PxPyPzM4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzM4D<double>::ScalarX() const; ROOT::Math::PxPyPzM4D<double>::Scalarx() const; ROOT::Math::PxPyPzM4D<double>::ScalarY() const; ROOT::Math::PxPyPzM4D<double>::Scalary() const; ROOT::Math::PxPyPzM4D<double>::ScalarZ() const; ROOT::Math::PxPyPzM4D<double>::Scalarz() const. private:. voidRestrictNegMass(). Data Members; private:. Double32_tfM; Double32_tfX; Double32_tfY; Double32_tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzM4D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_Double32_t_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_double_.html:3750,Modifiability,Inherit,Inheritance,3750,">PxPyPzM4D<double>(const ROOT::Math::PxPyPzM4D<double>& v); ROOT::Math::PxPyPzM4D<double>PxPyPzM4D<double>(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); ROOT::Math::PxPyPzM4D<double>::ScalarPy() const; ROOT::Math::PxPyPzM4D<double>::ScalarPz() const; ROOT::Math::PxPyPzM4D<double>::ScalarR() const; ROOT::Math::PxPyPzM4D<double>::ScalarRho() const; voidScale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetM(ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz); ROOT::Math::PxPyPzM4D<double>::ScalarT() const; ROOT::Math::PxPyPzM4D<double>::Scalart() const; ROOT::Math::PxPyPzM4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzM4D<double>::ScalarX() const; ROOT::Math::PxPyPzM4D<double>::Scalarx() const; ROOT::Math::PxPyPzM4D<double>::ScalarY() const; ROOT::Math::PxPyPzM4D<double>::Scalary() const; ROOT::Math::PxPyPzM4D<double>::ScalarZ() const; ROOT::Math::PxPyPzM4D<double>::Scalarz() const. private:. voidRestrictNegMass(). Data Members; private:. doublefM; doublefX; doublefY; doublefZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzM4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_double_.html
https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_double_.html:3763,Modifiability,Inherit,Inherited,3763,">PxPyPzM4D<double>(const ROOT::Math::PxPyPzM4D<double>& v); ROOT::Math::PxPyPzM4D<double>PxPyPzM4D<double>(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); ROOT::Math::PxPyPzM4D<double>::ScalarPy() const; ROOT::Math::PxPyPzM4D<double>::ScalarPz() const; ROOT::Math::PxPyPzM4D<double>::ScalarR() const; ROOT::Math::PxPyPzM4D<double>::ScalarRho() const; voidScale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetM(ROOT::Math::PxPyPzM4D<double>::Scalar m); voidSetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); voidSetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e); voidSetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py); voidSetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz); ROOT::Math::PxPyPzM4D<double>::ScalarT() const; ROOT::Math::PxPyPzM4D<double>::Scalart() const; ROOT::Math::PxPyPzM4D<double>::ScalarTheta() const; ROOT::Math::PxPyPzM4D<double>::ScalarX() const; ROOT::Math::PxPyPzM4D<double>::Scalarx() const; ROOT::Math::PxPyPzM4D<double>::ScalarY() const; ROOT::Math::PxPyPzM4D<double>::Scalary() const; ROOT::Math::PxPyPzM4D<double>::ScalarZ() const; ROOT::Math::PxPyPzM4D<double>::Scalarz() const. private:. voidRestrictNegMass(). Data Members; private:. doublefM; doublefX; doublefY; doublefZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__PxPyPzM4D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__PxPyPzM4D_double_.html
https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngNiederreiter2_.html:1674,Modifiability,Inherit,Inheritance,1674,"ers (Methods); public:. ~QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(); unsigned intEngineSize() const; stringName() const; unsigned intNDim() const; doubleNext(); boolNext(double* x); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>&operator=(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(unsigned int dimension = 1); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(const ROOT::Math::GSLQRngNiederreiter2& e, unsigned int dimension = 1); doubleRndm(); boolRndmArray(int n, double* array); boolSkip(unsigned int n); stringType() const. Data Members; private:. ROOT::Math::GSLQRngNiederreiter2fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Next(double* x). Generate next quasi random numbers points. double Next(). Generate next quasi random numbers point (1 - dimension). double Rndm(). Generate quasi random numbers between ]0,1[; 0 and 1 are excluded; Function to be compatible with ROOT TRandom compatibility. bool Skip(unsigned int n). skip the next n number and jumb directly to the current state + n. bool RndmArray(int n, double* array). Generate an array of random numbers between ]0,1[; Function to preserve ROOT Trandom compatibility; The array will be filled as x1,y1,z1,....x2,y2,z2,... std::string Type() const. Return the type (name) of the used generator. return fEngine. Name(). unsigned int EngineSize() const. Return the size of the generator state. unsigned int NDim() const. Return the dimension of the generator. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015",MatchSource.WIKI,root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngNiederreiter2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngNiederreiter2_.html
https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngNiederreiter2_.html:1687,Modifiability,Inherit,Inherited,1687,"ers (Methods); public:. ~QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(); unsigned intEngineSize() const; stringName() const; unsigned intNDim() const; doubleNext(); boolNext(double* x); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>&operator=(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(unsigned int dimension = 1); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>QuasiRandom<ROOT::Math::GSLQRngNiederreiter2>(const ROOT::Math::GSLQRngNiederreiter2& e, unsigned int dimension = 1); doubleRndm(); boolRndmArray(int n, double* array); boolSkip(unsigned int n); stringType() const. Data Members; private:. ROOT::Math::GSLQRngNiederreiter2fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Next(double* x). Generate next quasi random numbers points. double Next(). Generate next quasi random numbers point (1 - dimension). double Rndm(). Generate quasi random numbers between ]0,1[; 0 and 1 are excluded; Function to be compatible with ROOT TRandom compatibility. bool Skip(unsigned int n). skip the next n number and jumb directly to the current state + n. bool RndmArray(int n, double* array). Generate an array of random numbers between ]0,1[; Function to preserve ROOT Trandom compatibility; The array will be filled as x1,y1,z1,....x2,y2,z2,... std::string Type() const. Return the type (name) of the used generator. return fEngine. Name(). unsigned int EngineSize() const. Return the size of the generator state. unsigned int NDim() const. Return the dimension of the generator. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015",MatchSource.WIKI,root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngNiederreiter2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngNiederreiter2_.html
https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngSobol_.html:1554,Modifiability,Inherit,Inheritance,1554," ROOT::Math::GSLQuasiRandomEngine, like ROOT::Math::GSLQrngSobol. @ingroup Random. Function Members (Methods); public:. ~QuasiRandom<ROOT::Math::GSLQRngSobol>(); unsigned intEngineSize() const; stringName() const; unsigned intNDim() const; doubleNext(); boolNext(double* x); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>&operator=(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>QuasiRandom<ROOT::Math::GSLQRngSobol>(unsigned int dimension = 1); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>QuasiRandom<ROOT::Math::GSLQRngSobol>(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>QuasiRandom<ROOT::Math::GSLQRngSobol>(const ROOT::Math::GSLQRngSobol& e, unsigned int dimension = 1); doubleRndm(); boolRndmArray(int n, double* array); boolSkip(unsigned int n); stringType() const. Data Members; private:. ROOT::Math::GSLQRngSobolfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Next(double* x). Generate next quasi random numbers points. double Next(). Generate next quasi random numbers point (1 - dimension). double Rndm(). Generate quasi random numbers between ]0,1[; 0 and 1 are excluded; Function to be compatible with ROOT TRandom compatibility. bool Skip(unsigned int n). skip the next n number and jumb directly to the current state + n. bool RndmArray(int n, double* array). Generate an array of random numbers between ]0,1[; Function to preserve ROOT Trandom compatibility; The array will be filled as x1,y1,z1,....x2,y2,z2,... std::string Type() const. Return the type (name) of the used generator. return fEngine. Name(). unsigned int EngineSize() const. Return the size of the generator state. unsigned int NDim() const. Return the dimension of the generator. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015",MatchSource.WIKI,root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngSobol_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngSobol_.html
https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngSobol_.html:1567,Modifiability,Inherit,Inherited,1567," ROOT::Math::GSLQuasiRandomEngine, like ROOT::Math::GSLQrngSobol. @ingroup Random. Function Members (Methods); public:. ~QuasiRandom<ROOT::Math::GSLQRngSobol>(); unsigned intEngineSize() const; stringName() const; unsigned intNDim() const; doubleNext(); boolNext(double* x); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>&operator=(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>QuasiRandom<ROOT::Math::GSLQRngSobol>(unsigned int dimension = 1); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>QuasiRandom<ROOT::Math::GSLQRngSobol>(const ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>&); ROOT::Math::QuasiRandom<ROOT::Math::GSLQRngSobol>QuasiRandom<ROOT::Math::GSLQRngSobol>(const ROOT::Math::GSLQRngSobol& e, unsigned int dimension = 1); doubleRndm(); boolRndmArray(int n, double* array); boolSkip(unsigned int n); stringType() const. Data Members; private:. ROOT::Math::GSLQRngSobolfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Next(double* x). Generate next quasi random numbers points. double Next(). Generate next quasi random numbers point (1 - dimension). double Rndm(). Generate quasi random numbers between ]0,1[; 0 and 1 are excluded; Function to be compatible with ROOT TRandom compatibility. bool Skip(unsigned int n). skip the next n number and jumb directly to the current state + n. bool RndmArray(int n, double* array). Generate an array of random numbers between ]0,1[; Function to preserve ROOT Trandom compatibility; The array will be filled as x1,y1,z1,....x2,y2,z2,... std::string Type() const. Return the type (name) of the used generator. return fEngine. Name(). unsigned int EngineSize() const. Return the size of the generator state. unsigned int NDim() const. Return the dimension of the generator. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015",MatchSource.WIKI,root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngSobol_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__QuasiRandom_-p1GSLQRngSobol_.html
https://root.cern/root/html602/ROOT__Math__Quaternion.html:3350,Modifiability,Inherit,Inheritance,3350,"nst; ROOT::Math::Quaternionoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::Quaternion&operator=(const ROOT::Math::Quaternion&); ROOT::Math::Quaternion&operator=(ROOT::Math::Quaternion&&); booloperator==(const ROOT::Math::Quaternion& rhs) const; ROOT::Math::QuaternionQuaternion(); ROOT::Math::QuaternionQuaternion(const ROOT::Math::Quaternion&); ROOT::Math::QuaternionQuaternion(ROOT::Math::Quaternion&&); ROOT::Math::QuaternionQuaternion(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k); voidRectify(); voidSetComponents(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k); ROOT::Math::Quaternion::ScalarU() const. Data Members; private:. ROOT::Math::Quaternion::ScalarfI; ROOT::Math::Quaternion::ScalarfJ; ROOT::Math::Quaternion::ScalarfK; ROOT::Math::Quaternion::ScalarfU. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Quaternion(); ========== Constructors and Assignment =====================. Default constructor (identity rotation). { }. Quaternion(IT begin, IT end). Construct given a pair of pointers or iterators defining the; beginning and end of an array of four Scalars. { SetComponents(begin,end); }. explicit Quaternion(const OtherRotation & r); ======== Construction From other Rotation Forms ==================. Construct from another supported rotation type (see gv_detail::convert ). {gv_detail::convert(r,*this);}. Quaternion(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k). Construct from four Scalars representing the coefficients of u, i, j, k. { }. void Rectify(); The compiler-generated copy ctor, copy assignment, and dtor are OK. Re-adjust components to eliminate small deviations from |Q| = 1; orthonormality. Quaternion & operator=( OtherRotation const & ",MatchSource.WIKI,root/html602/ROOT__Math__Quaternion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Quaternion.html
https://root.cern/root/html602/ROOT__Math__Quaternion.html:3363,Modifiability,Inherit,Inherited,3363,"nst; ROOT::Math::Quaternionoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::Quaternion&operator=(const ROOT::Math::Quaternion&); ROOT::Math::Quaternion&operator=(ROOT::Math::Quaternion&&); booloperator==(const ROOT::Math::Quaternion& rhs) const; ROOT::Math::QuaternionQuaternion(); ROOT::Math::QuaternionQuaternion(const ROOT::Math::Quaternion&); ROOT::Math::QuaternionQuaternion(ROOT::Math::Quaternion&&); ROOT::Math::QuaternionQuaternion(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k); voidRectify(); voidSetComponents(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k); ROOT::Math::Quaternion::ScalarU() const. Data Members; private:. ROOT::Math::Quaternion::ScalarfI; ROOT::Math::Quaternion::ScalarfJ; ROOT::Math::Quaternion::ScalarfK; ROOT::Math::Quaternion::ScalarfU. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Quaternion(); ========== Constructors and Assignment =====================. Default constructor (identity rotation). { }. Quaternion(IT begin, IT end). Construct given a pair of pointers or iterators defining the; beginning and end of an array of four Scalars. { SetComponents(begin,end); }. explicit Quaternion(const OtherRotation & r); ======== Construction From other Rotation Forms ==================. Construct from another supported rotation type (see gv_detail::convert ). {gv_detail::convert(r,*this);}. Quaternion(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k). Construct from four Scalars representing the coefficients of u, i, j, k. { }. void Rectify(); The compiler-generated copy ctor, copy assignment, and dtor are OK. Re-adjust components to eliminate small deviations from |Q| = 1; orthonormality. Quaternion & operator=( OtherRotation const & ",MatchSource.WIKI,root/html602/ROOT__Math__Quaternion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Quaternion.html
https://root.cern/root/html602/ROOT__Math__Quaternion.html:4818,Security,Access,Access,4818,"vert ). {gv_detail::convert(r,*this);}. Quaternion(ROOT::Math::Quaternion::Scalar u, ROOT::Math::Quaternion::Scalar i, ROOT::Math::Quaternion::Scalar j, ROOT::Math::Quaternion::Scalar k). Construct from four Scalars representing the coefficients of u, i, j, k. { }. void Rectify(); The compiler-generated copy ctor, copy assignment, and dtor are OK. Re-adjust components to eliminate small deviations from |Q| = 1; orthonormality. Quaternion & operator=( OtherRotation const & r ). Assign from another supported rotation type (see gv_detail::convert ). void SetComponents(IT begin, IT end); ======== Components ==============. Set the four components given an iterator to the start of; the desired data, and another to the end (4 past start). void GetComponents(IT begin, IT end). Get the components into data specified by an iterator begin; and another to the end of the desired data (4 past start). Scalar U() const. Access to the four quaternion components:; U() is the coefficient of the identity Pauli matrix,; I(), J() and K() are the coefficients of sigma_x, sigma_y, sigma_z. { return fU; }. Scalar I() const; { return fI; }. Scalar J() const; { return fJ; }. Scalar K() const; { return fK; }. XYZVector operator()(const ROOT::Math::Quaternion::XYZVector& v) const. AVector operator*(const AVector & v). Overload operator * for rotation on a vector. void Invert(). Invert a rotation in place. { fI = -fI; fJ = -fJ; fK = -fK; }. Quaternion Inverse() const. Return inverse of a rotation. { return Quaternion(fU, -fI, -fJ, -fK); }. Scalar Distance(const ROOT::Math::Quaternion& q) const. Distance between two rotations in Quaternion form; Note: The rotation group is isomorphic to a 3-sphere; with diametrically opposite points identified.; The (rotation group-invariant) is the smaller; of the two possible angles between the images of; the two totations on that sphere. Thus the distance; is never greater than pi/2. return ! operator==(rhs). Quaternion operator*(RotationX const & r1, Quaterni",MatchSource.WIKI,root/html602/ROOT__Math__Quaternion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Quaternion.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html:2345,Modifiability,Inherit,Inheritance,2345," sigma); vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(const ROOT::Math::GSLRngGFSR4& e); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(const ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngGFSR4fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html:2358,Modifiability,Inherit,Inherited,2358," sigma); vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(const ROOT::Math::GSLRngGFSR4& e); ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>Random<ROOT::Math::GSLRngGFSR4>(const ROOT::Math::Random<ROOT::Math::GSLRngGFSR4>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngGFSR4fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html:3847,Testability,Log,LogNormal,3847,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html:3885,Testability,Log,Log,3885,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngGFSR4_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html:2294,Modifiability,Inherit,Inheritance,2294,"1); doubleLogNormal(double zeta, double sigma); vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngMT>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngMT>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(const ROOT::Math::GSLRngMT& e); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(const ROOT::Math::Random<ROOT::Math::GSLRngMT>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngMTfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngMT_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html:2307,Modifiability,Inherit,Inherited,2307,"1); doubleLogNormal(double zeta, double sigma); vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngMT>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngMT>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(const ROOT::Math::GSLRngMT& e); ROOT::Math::Random<ROOT::Math::GSLRngMT>Random<ROOT::Math::GSLRngMT>(const ROOT::Math::Random<ROOT::Math::GSLRngMT>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngMTfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngMT_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html:3796,Testability,Log,LogNormal,3796,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngMT_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html:3834,Testability,Log,Log,3834,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngMT_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngMT_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html:2396,Modifiability,Inherit,Inheritance,2396,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(const ROOT::Math::GSLRngRanLuxD1& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxD1fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html:2409,Modifiability,Inherit,Inherited,2409,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(const ROOT::Math::GSLRngRanLuxD1& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>Random<ROOT::Math::GSLRngRanLuxD1>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD1>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxD1fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html:3898,Testability,Log,LogNormal,3898,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html:3936,Testability,Log,Log,3936,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html:2396,Modifiability,Inherit,Inheritance,2396,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(const ROOT::Math::GSLRngRanLuxD2& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxD2fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html:2409,Modifiability,Inherit,Inherited,2409,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(const ROOT::Math::GSLRngRanLuxD2& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>Random<ROOT::Math::GSLRngRanLuxD2>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxD2>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxD2fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html:3898,Testability,Log,LogNormal,3898,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html:3936,Testability,Log,Log,3936,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxD2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html:2396,Modifiability,Inherit,Inheritance,2396,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(const ROOT::Math::GSLRngRanLuxS1& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxS1fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html:2409,Modifiability,Inherit,Inherited,2409,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(const ROOT::Math::GSLRngRanLuxS1& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>Random<ROOT::Math::GSLRngRanLuxS1>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS1>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxS1fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html:3898,Testability,Log,LogNormal,3898,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html:3936,Testability,Log,Log,3936,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS1_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html:2396,Modifiability,Inherit,Inheritance,2396,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(const ROOT::Math::GSLRngRanLuxS2& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxS2fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html:2409,Modifiability,Inherit,Inherited,2409,"l(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(const ROOT::Math::GSLRngRanLuxS2& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>Random<ROOT::Math::GSLRngRanLuxS2>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLuxS2>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxS2fEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html:3898,Testability,Log,LogNormal,3898,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html:3936,Testability,Log,Log,3936,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLuxS2_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html:2362,Modifiability,Inherit,Inheritance,2362,"or<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLux>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(const ROOT::Math::GSLRngRanLux& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLux>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html:2375,Modifiability,Inherit,Inherited,2375,"or<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngRanLux>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(const ROOT::Math::GSLRngRanLux& e); ROOT::Math::Random<ROOT::Math::GSLRngRanLux>Random<ROOT::Math::GSLRngRanLux>(const ROOT::Math::Random<ROOT::Math::GSLRngRanLux>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngRanLuxfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html:3864,Testability,Log,LogNormal,3864,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html:3902,Testability,Log,Log,3902,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngRanLux_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html:2328,Modifiability,Inherit,Inheritance,2328," zeta, double sigma); vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngTaus>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngTaus>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(const ROOT::Math::GSLRngTaus& e); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(const ROOT::Math::Random<ROOT::Math::GSLRngTaus>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngTausfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html:2341,Modifiability,Inherit,Inherited,2341," zeta, double sigma); vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p); unsigned intNegativeBinomial(double n, double prob); ROOT::Math::Random<ROOT::Math::GSLRngTaus>&operator=(const ROOT::Math::Random<ROOT::Math::GSLRngTaus>&); unsigned intPoisson(double mu); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(unsigned int seed); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(const ROOT::Math::GSLRngTaus& e); ROOT::Math::Random<ROOT::Math::GSLRngTaus>Random<ROOT::Math::GSLRngTaus>(const ROOT::Math::Random<ROOT::Math::GSLRngTaus>&); doubleRndm(); voidRndmArray(int n, double* array); voidSetSeed(unsigned int seed); voidSphere(double& x, double& y, double& z, double r = 1); doubletDist(double nu); stringType() const; doubleUniform(double x = 1.). Data Members; private:. ROOT::Math::GSLRngTausfEngine. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; fEngine. SetSeed(unsigned int seed). double Uniform(double x = 1.). Generate random numbers between ]0,1]; 0 is excluded and 1 is included. double Rndm(). Generate random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. void RndmArray(int n, double* array). Generate an array of random numbers between ]0,1]; 0 is excluded and 1 is included; Function to preserve ROOT Trandom compatibility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html:3830,Testability,Log,LogNormal,3830,"bility. std::string Type() const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This ",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html
https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html:3868,Testability,Log,Log,3868,"eturn the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. unsigned int NegativeBinomial(double n, double prob). Negative Binomial distribution; First parameter is n, second is probability; To be consistent with Random::Binomial. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generat",MatchSource.WIKI,root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Random_-p1GSLRngTaus_.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:988,Availability,error,error,988,". ROOT::Math::RichardsonDerivator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::M",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:1029,Availability,error,error,1029,". ROOT::Math::RichardsonDerivator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::M",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:1111,Availability,error,error,1111,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorR",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:1167,Availability,error,error,1167,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorR",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:3382,Availability,Error,Error,3382,"ected:. const ROOT::Math::IGenFunction*fFunctionpointer to function; boolfFunctionCopiedflag to control if function is copied in the class; doublefLastErrorerror estimate of last derivative calculation; doublefStepSizestep size used for derivative calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RichardsonDerivator(); Destructor: Removes function if needed. . RichardsonDerivator(double h = 0.001); Default Constructor.; Give optionally the step size for derivation. By default is 0.001, which is fine for x ~ 1; Increase if x is in averga larger or decrease if x is smaller. RichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); Construct from function and step size. RichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs). Copy constructor. RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:3434,Availability,Error,Error,3434,"ected:. const ROOT::Math::IGenFunction*fFunctionpointer to function; boolfFunctionCopiedflag to control if function is copied in the class; doublefLastErrorerror estimate of last derivative calculation; doublefStepSizestep size used for derivative calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RichardsonDerivator(); Destructor: Removes function if needed. . RichardsonDerivator(double h = 0.001); Default Constructor.; Give optionally the step size for derivation. By default is 0.001, which is fine for x ~ 1; Increase if x is in averga larger or decrease if x is smaller. RichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); Construct from function and step size. RichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs). Copy constructor. RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:4211,Availability,error,error,4211," RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:4251,Availability,error,error,4251," RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:4268,Availability,error,error,4268," RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:4290,Availability,error,error,4290," RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:4327,Availability,error,error,4327," RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:4460,Availability,error,error,4460," Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::De",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:5417,Availability,error,error,5417,"making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your fun",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:5457,Availability,error,error,5457,"making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your fun",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:5474,Availability,error,error,5474,"making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your fun",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:5496,Availability,error,error,5496,"making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your fun",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:5533,Availability,error,error,5533,"making the step size h smaller. double operator()(double x); { return Derivative1(x); }. double Derivative1(const ROOT::Math::IGenFunction& f, double x, double h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your fun",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:5666,Availability,error,error,5666,"le h). First Derivative calculation passing function and step-size. double Derivative2(double x). Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpola",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:6566,Availability,error,error,6566,". where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative3(const ROOT::Math::IGenFunction& f, double x, double h). Third Derivative calculation passing function and step-size. void SetFunction(const ROOT::Math::IGenFunction& f); Set function for derivative calculation (copy the function if option has been enabled in the constructor). \@param f Function to be differentiated. void SetStepSize(double h); Set step size for derivative calculation. \@param h step size for calculation. { fStepSize = h; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:6606,Availability,error,error,6606,". where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative3(const ROOT::Math::IGenFunction& f, double x, double h). Third Derivative calculation passing function and step-size. void SetFunction(const ROOT::Math::IGenFunction& f); Set function for derivative calculation (copy the function if option has been enabled in the constructor). \@param f Function to be differentiated. void SetStepSize(double h); Set step size for derivative calculation. \@param h step size for calculation. { fStepSize = h; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:6623,Availability,error,error,6623,". where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative3(const ROOT::Math::IGenFunction& f, double x, double h). Third Derivative calculation passing function and step-size. void SetFunction(const ROOT::Math::IGenFunction& f); Set function for derivative calculation (copy the function if option has been enabled in the constructor). \@param f Function to be differentiated. void SetStepSize(double h); Set step size for derivative calculation. \@param h step size for calculation. { fStepSize = h; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:6645,Availability,error,error,6645,". where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative3(const ROOT::Math::IGenFunction& f, double x, double h). Third Derivative calculation passing function and step-size. void SetFunction(const ROOT::Math::IGenFunction& f); Set function for derivative calculation (copy the function if option has been enabled in the constructor). \@param f Function to be differentiated. void SetStepSize(double h); Set step size for derivative calculation. \@param h step size for calculation. { fStepSize = h; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:6682,Availability,error,error,6682,". where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative3(const ROOT::Math::IGenFunction& f, double x, double h). Third Derivative calculation passing function and step-size. void SetFunction(const ROOT::Math::IGenFunction& f); Set function for derivative calculation (copy the function if option has been enabled in the constructor). \@param f Function to be differentiated. void SetStepSize(double h); Set step size for derivative calculation. \@param h step size for calculation. { fStepSize = h; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:6815,Availability,error,error,6815,". where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative2(const ROOT::Math::IGenFunction& f, double x, double h). Second Derivative calculation passing function and step-size. double Derivative3(double x). Returns the third derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. double Derivative3(const ROOT::Math::IGenFunction& f, double x, double h). Third Derivative calculation passing function and step-size. void SetFunction(const ROOT::Math::IGenFunction& f); Set function for derivative calculation (copy the function if option has been enabled in the constructor). \@param f Function to be differentiated. void SetStepSize(double h); Set step size for derivative calculation. \@param h step size for calculation. { fStepSize = h; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:1285,Deployability,a/b,a/bookcpdf,1285,"Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorRichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(const ROOT::Math::IGenFunction& f, double",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:910,Integrability,depend,depending,910,". ROOT::Math::RichardsonDerivator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::M",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:2699,Modifiability,Inherit,Inheritance,2699,"leDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorRichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetStepSize(double h). Data Members; protected:. const ROOT::Math::IGenFunction*fFunctionpointer to function; boolfFunctionCopiedflag to control if function is copied in the class; doublefLastErrorerror estimate of last derivative calculation; doublefStepSizestep size used for derivative calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RichardsonDerivator(); Destructor: Removes function if needed. . RichardsonDerivator(double h = 0.001); Default Constructor.; Give optionally the step size for derivation. By default is 0.001, which is fine for x ~ 1; Increase if x is in averga larger or decrease if x is smaller. RichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); Construct from function and step size. RichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs). Copy constructor. RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, deriva",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html:2712,Modifiability,Inherit,Inherited,2712,"leDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorRichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetStepSize(double h). Data Members; protected:. const ROOT::Math::IGenFunction*fFunctionpointer to function; boolfFunctionCopiedflag to control if function is copied in the class; doublefLastErrorerror estimate of last derivative calculation; doublefStepSizestep size used for derivative calculation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RichardsonDerivator(); Destructor: Removes function if needed. . RichardsonDerivator(double h = 0.001); Default Constructor.; Give optionally the step size for derivation. By default is 0.001, which is fine for x ~ 1; Increase if x is in averga larger or decrease if x is smaller. RichardsonDerivator(const ROOT::Math::IGenFunction& f, double h = 0.001, bool copyFunc = false); Construct from function and step size. RichardsonDerivator(const ROOT::Math::RichardsonDerivator& rhs). Copy constructor. RichardsonDerivator & operator=(const ROOT::Math::RichardsonDerivator& rhs). Assignment operator. double Error() const; Returns the estimate of the absolute Error of the last derivative calculation. . { return fLastError; }. double Derivative1(double x). Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, deriva",MatchSource.WIKI,root/html602/ROOT__Math__RichardsonDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RichardsonDerivator.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:3648,Availability,failure,failure,3648,"ootFinderMethod*fSolvertype of algorithm to be used. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:437,Modifiability,plug-in,plug-in,437,". ROOT::Math::RootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RootFinder. class ROOT::Math::RootFinder. User Class to find the Root of one dimensional functions.; The GSL Methods are implemented in MathMore and they are loaded automatically; via the plug-in manager. The possible types of Root-finding algorithms are:; <ul>; <li>Root Bracketing Algorithms which do not require function derivatives; <ol>; <li>RootFinder::kBRENT (default method implemented in MathCore); <li>RootFinder::kGSL_BISECTION; <li>RootFinder::kGSL_FALSE_POS; <li>RootFinder::kGSL_BRENT; </ol>; <li>Root Finding Algorithms using Derivatives; <ol>; <li>RootFinder::kGSL_NEWTON; <li>RootFinder::kGSL_SECANT; <li>RootFinder::kGSL_STEFFENSON; </ol>; </ul>. This class does not cupport copying. @ingroup RootFinders. Function Members (Methods); public:. virtual~RootFinder(); intIterate(); intIterations() const; const char*Name() const; doubleRoot() const; ROOT::Math::RootFinderRootFinder(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int, double>(int& f, double& d, double start, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int>(int& f, double min, double max, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. static ROOT::Math::RootFinder::ETypekBRENT; static ROOT::Math::RootFinder",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:2366,Modifiability,Inherit,Inheritance,2366,"pe type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int, double>(int& f, double& d, double start, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int>(int& f, double min, double max, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. static ROOT::Math::RootFinder::ETypekBRENT; static ROOT::Math::RootFinder::ETypekGSL_BISECTION; static ROOT::Math::RootFinder::ETypekGSL_BRENT; static ROOT::Math::RootFinder::ETypekGSL_FALSE_POS; static ROOT::Math::RootFinder::ETypekGSL_NEWTON; static ROOT::Math::RootFinder::ETypekGSL_SECANT; static ROOT::Math::RootFinder::ETypekGSL_STEFFENSON. private:. ROOT::Math::IRootFinderMethod*fSolvertype of algorithm to be used. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:2379,Modifiability,Inherit,Inherited,2379,"pe type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int, double>(int& f, double& d, double start, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int>(int& f, double min, double max, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. static ROOT::Math::RootFinder::ETypekBRENT; static ROOT::Math::RootFinder::ETypekGSL_BISECTION; static ROOT::Math::RootFinder::ETypekGSL_BRENT; static ROOT::Math::RootFinder::ETypekGSL_FALSE_POS; static ROOT::Math::RootFinder::ETypekGSL_NEWTON; static ROOT::Math::RootFinder::ETypekGSL_SECANT; static ROOT::Math::RootFinder::ETypekGSL_STEFFENSON. private:. ROOT::Math::IRootFinderMethod*fSolvertype of algorithm to be used. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:407,Performance,load,loaded,407,". ROOT::Math::RootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RootFinder. class ROOT::Math::RootFinder. User Class to find the Root of one dimensional functions.; The GSL Methods are implemented in MathMore and they are loaded automatically; via the plug-in manager. The possible types of Root-finding algorithms are:; <ul>; <li>Root Bracketing Algorithms which do not require function derivatives; <ol>; <li>RootFinder::kBRENT (default method implemented in MathCore); <li>RootFinder::kGSL_BISECTION; <li>RootFinder::kGSL_FALSE_POS; <li>RootFinder::kGSL_BRENT; </ol>; <li>Root Finding Algorithms using Derivatives; <ol>; <li>RootFinder::kGSL_NEWTON; <li>RootFinder::kGSL_SECANT; <li>RootFinder::kGSL_STEFFENSON; </ol>; </ul>. This class does not cupport copying. @ingroup RootFinders. Function Members (Methods); public:. virtual~RootFinder(); intIterate(); intIterations() const; const char*Name() const; doubleRoot() const; ROOT::Math::RootFinderRootFinder(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT); boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int, double>(int& f, double& d, double start, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); boolSolve<int>(int& f, double min, double max, int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); intStatus() const. private:. ROOT::Math::RootFinder&operator=(const ROOT::Math::RootFinder& rhs); ROOT::Math::RootFinderRootFinder(const ROOT::Math::RootFinder&). Data Members; public:. static ROOT::Math::RootFinder::ETypekBRENT; static ROOT::Math::RootFinder",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:3393,Performance,perform,performed,3393,"ootFinderMethod*fSolvertype of algorithm to be used. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__RootFinder.html:3436,Performance,Perform,Perform,3436,"ootFinderMethod*fSolvertype of algorithm to be used. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RootFinder.html
https://root.cern/root/html602/ROOT__Math__Roots.html:323,Usability,simpl,simplest,323,". ROOT::Math::Roots. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots. namespace ROOT::Math::Roots. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods). Class Charts; Function documentation. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots.html
https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html:1920,Modifiability,Inherit,Inheritance,1920,"e the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bisection(). virtual ~Bisection(). Bisection(const ROOT::Math::Roots::Bisection& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Bisection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html
https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html:1933,Modifiability,Inherit,Inherited,1933,"e the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bisection(). virtual ~Bisection(). Bisection(const ROOT::Math::Roots::Bisection& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Bisection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html
https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html:382,Usability,simpl,simplest,382,". ROOT::Math::Roots::Bisection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Bisection. class ROOT::Math::Roots::Bisection: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Bisection(); ROOT::Math::Roots::BisectionBisection(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BisectionBisection(const ROOT::Math::Roots::Bisection&); ROOT::Math::Roots::Bisection&operator=(const ROOT::Math::Roots::Bisection&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bise",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Bisection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Bisection.html
https://root.cern/root/html602/ROOT__Math__Roots__Brent.html:1876,Modifiability,Inherit,Inheritance,1876,"ng the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Math::Roots::Brent& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Brent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Brent.html
https://root.cern/root/html602/ROOT__Math__Roots__Brent.html:1889,Modifiability,Inherit,Inherited,1889,"ng the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Math::Roots::Brent& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Brent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Brent.html
https://root.cern/root/html602/ROOT__Math__Roots__Brent.html:370,Usability,simpl,simplest,370,". ROOT::Math::Roots::Brent. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Brent. class ROOT::Math::Roots::Brent: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Brent(); ROOT::Math::Roots::BrentBrent(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::BrentBrent(const ROOT::Math::Roots::Brent&); ROOT::Math::Roots::Brent&operator=(const ROOT::Math::Roots::Brent&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Brent(). virtual ~Brent(). Brent(const ROOT::Mat",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Brent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Brent.html
https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html:1909,Modifiability,Inherit,Inheritance,1909,"est one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__FalsePos.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html
https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html:1922,Modifiability,Inherit,Inherited,1922,"est one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). virtual ~FalsePos(). FalsePos(const ROOT::Math::Roots::FalsePos& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__FalsePos.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html
https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html:379,Usability,simpl,simplest,379,". ROOT::Math::Roots::FalsePos. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::FalsePos. class ROOT::Math::Roots::FalsePos: public ROOT::Math::GSLRootFinder. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~FalsePos(); ROOT::Math::Roots::FalsePosFalsePos(); ROOT::Math::GSLRootFinderROOT::Math::GSLRootFinder::GSLRootFinder(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinder::Iterate(); virtual intROOT::Math::GSLRootFinder::Iterations() const; virtual const char*ROOT::Math::GSLRootFinder::Name() const; virtual doubleROOT::Math::GSLRootFinder::Root() const; virtual boolROOT::Math::GSLRootFinder::SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolROOT::Math::GSLRootFinder::SetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolROOT::Math::GSLRootFinder::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinder::Status() const. protected:. voidROOT::Math::GSLRootFinder::FreeSolver(); voidROOT::Math::GSLRootFinder::SetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::Roots::FalsePosFalsePos(const ROOT::Math::Roots::FalsePos&); ROOT::Math::Roots::FalsePos&operator=(const ROOT::Math::Roots::FalsePos&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FalsePos(). vir",MatchSource.WIKI,root/html602/ROOT__Math__Roots__FalsePos.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__FalsePos.html
https://root.cern/root/html602/ROOT__Math__Roots__Newton.html:2040,Modifiability,Inherit,Inheritance,2040,"for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT::Math::Roots::Newton&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Newton(). virtual ~Newton(). Newton(const ROOT::Math::Roots::Newton& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Newton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Newton.html
https://root.cern/root/html602/ROOT__Math__Roots__Newton.html:2053,Modifiability,Inherit,Inherited,2053,"for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT::Math::Roots::Newton&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Newton(). virtual ~Newton(). Newton(const ROOT::Math::Roots::Newton& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Newton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Newton.html
https://root.cern/root/html602/ROOT__Math__Roots__Newton.html:378,Usability,simpl,simplest,378,". ROOT::Math::Roots::Newton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Newton. class ROOT::Math::Roots::Newton: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Newton(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; ROOT::Math::Roots::NewtonNewton(); virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::NewtonNewton(const ROOT::Math::Roots::Newton&); ROOT::Math::Roots::Newton&operator=(const ROOT",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Newton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Newton.html
https://root.cern/root/html602/ROOT__Math__Roots__Secant.html:2040,Modifiability,Inherit,Inheritance,2040,"for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT::Math::Roots::Secant&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Secant(). virtual ~Secant(). Secant(const ROOT::Math::Roots::Secant& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Secant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Secant.html
https://root.cern/root/html602/ROOT__Math__Roots__Secant.html:2053,Modifiability,Inherit,Inherited,2053,"for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT::Math::Roots::Secant&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Secant(). virtual ~Secant(). Secant(const ROOT::Math::Roots::Secant& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Secant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Secant.html
https://root.cern/root/html602/ROOT__Math__Roots__Secant.html:378,Usability,simpl,simplest,378,". ROOT::Math::Roots::Secant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Secant. class ROOT::Math::Roots::Secant: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Secant(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; ROOT::Math::Roots::SecantSecant(); virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const. protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Secant&operator=(const ROOT::Math::Roots::Secant&); ROOT::Math::Roots::SecantSecant(const ROOT",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Secant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Secant.html
https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html:2084,Modifiability,Inherit,Inheritance,2084,"tion Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math::Roots::SteffensonSteffenson(const ROOT::Math::Roots::Steffenson&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Steffenson(). virtual ~Steffenson(). Steffenson(const ROOT::Math::Roots::Steffenson& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Steffenson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html
https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html:2097,Modifiability,Inherit,Inherited,2097,"tion Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math::Roots::SteffensonSteffenson(const ROOT::Math::Roots::Steffenson&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Steffenson(). virtual ~Steffenson(). Steffenson(const ROOT::Math::Roots::Steffenson& ); usually copying is non trivial, so we make this unaccessible. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Steffenson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html
https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html:390,Usability,simpl,simplest,390,". ROOT::Math::Roots::Steffenson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Roots::Steffenson. class ROOT::Math::Roots::Steffenson: public ROOT::Math::GSLRootFinderDeriv. Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders. Function Members (Methods); public:. virtual~Steffenson(); ROOT::Math::GSLRootFinderDerivROOT::Math::GSLRootFinderDeriv::GSLRootFinderDeriv(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::GSLRootFinderDeriv::Iterate(); virtual intROOT::Math::GSLRootFinderDeriv::Iterations() const; virtual const char*ROOT::Math::GSLRootFinderDeriv::Name() const; virtual doubleROOT::Math::GSLRootFinderDeriv::Root() const; virtual boolROOT::Math::GSLRootFinderDeriv::SetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolROOT::Math::GSLRootFinderDeriv::SetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolROOT::Math::GSLRootFinderDeriv::Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intROOT::Math::GSLRootFinderDeriv::Status() const; ROOT::Math::Roots::SteffensonSteffenson(). protected:. voidROOT::Math::GSLRootFinderDeriv::FreeSolver(); voidROOT::Math::GSLRootFinderDeriv::SetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::Roots::Steffenson&operator=(const ROOT::Math::Roots::Steffenson&); ROOT::Math",MatchSource.WIKI,root/html602/ROOT__Math__Roots__Steffenson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Roots__Steffenson.html
https://root.cern/root/html602/ROOT__Math__Rotation3D.html:6186,Modifiability,Inherit,Inheritance,6186,"OT::Math::RotationZYX& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::Quaternion& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::RotationZ& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::RotationY& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::RotationX& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::Rotation3D& m); ROOT::Math::Rotation3DRotation3D(ROOT::Math::Rotation3D::Scalar xx, ROOT::Math::Rotation3D::Scalar xy, ROOT::Math::Rotation3D::Scalar xz, ROOT::Math::Rotation3D::Scalar yx, ROOT::Math::Rotation3D::Scalar yy, ROOT::Math::Rotation3D::Scalar yz, ROOT::Math::Rotation3D::Scalar zx, ROOT::Math::Rotation3D::Scalar zy, ROOT::Math::Rotation3D::Scalar zz); voidSetComponents(ROOT::Math::Rotation3D::Scalar xx, ROOT::Math::Rotation3D::Scalar xy, ROOT::Math::Rotation3D::Scalar xz, ROOT::Math::Rotation3D::Scalar yx, ROOT::Math::Rotation3D::Scalar yy, ROOT::Math::Rotation3D::Scalar yz, ROOT::Math::Rotation3D::Scalar zx, ROOT::Math::Rotation3D::Scalar zy, ROOT::Math::Rotation3D::Scalar zz). Data Members; public:. static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkXX; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkXY; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkXZ; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkYX; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkYY; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkYZ; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkZX; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkZY; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkZZ. private:. ROOT::Math::Rotation3D::ScalarfM[9]9 elements (3x3 matrix) representing the rotation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Rotation3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Rotation3D.html
https://root.cern/root/html602/ROOT__Math__Rotation3D.html:6199,Modifiability,Inherit,Inherited,6199,"OT::Math::RotationZYX& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::Quaternion& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::RotationZ& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::RotationY& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::RotationX& m); ROOT::Math::Rotation3DRotation3D(const ROOT::Math::Rotation3D& m); ROOT::Math::Rotation3DRotation3D(ROOT::Math::Rotation3D::Scalar xx, ROOT::Math::Rotation3D::Scalar xy, ROOT::Math::Rotation3D::Scalar xz, ROOT::Math::Rotation3D::Scalar yx, ROOT::Math::Rotation3D::Scalar yy, ROOT::Math::Rotation3D::Scalar yz, ROOT::Math::Rotation3D::Scalar zx, ROOT::Math::Rotation3D::Scalar zy, ROOT::Math::Rotation3D::Scalar zz); voidSetComponents(ROOT::Math::Rotation3D::Scalar xx, ROOT::Math::Rotation3D::Scalar xy, ROOT::Math::Rotation3D::Scalar xz, ROOT::Math::Rotation3D::Scalar yx, ROOT::Math::Rotation3D::Scalar yy, ROOT::Math::Rotation3D::Scalar yz, ROOT::Math::Rotation3D::Scalar zx, ROOT::Math::Rotation3D::Scalar zy, ROOT::Math::Rotation3D::Scalar zz). Data Members; public:. static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkXX; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkXY; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkXZ; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkYX; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkYY; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkYZ; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkZX; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkZY; static ROOT::Math::Rotation3D::ERotation3DMatrixIndexkZZ. private:. ROOT::Math::Rotation3D::ScalarfM[9]9 elements (3x3 matrix) representing the rotation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__Rotation3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__Rotation3D.html
https://root.cern/root/html602/ROOT__Math__RotationX.html:2277,Modifiability,Inherit,Inheritance,2277,"() const; voidInvert(); booloperator!=(const ROOT::Math::RotationX& rhs) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::RotationXoperator*(const ROOT::Math::RotationX& r) const; ROOT::Math::RotationXoperator*<ROOT::Math::RotationX>(const ROOT::Math::RotationX& v) const; ROOT::Math::RotationX&operator*=(const ROOT::Math::RotationX& r); ROOT::Math::RotationX&operator=(const ROOT::Math::RotationX&); ROOT::Math::RotationX&operator=(ROOT::Math::RotationX&&); booloperator==(const ROOT::Math::RotationX& rhs) const; voidRectify(); ROOT::Math::RotationXRotationX(); ROOT::Math::RotationXRotationX(ROOT::Math::RotationX::Scalar angle); ROOT::Math::RotationXRotationX(const ROOT::Math::RotationX&); ROOT::Math::RotationXRotationX(ROOT::Math::RotationX&&); voidSetAngle(ROOT::Math::RotationX::Scalar angle); voidSetComponents(ROOT::Math::RotationX::Scalar angle); ROOT::Math::RotationX::ScalarSinAngle() const. Data Members; private:. ROOT::Math::RotationX::ScalarfAnglerotation angle; ROOT::Math::RotationX::ScalarfCoscosine of the rotaiton angle; ROOT::Math::RotationX::ScalarfSinsine of the rotation angle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationX.html
https://root.cern/root/html602/ROOT__Math__RotationX.html:2290,Modifiability,Inherit,Inherited,2290,"() const; voidInvert(); booloperator!=(const ROOT::Math::RotationX& rhs) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::RotationXoperator*(const ROOT::Math::RotationX& r) const; ROOT::Math::RotationXoperator*<ROOT::Math::RotationX>(const ROOT::Math::RotationX& v) const; ROOT::Math::RotationX&operator*=(const ROOT::Math::RotationX& r); ROOT::Math::RotationX&operator=(const ROOT::Math::RotationX&); ROOT::Math::RotationX&operator=(ROOT::Math::RotationX&&); booloperator==(const ROOT::Math::RotationX& rhs) const; voidRectify(); ROOT::Math::RotationXRotationX(); ROOT::Math::RotationXRotationX(ROOT::Math::RotationX::Scalar angle); ROOT::Math::RotationXRotationX(const ROOT::Math::RotationX&); ROOT::Math::RotationXRotationX(ROOT::Math::RotationX&&); voidSetAngle(ROOT::Math::RotationX::Scalar angle); voidSetComponents(ROOT::Math::RotationX::Scalar angle); ROOT::Math::RotationX::ScalarSinAngle() const. Data Members; private:. ROOT::Math::RotationX::ScalarfAnglerotation angle; ROOT::Math::RotationX::ScalarfCoscosine of the rotaiton angle; ROOT::Math::RotationX::ScalarfSinsine of the rotation angle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationX.html
https://root.cern/root/html602/ROOT__Math__RotationY.html:2277,Modifiability,Inherit,Inheritance,2277,"() const; voidInvert(); booloperator!=(const ROOT::Math::RotationY& rhs) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::RotationYoperator*(const ROOT::Math::RotationY& r) const; ROOT::Math::RotationYoperator*<ROOT::Math::RotationY>(const ROOT::Math::RotationY& v) const; ROOT::Math::RotationY&operator*=(const ROOT::Math::RotationY& r); ROOT::Math::RotationY&operator=(const ROOT::Math::RotationY&); ROOT::Math::RotationY&operator=(ROOT::Math::RotationY&&); booloperator==(const ROOT::Math::RotationY& rhs) const; voidRectify(); ROOT::Math::RotationYRotationY(); ROOT::Math::RotationYRotationY(ROOT::Math::RotationY::Scalar angle); ROOT::Math::RotationYRotationY(const ROOT::Math::RotationY&); ROOT::Math::RotationYRotationY(ROOT::Math::RotationY&&); voidSetAngle(ROOT::Math::RotationY::Scalar angle); voidSetComponents(ROOT::Math::RotationY::Scalar angle); ROOT::Math::RotationY::ScalarSinAngle() const. Data Members; private:. ROOT::Math::RotationY::ScalarfAnglerotation angle; ROOT::Math::RotationY::ScalarfCoscosine of the rotaiton angle; ROOT::Math::RotationY::ScalarfSinsine of the rotation angle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationY.html
https://root.cern/root/html602/ROOT__Math__RotationY.html:2290,Modifiability,Inherit,Inherited,2290,"() const; voidInvert(); booloperator!=(const ROOT::Math::RotationY& rhs) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::RotationYoperator*(const ROOT::Math::RotationY& r) const; ROOT::Math::RotationYoperator*<ROOT::Math::RotationY>(const ROOT::Math::RotationY& v) const; ROOT::Math::RotationY&operator*=(const ROOT::Math::RotationY& r); ROOT::Math::RotationY&operator=(const ROOT::Math::RotationY&); ROOT::Math::RotationY&operator=(ROOT::Math::RotationY&&); booloperator==(const ROOT::Math::RotationY& rhs) const; voidRectify(); ROOT::Math::RotationYRotationY(); ROOT::Math::RotationYRotationY(ROOT::Math::RotationY::Scalar angle); ROOT::Math::RotationYRotationY(const ROOT::Math::RotationY&); ROOT::Math::RotationYRotationY(ROOT::Math::RotationY&&); voidSetAngle(ROOT::Math::RotationY::Scalar angle); voidSetComponents(ROOT::Math::RotationY::Scalar angle); ROOT::Math::RotationY::ScalarSinAngle() const. Data Members; private:. ROOT::Math::RotationY::ScalarfAnglerotation angle; ROOT::Math::RotationY::ScalarfCoscosine of the rotaiton angle; ROOT::Math::RotationY::ScalarfSinsine of the rotation angle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationY.html
https://root.cern/root/html602/ROOT__Math__RotationZ.html:2277,Modifiability,Inherit,Inheritance,2277,"() const; voidInvert(); booloperator!=(const ROOT::Math::RotationZ& rhs) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::RotationZoperator*(const ROOT::Math::RotationZ& r) const; ROOT::Math::RotationZoperator*<ROOT::Math::RotationZ>(const ROOT::Math::RotationZ& v) const; ROOT::Math::RotationZ&operator*=(const ROOT::Math::RotationZ& r); ROOT::Math::RotationZ&operator=(const ROOT::Math::RotationZ&); ROOT::Math::RotationZ&operator=(ROOT::Math::RotationZ&&); booloperator==(const ROOT::Math::RotationZ& rhs) const; voidRectify(); ROOT::Math::RotationZRotationZ(); ROOT::Math::RotationZRotationZ(ROOT::Math::RotationZ::Scalar angle); ROOT::Math::RotationZRotationZ(const ROOT::Math::RotationZ&); ROOT::Math::RotationZRotationZ(ROOT::Math::RotationZ&&); voidSetAngle(ROOT::Math::RotationZ::Scalar angle); voidSetComponents(ROOT::Math::RotationZ::Scalar angle); ROOT::Math::RotationZ::ScalarSinAngle() const. Data Members; private:. ROOT::Math::RotationZ::ScalarfAnglerotation angle; ROOT::Math::RotationZ::ScalarfCoscosine of the rotaiton angle; ROOT::Math::RotationZ::ScalarfSinsine of the rotation angle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationZ.html
https://root.cern/root/html602/ROOT__Math__RotationZ.html:2290,Modifiability,Inherit,Inherited,2290,"() const; voidInvert(); booloperator!=(const ROOT::Math::RotationZ& rhs) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::RotationZoperator*(const ROOT::Math::RotationZ& r) const; ROOT::Math::RotationZoperator*<ROOT::Math::RotationZ>(const ROOT::Math::RotationZ& v) const; ROOT::Math::RotationZ&operator*=(const ROOT::Math::RotationZ& r); ROOT::Math::RotationZ&operator=(const ROOT::Math::RotationZ&); ROOT::Math::RotationZ&operator=(ROOT::Math::RotationZ&&); booloperator==(const ROOT::Math::RotationZ& rhs) const; voidRectify(); ROOT::Math::RotationZRotationZ(); ROOT::Math::RotationZRotationZ(ROOT::Math::RotationZ::Scalar angle); ROOT::Math::RotationZRotationZ(const ROOT::Math::RotationZ&); ROOT::Math::RotationZRotationZ(ROOT::Math::RotationZ&&); voidSetAngle(ROOT::Math::RotationZ::Scalar angle); voidSetComponents(ROOT::Math::RotationZ::Scalar angle); ROOT::Math::RotationZ::ScalarSinAngle() const. Data Members; private:. ROOT::Math::RotationZ::ScalarfAnglerotation angle; ROOT::Math::RotationZ::ScalarfCoscosine of the rotaiton angle; ROOT::Math::RotationZ::ScalarfSinsine of the rotation angle. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationZ.html
https://root.cern/root/html602/ROOT__Math__RotationZYX.html:3041,Modifiability,Inherit,Inheritance,3041," r) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::AxisAngle& a) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::Quaternion& q) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::EulerAngles& q) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::RotationX& rx) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::RotationY& ry) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::RotationZYX&operator=(const ROOT::Math::RotationZYX&); ROOT::Math::RotationZYX&operator=(ROOT::Math::RotationZYX&&); booloperator==(const ROOT::Math::RotationZYX& rhs) const; ROOT::Math::RotationZYX::ScalarPhi() const; ROOT::Math::RotationZYX::ScalarPsi() const; voidRectify(); ROOT::Math::RotationZYXRotationZYX(); ROOT::Math::RotationZYXRotationZYX(const ROOT::Math::RotationZYX& r); ROOT::Math::RotationZYXRotationZYX(const ROOT::Math::RotationZYX&); ROOT::Math::RotationZYXRotationZYX(ROOT::Math::RotationZYX&&); ROOT::Math::RotationZYXRotationZYX(ROOT::Math::RotationZYX::Scalar phi, ROOT::Math::RotationZYX::Scalar theta, ROOT::Math::RotationZYX::Scalar psi); voidSetComponents(ROOT::Math::RotationZYX::Scalar phi, ROOT::Math::RotationZYX::Scalar theta, ROOT::Math::RotationZYX::Scalar psi); voidSetPhi(ROOT::Math::RotationZYX::Scalar phi); voidSetPsi(ROOT::Math::RotationZYX::Scalar psi); voidSetTheta(ROOT::Math::RotationZYX::Scalar theta); ROOT::Math::RotationZYX::ScalarTheta() const. private:. static doublePi(). Data Members; private:. doublefPhiZ rotation angle (yaw) defined in (-PI,PI]; doublefPsiX'' rotation angle (roll) defined in (-PI,PI]; doublefThetaY' rotation angle (pitch) defined in [-PI/2,PI/2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationZYX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationZYX.html
https://root.cern/root/html602/ROOT__Math__RotationZYX.html:3054,Modifiability,Inherit,Inherited,3054," r) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::AxisAngle& a) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::Quaternion& q) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::EulerAngles& q) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::RotationX& rx) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::RotationY& ry) const; ROOT::Math::RotationZYXoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::RotationZYX&operator=(const ROOT::Math::RotationZYX&); ROOT::Math::RotationZYX&operator=(ROOT::Math::RotationZYX&&); booloperator==(const ROOT::Math::RotationZYX& rhs) const; ROOT::Math::RotationZYX::ScalarPhi() const; ROOT::Math::RotationZYX::ScalarPsi() const; voidRectify(); ROOT::Math::RotationZYXRotationZYX(); ROOT::Math::RotationZYXRotationZYX(const ROOT::Math::RotationZYX& r); ROOT::Math::RotationZYXRotationZYX(const ROOT::Math::RotationZYX&); ROOT::Math::RotationZYXRotationZYX(ROOT::Math::RotationZYX&&); ROOT::Math::RotationZYXRotationZYX(ROOT::Math::RotationZYX::Scalar phi, ROOT::Math::RotationZYX::Scalar theta, ROOT::Math::RotationZYX::Scalar psi); voidSetComponents(ROOT::Math::RotationZYX::Scalar phi, ROOT::Math::RotationZYX::Scalar theta, ROOT::Math::RotationZYX::Scalar psi); voidSetPhi(ROOT::Math::RotationZYX::Scalar phi); voidSetPsi(ROOT::Math::RotationZYX::Scalar psi); voidSetTheta(ROOT::Math::RotationZYX::Scalar theta); ROOT::Math::RotationZYX::ScalarTheta() const. private:. static doublePi(). Data Members; private:. doublefPhiZ rotation angle (yaw) defined in (-PI,PI]; doublefPsiX'' rotation angle (roll) defined in (-PI,PI]; doublefThetaY' rotation angle (pitch) defined in [-PI/2,PI/2]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RotationZYX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RotationZYX.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_2_.html:1385,Modifiability,Inherit,Inheritance,1385,". ROOT::Math::RowOffsets<2>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<2>. class ROOT::Math::RowOffsets<2>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<2>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<2>&operator=(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>&operator=(ROOT::Math::RowOffsets<2>&&); ROOT::Math::RowOffsets<2>RowOffsets<2>(); ROOT::Math::RowOffsets<2>RowOffsets<2>(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>RowOffsets<2>(ROOT::Math::RowOffsets<2>&&). Data Members; public:. intfOff[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_2_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_2_.html:1398,Modifiability,Inherit,Inherited,1398,". ROOT::Math::RowOffsets<2>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<2>. class ROOT::Math::RowOffsets<2>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<2>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<2>&operator=(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>&operator=(ROOT::Math::RowOffsets<2>&&); ROOT::Math::RowOffsets<2>RowOffsets<2>(); ROOT::Math::RowOffsets<2>RowOffsets<2>(const ROOT::Math::RowOffsets<2>&); ROOT::Math::RowOffsets<2>RowOffsets<2>(ROOT::Math::RowOffsets<2>&&). Data Members; public:. intfOff[4]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_2_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_2_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_3_.html:1385,Modifiability,Inherit,Inheritance,1385,". ROOT::Math::RowOffsets<3>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<3>. class ROOT::Math::RowOffsets<3>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<3>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<3>&operator=(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>&operator=(ROOT::Math::RowOffsets<3>&&); ROOT::Math::RowOffsets<3>RowOffsets<3>(); ROOT::Math::RowOffsets<3>RowOffsets<3>(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>RowOffsets<3>(ROOT::Math::RowOffsets<3>&&). Data Members; public:. intfOff[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_3_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_3_.html:1398,Modifiability,Inherit,Inherited,1398,". ROOT::Math::RowOffsets<3>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<3>. class ROOT::Math::RowOffsets<3>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<3>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<3>&operator=(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>&operator=(ROOT::Math::RowOffsets<3>&&); ROOT::Math::RowOffsets<3>RowOffsets<3>(); ROOT::Math::RowOffsets<3>RowOffsets<3>(const ROOT::Math::RowOffsets<3>&); ROOT::Math::RowOffsets<3>RowOffsets<3>(ROOT::Math::RowOffsets<3>&&). Data Members; public:. intfOff[9]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_3_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_3_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_4_.html:1386,Modifiability,Inherit,Inheritance,1386,". ROOT::Math::RowOffsets<4>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<4>. class ROOT::Math::RowOffsets<4>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<4>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<4>&operator=(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>&operator=(ROOT::Math::RowOffsets<4>&&); ROOT::Math::RowOffsets<4>RowOffsets<4>(); ROOT::Math::RowOffsets<4>RowOffsets<4>(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>RowOffsets<4>(ROOT::Math::RowOffsets<4>&&). Data Members; public:. intfOff[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_4_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_4_.html:1399,Modifiability,Inherit,Inherited,1399,". ROOT::Math::RowOffsets<4>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<4>. class ROOT::Math::RowOffsets<4>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<4>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<4>&operator=(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>&operator=(ROOT::Math::RowOffsets<4>&&); ROOT::Math::RowOffsets<4>RowOffsets<4>(); ROOT::Math::RowOffsets<4>RowOffsets<4>(const ROOT::Math::RowOffsets<4>&); ROOT::Math::RowOffsets<4>RowOffsets<4>(ROOT::Math::RowOffsets<4>&&). Data Members; public:. intfOff[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_4_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_4_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_5_.html:1386,Modifiability,Inherit,Inheritance,1386,". ROOT::Math::RowOffsets<5>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<5>. class ROOT::Math::RowOffsets<5>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<5>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<5>&operator=(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>&operator=(ROOT::Math::RowOffsets<5>&&); ROOT::Math::RowOffsets<5>RowOffsets<5>(); ROOT::Math::RowOffsets<5>RowOffsets<5>(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>RowOffsets<5>(ROOT::Math::RowOffsets<5>&&). Data Members; public:. intfOff[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_5_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_5_.html:1399,Modifiability,Inherit,Inherited,1399,". ROOT::Math::RowOffsets<5>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<5>. class ROOT::Math::RowOffsets<5>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<5>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<5>&operator=(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>&operator=(ROOT::Math::RowOffsets<5>&&); ROOT::Math::RowOffsets<5>RowOffsets<5>(); ROOT::Math::RowOffsets<5>RowOffsets<5>(const ROOT::Math::RowOffsets<5>&); ROOT::Math::RowOffsets<5>RowOffsets<5>(ROOT::Math::RowOffsets<5>&&). Data Members; public:. intfOff[25]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_5_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_5_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_6_.html:1386,Modifiability,Inherit,Inheritance,1386,". ROOT::Math::RowOffsets<6>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<6>. class ROOT::Math::RowOffsets<6>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<6>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<6>&operator=(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>&operator=(ROOT::Math::RowOffsets<6>&&); ROOT::Math::RowOffsets<6>RowOffsets<6>(); ROOT::Math::RowOffsets<6>RowOffsets<6>(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>RowOffsets<6>(ROOT::Math::RowOffsets<6>&&). Data Members; public:. intfOff[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_6_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_6_.html:1399,Modifiability,Inherit,Inherited,1399,". ROOT::Math::RowOffsets<6>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<6>. class ROOT::Math::RowOffsets<6>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<6>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<6>&operator=(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>&operator=(ROOT::Math::RowOffsets<6>&&); ROOT::Math::RowOffsets<6>RowOffsets<6>(); ROOT::Math::RowOffsets<6>RowOffsets<6>(const ROOT::Math::RowOffsets<6>&); ROOT::Math::RowOffsets<6>RowOffsets<6>(ROOT::Math::RowOffsets<6>&&). Data Members; public:. intfOff[36]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_6_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_6_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_7_.html:1386,Modifiability,Inherit,Inheritance,1386,". ROOT::Math::RowOffsets<7>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<7>. class ROOT::Math::RowOffsets<7>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<7>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<7>&operator=(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>&operator=(ROOT::Math::RowOffsets<7>&&); ROOT::Math::RowOffsets<7>RowOffsets<7>(); ROOT::Math::RowOffsets<7>RowOffsets<7>(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>RowOffsets<7>(ROOT::Math::RowOffsets<7>&&). Data Members; public:. intfOff[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_7_.html
https://root.cern/root/html602/ROOT__Math__RowOffsets_7_.html:1399,Modifiability,Inherit,Inherited,1399,". ROOT::Math::RowOffsets<7>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::RowOffsets<7>. class ROOT::Math::RowOffsets<7>. MatRepStd; Standard Matrix representation for a general D1 x D2 matrix.; This class is itself a template on the contained type T, the number of rows and the number of columns.; Its data member is an array T[nrows*ncols] containing the matrix data.; The data are stored in the row-major C convention.; For example, for a matrix, M, of size 3x3, the data \f$ \left[a_0,a_1,a_2,.......,a_7,a_8 \right] \f$d are stored in the following order:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_2 \\; a_3 & a_4 & a_5 \\; a_6 & a_7 & a_8 \end{array} \right); \f]. @ingroup MatRep. Function Members (Methods); public:. ~RowOffsets<7>(); intapply(unsigned int i) const; intoperator()(unsigned int i, unsigned int j) const; ROOT::Math::RowOffsets<7>&operator=(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>&operator=(ROOT::Math::RowOffsets<7>&&); ROOT::Math::RowOffsets<7>RowOffsets<7>(); ROOT::Math::RowOffsets<7>RowOffsets<7>(const ROOT::Math::RowOffsets<7>&); ROOT::Math::RowOffsets<7>RowOffsets<7>(ROOT::Math::RowOffsets<7>&&). Data Members; public:. intfOff[49]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const T& operator()(unsigned int i, unsigned int j) const. T apply(unsigned int i) const; { return fArray[i]; }. MatRepStd<T, D1, D2>& operator=(const R& rhs). MatRepSym<T, D>& operator=(const R&). assignment : only symmetric to symmetric allowed. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__RowOffsets_7_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__RowOffsets_7_.html
https://root.cern/root/html602/ROOT__Math__SMatrixIdentity.html:1317,Modifiability,Inherit,Inheritance,1317,". ROOT::Math::SMatrixIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrixIdentity. class ROOT::Math::SMatrixIdentity. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixIdentity(); ROOT::Math::SMatrixIdentity&operator=(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentity&operator=(ROOT::Math::SMatrixIdentity&&); ROOT::Math::SMatrixIdentitySMatrixIdentity(); ROOT::Math::SMatrixIdentitySMatrixIdentity(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentitySMatrixIdentity(ROOT::Math::SMatrixIdentity&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrixIdentity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrixIdentity.html
https://root.cern/root/html602/ROOT__Math__SMatrixIdentity.html:1330,Modifiability,Inherit,Inherited,1330,". ROOT::Math::SMatrixIdentity. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » SMATRIX; » ROOT::Math::SMatrixIdentity. class ROOT::Math::SMatrixIdentity. SMatrix: a generic fixed size D1 x D2 Matrix class.; The class is template on the scalar type, on the matrix sizes:; D1 = number of rows and D2 = number of columns; amd on the representation storage type.; By default the representation is MatRepStd<T,D1,D2> (standard D1xD2 of type T),; but it can be of type MatRepSym<T,D> for symmetric matrices DxD, where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixIdentity(); ROOT::Math::SMatrixIdentity&operator=(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentity&operator=(ROOT::Math::SMatrixIdentity&&); ROOT::Math::SMatrixIdentitySMatrixIdentity(); ROOT::Math::SMatrixIdentitySMatrixIdentity(const ROOT::Math::SMatrixIdentity&); ROOT::Math::SMatrixIdentitySMatrixIdentity(ROOT::Math::SMatrixIdentity&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrixIdentity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrixIdentity.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:9669,Availability,error,error,9669,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:9738,Availability,failure,failure,9738,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:10084,Availability,error,error,10084,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:10153,Availability,failure,failure,10153,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:11266,Availability,error,error,11266,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5937,Integrability,interface,interface,5937,"3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:6390,Integrability,interface,interface,6390,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:6432,Integrability,interface,interface,6432,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:6494,Integrability,interface,interface,6494,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:6554,Integrability,interface,interface,6554,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:8218,Integrability,rout,routine,8218," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5131,Modifiability,Inherit,Inheritance,5131," ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5144,Modifiability,Inherit,Inherited,5144," ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:9921,Performance,perform,performing,9921,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:11617,Safety,avoid,avoid,11617,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5573,Security,Access,Access,5573,"T::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5596,Security,access,access,5596,"T::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5701,Security,access,accessing,5701,"T::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5966,Security,access,access,5966,"3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:6990,Security,access,access,6990,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7104,Security,access,access,7104,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7220,Security,access,access,7220,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7398,Security,access,access,7398,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7322,Testability,assert,assert,7322,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7499,Testability,assert,assert,7499,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:9591,Availability,error,error,9591,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:9660,Availability,failure,failure,9660,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:10006,Availability,error,error,10006,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:10075,Availability,failure,failure,10075,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:11188,Availability,error,error,11188,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5859,Integrability,interface,interface,5859,"e,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:6312,Integrability,interface,interface,6312,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:6354,Integrability,interface,interface,6354,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:6416,Integrability,interface,interface,6416,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:6476,Integrability,interface,interface,6476,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:8140,Integrability,rout,routine,8140," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5053,Modifiability,Inherit,Inheritance,5053,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5066,Modifiability,Inherit,Inherited,5066,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:9843,Performance,perform,performing,9843,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:11539,Safety,avoid,avoid,11539,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5495,Security,Access,Access,5495,"onst ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5518,Security,access,access,5518,"onst ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5623,Security,access,accessing,5623,"onst ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5888,Security,access,access,5888,"e,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:6912,Security,access,access,6912,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:7026,Security,access,access,7026,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:7142,Security,access,access,7142,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:7320,Security,access,access,7320,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:7244,Testability,assert,assert,7244,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:7421,Testability,assert,assert,7421,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:9669,Availability,error,error,9669,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:9738,Availability,failure,failure,9738,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:10084,Availability,error,error,10084,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:10153,Availability,failure,failure,10153,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:11266,Availability,error,error,11266,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5937,Integrability,interface,interface,5937,"4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:6390,Integrability,interface,interface,6390,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:6432,Integrability,interface,interface,6432,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:6494,Integrability,interface,interface,6494,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:6554,Integrability,interface,interface,6554,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:8218,Integrability,rout,routine,8218," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5131,Modifiability,Inherit,Inheritance,5131," ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5144,Modifiability,Inherit,Inherited,5144," ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:9921,Performance,perform,performing,9921,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:11617,Safety,avoid,avoid,11617,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5573,Security,Access,Access,5573,"T::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5596,Security,access,access,5596,"T::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5701,Security,access,accessing,5701,"T::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5966,Security,access,access,5966,"4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:6990,Security,access,access,6990,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:7104,Security,access,access,7104,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:7220,Security,access,access,7220,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:7398,Security,access,access,7398,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:7322,Testability,assert,assert,7322,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:7499,Testability,assert,assert,7499,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:9591,Availability,error,error,9591,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:9660,Availability,failure,failure,9660,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:10006,Availability,error,error,10006,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:10075,Availability,failure,failure,10075,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:11188,Availability,error,error,11188,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5859,Integrability,interface,interface,5859,"e,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:6312,Integrability,interface,interface,6312,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:6354,Integrability,interface,interface,6354,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:6416,Integrability,interface,interface,6416,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:6476,Integrability,interface,interface,6476,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:8140,Integrability,rout,routine,8140," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5053,Modifiability,Inherit,Inheritance,5053,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5066,Modifiability,Inherit,Inherited,5066,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:9843,Performance,perform,performing,9843,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:11539,Safety,avoid,avoid,11539,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5495,Security,Access,Access,5495,"onst ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5518,Security,access,access,5518,"onst ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5623,Security,access,accessing,5623,"onst ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5888,Security,access,access,5888,"e,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:6912,Security,access,access,6912,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:7026,Security,access,access,7026,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:7142,Security,access,access,7142,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:7320,Security,access,access,7320,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:7244,Testability,assert,assert,7244,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:7421,Testability,assert,assert,7421,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:9669,Availability,error,error,9669,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:9738,Availability,failure,failure,9738,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:10084,Availability,error,error,10084,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:10153,Availability,failure,failure,10153,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:11266,Availability,error,error,11266,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5937,Integrability,interface,interface,5937,"5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:6390,Integrability,interface,interface,6390,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:6432,Integrability,interface,interface,6432,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:6494,Integrability,interface,interface,6494,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:6554,Integrability,interface,interface,6554,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:8218,Integrability,rout,routine,8218," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5131,Modifiability,Inherit,Inheritance,5131," ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5144,Modifiability,Inherit,Inherited,5144," ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepStd<double,5,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:9921,Performance,perform,performing,9921,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:11617,Safety,avoid,avoid,11617,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5573,Security,Access,Access,5573,"T::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5596,Security,access,access,5596,"T::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5701,Security,access,accessing,5701,"T::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5966,Security,access,access,5966,"5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:6990,Security,access,access,6990,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:7104,Security,access,access,7104,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:7220,Security,access,access,7220,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:7398,Security,access,access,7398,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:7322,Testability,assert,assert,7322,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:7499,Testability,assert,assert,7499,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:9591,Availability,error,error,9591,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:9660,Availability,failure,failure,9660,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:10006,Availability,error,error,10006,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:10075,Availability,failure,failure,10075,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:11188,Availability,error,error,11188,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5859,Integrability,interface,interface,5859,"e,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:6312,Integrability,interface,interface,6312,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:6354,Integrability,interface,interface,6354,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:6416,Integrability,interface,interface,6416,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:6476,Integrability,interface,interface,6476,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:8140,Integrability,rout,routine,8140," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5053,Modifiability,Inherit,Inheritance,5053,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5066,Modifiability,Inherit,Inherited,5066,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SMatrix<double,5U,5U,ROOT::Math::MatRepSym<double,5> >& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >(const ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:9843,Performance,perform,performing,9843,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:11539,Safety,avoid,avoid,11539,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5495,Security,Access,Access,5495,"onst ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5518,Security,access,access,5518,"onst ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5623,Security,access,accessing,5623,"onst ROOT::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5888,Security,access,access,5888,"e,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepSym<double,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:6912,Security,access,access,6912,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:7026,Security,access,access,7026,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:7142,Security,access,access,7142,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:7320,Security,access,access,7320,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:7244,Testability,assert,assert,7244,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:7421,Testability,assert,assert,7421,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:9669,Availability,error,error,9669,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:9738,Availability,failure,failure,9738,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:10084,Availability,error,error,10084,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:10153,Availability,failure,failure,10153,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:11266,Availability,error,error,11266,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5937,Integrability,interface,interface,5937,"6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:6390,Integrability,interface,interface,6390,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:6432,Integrability,interface,interface,6432,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:6494,Integrability,interface,interface,6494,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:6554,Integrability,interface,interface,6554,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:8218,Integrability,rout,routine,8218," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5131,Modifiability,Inherit,Inheritance,5131," ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5144,Modifiability,Inherit,Inherited,5144," ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepStd<double,6,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:9921,Performance,perform,performing,9921,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:11617,Safety,avoid,avoid,11617,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5573,Security,Access,Access,5573,"T::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5596,Security,access,access,5596,"T::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5701,Security,access,accessing,5701,"T::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5966,Security,access,access,5966,"6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:6990,Security,access,access,6990,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:7104,Security,access,access,7104,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:7220,Security,access,access,7220,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:7398,Security,access,access,7398,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:7322,Testability,assert,assert,7322,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:7499,Testability,assert,assert,7499,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:9591,Availability,error,error,9591,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:9660,Availability,failure,failure,9660,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:10006,Availability,error,error,10006,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:10075,Availability,failure,failure,10075,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:11188,Availability,error,error,11188,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5859,Integrability,interface,interface,5859,"e,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:6312,Integrability,interface,interface,6312,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:6354,Integrability,interface,interface,6354,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:6416,Integrability,interface,interface,6416,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:6476,Integrability,interface,interface,6476,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:8140,Integrability,rout,routine,8140," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5053,Modifiability,Inherit,Inheritance,5053,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5066,Modifiability,Inherit,Inherited,5066,"ath::SMatrixIdentity); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SMatrix<double,6U,6U,ROOT::Math::MatRepSym<double,6> >& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >(const ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:9843,Performance,perform,performing,9843,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:11539,Safety,avoid,avoid,11539,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5495,Security,Access,Access,5495,"onst ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5518,Security,access,access,5518,"onst ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5623,Security,access,accessing,5623,"onst ROOT::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<Double32_t,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5888,Security,access,access,5888,"e,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepSym<double,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:6912,Security,access,access,6912,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:7026,Security,access,access,7026,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:7142,Security,access,access,7142,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:7320,Security,access,access,7320,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:7244,Testability,assert,assert,7244,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:7421,Testability,assert,assert,7421,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5909,Integrability,interface,interface,5909,"2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const double& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,2,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const double& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,2,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,2,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,2,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,2,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5938,Security,access,access,5938,"2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepStd<double,2,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:9563,Availability,error,error,9563,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:9632,Availability,failure,failure,9632,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:9978,Availability,error,error,9978,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:10047,Availability,failure,failure,10047,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:11160,Availability,error,error,11160,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5831,Integrability,interface,interface,5831,"e,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:6284,Integrability,interface,interface,6284,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:6326,Integrability,interface,interface,6326,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:6388,Integrability,interface,interface,6388,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:6448,Integrability,interface,interface,6448,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:8112,Integrability,rout,routine,8112," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5025,Modifiability,Inherit,Inheritance,5025,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >(const double& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5038,Modifiability,Inherit,Inherited,5038,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >(const double& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:9815,Performance,perform,performing,9815,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:11511,Safety,avoid,avoid,11511,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5467,Security,Access,Access,5467," >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5490,Security,access,access,5490," >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5595,Security,access,accessing,5595," >(const ROOT::Math::SVector<double,2U*(2U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,2>fRep; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:5860,Security,access,access,5860,"e,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:6884,Security,access,access,6884,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:6998,Security,access,access,6998,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:7114,Security,access,access,7114,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:7292,Security,access,access,7292,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:7216,Testability,assert,assert,7216,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html:7393,Testability,assert,assert,7393,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow.html:2113,Modifiability,Inherit,Inheritance,2113,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow.html:2126,Modifiability,Inherit,Inherited,2126,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html:2233,Modifiability,Inherit,Inheritance,2233,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html:2246,Modifiability,Inherit,Inherited,2246,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepSym<double,2> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,2U,2U,ROOT::Math::MatRepSym<double,2> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepSym_double_2_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5909,Integrability,interface,interface,5909,"3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5938,Security,access,access,5938,"3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepStd<double,3,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:9563,Availability,error,error,9563,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:9632,Availability,failure,failure,9632,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:9978,Availability,error,error,9978,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:10047,Availability,failure,failure,10047,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:11160,Availability,error,error,11160,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5831,Integrability,interface,interface,5831,"e,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:6284,Integrability,interface,interface,6284,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:6326,Integrability,interface,interface,6326,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:6388,Integrability,interface,interface,6388,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:6448,Integrability,interface,interface,6448,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:8112,Integrability,rout,routine,8112," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5025,Modifiability,Inherit,Inheritance,5025,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5038,Modifiability,Inherit,Inherited,5038,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:9815,Performance,perform,performing,9815,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:11511,Safety,avoid,avoid,11511,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5467,Security,Access,Access,5467," >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5490,Security,access,access,5490," >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5595,Security,access,accessing,5595," >(const ROOT::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:5860,Security,access,access,5860,"e,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:6884,Security,access,access,6884,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:6998,Security,access,access,6998,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:7114,Security,access,access,7114,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:7292,Security,access,access,7292,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:7216,Testability,assert,assert,7216,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html:7393,Testability,assert,assert,7393,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow.html:2113,Modifiability,Inherit,Inheritance,2113,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow.html:2126,Modifiability,Inherit,Inherited,2126,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html:2233,Modifiability,Inherit,Inheritance,2233,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html:2246,Modifiability,Inherit,Inherited,2246,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepSym<double,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3U,3U,ROOT::Math::MatRepSym<double,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_3_-p1MatRepSym_double_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5909,Integrability,interface,interface,5909,"4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const double& rhs); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const ROOT::Math::SVector<double,3U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,4>fRep; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const double& rhs); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const ROOT::Math::SVector<double,3U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,4>fRep; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,3U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,4>fRep; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,3U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,4>fRep; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,3U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,3,4>fRep; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5938,Security,access,access,5938,"4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow&&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,3U,4U,ROOT::Math::MatRepStd<double,3,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5909,Integrability,interface,interface,5909,"3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const double& rhs); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const ROOT::Math::SVector<double,4U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,3>fRep; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const double& rhs); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const ROOT::Math::SVector<double,4U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,3>fRep; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,4U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,3>fRep; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,4U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,3>fRep; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,4U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,3>fRep; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5938,Security,access,access,5938,"3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow&&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4U,3U,ROOT::Math::MatRepStd<double,4,3> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5909,Integrability,interface,interface,5909,"4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:6526,Integrability,interface,interface,6526,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:8190,Integrability,rout,routine,8190," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5103,Modifiability,Inherit,Inheritance,5103,"ty); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5116,Modifiability,Inherit,Inherited,5116,"ty); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:9893,Performance,perform,performing,9893,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:11589,Safety,avoid,avoid,11589,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5545,Security,Access,Access,5545," ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5568,Security,access,access,5568," ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5673,Security,access,accessing,5673," ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<double,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5938,Security,access,access,5938,"4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:6962,Security,access,access,6962,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:7076,Security,access,access,7076,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:7192,Security,access,access,7192,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:7370,Security,access,access,7370,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:7294,Testability,assert,assert,7294,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:7471,Testability,assert,assert,7471,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow.html:2141,Modifiability,Inherit,Inheritance,2141,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow.html:2154,Modifiability,Inherit,Inherited,2154,"nly; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow_const.html:2261,Modifiability,Inherit,Inheritance,2261,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow_const.html:2274,Modifiability,Inherit,Inherited,2274,"any). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepStd<double,4,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:9563,Availability,error,error,9563,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:9632,Availability,failure,failure,9632,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:9978,Availability,error,error,9978,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:10047,Availability,failure,failure,10047,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:11160,Availability,error,error,11160,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5831,Integrability,interface,interface,5831,"e,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:6284,Integrability,interface,interface,6284,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:6326,Integrability,interface,interface,6326,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:6388,Integrability,interface,interface,6388,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:6448,Integrability,interface,interface,6448,"pply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operat",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:8112,Integrability,rout,routine,8112," Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::Invert for the inversion algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5025,Modifiability,Inherit,Inheritance,5025,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5038,Modifiability,Inherit,Inherited,5038,"T::Math::SMatrixIdentity); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal;",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:9815,Performance,perform,performing,9815,"s based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVect",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:11511,Safety,avoid,avoid,11511,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5467,Security,Access,Access,5467," >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5490,Security,access,access,5490," >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5595,Security,access,accessing,5595," >(const ROOT::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepSym<double,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:5860,Security,access,access,5860,"e,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:6884,Security,access,access,6884,"y are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Fun",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:6998,Security,access,access,6998,"r spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is succe",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:7114,Security,access,access,7114,",...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLI",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:7292,Security,access,access,7292,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:7216,Testability,assert,assert,7216,"\\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html:7393,Testability,assert,assert,7393,"rator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors). SMatrix<T,D1,D2,R> Inverse(int& ifail) const. Invert a square Matri",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow.html:2113,Modifiability,Inherit,Inheritance,2113,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow.html:2126,Modifiability,Inherit,Inherited,2126,", where the storage is only; D*(D+1)/2. See \ref SMatrixDoc. Original author is Thorsten Glebe; HERA-B Collaboration, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&&); double&operator[](int j); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRowSMatrixRow(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRowSMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i). Data Members; private:. ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrixRow(ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i); {}. T & operator[](int j); { return (*fMat)(fRow,j); }. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html:2233,Modifiability,Inherit,Inheritance,2233,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html:2246,Modifiability,Inherit,Inherited,2246,"on, MPI Heidelberg (Germany). @ingroup SMatrixSVector. @authors T. Glebe, L. Moneta and J. Palacios. SMatrix: column-wise storage. Function Members (Methods); public:. ~SMatrixRow_const(); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&operator=(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&operator=(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&&); const double&operator[](int j) const; ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_const&&); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepSym<double,4> >::SMatrixRow_constSMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i). Data Members; private:. const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >*fMat; unsigned intfRow. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T & operator[](int j); { return (*fMat)(fRow,j); }. SMatrixRow_const(const ROOT::Math::SMatrix<double,4U,4U,ROOT::Math::MatRepSym<double,4> >& rhs, unsigned int i); {}. » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_4_-p1MatRepSym_double_4_____SMatrixRow_const.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:9641,Availability,error,error,9641,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:9710,Availability,failure,failure,9710,"on algorithm. bool InvertFast(). Fast Invertion of a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on direct inversion using the Cramer rule for; matrices upto 5x5. Afterwards the same default algorithm of Invert() is used.; Note that this method is faster but can suffer from much larger numerical accuracy; when the condition of the matrix is large. SMatrix<T,D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:10056,Availability,error,error,10056,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:10125,Availability,failure,failure,10125,"D1,D2,R> InverseFast(int& ifail) const. Invert a square Matrix and returns a new matrix. In case the inversion fails; the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertFast for the inversion algorithm. bool InvertChol(). Invertion of a symmetric positive defined Matrix using Choleski decomposition.; ( this method changes the current matrix).; Return true if inversion is successfull.; The method used is based on Choleski decomposition; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; For solving a linear system, it is possible to use also the function; ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion. SMatrix<T,D1,D2,R> InverseChol(int& ifail) const. Invert of a symmetric positive defined Matrix using Choleski decomposition.; A compile error is given if the matrix is not of type symmetric and a run-time failure if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. re",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:11238,Availability,error,error,11238,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5909,Integrability,interface,interface,5909,"5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:6362,Integrability,interface,interface,6362,"D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). r",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:6404,Integrability,interface,interface,6404,"rix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:6466,Integrability,interface,interface,6466,":Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check ",MatchSource.WIKI,root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html
