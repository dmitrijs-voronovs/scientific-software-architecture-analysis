id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/broadinstitute/cromwell/pull/9#issuecomment-100315647:102,Availability,down,down,102,"I mentioned this to Jeff earlier, but I had some sort of git calamity that prevents me from squashing down these commits in the usual way. I'll fix this before the actual merge to sprint2 with a brute force patching of a new branch of sprint2 with these changes, but I'd like to hold off on doing that until this is ready for merge to avoid losing your comments.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/9#issuecomment-100315647
https://github.com/broadinstitute/cromwell/pull/9#issuecomment-100315647:207,Deployability,patch,patching,207,"I mentioned this to Jeff earlier, but I had some sort of git calamity that prevents me from squashing down these commits in the usual way. I'll fix this before the actual merge to sprint2 with a brute force patching of a new branch of sprint2 with these changes, but I'd like to hold off on doing that until this is ready for merge to avoid losing your comments.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/9#issuecomment-100315647
https://github.com/broadinstitute/cromwell/pull/9#issuecomment-100315647:335,Safety,avoid,avoid,335,"I mentioned this to Jeff earlier, but I had some sort of git calamity that prevents me from squashing down these commits in the usual way. I'll fix this before the actual merge to sprint2 with a brute force patching of a new branch of sprint2 with these changes, but I'd like to hold off on doing that until this is ready for merge to avoid losing your comments.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/9#issuecomment-100315647
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103145934:183,Usability,clear,clear,183,"@mcovarr @scottfrazer For point 2 I know you all disagree with me but personally I don't see the need to _force_ parallelism just to prove it works at this juncture. IMO it should be clear if it is working as intended in short order so as long as there's no obvious block to it happening I don't see the worth of it. . I'd like to think that we can trust ""I'm making asynchronous calls"" to mean ""they might be running in parallel""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103145934
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:26,Performance,concurren,concurrency,26,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:503,Performance,concurren,concurrently,503,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:197,Security,validat,validate,197,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:121,Testability,log,log,121,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:173,Testability,test,test,173,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:189,Testability,log,logs,189,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:411,Testability,log,logic,411,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297:589,Testability,Test,TestKit-fu,589,"In terms of demonstrating concurrency, I'd be happy with having the code currently in the `CheckExecutionStatus` handler log the calls it thinks are runnable and having the test scrape the logs to validate correctness. Initially this should be just `ps`, subsequently it should be both `cgrep` and `wc` **at the same time**. I don't care if `cgrep` and `wc` actually run at the same time, I just care that this logic realizes they both become runnable at the same time. Making these things actually run concurrently would likely be fairly involved, especially given my currently weak Akka TestKit-fu.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103239297
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851:154,Integrability,wrap,wrapped,154,"@mcovarr re concurrency testing I still think that's _way_ too overkill. There should be no forced timings, scraping of logs, etc. We know that Calls are wrapped by independent CallActors. As long as multiple CallActors are informed of their startable status by the same event, that's all we need to demonstrate.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851:12,Performance,concurren,concurrency,12,"@mcovarr re concurrency testing I still think that's _way_ too overkill. There should be no forced timings, scraping of logs, etc. We know that Calls are wrapped by independent CallActors. As long as multiple CallActors are informed of their startable status by the same event, that's all we need to demonstrate.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851:24,Testability,test,testing,24,"@mcovarr re concurrency testing I still think that's _way_ too overkill. There should be no forced timings, scraping of logs, etc. We know that Calls are wrapped by independent CallActors. As long as multiple CallActors are informed of their startable status by the same event, that's all we need to demonstrate.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851:120,Testability,log,logs,120,"@mcovarr re concurrency testing I still think that's _way_ too overkill. There should be no forced timings, scraping of logs, etc. We know that Calls are wrapped by independent CallActors. As long as multiple CallActors are informed of their startable status by the same event, that's all we need to demonstrate.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103264851
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103301906:25,Testability,test,test,25,I think we should have a test that shows that the system correctly realizes the cgrep and wc calls both become runnable when the ps call completes; we may just disagree on that point.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103301906
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103308232:73,Integrability,message,messages,73,"@mcovarr I agree re testing, however IMO showing that there are outbound messages to start a CallActor at the same time is sufficient to demonstrate exactly what you just stated. At that point you know you have multiple CallActors running independently of each other which represent async computations.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103308232
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103308232:20,Testability,test,testing,20,"@mcovarr I agree re testing, however IMO showing that there are outbound messages to start a CallActor at the same time is sufficient to demonstrate exactly what you just stated. At that point you know you have multiple CallActors running independently of each other which represent async computations.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103308232
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:427,Availability,error,error,427,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:84,Integrability,message,messages,84,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:193,Integrability,message,message,193,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:284,Integrability,message,message,284,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:433,Integrability,message,message,433,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:449,Integrability,message,message,449,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:537,Integrability,message,message,537,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:73,Testability,test,test,73,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:136,Testability,log,logging,136,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:153,Testability,test,test,153,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:343,Testability,Log,Log,343,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:384,Testability,Test,TestKit,384,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394:533,Testability,log,log,533,"I'd be okay with this, except; 1. I don't currently know how to have the test watch messages go from WorkflowActor to CallActor without logging.; 2. The test should not assume the second start message would be sent from the WorkflowActor before the first CallActor picks up its start message and begins running, and possibly even completes. . Log scraping is supposed to be easy with TestKit, something like:. ```; EventFilter.error(message = ""some message"", occurrences = 1) intercept {; // do something which should trigger such a log message; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-103311394
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-104351643:177,Integrability,message,message,177,"This should incorporate PR feedback delta:; 1. Scott's suggestion for input expression storage and evaluation.; 2. Jeff's suggestions for eliminating the `CheckExecutionStatus` message and handler case.; 3. My suggestion for putting mutable workflow state behind an actor. I'll try to address 2 and 3 in the time remaining in the sprint, 1 will have to wait for motivating user stories.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-104351643
https://github.com/broadinstitute/cromwell/pull/20#issuecomment-104351643:27,Usability,feedback,feedback,27,"This should incorporate PR feedback delta:; 1. Scott's suggestion for input expression storage and evaluation.; 2. Jeff's suggestions for eliminating the `CheckExecutionStatus` message and handler case.; 3. My suggestion for putting mutable workflow state behind an actor. I'll try to address 2 and 3 in the time remaining in the sprint, 1 will have to wait for motivating user stories.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/20#issuecomment-104351643
https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650:68,Availability,down,down,68,"Hey @geoffjentry I think this is good to go now. The coveralls went down (I think) because I'm now testing against my mock actor rather than the actual actor, so the coverage in that went down. I left the CromwellServer stuff alone in this PR so we could talk about how we wanted to consolidate that, Boot and Main into one(?) thing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650
https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650:188,Availability,down,down,188,"Hey @geoffjentry I think this is good to go now. The coveralls went down (I think) because I'm now testing against my mock actor rather than the actual actor, so the coverage in that went down. I left the CromwellServer stuff alone in this PR so we could talk about how we wanted to consolidate that, Boot and Main into one(?) thing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650
https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650:99,Testability,test,testing,99,"Hey @geoffjentry I think this is good to go now. The coveralls went down (I think) because I'm now testing against my mock actor rather than the actual actor, so the coverage in that went down. I left the CromwellServer stuff alone in this PR so we could talk about how we wanted to consolidate that, Boot and Main into one(?) thing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650
https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650:118,Testability,mock,mock,118,"Hey @geoffjentry I think this is good to go now. The coveralls went down (I think) because I'm now testing against my mock actor rather than the actual actor, so the coverage in that went down. I left the CromwellServer stuff alone in this PR so we could talk about how we wanted to consolidate that, Boot and Main into one(?) thing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/22#issuecomment-104481650
https://github.com/broadinstitute/cromwell/pull/23#issuecomment-104697557:44,Testability,test,test,44,@mcovarr can you take a run through the non-test stuff in here?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/23#issuecomment-104697557
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:62,Availability,error,error,62,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:326,Availability,error,error,326,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:549,Availability,error,error,549,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:654,Availability,error,error,654,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:710,Availability,error,error,710,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:797,Availability,error,error,797,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:909,Availability,error,error,909,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1031,Availability,error,error,1031,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1136,Availability,error,error,1136,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1192,Availability,error,error,1192,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1279,Availability,error,error,1279,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1391,Availability,error,error,1391,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1513,Availability,error,error,1513,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1524,Availability,error,errors,1524,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1539,Availability,error,error,1539,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1593,Availability,error,error,1593,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:575,Integrability,depend,dependency,575,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:736,Integrability,depend,dependencies,736,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:827,Integrability,depend,dependencies,827,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1057,Integrability,depend,dependency,1057,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1218,Integrability,depend,dependencies,1218,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1309,Integrability,depend,dependencies,1309,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:601,Performance,load,loading,601,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1083,Performance,load,loading,1083,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:586,Safety,detect,detected,586,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1068,Safety,detect,detected,1068,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:671,Security,access,access,671,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1153,Security,access,access,1153,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395:1547,Testability,test,test,1547,"Looks good to me. I tried to make some sense of this compiler error this morning. One thing to note is that `sbt compile` does work, but it's the assembly that seems to be creating the issues. Judging from the output of `sbt assembly`, I think perhaps it could be a conflict with another library, because it seems to have the error immediately after importing a bunch of JARs:. ```; ...; [info] Including: jackson-jaxrs-json-provider-2.4.1.jar; [info] Including: jackson-module-jsonSchema-2.4.1.jar; [info] Including: jackson-jaxrs-base-2.4.1.jar; [error] missing or invalid dependency detected while loading class file 'WorkflowStatusResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowStatusResponse.class' was compiled against an incompatible version of scala.; [error] missing or invalid dependency detected while loading class file 'WorkflowSubmitResponse.class'.; [error] Could not access type AnyRef in package scala,; [error] because it (or its dependencies) are missing. Check your build definition for; [error] missing or conflicting dependencies. (Re-run with `-Ylog-classpath` to see the problematic classpath.); [error] A full rebuild may help if 'WorkflowSubmitResponse.class' was compiled against an incompatible version of scala.; [error] two errors found; [error] (test:compileIncremental) Compilation failed; [error] Total time: 32 s, completed Jun 2, 2015 8:39:34 AM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107940395
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107951835:96,Performance,cache,cache,96,"So I decided I'd personally go look for where `AnyRef` was defined... so I went into my `~/.ivy/cache` directory and found all Scala jars and sources I could with a script and then did a `jar -tf` grepping for AnyRef. [The results](https://gist.github.com/scottfrazer/6274b7a77028818ca018) were that I can't find it anywhere!! This is very odd because things compile for me on other branches. I guess I'm not looking in the right place or something. Even removing my Ivy cache and redownloading _everything_, I still could not find AnyRef defined anywhere. My goal was to find which JAR AnyRef was defined in and then make sure that classpath was included, which would surprise me if it weren't because it's fine on any other branch.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107951835
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107951835:471,Performance,cache,cache,471,"So I decided I'd personally go look for where `AnyRef` was defined... so I went into my `~/.ivy/cache` directory and found all Scala jars and sources I could with a script and then did a `jar -tf` grepping for AnyRef. [The results](https://gist.github.com/scottfrazer/6274b7a77028818ca018) were that I can't find it anywhere!! This is very odd because things compile for me on other branches. I guess I'm not looking in the right place or something. Even removing my Ivy cache and redownloading _everything_, I still could not find AnyRef defined anywhere. My goal was to find which JAR AnyRef was defined in and then make sure that classpath was included, which would surprise me if it weren't because it's fine on any other branch.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107951835
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107990455:217,Modifiability,extend,extends,217,"@scottfrazer You can't find `AnyRef` since its not defined as a class, and thus using it would need to be compiled with your `scala-library.jar` file. Below is an example:. ```; $ cat ExtAnyRef.scala; class ExtAnyRef extends AnyRef { }; object ExtAnyRef { }; $ ; $ cat AnyRef.java; class AnyRef extends ExtAnyRef {; public static void main(String[] args) {; System.out.println(""Hello World!"");; }; }; $; $ scalac -cp . ExtAnyRef.scala; $ javac -cp .:$SCALA_HOME/lib/scala-library.jar AnyRef.java; $ java -cp .:$SCALA_HOME/lib/scala-library.jar AnyRef; Hello World!; $; ```. Below is a link that describes it nicely:. http://stackoverflow.com/questions/2335319/what-are-the-relationships-between-any-anyval-anyref-object-and-how-do-they-m. Hope it helps,; ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107990455
https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107990455:295,Modifiability,extend,extends,295,"@scottfrazer You can't find `AnyRef` since its not defined as a class, and thus using it would need to be compiled with your `scala-library.jar` file. Below is an example:. ```; $ cat ExtAnyRef.scala; class ExtAnyRef extends AnyRef { }; object ExtAnyRef { }; $ ; $ cat AnyRef.java; class AnyRef extends ExtAnyRef {; public static void main(String[] args) {; System.out.println(""Hello World!"");; }; }; $; $ scalac -cp . ExtAnyRef.scala; $ javac -cp .:$SCALA_HOME/lib/scala-library.jar AnyRef.java; $ java -cp .:$SCALA_HOME/lib/scala-library.jar AnyRef; Hello World!; $; ```. Below is a link that describes it nicely:. http://stackoverflow.com/questions/2335319/what-are-the-relationships-between-any-anyval-anyref-object-and-how-do-they-m. Hope it helps,; ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/30#issuecomment-107990455
https://github.com/broadinstitute/cromwell/pull/42#issuecomment-111221496:13,Deployability,Update,Updated,13,"@scottfrazer Updated w/ your suggestions, appears to work fine in docker",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/42#issuecomment-111221496
https://github.com/broadinstitute/cromwell/pull/43#issuecomment-111826367:65,Testability,test,tests,65,"hmm maybe one way around this is to have a certain subset of the tests actually go launch subprocesses. Then, perhaps for the others, you're just asserting on the command string as the Backend sees it. This way you don't have to actually launch docker, just assert that the backend had the right command string to launch.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/43#issuecomment-111826367
https://github.com/broadinstitute/cromwell/pull/43#issuecomment-111826367:146,Testability,assert,asserting,146,"hmm maybe one way around this is to have a certain subset of the tests actually go launch subprocesses. Then, perhaps for the others, you're just asserting on the command string as the Backend sees it. This way you don't have to actually launch docker, just assert that the backend had the right command string to launch.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/43#issuecomment-111826367
https://github.com/broadinstitute/cromwell/pull/43#issuecomment-111826367:258,Testability,assert,assert,258,"hmm maybe one way around this is to have a certain subset of the tests actually go launch subprocesses. Then, perhaps for the others, you're just asserting on the command string as the Backend sees it. This way you don't have to actually launch docker, just assert that the backend had the right command string to launch.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/43#issuecomment-111826367
https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113508520:59,Testability,mock,mock,59,If you guys tell me which branches you're working on I can mock the rebase locally to see how bad it is,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113508520
https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113509547:45,Usability,clear,clear,45,"The work just started, it's not particularly clear at the moment what changes we'll have to make in the first place, much less to sync w/ this. This will need to wait until that work is complete.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113509547
https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113512938:7,Testability,mock,mocked,7,I just mocked the rebase locally for branches:; - db_api_stubs; - ks_slick_mysql; - persistence. And it was trivial... at most there are 2 conflicts and they're trivial conflicts.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113512938
https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113549678:238,Deployability,integrat,integration,238,"I am of two minds on this. I would be happy to chat. Nonetheless, for now, let's not create impediments within the sprint by having outside work being a burden. Next sprint you can create a task that has only a few points relating to its integration not the actual coding and testing. . Thumb typed for added typos. > On Jun 19, 2015, at 10:19 AM, Scott Frazer notifications@github.com wrote:; > ; > Heh yeah.. though that velocity will be artificially high because a lot of the work I do for Cromwell (including this PR and the next PR) I do off hours.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113549678
https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113549678:238,Integrability,integrat,integration,238,"I am of two minds on this. I would be happy to chat. Nonetheless, for now, let's not create impediments within the sprint by having outside work being a burden. Next sprint you can create a task that has only a few points relating to its integration not the actual coding and testing. . Thumb typed for added typos. > On Jun 19, 2015, at 10:19 AM, Scott Frazer notifications@github.com wrote:; > ; > Heh yeah.. though that velocity will be artificially high because a lot of the work I do for Cromwell (including this PR and the next PR) I do off hours.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113549678
https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113549678:276,Testability,test,testing,276,"I am of two minds on this. I would be happy to chat. Nonetheless, for now, let's not create impediments within the sprint by having outside work being a burden. Next sprint you can create a task that has only a few points relating to its integration not the actual coding and testing. . Thumb typed for added typos. > On Jun 19, 2015, at 10:19 AM, Scott Frazer notifications@github.com wrote:; > ; > Heh yeah.. though that velocity will be artificially high because a lot of the work I do for Cromwell (including this PR and the next PR) I do off hours.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/44#issuecomment-113549678
https://github.com/broadinstitute/cromwell/pull/45#issuecomment-112020093:31,Testability,test,testing,31,"Besides that one comment about testing structure, I think it looks fine.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/45#issuecomment-112020093
https://github.com/broadinstitute/cromwell/pull/47#issuecomment-112246577:57,Safety,avoid,avoid,57,"Nice and terse, though unfortunately not terse enough to avoid the dreaded rebase.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/47#issuecomment-112246577
https://github.com/broadinstitute/cromwell/pull/48#issuecomment-112484703:9,Testability,test,test,9,To tag a test see http://www.scalatest.org/user_guide/tagging_your_tests,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/48#issuecomment-112484703
https://github.com/broadinstitute/cromwell/pull/50#issuecomment-112552200:205,Security,access,access,205,"This isn't due to the IDE, it's a readability thing for some definition of readability. These functions are effectively methods on `AstNode` but we can't write them as methods because we don't have (easy) access to the underlying class. In this case the implicit class is merely a vector to insert those methods so we aren't calling them as functions. This way it's clear that `foo` is acting on `a` when you say `a.foo(x)` instead of `foo(a, x)`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/50#issuecomment-112552200
https://github.com/broadinstitute/cromwell/pull/50#issuecomment-112552200:366,Usability,clear,clear,366,"This isn't due to the IDE, it's a readability thing for some definition of readability. These functions are effectively methods on `AstNode` but we can't write them as methods because we don't have (easy) access to the underlying class. In this case the implicit class is merely a vector to insert those methods so we aren't calling them as functions. This way it's clear that `foo` is acting on `a` when you say `a.foo(x)` instead of `foo(a, x)`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/50#issuecomment-112552200
https://github.com/broadinstitute/cromwell/pull/57#issuecomment-119694172:16,Availability,failure,failure,16,:+1: (minus the failure),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/57#issuecomment-119694172
https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118198459:27,Testability,test,tests,27,Going to add a couple more tests.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118198459
https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118239642:57,Usability,feedback,feedback,57,Coveralls seems happy with the latest changes. Ready for feedback.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118239642
https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118435565:0,Deployability,Update,Updated,0,"Updated everything that I had a clear fix for. Open to other suggestions, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118435565
https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118435565:32,Usability,clear,clear,32,"Updated everything that I had a clear fix for. Open to other suggestions, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/78#issuecomment-118435565
https://github.com/broadinstitute/cromwell/pull/79#issuecomment-118390659:65,Energy Efficiency,green,green,65,Since it told me to merge #80 first I did so. If this flips back green afterwards before I leave I'll merge this too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/79#issuecomment-118390659
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-119441052:112,Modifiability,config,config,112,"Tex-- assuming liquibase has been successfully run in the past, this `run.sh`, combined with the latest jenkins config file, _should_ start up the server cleanly. If you could sanity check run for me, I'd appreciate it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-119441052
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-119441052:176,Safety,sanity check,sanity check,176,"Tex-- assuming liquibase has been successfully run in the past, this `run.sh`, combined with the latest jenkins config file, _should_ start up the server cleanly. If you could sanity check run for me, I'd appreciate it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-119441052
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:541,Availability,error,error,541,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:426,Deployability,configurat,configuration,426,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1411,Deployability,Update,Updated,1411,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1586,Deployability,configurat,configuration,1586,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:207,Modifiability,config,config,207,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:267,Modifiability,config,config,267,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:426,Modifiability,config,configuration,426,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:757,Modifiability,variab,variable,757,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1484,Modifiability,config,config,1484,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1528,Modifiability,config,config,1528,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1586,Modifiability,config,configuration,1586,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1649,Modifiability,config,config,1649,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1806,Modifiability,config,config,1806,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:590,Safety,Timeout,Timeout,590,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:680,Security,Access,Access,680,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:718,Security,password,password,718,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:785,Testability,test,testing,785,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:851,Testability,log,logs,851,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1005,Testability,test,test,1005,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1095,Testability,test,tests,1095,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1471,Testability,log,log,1471,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1510,Testability,test,test-only,1510,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1627,Testability,log,log,1627,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1660,Testability,Test,Test,1660,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1746,Testability,Log,Logging,1746,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815:1846,Testability,test,test,1846,"Not 100% sure what wasn't working at what point. I suspect that based on the order of the original commits<sup>1</sup>, the `RunMysql` and server should have both worked at ""4."". At that point I believe the config `url` still contained `useSSL=true`, the application config was being passed on the command line, and the mysql jdbc code should have been in the main assembly. By the time I was running ""11."" earlier today, the configuration `url` no longer contained `useSSL=true`, and connections within `SlickDataAccess` were returning the error combo:. ```; java.sql.SQLTimeoutException: Timeout after 1000ms of waiting for a connection.; ...; Caused by: java.sql.SQLException: Access denied for user '…'@'…' (using password: YES); ```. I did add another variable in ""11."" by always testing with `useSSL=true&requireSSL=true`, but according to the [logs](http://pastebin/209) of the latest 'RunMysql', `jdbcMain` and `jdbcRequireSsl` passed. So that _shouldn't_ have changed the results. Meanwhile, all test combinations of setting ssl worked for both slick and raw datasource connections, in tests via the url (*Ssl*), or via the dataSource properties (*Prop). So I think just setting back the `useSSL=true` is the minimum required fix, but I'd prefer to see `requiredSSL=true` added as well, as was successfully run in `slickSslDriver`. <sup>1</sup> What I believe is the previous order of the commits:; 1. Updated run.sh to pass in the mysql key & trust stores.; 2. log database config; 3. make mysql not test-only; 4. Add config file option in run.sh to make container use custom configuration; 5. debugging ""script""; 6. log actual uniquified config; 7. Test at JDBC level.; 8. hardcode use of SSL; 9. count rows in WORKFLOW_EXECUTION; 10. Logging the just the URL in SlickDataAccess, not the entire config.; 11. Added a suite of mysql ssl test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123520815
https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123779495:240,Testability,log,logic,240,"Received a verbal tentative :+1: from @mcovarr (I will follow up with more inline docs regarding conversation above) and :+1: from @coreone with his latest `JAVA_OPTS` commit. This jenkins build may break in develop due to server-conf-file logic required from #102, but we believe it _should_ all work once that's merged in too. Merging.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/85#issuecomment-123779495
https://github.com/broadinstitute/cromwell/pull/87#issuecomment-120940757:61,Testability,test,tests,61,"I think this is mergeable, I don't feel bad about not adding tests to offsets the +5 increase in generated LOC for the parser fix. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/87#issuecomment-120940757
https://github.com/broadinstitute/cromwell/pull/88#issuecomment-121002228:86,Usability,simpl,simply,86,"@mcovarr Most of your comments have been referencing original code/comments which has simply been moved around. While I agree w/ them the question is if those should be fixed up here or not. I think so unless they end up larger, which I haven't seen - thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/88#issuecomment-121002228
https://github.com/broadinstitute/cromwell/pull/105#issuecomment-123483523:88,Deployability,update,updated,88,Happy to back out the `SampleWdl.DeclarationsWorkflow` fix within this PR if it's being updated elsewhere.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/105#issuecomment-123483523
https://github.com/broadinstitute/cromwell/pull/109#issuecomment-123709570:37,Energy Efficiency,green,green,37,:+1: feel free to merge once it goes green if I don't get to it first,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/109#issuecomment-123709570
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124131947:112,Modifiability,config,config,112,"Again, may be discussed elsewhere, but I'd love to see more tests, even commented out, or auto-skipped if a JES config doesn't exist locally. I'm not going to penalize this story though, and will leave it to the tech debt building up in DSDEEPB-828.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124131947
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124131947:60,Testability,test,tests,60,"Again, may be discussed elsewhere, but I'd love to see more tests, even commented out, or auto-skipped if a JES config doesn't exist locally. I'm not going to penalize this story though, and will leave it to the tech debt building up in DSDEEPB-828.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124131947
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124134500:9,Testability,Test,Tests,9,@kshakir Tests involving talking to google are explicitly mentioned in DSDEEPB-828 - I think it's fair to push it off to that (doubly so considering that unit tests should never talk to external services and that's all we have at the moment),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124134500
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124134500:159,Testability,test,tests,159,@kshakir Tests involving talking to google are explicitly mentioned in DSDEEPB-828 - I think it's fair to push it off to that (doubly so considering that unit tests should never talk to external services and that's all we have at the moment),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124134500
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449:341,Availability,Failure,Failure,341,"As tech debt, I maybe would like to see things like `unwrapOutputValues` broken into utility functions. Not going to hold this PR up any longer figuring out this exact refactoring, but looking at current code I'm picturing something along the starting lines of:. ``` scala; // Sort of like Future.sequence, but with; // unwrapOutputValues's Failure(new Throwable(messages.mkString)); def sequenceMessages[T](in: Seq[Try[T]]): Try[T]. // If there are any failures, uses sequenceMessages to create the Failure; def unwrapValues[K,V](in: Map[K,Try[V]]): Try[Map[K,V]]; ```. :+1: For merging for the current code @cjllanwarne",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449:454,Availability,failure,failures,454,"As tech debt, I maybe would like to see things like `unwrapOutputValues` broken into utility functions. Not going to hold this PR up any longer figuring out this exact refactoring, but looking at current code I'm picturing something along the starting lines of:. ``` scala; // Sort of like Future.sequence, but with; // unwrapOutputValues's Failure(new Throwable(messages.mkString)); def sequenceMessages[T](in: Seq[Try[T]]): Try[T]. // If there are any failures, uses sequenceMessages to create the Failure; def unwrapValues[K,V](in: Map[K,Try[V]]): Try[Map[K,V]]; ```. :+1: For merging for the current code @cjllanwarne",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449:500,Availability,Failure,Failure,500,"As tech debt, I maybe would like to see things like `unwrapOutputValues` broken into utility functions. Not going to hold this PR up any longer figuring out this exact refactoring, but looking at current code I'm picturing something along the starting lines of:. ``` scala; // Sort of like Future.sequence, but with; // unwrapOutputValues's Failure(new Throwable(messages.mkString)); def sequenceMessages[T](in: Seq[Try[T]]): Try[T]. // If there are any failures, uses sequenceMessages to create the Failure; def unwrapValues[K,V](in: Map[K,Try[V]]): Try[Map[K,V]]; ```. :+1: For merging for the current code @cjllanwarne",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449:363,Integrability,message,messages,363,"As tech debt, I maybe would like to see things like `unwrapOutputValues` broken into utility functions. Not going to hold this PR up any longer figuring out this exact refactoring, but looking at current code I'm picturing something along the starting lines of:. ``` scala; // Sort of like Future.sequence, but with; // unwrapOutputValues's Failure(new Throwable(messages.mkString)); def sequenceMessages[T](in: Seq[Try[T]]): Try[T]. // If there are any failures, uses sequenceMessages to create the Failure; def unwrapValues[K,V](in: Map[K,Try[V]]): Try[Map[K,V]]; ```. :+1: For merging for the current code @cjllanwarne",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449
https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449:168,Modifiability,refactor,refactoring,168,"As tech debt, I maybe would like to see things like `unwrapOutputValues` broken into utility functions. Not going to hold this PR up any longer figuring out this exact refactoring, but looking at current code I'm picturing something along the starting lines of:. ``` scala; // Sort of like Future.sequence, but with; // unwrapOutputValues's Failure(new Throwable(messages.mkString)); def sequenceMessages[T](in: Seq[Try[T]]): Try[T]. // If there are any failures, uses sequenceMessages to create the Failure; def unwrapValues[K,V](in: Map[K,Try[V]]): Try[Map[K,V]]; ```. :+1: For merging for the current code @cjllanwarne",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/112#issuecomment-124156449
https://github.com/broadinstitute/cromwell/pull/113#issuecomment-124210947:323,Modifiability,parameteriz,parameterize,323,"Can you add a spec to `SlickDataAccessSpec`, that consists of a `WdlArray(WdlArrayType(WdlStringType), Seq(WdlString(""."" * 10000)))`, populating and then reading the symbol row?. It can just be slightly modified version of the spec ""get a symbol input"". You can even change the one that's there if you'd like, or clone it, parameterize it, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/113#issuecomment-124210947
https://github.com/broadinstitute/cromwell/pull/113#issuecomment-124221995:5,Testability,test,tests,5,"FYI: tests seem to be failing because of the known Travis bug at the moment. I ran them all locally and they passed, FWIW",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/113#issuecomment-124221995
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-124223761:28,Deployability,update,update,28,Er whoops totally forgot to update the docs,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-124223761
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125854264:122,Safety,abort,abort,122,"Post rebase, please:; - change `/workflow` to `/workflows`; - add the `version` to the making it `/workflows/:version/:id/abort`; - add the response annotation to the `200` response; - double check that you can create and send an abort request via the ui (`sbt 'run server'`, then visit [/swagger](http://localhost:8000/swagger)). With the edits above this PR looks good to go for me. Besides that, the un-DRYness of swagger and akka continue to make my skin crawl, but I don't know any better best practices.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125854264
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125854264:230,Safety,abort,abort,230,"Post rebase, please:; - change `/workflow` to `/workflows`; - add the `version` to the making it `/workflows/:version/:id/abort`; - add the response annotation to the `200` response; - double check that you can create and send an abort request via the ui (`sbt 'run server'`, then visit [/swagger](http://localhost:8000/swagger)). With the edits above this PR looks good to go for me. Besides that, the un-DRYness of swagger and akka continue to make my skin crawl, but I don't know any better best practices.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125854264
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125936775:51,Safety,abort,aborts,51,"OK to all suggestions except the 405 for attempted aborts on terminal workflows. I've only seen that used for inappropriate HTTP verbs, which Spray should already be checking before it gets to our business logic. FYI there's some interesting work being done by the Rawls team to get the Swagger noise out of the code, although it seems to remain as un-DRY as ever:. https://github.com/broadinstitute/rawls/pull/63/files",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125936775
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125936775:206,Testability,log,logic,206,"OK to all suggestions except the 405 for attempted aborts on terminal workflows. I've only seen that used for inappropriate HTTP verbs, which Spray should already be checking before it gets to our business logic. FYI there's some interesting work being done by the Rawls team to get the Swagger noise out of the code, although it seems to remain as un-DRY as ever:. https://github.com/broadinstitute/rawls/pull/63/files",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-125936775
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-126404896:0,Deployability,Update,Updated,0,"Updated per @kshakir's AC above. :smile: . The ""produces"" content type is not 100% right in the Swagger annotations here and probably in other APIs. This API is documented as producing application/json which it will for successful requests, but for failed requests text/plain is produced instead. Given the way the ""Try it out!""s are built, they will fail with undocumented 406s if the underlying request fails with a documented status.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-126404896
https://github.com/broadinstitute/cromwell/pull/114#issuecomment-126404896:361,Usability,undo,undocumented,361,"Updated per @kshakir's AC above. :smile: . The ""produces"" content type is not 100% right in the Swagger annotations here and probably in other APIs. This API is documented as producing application/json which it will for successful requests, but for failed requests text/plain is produced instead. Given the way the ""Try it out!""s are built, they will fail with undocumented 406s if the underlying request fails with a documented status.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/114#issuecomment-126404896
https://github.com/broadinstitute/cromwell/pull/117#issuecomment-125171839:12,Deployability,patch,patches,12,"Minor infix patches, and then unless anyone else chimes in, :+1: for merge.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/117#issuecomment-125171839
https://github.com/broadinstitute/cromwell/pull/118#issuecomment-125236175:28,Availability,Failure,Failures,28,Looks good to me once those Failures are added. Happy for the array expression outputs/preevaluation stuff to be put off until later.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/118#issuecomment-125236175
https://github.com/broadinstitute/cromwell/pull/122#issuecomment-125431277:53,Deployability,patch,patch,53,"I'm not fully up to date on original issue, but this patch verifies that all hsqldb connections use `mvcc`, whether liquibase or slick created. Assigning @mcovarr as first reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/122#issuecomment-125431277
https://github.com/broadinstitute/cromwell/pull/122#issuecomment-125792382:46,Testability,test,test,46,I reverted all the garbage that I added on to test the other bug fix.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/122#issuecomment-125792382
https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125788494:124,Testability,test,tests,124,"I actually had to remove that change that switched to Running state earlier as it was responsible for one of the two broken tests in SimpleWorkflowActorSpec. `startRunnableCalls` returns a ""next state"", but this is ignored from the context of the `onTransition` handler. As a result in one case we were staying in Running when we should have gone to Failed.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125788494
https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125788494:133,Usability,Simpl,SimpleWorkflowActorSpec,133,"I actually had to remove that change that switched to Running state earlier as it was responsible for one of the two broken tests in SimpleWorkflowActorSpec. `startRunnableCalls` returns a ""next state"", but this is ignored from the context of the `onTransition` handler. As a result in one case we were staying in Running when we should have gone to Failed.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125788494
https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125791759:24,Integrability,message,messages,24,I think besides the log messages this is good. @cjllanwarne is the second reviewer,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125791759
https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125791759:20,Testability,log,log,20,I think besides the log messages this is good. @cjllanwarne is the second reviewer,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/123#issuecomment-125791759
https://github.com/broadinstitute/cromwell/pull/128#issuecomment-127389399:49,Performance,concurren,concurrently,49,And I'll nominate @kshakir to review potentially concurrently,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/128#issuecomment-127389399
https://github.com/broadinstitute/cromwell/pull/128#issuecomment-128798838:0,Testability,Test,Test,0,Test case now included for local. JES TBD,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/128#issuecomment-128798838
https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132193021:837,Usability,guid,guide,837,"@scottfrazer I've told you before that I've been barking about this since day one, I've just become increasingly vocal about it over the last month+. I change them when I see them, and for old ones if they're close enough to a diffed line in a PR I ask someone to change it, but they're mostly new instances being pointed out. As for changing existing code, sure. I could do that. But every PR you submit about 50% of your calls are using the bad style, so do I then make a new PR every sprint to go back and fix them? Or do I point out that they should be changed as I did on this one and you get upset again? . TBH what really catches my eye and leads me to closer scrutiny in the first place is that you consistently bounce between multiple styles of calling these things, often within the same larger block of code. Unlike the style guide, I don't have a preference between the two primary modes people use (admittedly it's because I prefer the one they don't, although I begrudgingly use their favorite) as long as they're generally self-consistent (and/or there's a reason to deviate for a particular one, it happens). Similarly little things like is it `case (k, v)` or `case (k,v)`. I don't care, but I'd rather not see it bouncing back and forth all over the place over 50 lines of code. Pick one and be consistent. Is it `foo: Type`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132193021
https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132202963:297,Usability,guid,guide,297,"@scottfrazer actually people do care about these things and I know for a fact we've lost a would be user over general code quality (read: not functionality) reasons. Like it or not people look at the code when they're going to assess if it's worth using. I don't think ""try to follow the official guide and be self consistent"" is a high bar",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132202963
https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132206454:44,Usability,guid,guide,44,"> I don't think ""try to follow the official guide and be self consistent"" is a high bar. But you know what IS a high bar? Having to change all your coding style, which previously was perfectly acceptable by the whole team (regards to `.map{`, whitespace semantics), on a whim because Jeff's attitude about something suddenly shifted.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132206454
https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132562881:144,Modifiability,enhance,enhancer,144,"Apart from some requests for newlines which I don't understand (not saying I disagree, I just don't understand what's being asked for) and some enhancer class methods, this seems a rebase away from being mergeable. It would be nice to get this in today if possible, there's a lot of good stuff here that I know multiple people (Alex, Chris, me) would like to get on develop/master ASAP, preferably before the multi-team demo.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/135#issuecomment-132562881
https://github.com/broadinstitute/cromwell/pull/138#issuecomment-132619102:116,Modifiability,evolve,evolves,116,"Minor ""main"" code edits. The ""test"" code can maybe stay as is for now, as I expect more changes as the scatter code evolves next sprint. With the ""main"" code changes and a rebase, :+1: from me to merge.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/138#issuecomment-132619102
https://github.com/broadinstitute/cromwell/pull/138#issuecomment-132619102:30,Testability,test,test,30,"Minor ""main"" code edits. The ""test"" code can maybe stay as is for now, as I expect more changes as the scatter code evolves next sprint. With the ""main"" code changes and a rebase, :+1: from me to merge.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/138#issuecomment-132619102
https://github.com/broadinstitute/cromwell/pull/138#issuecomment-132625673:220,Testability,test,tests,220,"Ok so I made the few changes you pointed out, only other thing is I removed the default `parent = None` on Workflow, Scatter and Call so it's mandatory to specify what is the parent, which triggered a few changes in the tests to add a `None` for every call instantiation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/138#issuecomment-132625673
https://github.com/broadinstitute/cromwell/pull/140#issuecomment-132308286:128,Modifiability,refactor,refactor,128,@mcovarr Turnabout is indeed fair play although this was a global find/replace. I'm more than happy to make this a more general refactor PR,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/140#issuecomment-132308286
https://github.com/broadinstitute/cromwell/pull/140#issuecomment-132375040:208,Usability,simpl,simple,208,"@mcovarr I thought you were captain multi-line HOF? . re: reviewers I was just going to wait until the end of the sprint in order to make sure it doesn't cause any rebase, even though initially it was such a simple change that it'd seem unlikely. Call yourself a reviewer and then designate one tomorrow or thursday :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/140#issuecomment-132375040
https://github.com/broadinstitute/cromwell/pull/143#issuecomment-133198856:135,Testability,test,tests,135,"Nice!. I wouldn't worry about parent columns, it's easy enough to add them in a subsequent changeset if needed. There are currently no tests for the roundtripping of the execution status iteration, but those seem unpossible given the current shape of the `DataAccess` API so I guess they'll need to wait for @kshakir's work.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/143#issuecomment-133198856
https://github.com/broadinstitute/cromwell/pull/143#issuecomment-133389325:709,Security,access,access,709,"Yeah actually sorry I was giving @kshakir and the rest of you a hard time about the parent column. I thought about it a lot yesterday and realized that it does actually make sense. The key to it, which I think I didn't fully appreciate at the time, was that it was shards pointing to shards, which is the thing that the Namespace is not capturing. Using this approach we now have a way to keep track of multiple levels of scattering. For any entry, we can find all `Scatter` ancestors entries in the ExecutionStore and then we have the `Scatter` objects (in order going up the tree) along with their respective indexes. The lookup function (which resolves WDL identifiers into their values), should only need access to some data structure like this: `Seq[(item: String, collection: WdlExpression, index: Int)]`. Where the size of that `Seq` would be the same size as the number of times nested you are. This would allow it to properly index into the scattered arrays.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/143#issuecomment-133389325
https://github.com/broadinstitute/cromwell/pull/143#issuecomment-133449393:59,Testability,test,tested,59,"Agree with @mcovarr that this functionality wasn't already tested, and other comments about being premature regarding the `parent`. Still its absolutely in the right direction. I give it a :+1: for merging to `develop` as we're going to have more and more cross talk of committed code.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/143#issuecomment-133449393
https://github.com/broadinstitute/cromwell/pull/144#issuecomment-133451182:96,Safety,avoid,avoid,96,:+1: ; (Was just thinking that a `def descendants: Seq[Scope]` in `Scope` could prove useful to avoid having to pile up every Scope subtype when we need all the descendant for a workflow.),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/144#issuecomment-133451182
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134728173:122,Usability,guid,guide,122,@scottfrazer In order to save people's diffs I'll make a general comment to please try to conform to the snazzy new style guide,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134728173
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134729975:18,Testability,test,testing,18,@scottfrazer what testing have you done on this branch against JES?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134729975
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397:368,Deployability,release,release,368,"Unsurprisingly I had a handful of stylistic requests (although 2 I noted as being of the ""I'd appreciate you trying"" variety) as I realize they were largely c&p and need refactoring anyways). And there was the one comment I made about the general adherence to the guide - whitespace, HOF syntax, etc. I like the general structure of this though. . In terms of path to release my main concerns were addressed in separate line items, but were a) To what extent has this been tested on JES and b) What is necessary from this branch for s/g (i.e. beyond ""it'll suck to rebase after it"")",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397:170,Modifiability,refactor,refactoring,170,"Unsurprisingly I had a handful of stylistic requests (although 2 I noted as being of the ""I'd appreciate you trying"" variety) as I realize they were largely c&p and need refactoring anyways). And there was the one comment I made about the general adherence to the guide - whitespace, HOF syntax, etc. I like the general structure of this though. . In terms of path to release my main concerns were addressed in separate line items, but were a) To what extent has this been tested on JES and b) What is necessary from this branch for s/g (i.e. beyond ""it'll suck to rebase after it"")",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397:473,Testability,test,tested,473,"Unsurprisingly I had a handful of stylistic requests (although 2 I noted as being of the ""I'd appreciate you trying"" variety) as I realize they were largely c&p and need refactoring anyways). And there was the one comment I made about the general adherence to the guide - whitespace, HOF syntax, etc. I like the general structure of this though. . In terms of path to release my main concerns were addressed in separate line items, but were a) To what extent has this been tested on JES and b) What is necessary from this branch for s/g (i.e. beyond ""it'll suck to rebase after it"")",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397:264,Usability,guid,guide,264,"Unsurprisingly I had a handful of stylistic requests (although 2 I noted as being of the ""I'd appreciate you trying"" variety) as I realize they were largely c&p and need refactoring anyways). And there was the one comment I made about the general adherence to the guide - whitespace, HOF syntax, etc. I like the general structure of this though. . In terms of path to release my main concerns were addressed in separate line items, but were a) To what extent has this been tested on JES and b) What is necessary from this branch for s/g (i.e. beyond ""it'll suck to rebase after it"")",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134736397
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134751766:20,Modifiability,refactor,refactoring,20,"Oh, and the Backend refactoring that I did here will be necessary to implement the scatter-aware lookup function. With this new model, we just need to pass 1 new parameter to each `BackendCall` to give it enough information to index into scattered vars and it should be fairly straightforward to implement. If we don't merge this before I get to implementing that, then it'll just be a very annoying rebase later and I'll have to basically write the code twice because the structure is quite different.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134751766
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661:938,Deployability,integrat,integration,938,"@scottfrazer So the reason I'm asking about the required functionality and JES (and asked if the main issue was the eventual annoying rebase if this isn't merged) is that my concern is that this is a hefty change mid-sprint when we're already concerned w/ the hairiness of our actual sprint goals. For instance what if this causes some unforeseen issue which causes the s/g to not be complete this sprint. We can handwave all we want about what is truly important or not but the only official metric of importance is what's in our sprint and if this disrupts that's no bueno - and regardless of our confidence level there _is_ a risk here. I suppose we could back it out but that'd still likely end up having been a big time disruption at that point. I would feel a lot more comfortable if a large body of WDL was run against JES backend (and Local too, really - though that's less worrisome) - it'd have been nice if someone decided the integration test battery was important enough to work on the side ;) If people have actually been listening to my requests to paste their interesting WDLs on that ticket that'd be a good start, but double check with @cjllanwarne as he wrote a WDL to exercise all the various functionality we supported at the time. . Actually what'd be really awesome is if you could run the WDL they're using for the demo as well.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661:955,Energy Efficiency,battery,battery,955,"@scottfrazer So the reason I'm asking about the required functionality and JES (and asked if the main issue was the eventual annoying rebase if this isn't merged) is that my concern is that this is a hefty change mid-sprint when we're already concerned w/ the hairiness of our actual sprint goals. For instance what if this causes some unforeseen issue which causes the s/g to not be complete this sprint. We can handwave all we want about what is truly important or not but the only official metric of importance is what's in our sprint and if this disrupts that's no bueno - and regardless of our confidence level there _is_ a risk here. I suppose we could back it out but that'd still likely end up having been a big time disruption at that point. I would feel a lot more comfortable if a large body of WDL was run against JES backend (and Local too, really - though that's less worrisome) - it'd have been nice if someone decided the integration test battery was important enough to work on the side ;) If people have actually been listening to my requests to paste their interesting WDLs on that ticket that'd be a good start, but double check with @cjllanwarne as he wrote a WDL to exercise all the various functionality we supported at the time. . Actually what'd be really awesome is if you could run the WDL they're using for the demo as well.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661:938,Integrability,integrat,integration,938,"@scottfrazer So the reason I'm asking about the required functionality and JES (and asked if the main issue was the eventual annoying rebase if this isn't merged) is that my concern is that this is a hefty change mid-sprint when we're already concerned w/ the hairiness of our actual sprint goals. For instance what if this causes some unforeseen issue which causes the s/g to not be complete this sprint. We can handwave all we want about what is truly important or not but the only official metric of importance is what's in our sprint and if this disrupts that's no bueno - and regardless of our confidence level there _is_ a risk here. I suppose we could back it out but that'd still likely end up having been a big time disruption at that point. I would feel a lot more comfortable if a large body of WDL was run against JES backend (and Local too, really - though that's less worrisome) - it'd have been nice if someone decided the integration test battery was important enough to work on the side ;) If people have actually been listening to my requests to paste their interesting WDLs on that ticket that'd be a good start, but double check with @cjllanwarne as he wrote a WDL to exercise all the various functionality we supported at the time. . Actually what'd be really awesome is if you could run the WDL they're using for the demo as well.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661:629,Safety,risk,risk,629,"@scottfrazer So the reason I'm asking about the required functionality and JES (and asked if the main issue was the eventual annoying rebase if this isn't merged) is that my concern is that this is a hefty change mid-sprint when we're already concerned w/ the hairiness of our actual sprint goals. For instance what if this causes some unforeseen issue which causes the s/g to not be complete this sprint. We can handwave all we want about what is truly important or not but the only official metric of importance is what's in our sprint and if this disrupts that's no bueno - and regardless of our confidence level there _is_ a risk here. I suppose we could back it out but that'd still likely end up having been a big time disruption at that point. I would feel a lot more comfortable if a large body of WDL was run against JES backend (and Local too, really - though that's less worrisome) - it'd have been nice if someone decided the integration test battery was important enough to work on the side ;) If people have actually been listening to my requests to paste their interesting WDLs on that ticket that'd be a good start, but double check with @cjllanwarne as he wrote a WDL to exercise all the various functionality we supported at the time. . Actually what'd be really awesome is if you could run the WDL they're using for the demo as well.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661
https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661:950,Testability,test,test,950,"@scottfrazer So the reason I'm asking about the required functionality and JES (and asked if the main issue was the eventual annoying rebase if this isn't merged) is that my concern is that this is a hefty change mid-sprint when we're already concerned w/ the hairiness of our actual sprint goals. For instance what if this causes some unforeseen issue which causes the s/g to not be complete this sprint. We can handwave all we want about what is truly important or not but the only official metric of importance is what's in our sprint and if this disrupts that's no bueno - and regardless of our confidence level there _is_ a risk here. I suppose we could back it out but that'd still likely end up having been a big time disruption at that point. I would feel a lot more comfortable if a large body of WDL was run against JES backend (and Local too, really - though that's less worrisome) - it'd have been nice if someone decided the integration test battery was important enough to work on the side ;) If people have actually been listening to my requests to paste their interesting WDLs on that ticket that'd be a good start, but double check with @cjllanwarne as he wrote a WDL to exercise all the various functionality we supported at the time. . Actually what'd be really awesome is if you could run the WDL they're using for the demo as well.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/145#issuecomment-134756661
https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134034234:30,Security,Validat,ValidateActor,30,"It would appear that I forgot ValidateActor, and I should probably not skip the PerRequest stuff",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134034234
https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134176327:70,Energy Efficiency,monitor,monitoring,70,"Probably, depending on what you mean exactly. The real impetus is for monitoring tools though",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134176327
https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134176327:10,Integrability,depend,depending,10,"Probably, depending on what you mean exactly. The real impetus is for monitoring tools though",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134176327
https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134228130:9,Security,Validat,ValidateActor,9,Actually ValidateActor only is ever called as a PerRequest.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134228130
https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134229188:47,Testability,log,logs,47,"I haven't verified what this looks like in the logs, but scala syntax all looks great. :+1: for merge from me. Officially throwing over to @scottfrazer for second review.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/148#issuecomment-134229188
https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134231949:60,Testability,log,log,60,"So this . ``` scala; when(CallDone) {; case Event(e, _) =>; log.warning(s""$tag received unexpected event $e while in state $stateName""); stay(); }; ```. will never be executed now as we kill the actor during the transition to CallDone right ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134231949
https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134294537:151,Safety,safe,safe,151,"@Horneth Right. It should be impossible to hit but we have to put something there for the state anyways so I figured might as well keep it there to be safe. The alternative is to put a NullFunctions there (or whatever it is called), I'm happy to do either",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134294537
https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134314985:26,Testability,log,logging,26,"Ok, maybe we can keep the logging then so we know that if it ever gets there something really went wrong. It also seems strange to me that we need to change the way the WorkflowActor is killed to comply with the tests, and not the other way around, but it does not seem to be a problem to have the workflow manager kill it.; Anyway :+1: for me, over to @mcovarr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134314985
https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134314985:212,Testability,test,tests,212,"Ok, maybe we can keep the logging then so we know that if it ever gets there something really went wrong. It also seems strange to me that we need to change the way the WorkflowActor is killed to comply with the tests, and not the other way around, but it does not seem to be a problem to have the workflow manager kill it.; Anyway :+1: for me, over to @mcovarr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/150#issuecomment-134314985
https://github.com/broadinstitute/cromwell/pull/150#issuecomment-135036142:89,Testability,test,testing,89,Closing this PR. The actual work was about 5 minutes but it turns out that our messed up testing causes doing it right to take a fair amount of effort. I'll leave the ticket for a soon-to-be sprint and someone can pick it up then.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/150#issuecomment-135036142
https://github.com/broadinstitute/cromwell/pull/153#issuecomment-134204617:41,Deployability,pipeline,pipeline,41,"yep, it's required to run the fastq->bam pipeline. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org; 617-714-7637. On Mon, Aug 24, 2015 at 9:31 AM, Jeff Gentry notifications@github.com; wrote:. > @kcibul https://github.com/kcibul we'll need this on staging for demo?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/153#issuecomment-134201403; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/153#issuecomment-134204617
https://github.com/broadinstitute/cromwell/pull/153#issuecomment-134213848:71,Deployability,update,update,71,"@kcibul np, we just need to remember to cherry pick it into master and update staging when merged",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/153#issuecomment-134213848
https://github.com/broadinstitute/cromwell/pull/156#issuecomment-135144035:550,Integrability,wrap,wrappers,550,"There is something that could be better in terms of coherence I think, it's not critical though so I've let it as is for now.; In the DataAccess.scala which is basically the Database API, some methods take `Call` objects and some take FQNs (actually now that we added the index it's respectively `CallKey`s or `ExecutionDatabaseKey`s).; But the slick implementation only needs the FQN and the index to do its magic, at no point the actual Call object is used. I think it could be nice to use only ExecutionDatabaseKey-like types (which are basically wrappers for (FQN, index)), instead of Call objects. Plus this helps decoupling binding from the engine :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/156#issuecomment-135144035
https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136377356:15,Testability,test,test,15,Minor edits to test then :+1: for merge.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136377356
https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136456530:139,Integrability,rout,route,139,@kshakir I _think_ this covers your points although the test refactor isn't quite what we were talking about on hipchat. I think to go the route I think you were describing would be tough.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136456530
https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136456530:61,Modifiability,refactor,refactor,61,@kshakir I _think_ this covers your points although the test refactor isn't quite what we were talking about on hipchat. I think to go the route I think you were describing would be tough.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136456530
https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136456530:56,Testability,test,test,56,@kshakir I _think_ this covers your points although the test refactor isn't quite what we were talking about on hipchat. I think to go the route I think you were describing would be tough.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/158#issuecomment-136456530
https://github.com/broadinstitute/cromwell/pull/160#issuecomment-136367140:350,Testability,test,test,350,"_Just_ merging, without a rebase/squash within the `scatter-gather` branch before it goes to `develop`, could cause problems. It will leave the git commit history with a spot where someone could mess up their DB with the wrong version of `change_execution_unique_constraint.xml`. An example I can think of is during a `git-bisect` where the specific test is running liquibase over mysql… but even then I can't 100% picture how that would even work. But, as the probability of a stumbling over this is low… :+1: for merging.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/160#issuecomment-136367140
https://github.com/broadinstitute/cromwell/pull/161#issuecomment-135907461:389,Availability,echo,echo,389,"I think we're good, I got this wdl passing which I think cover all cases we should support for now :. ```; task B {; String B_in; command {; python -c ""print('${B_in}')""; }; output {; String B_out = read_string(stdout()); }; }. task D {; String D_in; command {; python -c ""print(len('${D_in}'))""; }; output {; Int D_out = read_int(stdout()); }; }. task C {; Array[String] C_in; command {; echo ${sep = ' ' C_in}; }; output {; String C_out = read_string(stdout()); }; }. workflow w {; Array[String] an_array = [""a"", ""ab"", ""abc""]. scatter (item in an_array) {; call B {input: B_in = item }; call D {input: D_in = B.B_out }; }. call C {input: C_in = B.B_out }; call C as E {input: C_in = D.D_out }. scatter (item in D.D_out) {; call B as F {input: B_in = item }; }; }; ```. Output:. ```; {; ""w.F.B_out"": [""1"", ""2"", ""3""],; ""w.C.C_out"": ""a ab abc"",; ""w.E.C_out"": ""1 2 3"",; ""w.D.D_out"": [1, 2, 3],; ""w.B.B_out"": [""a"", ""ab"", ""abc""]; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/161#issuecomment-135907461
https://github.com/broadinstitute/cromwell/pull/161#issuecomment-135916384:21,Availability,failure,failures,21,Excellent! The build failures are due to the MySQL quirks addressed by #160; once that's merged to scatter-gather and this is rebased I expect the build will go green.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/161#issuecomment-135916384
https://github.com/broadinstitute/cromwell/pull/161#issuecomment-135916384:161,Energy Efficiency,green,green,161,Excellent! The build failures are due to the MySQL quirks addressed by #160; once that's merged to scatter-gather and this is rebased I expect the build will go green.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/161#issuecomment-135916384
https://github.com/broadinstitute/cromwell/pull/161#issuecomment-136009153:146,Testability,test,testing,146,"Regarding the `Await.Result`: Yes, we both knew this was sub optimal. The reason it's that way is because I wanted to do something like this, for testing purposes:. ```; printExecutionTable() // queries database.; Await.result(...); Await.result(...); printExecutionTable(); ```. And when I used `Await.result`, this worked as expected: the second `printExecutionTable()` printed the new entries. However, when I switched this to be a for comprehension, the behavior changed: The second `printExecutionTable()` printed the same thing as the first one. Just because I wanted to keep moving in getting this implemented, I made a mental note of it but then left the `Await.result`s in there",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/161#issuecomment-136009153
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:187,Availability,toler,tolerant,187,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:305,Availability,error,error,305,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:377,Availability,toler,tolerant,377,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:311,Integrability,message,messages,311,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:535,Integrability,wrap,wrapping,535,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:601,Safety,safe,safety,601,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385:24,Security,Validat,Validation,24,"Overall I'm liking the `Validation` angle to these changes, this seems like a nice system which could be used in other spots in Cromwell. I think the attribute parsing could be made more tolerant so that Kristian's examples of `8G` and `8GB` actually would parse, but that's orthogonal to getting helpful error messages when something is unparseable. I'm happy to address more tolerant parsing in a separate PR. Also, it feels like the case classes might have been overused in these changes; they aren't replacing type aliases but are wrapping what used to be raw types. This does buy some added type safety in . ``` scala; (failOnStderr |@| cpu |@| preemptible |@| disks |@| memory){ RuntimeAttributes(docker, zones, _, _, _, _, _) }; ```. But then everywhere else there's noise for boxing and unboxing the raw types to and from these case classes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-135972385
https://github.com/broadinstitute/cromwell/pull/163#issuecomment-136401514:41,Safety,safe,safer,41,@scottfrazer @Horneth Would you all feel safer if this was left until after s/g is merged in before merging being merged?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/163#issuecomment-136401514
https://github.com/broadinstitute/cromwell/pull/164#issuecomment-136129605:558,Usability,clear,clear,558,"While a `Set` with that implementation of `equals` should provide equivalent behavior and wouldn't obviously break anything internal to Cromwell, as a client of this API I wouldn't expect that the compiler-written `equals` of `case class WorkflowInput` had been manually overridden that way. I think most of the problem here was a violation of principle of least surprise: the Rawls consumers of this API reasonably assumed that since the Cromwell API returned workflow inputs in an ordered collection, that order was important. Both `Set` and `Map` make it clear that order is actually not important, but `Map` makes it unmistakable that the String keys must be unique without the consumer of the API having to dig into the implementation of `WorkflowInput#equals`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/164#issuecomment-136129605
https://github.com/broadinstitute/cromwell/pull/167#issuecomment-137045581:602,Modifiability,config,config,602,"@geoffjentry I don't think this flag affects whether **images** are retained, only whether **file systems of containers** are retained. (I could certainly be wrong about that as I'm no Docker expert, just trying to grok the docs now. :smile: ). The docs do say that the ability to poke around in the filesystems of defunct containers can be a great help to debugging. I'm not sure how many of our users would want to do this, but if they do I think we should make that possible. So I'm fine with `--rm` being passed by default to `docker run`, but I think there should be a way to override this with a config option.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/167#issuecomment-137045581
https://github.com/broadinstitute/cromwell/pull/167#issuecomment-137047641:36,Modifiability,config,config,36,So it sounds like we're agreed on a config option and _possibly_ disagreed on the default value? :smile: I'm proposing to have `--rm` on by default since I don't think most users will care about it and they'll just needlessly accumulate a pile of containers. ```; air:cromwell joeuser$ java -jar target/scala-2.11/cromwell-0.10.jar -Dbackend.local.docker-run-rm=false run hello.wdl hello.json; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/167#issuecomment-137047641
https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137501380:58,Testability,log,logs,58,"It looks like we punted on Swaggering the outputs of the `logs` APIs, so happily there's nothing to change there. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137501380
https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137502827:0,Deployability,Update,Update,0,Update README.md with the new API format?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137502827
https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137723052:42,Deployability,update,updates,42,I added a commit to this branch with some updates to the `README.md` which gives a scatter example,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137723052
https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137745619:62,Energy Efficiency,green,green,62,Thanks ! I squashed the commits and will merge when travis is green if there is nothing else.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/170#issuecomment-137745619
https://github.com/broadinstitute/cromwell/pull/173#issuecomment-137795446:90,Testability,test,test,90,"Yes, it came up in two places:; - Vivek tried to use these, though I still have to make a test that exercises the exact case he tried; - I was writing a test scatter workflow and not having this means that we can't have strings with `""` or `'` characters in it. I found that out the hard way!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/173#issuecomment-137795446
https://github.com/broadinstitute/cromwell/pull/173#issuecomment-137795446:153,Testability,test,test,153,"Yes, it came up in two places:; - Vivek tried to use these, though I still have to make a test that exercises the exact case he tried; - I was writing a test scatter workflow and not having this means that we can't have strings with `""` or `'` characters in it. I found that out the hard way!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/173#issuecomment-137795446
https://github.com/broadinstitute/cromwell/pull/173#issuecomment-141495429:160,Usability,simpl,simpler,160,https://github.com/scottfrazer/hermes/pull/52 was spawned from discussion Miguel and I had about allowing the parser to specify imports so the grammar file was simpler and could utilize library code.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/173#issuecomment-141495429
https://github.com/broadinstitute/cromwell/pull/174#issuecomment-141185373:36,Testability,test,tests,36,"Travis is not behaving himself, the tests pass on the first run but several completely unrelated SlickDataAccessSpec tests fail on the second. Merging anyway.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/174#issuecomment-141185373
https://github.com/broadinstitute/cromwell/pull/174#issuecomment-141185373:117,Testability,test,tests,117,"Travis is not behaving himself, the tests pass on the first run but several completely unrelated SlickDataAccessSpec tests fail on the second. Merging anyway.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/174#issuecomment-141185373
https://github.com/broadinstitute/cromwell/pull/177#issuecomment-140108585:6,Deployability,update,updates,6,Minor updates and then :+1: from me for merge.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/177#issuecomment-140108585
https://github.com/broadinstitute/cromwell/pull/179#issuecomment-139631532:50,Testability,test,testing,50,I was able to hit endpoints but wasn't sure about testing since I have no idea how to get a valid workflow id.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/179#issuecomment-139631532
https://github.com/broadinstitute/cromwell/pull/179#issuecomment-139891013:44,Deployability,update,update,44,"@jacarey as per what @mcovarr said, can you update the PR to be against develop?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/179#issuecomment-139891013
https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140145560:12,Availability,Avail,Available,12,"```; -terse Available for qsub only. -terse causes the qsub to display only the job-id of the job; being submitted rather than the regular ""Your job ..."" string.; In case of an error the error is reported on stderr as usual.; This can be helpful for scripts which need to parse qsub output; to get the job-id.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140145560
https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140145560:177,Availability,error,error,177,"```; -terse Available for qsub only. -terse causes the qsub to display only the job-id of the job; being submitted rather than the regular ""Your job ..."" string.; In case of an error the error is reported on stderr as usual.; This can be helpful for scripts which need to parse qsub output; to get the job-id.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140145560
https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140145560:187,Availability,error,error,187,"```; -terse Available for qsub only. -terse causes the qsub to display only the job-id of the job; being submitted rather than the regular ""Your job ..."" string.; In case of an error the error is reported on stderr as usual.; This can be helpful for scripts which need to parse qsub output; to get the job-id.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140145560
https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140150656:22,Deployability,update,update,22,Thanks @gsaksena I'll update this code to use `-terse`,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/181#issuecomment-140150656
https://github.com/broadinstitute/cromwell/pull/183#issuecomment-140139777:10,Deployability,update,update,10,"I have to update my ""workflow inputs"" branch to update that YAML file... :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/183#issuecomment-140139777
https://github.com/broadinstitute/cromwell/pull/183#issuecomment-140139777:48,Deployability,update,update,48,"I have to update my ""workflow inputs"" branch to update that YAML file... :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/183#issuecomment-140139777
https://github.com/broadinstitute/cromwell/pull/188#issuecomment-141186133:0,Availability,Failure,Failures,0,"Failures are unrelated, merging.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/188#issuecomment-141186133
https://github.com/broadinstitute/cromwell/pull/191#issuecomment-142074975:88,Availability,avail,available,88,"So apparently with 200 we should be returning (at least) an Allow header with a list of available HTTP verbs per endpoint. Looking around the internet (google, reddit, github, bbc), a 405 Method Not Allowed seems to be the standard ""I can't be bothered to implement content for this HTTP verb that's never used"" response. But, on the other hand, if this is just there to Make Swagger Work and it needs to be 200, then :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/191#issuecomment-142074975
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-141792771:44,Usability,learn,learning-scalaz,44,Or maybe `UnionTypes`?. http://eed3si9n.com/learning-scalaz/Coproducts.html,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-141792771
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142310052:515,Deployability,rolling,rolling,515,"@kshakir @mcovarr re the Either, after dusting off our set theory books and exploring the options it looks like the two of us chiming in from the peanut gallery have agreed that the right thing here would be to set up a little sealed trait/case class ADT to capture the disjunction here. . \/ has a built in right bias. Either has an implicit right bias in the way it's used. The UnionTypes @mcovarr mentioned are, well, interesting. Then consider that this signature is being used in two places and it seemed like rolling our own sum type would be the way to go here. Agree? Disagree?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142310052
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142706999:280,Availability,down,down,280,"I'm fine with whatever regarding scalaz, but would appreciate a pull request with `UnionTypes` replacing `Either`, if someone doesn't mind contributing, or a pointer to example code. I understand the theory of right bias for map/flatmap/etc., but am fresh off another exploration down a rabbit hole and feeling unadventurous regarding set theory at this second. Regarding ""Voetize the name"", what's the full definition-- is that just fixing the negative, or is it expanding the abbreviation ""rc""? I changed the flag name to ""continueOnRc"" in the latest push, leaving ""rc"" consistent with the rest of the code. Will also add docs to the README.md once we settle on the name.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142706999
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142709575:71,Modifiability,variab,variable,71,"Sorry, the ""Voetize"" reference was to a Blue PR where Doug asked for a variable to be renamed from `rc` to `returnCode`, so here I think the variable would be `continueOnReturnCode`. We had a little cross-team discussion of this the other day and decided `UnionTypes` were probably more trouble than they're worth here, but also that the right bias of `Either` and `\/` didn't feel completely appropriate for a type which had two equally legitimate representations. The consensus seemed to be to have a `sealed trait` ADT with two case classes implementing boolean and set of ints. Does that seem reasonable to you?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142709575
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142709575:141,Modifiability,variab,variable,141,"Sorry, the ""Voetize"" reference was to a Blue PR where Doug asked for a variable to be renamed from `rc` to `returnCode`, so here I think the variable would be `continueOnReturnCode`. We had a little cross-team discussion of this the other day and decided `UnionTypes` were probably more trouble than they're worth here, but also that the right bias of `Either` and `\/` didn't feel completely appropriate for a type which had two equally legitimate representations. The consensus seemed to be to have a `sealed trait` ADT with two case classes implementing boolean and set of ints. Does that seem reasonable to you?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-142709575
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-144242465:12,Deployability,update,updated,12,"`README.md` updated, for review.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-144242465
https://github.com/broadinstitute/cromwell/pull/192#issuecomment-144363200:18,Availability,down,down,18,Thanks for paying down the doc debt and creating the runtime attributes section! I would only request a couple of minor adjustments to the example I wrote then :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/192#issuecomment-144363200
https://github.com/broadinstitute/cromwell/pull/194#issuecomment-142317233:31,Testability,test,tests,31,Interesting/suspicious that no tests were perturbed by these changes.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/194#issuecomment-142317233
https://github.com/broadinstitute/cromwell/pull/194#issuecomment-142328379:20,Testability,test,tests,20,"I had a look at the tests. They appear to all be LocalBackend specific, which I guess we'd expect. As part of 1333 I'll see if I can test the database read/write methods without invoking an entire JES job.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/194#issuecomment-142328379
https://github.com/broadinstitute/cromwell/pull/194#issuecomment-142328379:133,Testability,test,test,133,"I had a look at the tests. They appear to all be LocalBackend specific, which I guess we'd expect. As part of 1333 I'll see if I can test the database read/write methods without invoking an entire JES job.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/194#issuecomment-142328379
https://github.com/broadinstitute/cromwell/pull/195#issuecomment-142314130:9,Usability,simpl,simplest,9,"Yes, the simplest way I can think of would be having . ```; object DataAccessObject {; lazy val dataAccess = DataAccess(); }; ```. And then just do . ```; import DataAccessObject._; ```. whenever needed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/195#issuecomment-142314130
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142696717:55,Testability,test,testable,55,I know Scott is skeptical... is this at all regression-testable? (I only noticed because the coveralls is red),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142696717
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142699848:88,Availability,down,down,88,"Yeah I'm not too happy with adding code and not tests, but @scottfrazer apparently went down this road before and wasn't able to get it to work. I'm happy to invest the effort writing some tests if anyone knows how to get over the linking hurdles in Travis.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142699848
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142699848:48,Testability,test,tests,48,"Yeah I'm not too happy with adding code and not tests, but @scottfrazer apparently went down this road before and wasn't able to get it to work. I'm happy to invest the effort writing some tests if anyone knows how to get over the linking hurdles in Travis.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142699848
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142699848:189,Testability,test,tests,189,"Yeah I'm not too happy with adding code and not tests, but @scottfrazer apparently went down this road before and wasn't able to get it to work. I'm happy to invest the effort writing some tests if anyone knows how to get over the linking hurdles in Travis.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142699848
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703490:30,Availability,down,down,30,"Honestly I didn't go very far down that road once I realized that Travis and Jenkins tests finished if I set it to ONLY ""copy"" mode. I don't think there's any technical reason why we couldn't at least test symlink and copy mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703490
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703490:85,Testability,test,tests,85,"Honestly I didn't go very far down that road once I realized that Travis and Jenkins tests finished if I set it to ONLY ""copy"" mode. I don't think there's any technical reason why we couldn't at least test symlink and copy mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703490
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703490:201,Testability,test,test,201,"Honestly I didn't go very far down that road once I realized that Travis and Jenkins tests finished if I set it to ONLY ""copy"" mode. I don't think there's any technical reason why we couldn't at least test symlink and copy mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703490
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703551:18,Testability,test,test,18,:+1: even without test,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-142703551
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-143332652:8,Testability,test,testless,8,"Merging testless, I was not able to get the test I wrote to work on Travis.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-143332652
https://github.com/broadinstitute/cromwell/pull/196#issuecomment-143332652:44,Testability,test,test,44,"Merging testless, I was not able to get the test I wrote to work on Travis.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/196#issuecomment-143332652
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-142934075:114,Availability,failure,failures,114,"@mcovarr @Horneth I have not been able to make tests work when DataAccess is a singleton. If you can diagnose the failures in branch: ""data_access_singleton"" then let me know, but I don't think I'll do it as part of this ticket.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-142934075
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-142934075:47,Testability,test,tests,47,"@mcovarr @Horneth I have not been able to make tests work when DataAccess is a singleton. If you can diagnose the failures in branch: ""data_access_singleton"" then let me know, but I don't think I'll do it as part of this ticket.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-142934075
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:531,Availability,error,errors,531,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:54,Modifiability,refactor,refactors,54,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:417,Performance,multi-thread,multi-threaded,417,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:588,Performance,load,load,588,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:189,Security,access,access,189,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:277,Security,access,access,277,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:365,Security,access,access,365,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:708,Security,access,access,708,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:236,Testability,test,test,236,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:432,Testability,test,tests,432,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894:593,Testability,test,testing,593,"@cjllanwarne Checkout out #199, a PR into this PR. It refactors `DataAccess`, `Backend`, and `BackendType` around a bit such that the high level workflow manager actor can pass in its data access instance to the backend, OR the various test suites can keep using separate data access instances. . The problem with ""data_access_singleton"" is that the singleton data access seemingly cannot handle the onslaught of our multi-threaded tests. One of our many thread pools around the database seemed to then start returning uncaught(?) errors. Definitely showed some warts in our non-existent load testing... Take a look, decide what you want to keep or jettison, but I do believe that a new database pool / data access should **NOT** be created for each JES `Run`. Otherwise, this branch looks good to go for merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143000894
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143028903:158,Security,access,access,158,"So if a a singleton DataAccess can only handle so many connections, could this become a problem when we start scaling ? Or maybe we don't expect that many DB access in real life and the tests are really overstressing it ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143028903
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143028903:186,Testability,test,tests,186,"So if a a singleton DataAccess can only handle so many connections, could this become a problem when we start scaling ? Or maybe we don't expect that many DB access in real life and the tests are really overstressing it ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143028903
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143031435:140,Security,access,access,140,@Horneth I don't think you want to assume production will be an easier environment than unit tests :). What if every actor had its own data access? Within a workflow the overhead of doing so shouldn't be high,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143031435
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143031435:93,Testability,test,tests,93,@Horneth I don't think you want to assume production will be an easier environment than unit tests :). What if every actor had its own data access? Within a workflow the overhead of doing so shouldn't be high,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143031435
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143032224:57,Performance,concurren,concurrent,57,@geoffjentry Within the workflow actor? I don't know how concurrent the tests are but they aren't crazy - I can imagine a scatter going wider than our test cases,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143032224
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143032224:72,Testability,test,tests,72,@geoffjentry Within the workflow actor? I don't know how concurrent the tests are but they aren't crazy - I can imagine a scatter going wider than our test cases,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143032224
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143032224:151,Testability,test,test,151,@geoffjentry Within the workflow actor? I don't know how concurrent the tests are but they aren't crazy - I can imagine a scatter going wider than our test cases,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143032224
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225:632,Integrability,rout,router,632,"@cjllanwarne I'm probably misreading the convo but I was reading this to imply that a cromwell-singleton data access object would be getting hit harder from running our unit tests in terms of connections than real life, but in the latter we could conceivably have many thousands of workflows (and thus many, many thousands of tasks) banging on the DB simultaneously. A teensy threadpool isn't going to be able to handle the latter case. Another possibility (which we originally looked at but discarded for non-singleton data access) is to have an actual data access actor, and then that actor can scale horizontally as needed via a router actor. those actors can even be on different machines if CPU load is an issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225:700,Performance,load,load,700,"@cjllanwarne I'm probably misreading the convo but I was reading this to imply that a cromwell-singleton data access object would be getting hit harder from running our unit tests in terms of connections than real life, but in the latter we could conceivably have many thousands of workflows (and thus many, many thousands of tasks) banging on the DB simultaneously. A teensy threadpool isn't going to be able to handle the latter case. Another possibility (which we originally looked at but discarded for non-singleton data access) is to have an actual data access actor, and then that actor can scale horizontally as needed via a router actor. those actors can even be on different machines if CPU load is an issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225:110,Security,access,access,110,"@cjllanwarne I'm probably misreading the convo but I was reading this to imply that a cromwell-singleton data access object would be getting hit harder from running our unit tests in terms of connections than real life, but in the latter we could conceivably have many thousands of workflows (and thus many, many thousands of tasks) banging on the DB simultaneously. A teensy threadpool isn't going to be able to handle the latter case. Another possibility (which we originally looked at but discarded for non-singleton data access) is to have an actual data access actor, and then that actor can scale horizontally as needed via a router actor. those actors can even be on different machines if CPU load is an issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225:525,Security,access,access,525,"@cjllanwarne I'm probably misreading the convo but I was reading this to imply that a cromwell-singleton data access object would be getting hit harder from running our unit tests in terms of connections than real life, but in the latter we could conceivably have many thousands of workflows (and thus many, many thousands of tasks) banging on the DB simultaneously. A teensy threadpool isn't going to be able to handle the latter case. Another possibility (which we originally looked at but discarded for non-singleton data access) is to have an actual data access actor, and then that actor can scale horizontally as needed via a router actor. those actors can even be on different machines if CPU load is an issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225:559,Security,access,access,559,"@cjllanwarne I'm probably misreading the convo but I was reading this to imply that a cromwell-singleton data access object would be getting hit harder from running our unit tests in terms of connections than real life, but in the latter we could conceivably have many thousands of workflows (and thus many, many thousands of tasks) banging on the DB simultaneously. A teensy threadpool isn't going to be able to handle the latter case. Another possibility (which we originally looked at but discarded for non-singleton data access) is to have an actual data access actor, and then that actor can scale horizontally as needed via a router actor. those actors can even be on different machines if CPU load is an issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225:174,Testability,test,tests,174,"@cjllanwarne I'm probably misreading the convo but I was reading this to imply that a cromwell-singleton data access object would be getting hit harder from running our unit tests in terms of connections than real life, but in the latter we could conceivably have many thousands of workflows (and thus many, many thousands of tasks) banging on the DB simultaneously. A teensy threadpool isn't going to be able to handle the latter case. Another possibility (which we originally looked at but discarded for non-singleton data access) is to have an actual data access actor, and then that actor can scale horizontally as needed via a router actor. those actors can even be on different machines if CPU load is an issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143033225
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444:405,Deployability,configurat,configuration,405,"Right I just meant that in the tests the ratio (DB access / executedCode) may be higher compared to ""normal execution"" where we spend a lot of time waiting for calls to end. But yes production will definitely not be an easier environment than tests :); I kinda like the DataAccess actor option, although I think slick already manages its own pool of threads and everything, so maybe just by tweaking some configuration we could improve performance before going full Super Saiyan Actor Scaling mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444:405,Modifiability,config,configuration,405,"Right I just meant that in the tests the ratio (DB access / executedCode) may be higher compared to ""normal execution"" where we spend a lot of time waiting for calls to end. But yes production will definitely not be an easier environment than tests :); I kinda like the DataAccess actor option, although I think slick already manages its own pool of threads and everything, so maybe just by tweaking some configuration we could improve performance before going full Super Saiyan Actor Scaling mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444:436,Performance,perform,performance,436,"Right I just meant that in the tests the ratio (DB access / executedCode) may be higher compared to ""normal execution"" where we spend a lot of time waiting for calls to end. But yes production will definitely not be an easier environment than tests :); I kinda like the DataAccess actor option, although I think slick already manages its own pool of threads and everything, so maybe just by tweaking some configuration we could improve performance before going full Super Saiyan Actor Scaling mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444:51,Security,access,access,51,"Right I just meant that in the tests the ratio (DB access / executedCode) may be higher compared to ""normal execution"" where we spend a lot of time waiting for calls to end. But yes production will definitely not be an easier environment than tests :); I kinda like the DataAccess actor option, although I think slick already manages its own pool of threads and everything, so maybe just by tweaking some configuration we could improve performance before going full Super Saiyan Actor Scaling mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444:31,Testability,test,tests,31,"Right I just meant that in the tests the ratio (DB access / executedCode) may be higher compared to ""normal execution"" where we spend a lot of time waiting for calls to end. But yes production will definitely not be an easier environment than tests :); I kinda like the DataAccess actor option, although I think slick already manages its own pool of threads and everything, so maybe just by tweaking some configuration we could improve performance before going full Super Saiyan Actor Scaling mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444:243,Testability,test,tests,243,"Right I just meant that in the tests the ratio (DB access / executedCode) may be higher compared to ""normal execution"" where we spend a lot of time waiting for calls to end. But yes production will definitely not be an easier environment than tests :); I kinda like the DataAccess actor option, although I think slick already manages its own pool of threads and everything, so maybe just by tweaking some configuration we could improve performance before going full Super Saiyan Actor Scaling mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143037444
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495:771,Availability,failure,failures,771,"Sorry all. I was WAY off base about that ""scalability"" thing. It turns out, if one shutdowns one's database pool, the database doesn't allow you to open any new connections. :blush:. Perhaps someday, someone will run `ab` against cromwell and see where it really does fall over, but today wasn't that day. Based on the exceptions I saw, I mistakenly thought it was an internal pool being starved, but when I actually attached a debugger, found out it was because the pool wasn't really _there_ anymore. So I closed the #199 with more extensive refactoring. Currently, even with simpler refactoring to remove calling `DataAccess.instance.shutdown()`, there seems to be something else weird in `data_access_singleton` that I need to figure out. I'm getting repeatable test failures on `WorkflowManagerActorSpec`'s ""should Try to restart workflows when there are workflows in restartable states"". Still debugging…",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495:544,Modifiability,refactor,refactoring,544,"Sorry all. I was WAY off base about that ""scalability"" thing. It turns out, if one shutdowns one's database pool, the database doesn't allow you to open any new connections. :blush:. Perhaps someday, someone will run `ab` against cromwell and see where it really does fall over, but today wasn't that day. Based on the exceptions I saw, I mistakenly thought it was an internal pool being starved, but when I actually attached a debugger, found out it was because the pool wasn't really _there_ anymore. So I closed the #199 with more extensive refactoring. Currently, even with simpler refactoring to remove calling `DataAccess.instance.shutdown()`, there seems to be something else weird in `data_access_singleton` that I need to figure out. I'm getting repeatable test failures on `WorkflowManagerActorSpec`'s ""should Try to restart workflows when there are workflows in restartable states"". Still debugging…",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495:586,Modifiability,refactor,refactoring,586,"Sorry all. I was WAY off base about that ""scalability"" thing. It turns out, if one shutdowns one's database pool, the database doesn't allow you to open any new connections. :blush:. Perhaps someday, someone will run `ab` against cromwell and see where it really does fall over, but today wasn't that day. Based on the exceptions I saw, I mistakenly thought it was an internal pool being starved, but when I actually attached a debugger, found out it was because the pool wasn't really _there_ anymore. So I closed the #199 with more extensive refactoring. Currently, even with simpler refactoring to remove calling `DataAccess.instance.shutdown()`, there seems to be something else weird in `data_access_singleton` that I need to figure out. I'm getting repeatable test failures on `WorkflowManagerActorSpec`'s ""should Try to restart workflows when there are workflows in restartable states"". Still debugging…",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495:42,Performance,scalab,scalability,42,"Sorry all. I was WAY off base about that ""scalability"" thing. It turns out, if one shutdowns one's database pool, the database doesn't allow you to open any new connections. :blush:. Perhaps someday, someone will run `ab` against cromwell and see where it really does fall over, but today wasn't that day. Based on the exceptions I saw, I mistakenly thought it was an internal pool being starved, but when I actually attached a debugger, found out it was because the pool wasn't really _there_ anymore. So I closed the #199 with more extensive refactoring. Currently, even with simpler refactoring to remove calling `DataAccess.instance.shutdown()`, there seems to be something else weird in `data_access_singleton` that I need to figure out. I'm getting repeatable test failures on `WorkflowManagerActorSpec`'s ""should Try to restart workflows when there are workflows in restartable states"". Still debugging…",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495:766,Testability,test,test,766,"Sorry all. I was WAY off base about that ""scalability"" thing. It turns out, if one shutdowns one's database pool, the database doesn't allow you to open any new connections. :blush:. Perhaps someday, someone will run `ab` against cromwell and see where it really does fall over, but today wasn't that day. Based on the exceptions I saw, I mistakenly thought it was an internal pool being starved, but when I actually attached a debugger, found out it was because the pool wasn't really _there_ anymore. So I closed the #199 with more extensive refactoring. Currently, even with simpler refactoring to remove calling `DataAccess.instance.shutdown()`, there seems to be something else weird in `data_access_singleton` that I need to figure out. I'm getting repeatable test failures on `WorkflowManagerActorSpec`'s ""should Try to restart workflows when there are workflows in restartable states"". Still debugging…",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495
https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495:578,Usability,simpl,simpler,578,"Sorry all. I was WAY off base about that ""scalability"" thing. It turns out, if one shutdowns one's database pool, the database doesn't allow you to open any new connections. :blush:. Perhaps someday, someone will run `ab` against cromwell and see where it really does fall over, but today wasn't that day. Based on the exceptions I saw, I mistakenly thought it was an internal pool being starved, but when I actually attached a debugger, found out it was because the pool wasn't really _there_ anymore. So I closed the #199 with more extensive refactoring. Currently, even with simpler refactoring to remove calling `DataAccess.instance.shutdown()`, there seems to be something else weird in `data_access_singleton` that I need to figure out. I'm getting repeatable test failures on `WorkflowManagerActorSpec`'s ""should Try to restart workflows when there are workflows in restartable states"". Still debugging…",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/198#issuecomment-143084495
https://github.com/broadinstitute/cromwell/pull/200#issuecomment-143250619:191,Availability,failure,failure,191,"I've noticed the return code is only being recorded for the final command in a sequence (LocalBackend line 136). I think if I were a WDL writer and I specified failOnRc, I'd want any command failure anywhere in the sequence to trigger a failure.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/200#issuecomment-143250619
https://github.com/broadinstitute/cromwell/pull/200#issuecomment-143250619:237,Availability,failure,failure,237,"I've noticed the return code is only being recorded for the final command in a sequence (LocalBackend line 136). I think if I were a WDL writer and I specified failOnRc, I'd want any command failure anywhere in the sequence to trigger a failure.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/200#issuecomment-143250619
https://github.com/broadinstitute/cromwell/pull/200#issuecomment-143254145:78,Deployability,update,updated,78,@cjllanwarne Good point on the rc file location. The command script should be updated to redirect to an rc file qualified by the path of the call directory.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/200#issuecomment-143254145
https://github.com/broadinstitute/cromwell/pull/203#issuecomment-143344651:98,Testability,test,tests,98,@mcovarr @kshakir I'm not sure which (if any) of the 'dataAccess.shutdown's should be left in? No tests work if any are left in but I'm fairly sure we want to close the singleton connection eventually...?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/203#issuecomment-143344651
https://github.com/broadinstitute/cromwell/pull/203#issuecomment-143345257:29,Testability,test,tests,29,"I wasn't concerned about the tests, just the production app. If there's any flushing as part of `shutdown` I'd like to try to make that happen.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/203#issuecomment-143345257
https://github.com/broadinstitute/cromwell/pull/205#issuecomment-143852430:0,Deployability,Update,Update,0,Update README too?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/205#issuecomment-143852430
https://github.com/broadinstitute/cromwell/pull/205#issuecomment-143854440:32,Deployability,update,update,32,"@scottfrazer yes, and I need to update the sample response in the YAML too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/205#issuecomment-143854440
https://github.com/broadinstitute/cromwell/pull/205#issuecomment-144162941:13,Deployability,update,updated,13,@scottfrazer updated to use WdlValues which are properly marshalled as JSON,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/205#issuecomment-144162941
https://github.com/broadinstitute/cromwell/pull/206#issuecomment-144554242:13,Testability,test,tests,13,Merging once tests re-pass.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/206#issuecomment-144554242
https://github.com/broadinstitute/cromwell/pull/207#issuecomment-144563092:81,Testability,test,testing,81,":+1: for me beyond others' comments. Nominating @mcovarr as second reviewer. FYI testing on my laptop against JES, and early positive results with Genomes in the Cloud WDL + inputs!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/207#issuecomment-144563092
https://github.com/broadinstitute/cromwell/pull/207#issuecomment-144730888:65,Testability,test,test,65,I think I addressed all comments (so far)... also got some added test coverage out of it!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/207#issuecomment-144730888
https://github.com/broadinstitute/cromwell/pull/211#issuecomment-144851621:136,Availability,avail,available,136,Hoping @geoffjentry can provide some insight here as to how to get this pack up and running. Perhaps @jacarey can be second reviewer if available.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/211#issuecomment-144851621
https://github.com/broadinstitute/cromwell/pull/211#issuecomment-145079262:54,Energy Efficiency,power,power,54,"Thanks @kshakir, that's awesome! Swagger's expressive power didn't seem able to capture the shape of the returned data, so having the example restored will I'm sure be much appreciated by Blue. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/211#issuecomment-145079262
https://github.com/broadinstitute/cromwell/pull/212#issuecomment-145131882:9,Deployability,Update,Updated,9,@Horneth Updated to write start date.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/212#issuecomment-145131882
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209:33,Availability,failure,failures,33,"There are some real-looking test failures that might be due to the removal of the execution status setting logic from the backend info update method. Probably the way to fix these is to change the test expectations, but some investigation seems warranted.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209:135,Deployability,update,update,135,"There are some real-looking test failures that might be due to the removal of the execution status setting logic from the backend info update method. Probably the way to fix these is to change the test expectations, but some investigation seems warranted.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209:28,Testability,test,test,28,"There are some real-looking test failures that might be due to the removal of the execution status setting logic from the backend info update method. Probably the way to fix these is to change the test expectations, but some investigation seems warranted.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209:107,Testability,log,logic,107,"There are some real-looking test failures that might be due to the removal of the execution status setting logic from the backend info update method. Probably the way to fix these is to change the test expectations, but some investigation seems warranted.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209:197,Testability,test,test,197,"There are some real-looking test failures that might be due to the removal of the execution status setting logic from the backend info update method. Probably the way to fix these is to change the test expectations, but some investigation seems warranted.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145589209
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145657965:48,Deployability,update,updateBackendExecutionStatus,48,"@mcovarr Indeed, these tests were checking that updateBackendExecutionStatus was updating the execution table which is no longer its responsibility. Looking over the tests, this seems to be checked for the setStatus call elsewhere.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145657965
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145657965:23,Testability,test,tests,23,"@mcovarr Indeed, these tests were checking that updateBackendExecutionStatus was updating the execution table which is no longer its responsibility. Looking over the tests, this seems to be checked for the setStatus call elsewhere.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145657965
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145657965:166,Testability,test,tests,166,"@mcovarr Indeed, these tests were checking that updateBackendExecutionStatus was updating the execution table which is no longer its responsibility. Looking over the tests, this seems to be checked for the setStatus call elsewhere.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145657965
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145959320:5,Availability,failure,failure,5,Test failure is unrelated to this PR. Will investigate that separately.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145959320
https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145959320:0,Testability,Test,Test,0,Test failure is unrelated to this PR. Will investigate that separately.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/215#issuecomment-145959320
https://github.com/broadinstitute/cromwell/pull/216#issuecomment-145169102:7,Testability,test,tests,7,I love tests! :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/216#issuecomment-145169102
https://github.com/broadinstitute/cromwell/pull/217#issuecomment-145304240:63,Testability,test,tested,63,"Actually I want to move where this call happens, but I haven't tested this change yet.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/217#issuecomment-145304240
https://github.com/broadinstitute/cromwell/pull/220#issuecomment-145907163:31,Availability,failure,failures,31,Need to investigate the Travis failures.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/220#issuecomment-145907163
https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146004002:20,Performance,concurren,concurrency,20,hooray for fixing a concurrency issue using a scheme other than Await.result! :),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146004002
https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146005890:42,Testability,test,testing,42,Travis is likely spending a lot more time testing than me,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146005890
https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146276086:188,Availability,error,errors,188,"Saw DSDEEPB-1549 was already filed. Minor time scaling issue for jenkins, then :+1: as far as I'm concerned. Btw, anyone have any idea what's up with travis-to-coveralls integration's SSL errors? We don't have coverage results anymore? :crying_cat_face:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146276086
https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146276086:170,Deployability,integrat,integration,170,"Saw DSDEEPB-1549 was already filed. Minor time scaling issue for jenkins, then :+1: as far as I'm concerned. Btw, anyone have any idea what's up with travis-to-coveralls integration's SSL errors? We don't have coverage results anymore? :crying_cat_face:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146276086
https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146276086:170,Integrability,integrat,integration,170,"Saw DSDEEPB-1549 was already filed. Minor time scaling issue for jenkins, then :+1: as far as I'm concerned. Btw, anyone have any idea what's up with travis-to-coveralls integration's SSL errors? We don't have coverage results anymore? :crying_cat_face:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/224#issuecomment-146276086
https://github.com/broadinstitute/cromwell/pull/226#issuecomment-146205665:28,Availability,failure,failures,28,This works for me. The test failures are unrelated to this change. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/226#issuecomment-146205665
https://github.com/broadinstitute/cromwell/pull/226#issuecomment-146205665:23,Testability,test,test,23,This works for me. The test failures are unrelated to this change. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/226#issuecomment-146205665
https://github.com/broadinstitute/cromwell/pull/228#issuecomment-146242763:14,Availability,failure,failures,14,"There are two failures in WorkflowManagerActorSpec, but I believe they are both due to the asynchronicity of setting status that should be fixed (inelegantly) by #224.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/228#issuecomment-146242763
https://github.com/broadinstitute/cromwell/pull/230#issuecomment-146647637:99,Testability,test,tests,99,"Couldn't get oauth to work on localhost or local.broadinstitute.org, but wasn't needed for current tests. I we need auth in the future, could be interesting. :+1: and merging.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/230#issuecomment-146647637
https://github.com/broadinstitute/cromwell/pull/231#issuecomment-146670780:65,Availability,failure,failure,65,"The code looks nice, but I'm not sure what to make of that build failure. Can Travis possibly be too slow to get a connection from an in-memory database in less than a second, or is something else happening here?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/231#issuecomment-146670780
https://github.com/broadinstitute/cromwell/pull/231#issuecomment-146673898:17,Testability,test,tests,17,"Hmm strange, all tests passed locally for me.; I don't see how this could affect DB connection because even if we had as many Backend instances as workflows before, we still had a singleton dataAccess since that's been merged.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/231#issuecomment-146673898
https://github.com/broadinstitute/cromwell/pull/233#issuecomment-146951243:77,Testability,test,tests,77,Please don't merge this PR yet. I believe the changes I've made are okay but tests are failing pretty consistently for reasons that aren't clear yet.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/233#issuecomment-146951243
https://github.com/broadinstitute/cromwell/pull/233#issuecomment-146951243:139,Usability,clear,clear,139,Please don't merge this PR yet. I believe the changes I've made are okay but tests are failing pretty consistently for reasons that aren't clear yet.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/233#issuecomment-146951243
https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147090096:21,Testability,test,tests,21,"OK it looks like the tests are passing consistently now, so unless you see breakage that you think could be related to these changes, this is fair game for review and merge.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147090096
https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147091798:36,Security,expose,expose,36,"This seems like a good candidate to expose to some posthumous you know whating, at least to the extent that it's possible currently.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147091798
https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147788296:99,Energy Efficiency,battery,battery,99,"Given the current Tyburn bent toward JES workflows with GCS inputs and Docker images, the standard battery isn't really compatible with stress testing these changes. But I can make some three-step and scatter WDLs and do some custom posthumous execution.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147788296
https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147788296:143,Testability,test,testing,143,"Given the current Tyburn bent toward JES workflows with GCS inputs and Docker images, the standard battery isn't really compatible with stress testing these changes. But I can make some three-step and scatter WDLs and do some custom posthumous execution.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/233#issuecomment-147788296
https://github.com/broadinstitute/cromwell/pull/235#issuecomment-147545506:23,Testability,test,test,23,"Can confirm the Tyburn test ""wdlobjects"" works under this branch. Hurrah!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/235#issuecomment-147545506
https://github.com/broadinstitute/cromwell/pull/237#issuecomment-148164236:13,Availability,avail,available,13,@cjllanwarne available for review?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/237#issuecomment-148164236
https://github.com/broadinstitute/cromwell/pull/238#issuecomment-148163666:9,Availability,avail,available,9,@Horneth available for review?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/238#issuecomment-148163666
https://github.com/broadinstitute/cromwell/pull/239#issuecomment-148785142:22,Deployability,update,updated,22,@Horneth @geoffjentry updated per suggestions,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/239#issuecomment-148785142
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151542190:265,Safety,avoid,avoid,265,"You're right for the fail-fast, now only files that are actually referenced in a call as an input will be checked, and only at the call run-time. Basically workflow file inputs are just ""global input references"" that can be used to provide inputs for the calls and avoid having duplicates in the workflowinputs.json.; I'm not sure what it changes regarding shell expansions though.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151542190
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151545351:17,Security,validat,validatation,17,"OK so can we add validatation for the existence and readability of Files in the workflowinputs.json up front? If there are any issues with shell metacharacters those would be exposed, and I agree that these changes shouldn't have affected the way those are handled.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151545351
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151545351:175,Security,expose,exposed,175,"OK so can we add validatation for the existence and readability of Files in the workflowinputs.json up front? If there are any issues with shell metacharacters those would be exposed, and I agree that these changes shouldn't have affected the way those are handled.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151545351
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151868823:24,Safety,sanity check,sanity check,24,"I agree that an upfront sanity check would be nice, should I do it as part of this ticket ? It seems like a new feature to me as it's not in JES either but I don't mind really.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151868823
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151876098:263,Availability,down,downgrade,263,"We lose this feature for local backend yes, but it's not the only one (we also lose support for the ability to use files in calls that were not explicitly set as inputs), which was the point of the ticket because that is what JES is doing.; In the end this was a downgrade of Local/SGE Backends to match JES. Now we can re-upgrade but it should be done on all backends at the same time IMO.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151876098
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151876098:323,Deployability,upgrade,upgrade,323,"We lose this feature for local backend yes, but it's not the only one (we also lose support for the ability to use files in calls that were not explicitly set as inputs), which was the point of the ticket because that is what JES is doing.; In the end this was a downgrade of Local/SGE Backends to match JES. Now we can re-upgrade but it should be done on all backends at the same time IMO.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151876098
https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151877210:72,Modifiability,enhance,enhance,72,"Ah I see your point now, and I agree that would be a separate ticket to enhance all the backends equally. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/249#issuecomment-151877210
https://github.com/broadinstitute/cromwell/pull/250#issuecomment-150361595:143,Testability,test,tests,143,"PR currently blocked by https://github.com/broadinstitute/lenthall/pull/5. Once that's merged, will bump the lenthall version in build.sbt and tests should then pass.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/250#issuecomment-150361595
https://github.com/broadinstitute/cromwell/pull/250#issuecomment-150628371:58,Security,Access,Access-Control-Allow-Methods,58,"Le sigh. Need to now fix ""Method DELETE is not allowed by Access-Control-Allow-Methods."" back in lenthall. Brb. Again.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/250#issuecomment-150628371
https://github.com/broadinstitute/cromwell/pull/252#issuecomment-150014857:15,Modifiability,refactor,refactored,15,Some beast has refactored JesBackend while I was refactoring JesBackend,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/252#issuecomment-150014857
https://github.com/broadinstitute/cromwell/pull/252#issuecomment-150014857:49,Modifiability,refactor,refactoring,49,Some beast has refactored JesBackend while I was refactoring JesBackend,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/252#issuecomment-150014857
https://github.com/broadinstitute/cromwell/pull/253#issuecomment-151295979:55,Modifiability,enhance,enhanced,55,"I'm not sure whether the WdlGlobFile is better than an enhanced WdlFile(path, isGlob) type. Any thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/253#issuecomment-151295979
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-151205924:112,Modifiability,enhance,enhancements,112,@scottfrazer when ready for review (or even prior to that) can you put up a gist demonstrating what the logging enhancements are? A before/after would be super awesome.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-151205924
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-151205924:104,Testability,log,logging,104,@scottfrazer when ready for review (or even prior to that) can you put up a gist demonstrating what the logging enhancements are? A before/after would be super awesome.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-151205924
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-151513011:100,Testability,log,logging,100,"Your FAQ fended off a question. I _really_ loathe how we can't easily use application.conf with the logging stuff, but so far we seem to be stuck with it so c'est la vie",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-151513011
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153190564:87,Testability,log,logging,87,"I scanned this PR, but haven't run it myself though to see the effective difference in logging. :+1: in concept from me post minor issues.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153190564
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153211676:69,Integrability,message,messages,69,"The effective difference is not all that noticeable, honestly... log messages will consistently have the right tag information and we'll be able to deliver server logs for individual workflows to users, but besides that they should look very familiar",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153211676
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153211676:65,Testability,log,log,65,"The effective difference is not all that noticeable, honestly... log messages will consistently have the right tag information and we'll be able to deliver server logs for individual workflows to users, but besides that they should look very familiar",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153211676
https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153211676:163,Testability,log,logs,163,"The effective difference is not all that noticeable, honestly... log messages will consistently have the right tag information and we'll be able to deliver server logs for individual workflows to users, but besides that they should look very familiar",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/254#issuecomment-153211676
https://github.com/broadinstitute/cromwell/pull/256#issuecomment-151227093:156,Integrability,message,message,156,":+1: Although there is already another warning being issued a few lines below (`failMessage foreach { m => logger.warn(s""$m. $retryMessage"") }`), maybe the message could be incorporated in this one to try and limit the number of logs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/256#issuecomment-151227093
https://github.com/broadinstitute/cromwell/pull/256#issuecomment-151227093:107,Testability,log,logger,107,":+1: Although there is already another warning being issued a few lines below (`failMessage foreach { m => logger.warn(s""$m. $retryMessage"") }`), maybe the message could be incorporated in this one to try and limit the number of logs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/256#issuecomment-151227093
https://github.com/broadinstitute/cromwell/pull/256#issuecomment-151227093:229,Testability,log,logs,229,":+1: Although there is already another warning being issued a few lines below (`failMessage foreach { m => logger.warn(s""$m. $retryMessage"") }`), maybe the message could be incorporated in this one to try and limit the number of logs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/256#issuecomment-151227093
https://github.com/broadinstitute/cromwell/pull/257#issuecomment-151500542:802,Modifiability,enhance,enhanced,802,"@scottfrazer . Let's discuss off github if you'd like to go in depth. There's more background in the original JES docs too. In short for now:; 1. I can't get all the ""logic"" terminology correct here (a Fruit is not necessarily an Apple), but shared variously between `RuntimeAttributes` and `JesBackend`, `local-disk` is `LocalWorkingDiskValue` is `working_disk` is `/cromwell_root`.; 2. Additional mount points are not input or captured anywhere within cromwell. So, if you _try to_ mount a second disk, cromwell never finishes setting the JES parameters for where to mount the freshly attached drive. This PR tries not to break this existing ""functionality"", while also allowing one to effectively increase the size of `/cromwell_root`. I'm leaving it to another ticket to discuss how this should be enhanced.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/257#issuecomment-151500542
https://github.com/broadinstitute/cromwell/pull/257#issuecomment-151500542:167,Testability,log,logic,167,"@scottfrazer . Let's discuss off github if you'd like to go in depth. There's more background in the original JES docs too. In short for now:; 1. I can't get all the ""logic"" terminology correct here (a Fruit is not necessarily an Apple), but shared variously between `RuntimeAttributes` and `JesBackend`, `local-disk` is `LocalWorkingDiskValue` is `working_disk` is `/cromwell_root`.; 2. Additional mount points are not input or captured anywhere within cromwell. So, if you _try to_ mount a second disk, cromwell never finishes setting the JES parameters for where to mount the freshly attached drive. This PR tries not to break this existing ""functionality"", while also allowing one to effectively increase the size of `/cromwell_root`. I'm leaving it to another ticket to discuss how this should be enhanced.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/257#issuecomment-151500542
https://github.com/broadinstitute/cromwell/pull/258#issuecomment-151663461:15,Testability,test,test,15,"One additional test request, then feel free to merge. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/258#issuecomment-151663461
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-152359671:26,Testability,test,test,26,Is it possible to write a test for this or the Array equivalent?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-152359671
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-152651767:35,Testability,test,test,35,Sure this definitely should have a test.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-152651767
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693:8,Testability,test,test,8,"Added a test for WdlMap, will add another one for WdlArray in the other PR; EDIT: Actually the WdlArray part can't easily be unit tested because it involves verifying JesOutputs coercion and gcs paths..; There is a test workflow in Tyburn to test just that though. It was in the ""knownbroken"" folder, I'll make a PR to move it to the ""workflows"" folder.; Also since this PR fixes both bugs I'll delete the other one and we can only merge this one.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693:130,Testability,test,tested,130,"Added a test for WdlMap, will add another one for WdlArray in the other PR; EDIT: Actually the WdlArray part can't easily be unit tested because it involves verifying JesOutputs coercion and gcs paths..; There is a test workflow in Tyburn to test just that though. It was in the ""knownbroken"" folder, I'll make a PR to move it to the ""workflows"" folder.; Also since this PR fixes both bugs I'll delete the other one and we can only merge this one.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693:215,Testability,test,test,215,"Added a test for WdlMap, will add another one for WdlArray in the other PR; EDIT: Actually the WdlArray part can't easily be unit tested because it involves verifying JesOutputs coercion and gcs paths..; There is a test workflow in Tyburn to test just that though. It was in the ""knownbroken"" folder, I'll make a PR to move it to the ""workflows"" folder.; Also since this PR fixes both bugs I'll delete the other one and we can only merge this one.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693:242,Testability,test,test,242,"Added a test for WdlMap, will add another one for WdlArray in the other PR; EDIT: Actually the WdlArray part can't easily be unit tested because it involves verifying JesOutputs coercion and gcs paths..; There is a test workflow in Tyburn to test just that though. It was in the ""knownbroken"" folder, I'll make a PR to move it to the ""workflows"" folder.; Also since this PR fixes both bugs I'll delete the other one and we can only merge this one.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153060693
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153476447:13,Testability,test,tests,13,I added more tests for the WdlArray and WdlFile cases as well as a test for JesOutput file paths being converted back to gcs paths in JesBackend if that's what you meant @kshakir ; Also renamed to `collectAsSeq`,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153476447
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153476447:67,Testability,test,test,67,I added more tests for the WdlArray and WdlFile cases as well as a test for JesOutput file paths being converted back to gcs paths in JesBackend if that's what you meant @kshakir ; Also renamed to `collectAsSeq`,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153476447
https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153530062:67,Testability,test,tests,67,"Code looks good. A bunch of lines are still not being hit via unit tests, but going to call +0.4% a win. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/263#issuecomment-153530062
https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153020529:189,Testability,test,testing,189,Lots of stuff here! Very cool. Can we hold off on merging this until #254 #259 and #264 are merged? Looks like there will be some conflicts and those three PRs are needed for GitC workflow testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153020529
https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153032210:83,Usability,feedback,feedback,83,Don't mind waiting to press the merge button at all. Would love to have folks give feedback ahead of time though.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153032210
https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153541769:250,Availability,down,down,250,"This is pretty cool. The only thing I'd throw in is that for the run() function this to me is like the one I pointed to @mcovarr the other day. I think it's fine as-is but I'd ask for another pass through to see if there are places where breaking it down a bit makes sense. If not, no biggie.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153541769
https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153723485:89,Usability,feedback,feedback,89,"Thanks for the suggestion. `Main.run` is now much smaller. Please let me know additional feedback, and when time to rebase/squash/merge.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/265#issuecomment-153723485
https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153117050:177,Security,access,access,177,"@cjllanwarne Right, but what I meant was that I'm not sure ""give me a diagram of workflow timings"" is really something which should be served up at all by Cromwell. Rather give access to the data and let something else figure out what they want to do with it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153117050
https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153122691:131,Usability,simpl,simple,131,@geoffjentry I don't see any harm in having a 2.7K file hosted by the cromwell server for the convenience it brings as an easy and simple way of getting timing information from cromwell. Are you saying it should _also_ be part of cromtool?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153122691
https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153127594:130,Availability,down,download,130,That is correct - this already uses the metadata endpoint to get its data. The fancification can indeed happen anywhere - you can download the HTML and put a metadata file next to it and it works just the same,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153127594
https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153182822:1066,Availability,error,error,1066,"Not sure how much UI we do within the cromwell code base. Agree with Jeff that perhaps this might be a better contribution to another UI team, but I'm not the ticket master. Also, I don't really have the ramp up to review HTML/JS for code style conventions / quality myself. Tried it out locally. As long as the jobs don't run too fast, the endpoint seems to work pretty well!. Btw, when _all_ calls run with start/stop _inside_ a particular second, the page renders with a cryptic red box that says:. > Cannot read property 'v' of undefined. Probably not a big deal unless we expect lots of folks running `ThreeStep.wdl` like I did. ``` javascript; // At least one row must span a second 00. // Ok; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.000-05:00""),; new Date(""2015-11-02T18:00:00.001-05:00""),; null , 100, null];. // or also ok; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.999-05:00""),; new Date(""2015-11-02T18:00:01.000-05:00""),; null , 100, null];. // But if all rows within a second, then error!. // Red box of death; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.001-05:00""),; new Date(""2015-11-02T18:00:00.999-05:00""),; null , 100, null];. // Also an error too; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.001-05:00""),; new Date(""2015-11-02T18:00:00.002-05:00""),; null , 100, null];; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153182822
https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153182822:1261,Availability,error,error,1261,"Not sure how much UI we do within the cromwell code base. Agree with Jeff that perhaps this might be a better contribution to another UI team, but I'm not the ticket master. Also, I don't really have the ramp up to review HTML/JS for code style conventions / quality myself. Tried it out locally. As long as the jobs don't run too fast, the endpoint seems to work pretty well!. Btw, when _all_ calls run with start/stop _inside_ a particular second, the page renders with a cryptic red box that says:. > Cannot read property 'v' of undefined. Probably not a big deal unless we expect lots of folks running `ThreeStep.wdl` like I did. ``` javascript; // At least one row must span a second 00. // Ok; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.000-05:00""),; new Date(""2015-11-02T18:00:00.001-05:00""),; null , 100, null];. // or also ok; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.999-05:00""),; new Date(""2015-11-02T18:00:01.000-05:00""),; null , 100, null];. // But if all rows within a second, then error!. // Red box of death; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.001-05:00""),; new Date(""2015-11-02T18:00:00.999-05:00""),; null , 100, null];. // Also an error too; var dataRow = ['call_name','call_name', null,; new Date(""2015-11-02T18:00:00.001-05:00""),; new Date(""2015-11-02T18:00:00.002-05:00""),; null , 100, null];; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/266#issuecomment-153182822
https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153442613:169,Availability,robust,robust,169,"I like the idea of a centralized rate limiter (proxy, supervisor, whatever) to more rationally avoid QPS issues, but these changes are more generally making the vassals robust to any sort of transient problem.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153442613
https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153442613:95,Safety,avoid,avoid,95,"I like the idea of a centralized rate limiter (proxy, supervisor, whatever) to more rationally avoid QPS issues, but these changes are more generally making the vassals robust to any sort of transient problem.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153442613
https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153539194:76,Integrability,message,message,76,"Re: `WorkflowManagerActorSpec`, over in my current PR I bumped up the event message timeouts, since it seemed to be taking more than 3 seconds for `ScatterWdl` to finish running.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153539194
https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153539194:84,Safety,timeout,timeouts,84,"Re: `WorkflowManagerActorSpec`, over in my current PR I bumped up the event message timeouts, since it seemed to be taking more than 3 seconds for `ScatterWdl` to finish running.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153539194
https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153547121:68,Testability,test,tests,68,"@kshakir sounds good. I seem to have more trouble with the metadata tests, but I'm pretty sure I've experienced issue with the scatter WDL too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/268#issuecomment-153547121
https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154102897:6,Testability,test,tests,6,"Yuck, tests broke (for good reason)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154102897
https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154397266:70,Availability,repair,repairs,70,Are you still looking for comments on this or should it be closed for repairs?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154397266
https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154437437:133,Safety,avoid,avoid,133,"The tests broke as the code expects Kanin to be running but it isn't. This will also break run more, I only use server these days to avoid the color highlighting. It all ties back to the inability to turn the instrumentation odd. Go ahead and review as is, whatever solution to this which is applied is unlikely to affect the actual code part all that much",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154437437
https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154437437:4,Testability,test,tests,4,"The tests broke as the code expects Kanin to be running but it isn't. This will also break run more, I only use server these days to avoid the color highlighting. It all ties back to the inability to turn the instrumentation odd. Go ahead and review as is, whatever solution to this which is applied is unlikely to affect the actual code part all that much",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/269#issuecomment-154437437
https://github.com/broadinstitute/cromwell/pull/272#issuecomment-154187746:15,Availability,robust,robust,15,Is this scheme robust to large files?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/272#issuecomment-154187746
https://github.com/broadinstitute/cromwell/pull/273#issuecomment-154197007:113,Modifiability,variab,variables,113,"Temporary directories are a mystery for me. While I especially don't know about temp directories and environment variables, as I know this `_JAVA_OPTIONS` value is not documented anywhere. How the heck are these executables like `java` even guessing to use `/tmp` / `/var/tmp`? Is there a bash variable, or just a well know default / convention? I ask because it's possible some of our non-java programs like `bwa` etc. may run into same thing. If there is no specification to stop other programs, it's possible we may need a broader solution to instruct JES to mount, symlink, etc. these directories onto our `/cromwell_root`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/273#issuecomment-154197007
https://github.com/broadinstitute/cromwell/pull/273#issuecomment-154197007:294,Modifiability,variab,variable,294,"Temporary directories are a mystery for me. While I especially don't know about temp directories and environment variables, as I know this `_JAVA_OPTIONS` value is not documented anywhere. How the heck are these executables like `java` even guessing to use `/tmp` / `/var/tmp`? Is there a bash variable, or just a well know default / convention? I ask because it's possible some of our non-java programs like `bwa` etc. may run into same thing. If there is no specification to stop other programs, it's possible we may need a broader solution to instruct JES to mount, symlink, etc. these directories onto our `/cromwell_root`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/273#issuecomment-154197007
https://github.com/broadinstitute/cromwell/pull/273#issuecomment-154203788:828,Modifiability,variab,variable,828,"I didn't know but you're right _JAVA_OPTIONS is not documented anywhere :s; Although it is supported in Java8 http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/arguments.cpp#l2448. For temporary files ; ""The default temporary-file directory is specified by the system property java.io.tmpdir. On UNIX systems the default value of this property is typically ""/tmp"" or ""/var/tmp""; on Microsoft Windows systems it is typically ""C:\WINNT\TEMP""."" (https://docs.oracle.com/javase/8/docs/api/java/io/File.html); On linux `/tmp` is hardcoded as the tmp directory if `java.io.tmpdir` is not set:; http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/os/linux/vm/os_linux.cpp#l1622; But yes this only solves the problem for Java. @scottfrazer said that python honors the TMPDIR environment variable.; I don't know if symlinking /tmp to cromwell_root is better overall, because then anything running on the vm would write its temp files to cromwell directory. There should not be a lot of things running besides our docker but we have not control over it. Also nothing guarantees that other programs would actually write their temp files to /tmp. I feel like this would have to be a per case thing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/273#issuecomment-154203788
https://github.com/broadinstitute/cromwell/pull/275#issuecomment-154549091:69,Availability,error,error,69,Can you put a brief comment with the exception? I've never seen this error before and I'm curious. Besides that :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/275#issuecomment-154549091
https://github.com/broadinstitute/cromwell/pull/276#issuecomment-154528182:61,Safety,Avoid,Avoidance,61,Please don't comment any more here. Will re-open against Job Avoidance branch with changes made.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/276#issuecomment-154528182
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-154524208:24,Availability,failure,failures,24,"I've been seeing Travis failures in `MainSpec` ""run reading options"" with maybe 30% consistency while working on this, but that's testing an exception being thrown before the WorkflowActor is even created and I don't believe would have been perturbed by my changes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-154524208
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-154524208:130,Testability,test,testing,130,"I've been seeing Travis failures in `MainSpec` ""run reading options"" with maybe 30% consistency while working on this, but that's testing an exception being thrown before the WorkflowActor is even created and I don't believe would have been perturbed by my changes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-154524208
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155150529:19,Safety,timeout,timeouts,19,"I saw intermittent timeouts locally too, that disappeared when re-running the suite. But I think that's part of outside testing issue we're tracking elsewhere. Passing on to @Horneth as next reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155150529
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155150529:120,Testability,test,testing,120,"I saw intermittent timeouts locally too, that disappeared when re-running the suite. But I think that's part of outside testing issue we're tracking elsewhere. Passing on to @Horneth as next reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155150529
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155157017:52,Usability,Simpl,SimpleWorkflowActorSpec,52,@kshakir can we add in your changes to asyncify the SimpleWorkflowActorSpec?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155157017
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155192304:160,Safety,timeout,timeouts,160,"@mcovarr Sure. Using the async ref worked for me, such that the tests didn't need to be ignored. FYI, I did run into at least one of our wonderful intermittent timeouts, that disappeared after re-running.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155192304
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155192304:64,Testability,test,tests,64,"@mcovarr Sure. Using the async ref worked for me, such that the tests didn't need to be ignored. FYI, I did run into at least one of our wonderful intermittent timeouts, that disappeared after re-running.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155192304
https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155480886:108,Modifiability,refactor,refactoring,108,":+1: Well done by the way, I was expecting removing the Await.result to be painful but that's almost a full refactoring of WorkflowActor / CallActor :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/277#issuecomment-155480886
https://github.com/broadinstitute/cromwell/pull/278#issuecomment-155148633:63,Security,hash,hash,63,@scottfrazer See: ; def getExecutionsWithResuableResultsByHash(hash: String): Future[Traversable[Execution]],MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/278#issuecomment-155148633
https://github.com/broadinstitute/cromwell/pull/280#issuecomment-155211635:10,Security,hash,hash,10,"I found a hash collision :-D:. WdlArray(WdlArrayType(WdlStringType), Seq(WdlString(""cromwell.binding.values.WdlStringcromwell.binding.values.WdlStringcromwell.binding.values.WdlString""))).getHash == WdlArray(WdlArrayType(WdlStringType), Seq(WdlString(""cromwell.binding.values.WdlString""), WdlString(""cromwell.binding.values.WdlString""))).getHash",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/280#issuecomment-155211635
https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155470637:11,Testability,test,test,11,"I'll add a test for the Array[Array[File]] coercion, I think it shouldn't take much to get it to work.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155470637
https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155471225:23,Testability,test,tests,23,Also... why aren't the tests running on this PR?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155471225
https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155471374:4,Testability,test,tests,4,The tests were running earlier...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155471374
https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155473668:59,Testability,test,test,59,"They just restarted. Never mind! . If you can get a Tyburn test for Array[Array[File]] added and working, that'd be awesome. But I suspect it's more work than a simple coercion addition.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155473668
https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155473668:161,Usability,simpl,simple,161,"They just restarted. Never mind! . If you can get a Tyburn test for Array[Array[File]] added and working, that'd be awesome. But I suspect it's more work than a simple coercion addition.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155473668
https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155481705:115,Integrability,depend,dependency,115,"Yes I think it's the similar kind of problem that makes the ""filepassing.wdl"" fail. There's some kind of recursive dependency between coercion/evaluation that we should look into at some point.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/283#issuecomment-155481705
https://github.com/broadinstitute/cromwell/pull/285#issuecomment-155520280:48,Safety,avoid,avoidance,48,"Should we also change the terminology from ""job avoidance"" to call caching?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/285#issuecomment-155520280
https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156139952:11,Testability,test,tests,11,What about tests?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156139952
https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156140460:44,Availability,failure,failures,44,"@mcovarr Given that these were JES specific failures, I'm going to run Tyburn over them. Presumably the local tests for these are already there and already working?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156140460
https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156140460:110,Testability,test,tests,110,"@mcovarr Given that these were JES specific failures, I'm going to run Tyburn over them. Presumably the local tests for these are already there and already working?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156140460
https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156141659:44,Testability,test,tested,44,There's some stuff in here that can be unit tested. I'll work on it,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156141659
https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156154845:259,Testability,test,tests,259,"On this branch my Tyburn's scattergather.wdl has failed. WIll see if I can find out why. EDIT: ""prepare"": execution failed: disallowed command return code: 127; /cromwell_root/exec.sh: line 3: python: command not found. EDIT2: This is a problem in the Tyburn tests. Ignore this comment.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/290#issuecomment-156154845
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159059478:184,Performance,load,loaded,184,@cjllanwarne application.conf should only include things which the most brain dead usage pattern straight out of the box would pick up. Everything else belongs in a separate conf file loaded at runtime.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159059478
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507:73,Security,secur,securely,73,"I see in application.conf the following. Is this a candidate for storing securely in vault?. workflow-options {; // These workflow options will be encrypted when stored in the database; encrypted-fields: []. // AES-256 key to use to encrypt the values in `encrypted-fields`; base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507:147,Security,encrypt,encrypted,147,"I see in application.conf the following. Is this a candidate for storing securely in vault?. workflow-options {; // These workflow options will be encrypted when stored in the database; encrypted-fields: []. // AES-256 key to use to encrypt the values in `encrypted-fields`; base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507:186,Security,encrypt,encrypted-fields,186,"I see in application.conf the following. Is this a candidate for storing securely in vault?. workflow-options {; // These workflow options will be encrypted when stored in the database; encrypted-fields: []. // AES-256 key to use to encrypt the values in `encrypted-fields`; base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507:233,Security,encrypt,encrypt,233,"I see in application.conf the following. Is this a candidate for storing securely in vault?. workflow-options {; // These workflow options will be encrypted when stored in the database; encrypted-fields: []. // AES-256 key to use to encrypt the values in `encrypted-fields`; base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507:256,Security,encrypt,encrypted-fields,256,"I see in application.conf the following. Is this a candidate for storing securely in vault?. workflow-options {; // These workflow options will be encrypted when stored in the database; encrypted-fields: []. // AES-256 key to use to encrypt the values in `encrypted-fields`; base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507:282,Security,encrypt,encryption-key,282,"I see in application.conf the following. Is this a candidate for storing securely in vault?. workflow-options {; // These workflow options will be encrypted when stored in the database; encrypted-fields: []. // AES-256 key to use to encrypt the values in `encrypted-fields`; base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:27,Security,encrypt,encrypted-fields,27,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:473,Security,secur,securely,473,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:555,Security,encrypt,encrypted,555,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:596,Security,encrypt,encrypted-fields,596,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:649,Security,encrypt,encrypt,649,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:671,Security,encrypt,encrypted-fields,671,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141:698,Security,encrypt,encryption-key,698,"Yes... although since the 'encrypted-fields' is blank it probably doesn't; matter a whole lot but this does seem a little odd to me. Anyone know why; this was put in here?. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Mon, Nov 23, 2015 at 3:55 PM, Chris Llanwarne notifications@github.com; wrote:. > I see in application.conf the following. Is this a candidate for storing; > securely in vault?; > ; > workflow-options {; > // These workflow options will be encrypted when stored in the database; > encrypted-fields: []; > ; > // AES-256 key to use to encrypt the values in encrypted-fields; > base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""; > }; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159061507; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159069141
https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159076912:179,Modifiability,config,configurable,179,"The following from application.conf aren't in the new templated file:; - webservice; - akka; - spray.can; - workflow-options; - docker. As long as we're happy that these won't be configurable from vault, :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/300#issuecomment-159076912
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494:149,Availability,down,downloading,149,"Just as a safety measure, maybe we should consider add a config option called something like ""allowCrossFSLocalisation"" - just to avoid accidentally downloading a 500GB file from GCS and the costs involved?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494:57,Modifiability,config,config,57,"Just as a safety measure, maybe we should consider add a config option called something like ""allowCrossFSLocalisation"" - just to avoid accidentally downloading a 500GB file from GCS and the costs involved?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494:10,Safety,safe,safety,10,"Just as a safety measure, maybe we should consider add a config option called something like ""allowCrossFSLocalisation"" - just to avoid accidentally downloading a 500GB file from GCS and the costs involved?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494:130,Safety,avoid,avoid,130,"Just as a safety measure, maybe we should consider add a config option called something like ""allowCrossFSLocalisation"" - just to avoid accidentally downloading a 500GB file from GCS and the costs involved?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161010494
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161013035:33,Modifiability,config,config,33,Yeah I thought about that too. A config flag might be a good safety net.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161013035
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161013035:61,Safety,safe,safety,61,Yeah I thought about that too. A config flag might be a good safety net.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161013035
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161060201:400,Safety,unsafe,unsafe,400,"@cjllanwarne @Horneth re the saving people from themselves, while I don't completely disagree what would be the use case here? If someone is running in local or SGE mode they'd need to be running Cromwell with (for now) Google credentials which means they probably know what they're doing. The ""don't completely disagree"" part is that I support the idea in general but think it should default to the unsafe direction as IMO it's more likely someone gets bit by it being turned off than turned on.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161060201
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161277199:132,Modifiability,config,config,132,"Per the comments above is this meant to be a ""stealth"" feature or should there be something in the README.md to note its existence, config requirements, gotchas?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161277199
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161278457:54,Testability,test,testing,54,We _really_ need to have an environment for automated testing of GCS / JES stuff. :cry:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-161278457
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180:147,Deployability,update,updated,147,"Just wanted to re touch base on this quickly, since the :+1: were given I fixed a bug that prevented the ""filepassing.wdl"" from working on JES and updated the config template / README. Is updating the template enough to make any configuration change work when cromwell will redeploy ? Because several field names / location have been changed.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180:229,Deployability,configurat,configuration,229,"Just wanted to re touch base on this quickly, since the :+1: were given I fixed a bug that prevented the ""filepassing.wdl"" from working on JES and updated the config template / README. Is updating the template enough to make any configuration change work when cromwell will redeploy ? Because several field names / location have been changed.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180:159,Modifiability,config,config,159,"Just wanted to re touch base on this quickly, since the :+1: were given I fixed a bug that prevented the ""filepassing.wdl"" from working on JES and updated the config template / README. Is updating the template enough to make any configuration change work when cromwell will redeploy ? Because several field names / location have been changed.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180:229,Modifiability,config,configuration,229,"Just wanted to re touch base on this quickly, since the :+1: were given I fixed a bug that prevented the ""filepassing.wdl"" from working on JES and updated the config template / README. Is updating the template enough to make any configuration change work when cromwell will redeploy ? Because several field names / location have been changed.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162623180
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162635666:231,Usability,simpl,simply,231,Is there a particular commit related to the bugfix that you think needs review? Bug squashing is not usually a contentious issue for me. :stuck_out_tongue: . I don't know the answer to your template question but I hope it works as simply as this.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162635666
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162639145:952,Integrability,interface,interface,952,"Yes it's this one https://github.com/broadinstitute/cromwell/commit/50cf0bd4f4f89bac5a82fe888166b3203bd5e1b7. The way evaluation is done makes nested evaluation hard to handle. I'm wondering if some kind of ""multi-pass evaluation"" wouldn't make things easier. ; The problem is that when evaluating something like `read_string(""${file_name}"")`,; the evaluation of `""${file_name}""` gives you a string which is most likely the name of a local file in the call directory, something like `out`. Now it's impossible just with this to know if it's supposed to be a gcs path, or a local path, which makes it difficult to know which ""IoInterface"" to use to do the `read_string`.; I ended up overwriting `fileContentsToString` in the JesEngineFunctions to append the gcs path of the call bucket before the file name, and also not providing JesBackend workflows with a `SharedFilesystemIoInterface`, because `out` is a valid Unix path so it would try to use this interface on paths that are actually ""relative gcs paths"".",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162639145
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162688568:300,Availability,down,down,300,"Sorry if this is a dumb question, but on a `SharedFilesystemBackend` that's using GCS inputs for a call, is it possible that `out` could be correctly interpreted as a ""GCS relative path""? i.e. wouldn't that have to be a local file? Per the docs and my understanding of this code, this only localizes down GCS inputs and doesn't delocalize outputs, and it didn't seem there's the concept of a GCS scratch bucket that could serve as the basis of a relative path. +1 to removing the possibility that JesBackend workflows could get their hands on a shared file system IO interface. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162688568
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162688568:567,Integrability,interface,interface,567,"Sorry if this is a dumb question, but on a `SharedFilesystemBackend` that's using GCS inputs for a call, is it possible that `out` could be correctly interpreted as a ""GCS relative path""? i.e. wouldn't that have to be a local file? Per the docs and my understanding of this code, this only localizes down GCS inputs and doesn't delocalize outputs, and it didn't seem there's the concept of a GCS scratch bucket that could serve as the basis of a relative path. +1 to removing the possibility that JesBackend workflows could get their hands on a shared file system IO interface. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162688568
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162699613:104,Integrability,interface,interface,104,"Not a dumb question :smile: It shouldn't be a problem because `isValidPath` in the `GoogleCloudStorage` interface won't return true for `out` as a path, so the IoManager will skip `GcsInterface` and try `SharedInterface`. However it's not great because when it's actually a ""relative GCS path"", it wouldn't pass `isValidPath` and we wouldn't even have chance to ""correct"" the path and make it absolute before trying to read. This is why if you look at the ioInterface that is assigned in case of a JesBackend in the `WorkflowDescriptor`, it's directly the `GcsInterface`, not an `IoManager`. This way we skip the `isValidPath` check.. It's looks a bit hacky but in some sense there's no reason to have an IoManager with only one interface, and like you said there's no reason to provide a SharedFS interface to a JesBackend.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162699613
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162699613:729,Integrability,interface,interface,729,"Not a dumb question :smile: It shouldn't be a problem because `isValidPath` in the `GoogleCloudStorage` interface won't return true for `out` as a path, so the IoManager will skip `GcsInterface` and try `SharedInterface`. However it's not great because when it's actually a ""relative GCS path"", it wouldn't pass `isValidPath` and we wouldn't even have chance to ""correct"" the path and make it absolute before trying to read. This is why if you look at the ioInterface that is assigned in case of a JesBackend in the `WorkflowDescriptor`, it's directly the `GcsInterface`, not an `IoManager`. This way we skip the `isValidPath` check.. It's looks a bit hacky but in some sense there's no reason to have an IoManager with only one interface, and like you said there's no reason to provide a SharedFS interface to a JesBackend.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162699613
https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162699613:798,Integrability,interface,interface,798,"Not a dumb question :smile: It shouldn't be a problem because `isValidPath` in the `GoogleCloudStorage` interface won't return true for `out` as a path, so the IoManager will skip `GcsInterface` and try `SharedInterface`. However it's not great because when it's actually a ""relative GCS path"", it wouldn't pass `isValidPath` and we wouldn't even have chance to ""correct"" the path and make it absolute before trying to read. This is why if you look at the ioInterface that is assigned in case of a JesBackend in the `WorkflowDescriptor`, it's directly the `GcsInterface`, not an `IoManager`. This way we skip the `isValidPath` check.. It's looks a bit hacky but in some sense there's no reason to have an IoManager with only one interface, and like you said there's no reason to provide a SharedFS interface to a JesBackend.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/305#issuecomment-162699613
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667:85,Safety,detect,detect,85,"Tests are incomplete / non-unit tests. May mock out a client, or figure out a way to detect a local pem/p12.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667:0,Testability,Test,Tests,0,"Tests are incomplete / non-unit tests. May mock out a client, or figure out a way to detect a local pem/p12.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667:32,Testability,test,tests,32,"Tests are incomplete / non-unit tests. May mock out a client, or figure out a way to detect a local pem/p12.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667:43,Testability,mock,mock,43,"Tests are incomplete / non-unit tests. May mock out a client, or figure out a way to detect a local pem/p12.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160741667
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160984769:23,Testability,mock,mock-mock,23,@kshakir Do you mean a mock-mock or a simple stub? I like the latter but find the former to be meh.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160984769
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160984769:45,Testability,stub,stub,45,@kshakir Do you mean a mock-mock or a simple stub? I like the latter but find the former to be meh.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160984769
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160984769:38,Usability,simpl,simple,38,@kshakir Do you mean a mock-mock or a simple stub? I like the latter but find the former to be meh.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-160984769
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:328,Deployability,integrat,integration,328,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:328,Integrability,integrat,integration,328,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:263,Safety,detect,detector,263,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:403,Security,access,access,403,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:79,Testability,mock,mocksArentStubs,79,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:115,Testability,mock,mock,115,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:125,Testability,stub,stub,125,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:236,Testability,test,tests,236,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172:340,Testability,test,test,340,"I still need to get my [terminology straight](http://martinfowler.com/articles/mocksArentStubs.html), but either a mock or a stub would have probably sufficed. I mainly wanted to feel like the code was ""self-documented"" a little in the tests. Instead, I put in a detector for a `cromwell-account.conf` that when present runs an integration test against the live ""gcr.io"". TODO: I still need to clean up access token caching, but there's lots of other code that may be critiqued.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161046172
https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161048707:85,Testability,mock,mocks,85,"I didn't even realize there was a difference until people who were also advocates of mocks were doing stuff that I thought was horrible and stupid. I finally realized that some people smarter than myself noticed the distinction, assigned names to both and tried to explain why this leads to the two camps always arguing :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/307#issuecomment-161048707
https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161824332:224,Integrability,message,messages,224,"This passes the K.I.S.S. principle, but I personally _hate_ the ask pattern, as it leads to timeouts and exceptions when the system gets busy. One should be theoretically be able to have the two actors to `tell` / `receive` messages instead, though I don't have the code ready at this second.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161824332
https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161824332:92,Safety,timeout,timeouts,92,"This passes the K.I.S.S. principle, but I personally _hate_ the ask pattern, as it leads to timeouts and exceptions when the system gets busy. One should be theoretically be able to have the two actors to `tell` / `receive` messages instead, though I don't have the code ready at this second.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161824332
https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161985376:451,Availability,down,down,451,"@mcovarr I think we still need to ensure that the submission is correct before sending back a 201 with the workflow ID, which means being sure that everything necessary to start executing the workflow is ready (all DB executions succeeded etc...); @kshakir I see your point, however in this case I don't think having the ask timing out is a problem, if a WorkflowActor takes forever to initialize itself then there is actually some bottleneck further down, and it might even be better to say ""sorry but we're really too busy right now, retry later"", than keeping waiting for WorkflowActors, which is going to trigger a timeout anyway since this comes from the ""submit endpoint"" and spray is not going to wait forever either.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161985376
https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161985376:432,Performance,bottleneck,bottleneck,432,"@mcovarr I think we still need to ensure that the submission is correct before sending back a 201 with the workflow ID, which means being sure that everything necessary to start executing the workflow is ready (all DB executions succeeded etc...); @kshakir I see your point, however in this case I don't think having the ask timing out is a problem, if a WorkflowActor takes forever to initialize itself then there is actually some bottleneck further down, and it might even be better to say ""sorry but we're really too busy right now, retry later"", than keeping waiting for WorkflowActors, which is going to trigger a timeout anyway since this comes from the ""submit endpoint"" and spray is not going to wait forever either.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161985376
https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161985376:619,Safety,timeout,timeout,619,"@mcovarr I think we still need to ensure that the submission is correct before sending back a 201 with the workflow ID, which means being sure that everything necessary to start executing the workflow is ready (all DB executions succeeded etc...); @kshakir I see your point, however in this case I don't think having the ask timing out is a problem, if a WorkflowActor takes forever to initialize itself then there is actually some bottleneck further down, and it might even be better to say ""sorry but we're really too busy right now, retry later"", than keeping waiting for WorkflowActors, which is going to trigger a timeout anyway since this comes from the ""submit endpoint"" and spray is not going to wait forever either.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/308#issuecomment-161985376
https://github.com/broadinstitute/cromwell/pull/309#issuecomment-161101612:40,Deployability,Pipeline,Pipelines,40,Note before merging: Change WDL in DSDE-Pipelines w.r.t. commas in workflow outputs,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/309#issuecomment-161101612
https://github.com/broadinstitute/cromwell/pull/310#issuecomment-161990464:131,Availability,down,down,131,"Not for this PR, but I noticed that the WorkflowActor is more than 1000 lines now, we might need to think of a way to break things down a little bit more in the future, because I have the feeling it's going to keep growing as we add more features..",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/310#issuecomment-161990464
https://github.com/broadinstitute/cromwell/pull/314#issuecomment-162990401:38,Safety,timeout,timeout,38,"Commented on at least simplifying the timeout code, possibly removing it altogether. Back to @mcovarr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/314#issuecomment-162990401
https://github.com/broadinstitute/cromwell/pull/314#issuecomment-162990401:22,Usability,simpl,simplifying,22,"Commented on at least simplifying the timeout code, possibly removing it altogether. Back to @mcovarr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/314#issuecomment-162990401
https://github.com/broadinstitute/cromwell/pull/317#issuecomment-163058610:193,Testability,test,tests,193,"Notes to self:; ~~Needs rebase~~; ~~Should handle case where there are no events~~; ~~Should show the time between startTime, the first event and between the final event and endTime~~; ~~Needs tests~~; ~~Edit documentation, including swagger~~; ~~Don't crash for Failed and Running calls~~",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/317#issuecomment-163058610
https://github.com/broadinstitute/cromwell/pull/319#issuecomment-164066862:48,Availability,failure,failures,48,"If this works and removes the inconsistent test failures then I fully support turning test tragedies towards tip-top triumphs through taming the trusty tahr. In other words, :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/319#issuecomment-164066862
https://github.com/broadinstitute/cromwell/pull/319#issuecomment-164066862:43,Testability,test,test,43,"If this works and removes the inconsistent test failures then I fully support turning test tragedies towards tip-top triumphs through taming the trusty tahr. In other words, :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/319#issuecomment-164066862
https://github.com/broadinstitute/cromwell/pull/319#issuecomment-164066862:86,Testability,test,test,86,"If this works and removes the inconsistent test failures then I fully support turning test tragedies towards tip-top triumphs through taming the trusty tahr. In other words, :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/319#issuecomment-164066862
https://github.com/broadinstitute/cromwell/pull/320#issuecomment-165149877:140,Deployability,patch,patch,140,"Heh, I've seen it used around github-- and I now use it also-- as a soft version of thumbs-up. ""I don't really understand 100% of what this patch does, but it's small enough so...""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/320#issuecomment-165149877
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164524852:10,Testability,test,test,10,"Added the test I complained about not having earlier, though lots of tests will fail until #323 lands.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164524852
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164524852:69,Testability,test,tests,69,"Added the test I complained about not having earlier, though lots of tests will fail until #323 lands.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164524852
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063:123,Performance,race condition,race condition,123,I assume it would be nice to have the hash of the Docker image Cromwell thinks your call ran with (pretending there are no race condition or other consistency issues between what Cromwell is doing to validate hashes and what's seen in JES)?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063:38,Security,hash,hash,38,I assume it would be nice to have the hash of the Docker image Cromwell thinks your call ran with (pretending there are no race condition or other consistency issues between what Cromwell is doing to validate hashes and what's seen in JES)?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063:200,Security,validat,validate,200,I assume it would be nice to have the hash of the Docker image Cromwell thinks your call ran with (pretending there are no race condition or other consistency issues between what Cromwell is doing to validate hashes and what's seen in JES)?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063:209,Security,hash,hashes,209,I assume it would be nice to have the hash of the Docker image Cromwell thinks your call ran with (pretending there are no race condition or other consistency issues between what Cromwell is doing to validate hashes and what's seen in JES)?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164547063
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:360,Availability,down,down,360,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1006,Availability,Failure,Failure,1006,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1228,Availability,Failure,Failure,1228,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1359,Availability,error,errors,1359,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1413,Availability,error,error,1413,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:772,Modifiability,refactor,refactoring,772,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1308,Performance,load,load,1308,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:670,Safety,timeout,timeout,670,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:48,Security,hash,hashing,48,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:628,Security,hash,hash,628,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:857,Security,hash,hashFuture,857,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:872,Security,hash,hash,872,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1075,Security,hash,hash,1075,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:138,Testability,test,tests,138,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:445,Testability,log,logged,445,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:579,Testability,test,testing,579,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:654,Testability,test,tests,654,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1313,Testability,test,testing,1313,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:1337,Testability,log,log,1337,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702:67,Usability,clear,clear,67,"I also played around with bolting on the docker hashing too. To be clear, I like @mcovarr's PR here better, as it's much cleaner, and has tests! Still, here's some overlapping [code](https://github.com/broadinstitute/cromwell/compare/job_avoidance...ks_hash_docker_image) to look at, especially the first commit with an alternative way to get an `ActorSystem` down into the `BackendCall`. A few issues left though, but some/most of these can be logged as new tickets, and we can get basic wiring in for the moment via this PR. Biggest issue-- 10 seconds is right on the edge for testing _and_ checking the docker server for the hash, so different docker tests currently timeout intermittently. Among other issues I saw, `Future` exception handling may be different due to refactoring. For example converting `Future { /* big block */ }` to `/* big block */ hashFuture.map(hash => ...)` allows exceptions within the block to not get caught (as expected?). Also I wasn't sure yet how we want to handle some `Failure` cases, specifically when the docker server doesn't return a hash. I assume that means that we should just run again from scratch, and NOT go to a `FailedExecution` state in the database. Or maybe we should go to `Failure`, and just retry a particular operations later. With ~~Gatling~~ Tyburn load testing, perhaps we can log any docker client errors now, and start to distinguish them with custom error handling code as they pop up.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164760702
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164905674:354,Modifiability,Enhance,EnhancedFuture,354,"37 commits? :confused: I think a rebase on a rebase went bad. I've had to use `git cherry-pick` recently to get the actual commits I want to land on top of the shifting `job_avoidance` branch. @mcovarr Your changes don't seem to have the same effect that my playing around did, where my ""hacks"" changed the `Future` behavior, because of the very crafty `EnhancedFuture[A](val future: Future[Future[A]])`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164905674
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164934352:209,Modifiability,Enhance,EnhancedFutureFuture,209,"I haven't rebased the rebase here yet, I'm hoping that's the problem. :smile: At the time of this writing these diffs are a hot mess. Hmm now that you mention it that should probably be called something like `EnhancedFutureFuture`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-164934352
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-165435688:76,Modifiability,enhance,enhance,76,"The wheel has selected @scottfrazer as the second reviewer. I would like to enhance or add a test to make sure the `DOCKER_IMAGE_HASH` and `RESULTS_CLONED_FROM` are working, but that shouldn't prevent this review from starting.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-165435688
https://github.com/broadinstitute/cromwell/pull/322#issuecomment-165435688:93,Testability,test,test,93,"The wheel has selected @scottfrazer as the second reviewer. I would like to enhance or add a test to make sure the `DOCKER_IMAGE_HASH` and `RESULTS_CLONED_FROM` are working, but that shouldn't prevent this review from starting.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/322#issuecomment-165435688
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:66,Availability,error,error,66,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:234,Availability,error,error,234,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:305,Availability,error,error,305,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:316,Availability,error,error,316,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:444,Availability,error,error,444,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:493,Availability,error,error,493,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:504,Availability,error,error,504,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:515,Availability,error,errors,515,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:530,Availability,error,error,530,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757:587,Availability,error,error,587,"I can't run anything from the command line on this branch:. ```; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:19: value BackendyString is not a member of object cromwell.engine.backend.CromwellBackend; [error] import cromwell.engine.backend.CromwellBackend.BackendyString; [error] ^; [error] /Users/sfrazer/projects/cromwell/src/main/scala/cromwell/Main.scala:352: value toBackendType is not a member of String; [error] val backendType = args(1).toBackendType; [error] ^; [error] two errors found; [error] (compile:compileIncremental) Compilation failed; [error] Total time: 21 s, completed Dec 14, 2015 5:10:50 PM; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164576757
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164598423:24,Availability,error,errors,24,"@scottfrazer re compile errors, yeah i made a tiny change on my last commit which I wouldn't think would break anything so didn't bother to test it. oops.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164598423
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164598423:140,Testability,test,test,140,"@scottfrazer re compile errors, yeah i made a tiny change on my last commit which I wouldn't think would break anything so didn't bother to test it. oops.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164598423
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164773421:70,Security,validat,validation,70,"@sfrazet on all of your comments revolving around the references to a validation change, early on @mcovarr asked me to clean something up which appeared to be small. It turned out to be neither small nor did it play well with the call caching branch in terms of rebasing. Instead what I'm doing is taking those changes as a separate branch off if the call caching work with the intention of merging it immediately after CC is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164773421
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164844157:19,Availability,failure,failure,19,Is that not a real failure?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164844157
https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164846710:12,Availability,error,error,12,"It's a real error. I know what it is, how to resolve might end up being tricky. Will see when I'm back",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/323#issuecomment-164846710
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164567205:91,Performance,cache,cache,91,"It'd be nice to show off the task runtime options in these tests too, e.g. ""don't write to cache"" and ""don't read from cache""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164567205
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164567205:119,Performance,cache,cache,119,"It'd be nice to show off the task runtime options in these tests too, e.g. ""don't write to cache"" and ""don't read from cache""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164567205
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164567205:59,Testability,test,tests,59,"It'd be nice to show off the task runtime options in these tests too, e.g. ""don't write to cache"" and ""don't read from cache""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164567205
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332:96,Availability,avail,available,96,"@cjllanwarne regarding testing the ""write to cache"" and ""read from cache""... that feature isn't available to this code, it's on another PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332:45,Performance,cache,cache,45,"@cjllanwarne regarding testing the ""write to cache"" and ""read from cache""... that feature isn't available to this code, it's on another PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332:67,Performance,cache,cache,67,"@cjllanwarne regarding testing the ""write to cache"" and ""read from cache""... that feature isn't available to this code, it's on another PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332:23,Testability,test,testing,23,"@cjllanwarne regarding testing the ""write to cache"" and ""read from cache""... that feature isn't available to this code, it's on another PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164577332
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164782659:70,Availability,failure,failures,70,"Oh, looks good then. I've restarted the Travis build but assuming the failures were just temporary, :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164782659
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164786288:262,Availability,failure,failures,262,"I think I broke the tests, I needed to rebase on job_avoidance branch. I'm; working on fixing them now. On Tue, Dec 15, 2015 at 9:36 AM, Chris Llanwarne notifications@github.com; wrote:. > Oh, looks good then. I've restarted the Travis build but assuming the; > failures were just temporary, [image: :+1:]; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164782659; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164786288
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164786288:20,Testability,test,tests,20,"I think I broke the tests, I needed to rebase on job_avoidance branch. I'm; working on fixing them now. On Tue, Dec 15, 2015 at 9:36 AM, Chris Llanwarne notifications@github.com; wrote:. > Oh, looks good then. I've restarted the Travis build but assuming the; > failures were just temporary, [image: :+1:]; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164782659; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164786288
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164845098:61,Testability,test,tests,61,"@geoffjentry @cjllanwarne changes have been applied. I added tests for ""read_from_cache"" and ""write_from_cache"" too",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-164845098
https://github.com/broadinstitute/cromwell/pull/325#issuecomment-165153085:47,Testability,log,logging,47,:+1: although I want to point out the workflow logging change (which seems to just be an add-on and not part of the PR?) to @kshakir as it might affect what he's doing,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/325#issuecomment-165153085
https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164849222:122,Deployability,update,update,122,@mcovarr I investigated as part of the ticket. I wasn't able to recreate the problem but I couldn't see why the option to update the abort function should be disallowed.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164849222
https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164849222:133,Safety,abort,abort,133,@mcovarr I investigated as part of the ticket. I wasn't able to recreate the problem but I couldn't see why the option to update the abort function should be disallowed.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164849222
https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164886510:23,Deployability,update,update,23,@mcovarr I've left the update enabled but added a new warning. So hopefully it's at least as vocal and warn-y as before but won't outright ignore the updated abort function.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164886510
https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164886510:150,Deployability,update,updated,150,@mcovarr I've left the update enabled but added a new warning. So hopefully it's at least as vocal and warn-y as before but won't outright ignore the updated abort function.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164886510
https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164886510:158,Safety,abort,abort,158,@mcovarr I've left the update enabled but added a new warning. So hopefully it's at least as vocal and warn-y as before but won't outright ignore the updated abort function.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164886510
https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164903691:52,Testability,test,tests,52,":+1: on the current changes. Would love to see unit tests, but haven't examined thoroughly what we have currently for `CallActor`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/326#issuecomment-164903691
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165163340:424,Testability,test,test,424,"Unless this is absolutely needed asap, in `develop`, there are changes to the `GoogleCredentialFactory` pending in the `job_avoidance` branch that will [conflict](https://github.com/broadinstitute/cromwell/compare/develop...job_avoidance#diff-237dfbe12dc36741c382f3651aa7f1be) with this change. Can these changes be merged against that branch instead? If not, I can make parallel changes over in `job_avoidance`, and add a [test](https://github.com/broadinstitute/cromwell/compare/develop...job_avoidance#diff-c5dc127fbdc2b059b8747899d6c0264a), after this PR is merged.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165163340
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137:87,Modifiability,refactor,refactor,87,"There is already a relatively heavy conflict between the job_avoidance branch and the ""refactor Engine Fns"" branch that I'm currently rebasing right now. This PR seems simple enough to add to the rebased version though so it shouldn't be too bad. Just please let me know if you modify `GoogleCrendential` on job_avoidance branch @kshakir",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137:168,Usability,simpl,simple,168,"There is already a relatively heavy conflict between the job_avoidance branch and the ""refactor Engine Fns"" branch that I'm currently rebasing right now. This PR seems simple enough to add to the rebased version though so it shouldn't be too bad. Just please let me know if you modify `GoogleCrendential` on job_avoidance branch @kshakir",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165170061:301,Modifiability,refactor,refactor,301,"This is not super urgent, but did seem quite simple and I would like to get; it checked in if possible. Let me know what you guys think. On Wed, Dec 16, 2015 at 11:40 AM, Thib notifications@github.com wrote:. > There is already a relatively heavy conflict between the job_avoidance; > branch and the ""refactor Engine Fns"" branch that I'm currently rebasing; > right now. This PR seems simple enough to add to the rebased version though; > so it shouldn't be too bad. Just please let me know if you modify; > GoogleCrendential on job_avoidance branch @kshakir; > https://github.com/kshakir; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165170061
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165170061:45,Usability,simpl,simple,45,"This is not super urgent, but did seem quite simple and I would like to get; it checked in if possible. Let me know what you guys think. On Wed, Dec 16, 2015 at 11:40 AM, Thib notifications@github.com wrote:. > There is already a relatively heavy conflict between the job_avoidance; > branch and the ""refactor Engine Fns"" branch that I'm currently rebasing; > right now. This PR seems simple enough to add to the rebased version though; > so it shouldn't be too bad. Just please let me know if you modify; > GoogleCrendential on job_avoidance branch @kshakir; > https://github.com/kshakir; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165170061
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165170061:385,Usability,simpl,simple,385,"This is not super urgent, but did seem quite simple and I would like to get; it checked in if possible. Let me know what you guys think. On Wed, Dec 16, 2015 at 11:40 AM, Thib notifications@github.com wrote:. > There is already a relatively heavy conflict between the job_avoidance; > branch and the ""refactor Engine Fns"" branch that I'm currently rebasing; > right now. This PR seems simple enough to add to the rebased version though; > so it shouldn't be too bad. Just please let me know if you modify; > GoogleCrendential on job_avoidance branch @kshakir; > https://github.com/kshakir; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165169137; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-165170061
https://github.com/broadinstitute/cromwell/pull/329#issuecomment-166069704:65,Testability,test,test,65,"See #338 as an alternative. Conflicts resolved, plus an optional test.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/329#issuecomment-166069704
https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165228352:197,Deployability,update,update,197,"Ok. I'll revert [this](https://github.com/broadinstitute/cromwell/commit/2e3f45bbedeaa4c522751e9ff6f5594c57b88b35#diff-facc2160a82442932c41026c9a1e4b2bL28) change in behavior from a while ago, and update the code to reset logging type based on standard command line arguments. This goes against what the docs currently say, so I'll update those too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165228352
https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165228352:332,Deployability,update,update,332,"Ok. I'll revert [this](https://github.com/broadinstitute/cromwell/commit/2e3f45bbedeaa4c522751e9ff6f5594c57b88b35#diff-facc2160a82442932c41026c9a1e4b2bL28) change in behavior from a while ago, and update the code to reset logging type based on standard command line arguments. This goes against what the docs currently say, so I'll update those too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165228352
https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165228352:222,Testability,log,logging,222,"Ok. I'll revert [this](https://github.com/broadinstitute/cromwell/commit/2e3f45bbedeaa4c522751e9ff6f5594c57b88b35#diff-facc2160a82442932c41026c9a1e4b2bL28) change in behavior from a while ago, and update the code to reset logging type based on standard command line arguments. This goes against what the docs currently say, so I'll update those too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165228352
https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165333960:105,Modifiability,config,config,105,"Ready for re-review. Going to leave the commits separate though, as the implementation of server logging config feels sketchy.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165333960
https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165333960:97,Testability,log,logging,97,"Ready for re-review. Going to leave the commits separate though, as the implementation of server logging config feels sketchy.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165333960
https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165586184:27,Testability,log,logging,27,"Cool, will put in a bit of logging for DSDEEPB-2239, and wait for #287 to merge first.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/330#issuecomment-165586184
https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165261506:5,Usability,clear,clear,5,[not clear](https://books.google.com/ngrams/graph?content=preemptible%2C+preemptable&year_start=1800&year_end=2000&corpus=15&smoothing=3&share=&direct_url=t1%3B%2Cpreemptible%3B%2Cc0%3B.t1%3B%2Cpreemptable%3B%2Cc0),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165261506
https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165262625:57,Deployability,update,updated,57,"Hah, you perturbed (WOTD) the hash, the test needs to be updated",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165262625
https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165262625:30,Security,hash,hash,30,"Hah, you perturbed (WOTD) the hash, the test needs to be updated",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165262625
https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165262625:40,Testability,test,test,40,"Hah, you perturbed (WOTD) the hash, the test needs to be updated",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/332#issuecomment-165262625
https://github.com/broadinstitute/cromwell/issues/334#issuecomment-165839405:28,Deployability,install,install,28,Ahh -- disregard. I did not install Akka.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/334#issuecomment-165839405
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166030670:88,Availability,mainten,maintenance,88,"@slnovak Hi - thanks for this! I just had a couple of quick questions on the Homebrew & maintenance front. ; - What's the plan going forward in terms of keeping it up to date, is this something that you plan on doing? If so will you be tracking the official releases (e.g. now 0.16) or updating on some semi-regular (or even not-so-semi) interval? ; - Is there anything we could do in terms of helping out w/ the homebrew angle?; - I'm not at all familiar w/ the homebrew formula stuff. Where is it calling `sbt assemble`? Is that done elsewhere? If so, how does that work?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166030670
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166030670:258,Deployability,release,releases,258,"@slnovak Hi - thanks for this! I just had a couple of quick questions on the Homebrew & maintenance front. ; - What's the plan going forward in terms of keeping it up to date, is this something that you plan on doing? If so will you be tracking the official releases (e.g. now 0.16) or updating on some semi-regular (or even not-so-semi) interval? ; - Is there anything we could do in terms of helping out w/ the homebrew angle?; - I'm not at all familiar w/ the homebrew formula stuff. Where is it calling `sbt assemble`? Is that done elsewhere? If so, how does that work?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166030670
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:30,Availability,down,downloads,30,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:236,Availability,avail,available,236,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:65,Deployability,release,releases,65,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:322,Deployability,update,update,322,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:352,Deployability,release,releases,352,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:608,Deployability,install,install,608,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:764,Deployability,release,releases,764,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:811,Deployability,release,release,811,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076:101,Integrability,wrap,wrapper,101,"Hey @geoffjentry. The formula downloads the .jar from the Github releases page and [creates a little wrapper script](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L11) that's used to make `cromwell` available as a command-line tool. There's no need to compile from source. In order to update the formula for future releases, you can just submit a PR to Homebrew by updating the [url](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L4), [SHA](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L5), and [install steps](https://github.com/slnovak/homebrew/blob/cromwell-0.14/Library/Formula/cromwell.rb#L9-L12). I'd be happy to do this in the future for future releases -- just include this step in whatever release checklist you may use. Homebrew is a pretty well-established community, so there's not much to contribute on that end. Cheers!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166033076
https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166332671:54,Deployability,release,release,54,"@slnovak Sounds good, thanks. We need to solidify our release procedure to be less ad hoc now that others are actually using this. We'll try to get that squared away early in the new year - I think what would make sense would be for us to lump the PRs in as part of that procedure but we might come calling for advice/help at some point in the next few weeks :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/335#issuecomment-166332671
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166000976:252,Modifiability,config,configure,252,"Per some of @kshakir's comments, IntelliJ has a _default_ formatting which we have not made any attempt to change. If these defaults cause consternation (or code review comments), we might consider developing a group style which we could all share and configure our IntelliJ's to use that. I definitely don't want to be fighting IntelliJ but I'm fine with moving away from the defaults if that's what the team wants.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166000976
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014:48,Deployability,integrat,integration,48,Merging as the failing test is that same stupid integration test w/ dockerhub failing on develop,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014:48,Integrability,integrat,integration,48,Merging as the failing test is that same stupid integration test w/ dockerhub failing on develop,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014:23,Testability,test,test,23,Merging as the failing test is that same stupid integration test w/ dockerhub failing on develop,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014:60,Testability,test,test,60,Merging as the failing test is that same stupid integration test w/ dockerhub failing on develop,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166383014
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166384762:84,Deployability,Integrat,Integration,84,If that test is chronically failing due to Docker Hub flakiness we should tag it as Integration so it doesn't break our builds.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166384762
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166384762:84,Integrability,Integrat,Integration,84,If that test is chronically failing due to Docker Hub flakiness we should tag it as Integration so it doesn't break our builds.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166384762
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166384762:8,Testability,test,test,8,If that test is chronically failing due to Docker Hub flakiness we should tag it as Integration so it doesn't break our builds.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166384762
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166385219:22,Testability,mock,mock,22,"...and then we should mock out Docker Hub so we don't lose the value of the test, then re-enable.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166385219
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166385219:76,Testability,test,test,76,"...and then we should mock out Docker Hub so we don't lose the value of the test, then re-enable.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166385219
https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166392599:48,Availability,failure,failures,48,@mcovarr Yes. It's ridiculous that we get build failures due to external services failing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/337#issuecomment-166392599
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166117677:403,Deployability,install,installed,403,"Hey All -- I think this is a great feature. If I'm understanding correctly, this should also be a big help locally because this mode will use the same credentials that are used for gcloud. That is, if you have done a 'gcloud login' before, it will use those credentials. . Thinking about that... what if we just remove the 'user' mode for google altogether? It's sort of a pain to do, and having gcloud installed seems a really low bar for someone who wants to run using a google backend as they will likely need gcloud to transfer data, manage their account, etc. If we don't want to remove features... I think we should at least rename them so that 'application-default' sounds more appealing so that is what people do (maybe even call it default).; - k",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166117677
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166117677:225,Testability,log,login,225,"Hey All -- I think this is a great feature. If I'm understanding correctly, this should also be a big help locally because this mode will use the same credentials that are used for gcloud. That is, if you have done a 'gcloud login' before, it will use those credentials. . Thinking about that... what if we just remove the 'user' mode for google altogether? It's sort of a pain to do, and having gcloud installed seems a really low bar for someone who wants to run using a google backend as they will likely need gcloud to transfer data, manage their account, etc. If we don't want to remove features... I think we should at least rename them so that 'application-default' sounds more appealing so that is what people do (maybe even call it default).; - k",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166117677
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166378493:8,Testability,test,testing,8,"FYI I'm testing out Kristian's suggestion to make sure it works as expected, if so I'll PR this PR and remove 'user' mode.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166378493
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:340,Availability,error,errors,340,"These changes appear to break submissions in service account mode. Removing the `GenomicsScopes.all` from `GoogleScopes` fixes the problem but (presumably) will break `application-default`:. ```; 2015-12-21 14:05:11,203 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-ht",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:835,Availability,error,errors,835,"These changes appear to break submissions in service account mode. Removing the `GenomicsScopes.all` from `GoogleScopes` fixes the problem but (presumably) will break `application-default`:. ```; 2015-12-21 14:05:11,203 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-ht",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:2707,Deployability,Pipeline,Pipeline,2707,gle-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-http-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[google-api-client-1.20.0.jar:1.20.0]; at cromwell.engine.backend.jes.Run$.runPipeline$1(Run.scala:59) ~[classes/:na]; at cromwell.engine.backend.jes.Run$.apply(Run.scala:67) ~[classes/:na]; at cromwell.engine.backend.jes.Pipeline.run(Pipeline.scala:75) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.cromwell$engine$backend$jes$JesBackend$$anonfun$$attemptToCreateJesRun$1(JesBackend.scala:409) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.util.TryUtil$$anonfun$4.apply(TryUtil.scala:64) ~[classes/:na]; at scala.util.Try$.apply(Try.scala:192) ~[scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.util.TryUtil$.retryBlock(TryUtil.scala:64) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$.withRetry(JesBackend.scala:113) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:2720,Deployability,Pipeline,Pipeline,2720,ent-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-http-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[google-api-client-1.20.0.jar:1.20.0]; at cromwell.engine.backend.jes.Run$.runPipeline$1(Run.scala:59) ~[classes/:na]; at cromwell.engine.backend.jes.Run$.apply(Run.scala:67) ~[classes/:na]; at cromwell.engine.backend.jes.Pipeline.run(Pipeline.scala:75) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.cromwell$engine$backend$jes$JesBackend$$anonfun$$attemptToCreateJesRun$1(JesBackend.scala:409) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.util.TryUtil$$anonfun$4.apply(TryUtil.scala:64) ~[classes/:na]; at scala.util.Try$.apply(Try.scala:192) ~[scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.util.TryUtil$.retryBlock(TryUtil.scala:64) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$.withRetry(JesBackend.scala:113) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesR,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:378,Integrability,message,message,378,"These changes appear to break submissions in service account mode. Removing the `GenomicsScopes.all` from `GoogleScopes` fixes the problem but (presumably) will break `application-default`:. ```; 2015-12-21 14:05:11,203 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-ht",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:554,Integrability,message,message,554,"These changes appear to break submissions in service account mode. Removing the `GenomicsScopes.all` from `GoogleScopes` fixes the problem but (presumably) will break `application-default`:. ```; 2015-12-21 14:05:11,203 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-ht",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:873,Integrability,message,message,873,"These changes appear to break submissions in service account mode. Removing the `GenomicsScopes.all` from `GoogleScopes` fixes the problem but (presumably) will break `application-default`:. ```; 2015-12-21 14:05:11,203 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-ht",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:1049,Integrability,message,message,1049,"ervice account mode. Removing the `GenomicsScopes.all` from `GoogleScopes` fixes the problem but (presumably) will break `application-default`:. ```; 2015-12-21 14:05:11,203 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""reason"" : ""badRequest""; } ],; ""message"" : ""Invalid value for field \""serviceAccount.scopes\"": element 1: invalid scope name: https://www.googleapis.com/auth/cloud-platform"",; ""status"" : ""INVALID_ARGUMENT""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[google-api-client-1.20.0.jar:1.20.0]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[google-http-client-1.20.0.jar:1.20.0]; at com.google.a",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:4929,Performance,concurren,concurrent,4929,"gine.backend.jes.authentication.JesAuthentication$class.authenticateAsCromwell(JesAuthentication.scala:39) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.7.jar:na]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.14.jar:na]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.14.jar:na]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:na]; 2015-12-21 14:05:11,207 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: JesBack",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:5049,Performance,concurren,concurrent,5049,"a]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.7.jar:na]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.14.jar:na]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.14.jar:na]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:na]; 2015-12-21 14:05:11,207 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: JesBackend [UUID(60f8d0d3):hello] Exception occurred while creating JES Run. Retrying in 5 seconds (9 more retries) ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:5388,Performance,concurren,concurrent,5388,"a]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.7.jar:na]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.14.jar:na]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.14.jar:na]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:na]; 2015-12-21 14:05:11,207 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: JesBackend [UUID(60f8d0d3):hello] Exception occurred while creating JES Run. Retrying in 5 seconds (9 more retries) ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:5491,Performance,concurren,concurrent,5491,"a]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.7.jar:na]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.14.jar:na]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.14.jar:na]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:na]; 2015-12-21 14:05:11,207 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: JesBackend [UUID(60f8d0d3):hello] Exception occurred while creating JES Run. Retrying in 5 seconds (9 more retries) ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:5606,Performance,concurren,concurrent,5606,"a]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.7.jar:na]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.14.jar:na]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.14.jar:na]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:na]; 2015-12-21 14:05:11,207 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: JesBackend [UUID(60f8d0d3):hello] Exception occurred while creating JES Run. Retrying in 5 seconds (9 more retries) ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:5713,Performance,concurren,concurrent,5713,"a]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.7.jar:na]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.14.jar:na]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.14.jar:na]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.7.jar:na]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.7.jar:na]; 2015-12-21 14:05:11,207 cromwell-system-akka.actor.default-dispatcher-2 WARN - JesBackend [UUID(60f8d0d3)]: JesBackend [UUID(60f8d0d3):hello] Exception occurred while creating JES Run. Retrying in 5 seconds (9 more retries) ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:3951,Security,authenticat,authentication,3951,lasses/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.util.TryUtil$$anonfun$4.apply(TryUtil.scala:64) ~[classes/:na]; at scala.util.Try$.apply(Try.scala:192) ~[scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.util.TryUtil$.retryBlock(TryUtil.scala:64) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$.withRetry(JesBackend.scala:113) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.apply(JesBackend.scala:412) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.apply(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.authentication.JesAuthentication$class.authenticateAsCromwell(JesAuthentication.scala:39) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$Promise,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:3990,Security,authenticat,authenticateAsCromwell,3990,nd$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.util.TryUtil$$anonfun$4.apply(TryUtil.scala:64) ~[classes/:na]; at scala.util.Try$.apply(Try.scala:192) ~[scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.util.TryUtil$.retryBlock(TryUtil.scala:64) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$.withRetry(JesBackend.scala:113) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.apply(JesBackend.scala:412) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.apply(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.authentication.JesAuthentication$class.authenticateAsCromwell(JesAuthentication.scala:39) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [s,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486:4098,Security,authenticat,authenticateAsCromwell,4098,la:412) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1$$anonfun$apply$10.apply(JesBackend.scala:412) ~[classes/:na]; at cromwell.util.TryUtil$$anonfun$4.apply(TryUtil.scala:64) ~[classes/:na]; at scala.util.Try$.apply(Try.scala:192) ~[scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.util.TryUtil$.retryBlock(TryUtil.scala:64) ~[classes/:na]; at cromwell.engine.backend.jes.JesBackend$.withRetry(JesBackend.scala:113) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.apply(JesBackend.scala:412) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$cromwell$engine$backend$jes$JesBackend$$createJesRun$1.apply(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.authentication.JesAuthentication$class.authenticateAsCromwell(JesAuthentication.scala:39) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.authenticateAsCromwell(JesBackend.scala:161) [classes/:na]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$createJesRun(JesBackend.scala:400) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:542) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$10.apply(JesBackend.scala:541) [classes/:na]; at scala.util.Success.flatMap(Try.scala:231) [scala-library-2.11.7.jar:1.0.0-M1]; at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$runWithJes(JesBackend.scala:541) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:285) [classes/:na]; at cromwell.engine.backend.jes.JesBackend$$anonfun$executeOrResume$1.apply(JesBackend.scala:275) [classes/:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.7.jar:na]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166392486
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166473338:596,Availability,down,down,596,"Regarding Kris' comment, I'm game for removing features in general, including ""user"". Various optional tests will need some help though, as currently they use user credentials. They instead should switch to the service account. The application-default factory seemed to return a credential on our Travis, though I haven't yet investigated what that credential actually is. I'm also willing to see ""application-default"" be the GoogleCredentialFactory implicit default. Still, I understand if others vote for the config to be explicit, in which case I like the suggested name ""default"". I'll stand down on making changes for now while @mcovarr has the ticket. Will still look for docs on scopes though.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166473338
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166473338:511,Modifiability,config,config,511,"Regarding Kris' comment, I'm game for removing features in general, including ""user"". Various optional tests will need some help though, as currently they use user credentials. They instead should switch to the service account. The application-default factory seemed to return a credential on our Travis, though I haven't yet investigated what that credential actually is. I'm also willing to see ""application-default"" be the GoogleCredentialFactory implicit default. Still, I understand if others vote for the config to be explicit, in which case I like the suggested name ""default"". I'll stand down on making changes for now while @mcovarr has the ticket. Will still look for docs on scopes though.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166473338
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166473338:103,Testability,test,tests,103,"Regarding Kris' comment, I'm game for removing features in general, including ""user"". Various optional tests will need some help though, as currently they use user credentials. They instead should switch to the service account. The application-default factory seemed to return a credential on our Travis, though I haven't yet investigated what that credential actually is. I'm also willing to see ""application-default"" be the GoogleCredentialFactory implicit default. Still, I understand if others vote for the config to be explicit, in which case I like the suggested name ""default"". I'll stand down on making changes for now while @mcovarr has the ticket. Will still look for docs on scopes though.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166473338
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166588563:101,Availability,error,error,101,"Re Kris's comment - sounds like a good idea. My only extra suggestion would be to make sure that the error reported to the user if the gcloud default auth isn't set up properly is as bulletproof as possible. Otherwise I can see some tedious ""why won't it work!"" head-scratching in the near future",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-166588563
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168716322:187,Testability,test,testing,187,"Abandoning this PR. @kcibul's feature requests should be captured in another ticket. @tovanadler is going to look at reimplementing her basic changes in #329 on the latest `develop`, and testing manually to ensure the scopes are all correct.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168716322
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168724071:13,Availability,down,down,13,"FYI, tracked down the bug. It's on the Google side. My guess is that we; won't need the GenomicsScopes at all, and I can just reimplement the; application default credentials with the java object that you guys already; have. Alternately, we can replace that with GenomicsScopes once they work; better. Will mail a PR shortly. On Mon, Jan 4, 2016 at 11:02 AM, kshakir notifications@github.com wrote:. > Abandoning this PR.; > ; > @kcibul https://github.com/kcibul's feature requests should be captured; > in another ticket.; > ; > @tovanadler https://github.com/tovanadler is going to look at; > reimplementing her basic changes in #329; > https://github.com/broadinstitute/cromwell/pull/329 on the latest; > develop, and testing manually to ensure the scopes are all correct.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168716322; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168724071
https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168724071:721,Testability,test,testing,721,"FYI, tracked down the bug. It's on the Google side. My guess is that we; won't need the GenomicsScopes at all, and I can just reimplement the; application default credentials with the java object that you guys already; have. Alternately, we can replace that with GenomicsScopes once they work; better. Will mail a PR shortly. On Mon, Jan 4, 2016 at 11:02 AM, kshakir notifications@github.com wrote:. > Abandoning this PR.; > ; > @kcibul https://github.com/kcibul's feature requests should be captured; > in another ticket.; > ; > @tovanadler https://github.com/tovanadler is going to look at; > reimplementing her basic changes in #329; > https://github.com/broadinstitute/cromwell/pull/329 on the latest; > develop, and testing manually to ensure the scopes are all correct.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168716322; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/338#issuecomment-168724071
https://github.com/broadinstitute/cromwell/pull/341#issuecomment-166621309:49,Availability,avail,available,49,"Scott's on vaca and hasn't chimed in on the ""I'm available"" thread - you might want to recalibrate your wheel :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/341#issuecomment-166621309
https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940:46,Deployability,integrat,integration,46,:frowning: Another argument for why we should integration test. Do we need to do a release?. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940
https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940:83,Deployability,release,release,83,:frowning: Another argument for why we should integration test. Do we need to do a release?. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940
https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940:46,Integrability,integrat,integration,46,:frowning: Another argument for why we should integration test. Do we need to do a release?. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940
https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940:58,Testability,test,test,58,:frowning: Another argument for why we should integration test. Do we need to do a release?. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/342#issuecomment-166664940
https://github.com/broadinstitute/cromwell/pull/343#issuecomment-166692810:20,Usability,undo,undo,20,"Note that this does undo PR #340 - that one ended up fixing a symptom, not the underlying issue",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/343#issuecomment-166692810
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:19,Availability,error,error,19,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:200,Availability,error,error,200,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:286,Availability,error,error,286,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:299,Availability,error,error,299,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:310,Availability,error,error,310,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:326,Availability,error,error,326,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:182,Modifiability,config,config,182,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:189,Modifiability,Config,Config,189,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:219,Modifiability,Config,Config,219,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:228,Modifiability,Config,ConfigFactory,228,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524:242,Performance,load,load,242,"Won't compile:. > [error] /Users/chrisl/IdeaProjects/cromwell/src/main/scala/cromwell/instrumentation/Instrumentation.scala:20: value getConfigOption is not a member of com.typesafe.config.Config; > [error] private val Config = ConfigFactory.load.getConfigOption(""instrumentation""); > [error] ^; > [error] one error found; > [error](compile:compileIncremental) Compilation failed",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/344#issuecomment-166862524
https://github.com/broadinstitute/cromwell/issues/345#issuecomment-168741200:207,Testability,log,log,207,"Perhaps I'm missing something... though I checked versions 0.14, 0.15, and the latest `develop` branch, and they all seem to optionally accept `-DLOG_LEVEL`. If it was omitted, then it defaulted to the INFO log level in each case. Are you seeing different behavior?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/345#issuecomment-168741200
https://github.com/broadinstitute/cromwell/issues/345#issuecomment-168772940:113,Testability,log,log,113,"Thanks. Our use case is to run cromwell as a docker service for development. It took a bit of digging to set the log level. If it picked it up from the environment, we could set if from docker",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/345#issuecomment-168772940
https://github.com/broadinstitute/cromwell/issues/345#issuecomment-170765478:27,Deployability,update,update,27,"no worries, thanks for the update",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/345#issuecomment-170765478
https://github.com/broadinstitute/cromwell/issues/345#issuecomment-194320914:52,Testability,log,logging,52,@kshakir was this fixed with your latest changes to logging?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/345#issuecomment-194320914
https://github.com/broadinstitute/cromwell/pull/346#issuecomment-166933815:28,Testability,test,test,28,Could be nice to also add a test in `WdlArrayTypeSpec` which already has some coercion unit tests.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/346#issuecomment-166933815
https://github.com/broadinstitute/cromwell/pull/346#issuecomment-166933815:92,Testability,test,tests,92,Could be nice to also add a test in `WdlArrayTypeSpec` which already has some coercion unit tests.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/346#issuecomment-166933815
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168850405:25,Availability,failure,failure,25,"I believe the one Travis failure is unrelated, an intermittent failure in SprayDockerRegistryApiClientSpec.scala that might be a GCR hiccup?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168850405
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168850405:63,Availability,failure,failure,63,"I believe the one Travis failure is unrelated, an intermittent failure in SprayDockerRegistryApiClientSpec.scala that might be a GCR hiccup?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168850405
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841:93,Deployability,Integrat,IntegrationTest,93,`SprayDockerRegistryApiClientSpec` is finicky. Should probably me marked as an `CromwellSpec.IntegrationTest`. It was already using `org.scalatest.concurrent.IntegrationPatience`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841:158,Deployability,Integrat,IntegrationPatience,158,`SprayDockerRegistryApiClientSpec` is finicky. Should probably me marked as an `CromwellSpec.IntegrationTest`. It was already using `org.scalatest.concurrent.IntegrationPatience`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841:93,Integrability,Integrat,IntegrationTest,93,`SprayDockerRegistryApiClientSpec` is finicky. Should probably me marked as an `CromwellSpec.IntegrationTest`. It was already using `org.scalatest.concurrent.IntegrationPatience`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841:158,Integrability,Integrat,IntegrationPatience,158,`SprayDockerRegistryApiClientSpec` is finicky. Should probably me marked as an `CromwellSpec.IntegrationTest`. It was already using `org.scalatest.concurrent.IntegrationPatience`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841
https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841:147,Performance,concurren,concurrent,147,`SprayDockerRegistryApiClientSpec` is finicky. Should probably me marked as an `CromwellSpec.IntegrationTest`. It was already using `org.scalatest.concurrent.IntegrationPatience`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/348#issuecomment-168885841
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169031832:28,Testability,test,test,28,"I'd like to see an optional test, similar to the other `GoogleCredentialFactorySpec` tests.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169031832
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169031832:85,Testability,test,tests,85,"I'd like to see an optional test, similar to the other `GoogleCredentialFactorySpec` tests.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169031832
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169059457:24,Testability,test,testing,24,"I'm willing to defer on testing, under our current mantra ""we'll get to full CI eventually"". Will let @Horneth decide for now. LGTM",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169059457
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667:125,Deployability,configurat,configuration,125,What about simply a unit test that verifies that it does (resp. doesn't) parse a correct (resp. wrong) conf file (wrt Google configuration) ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667:125,Modifiability,config,configuration,125,What about simply a unit test that verifies that it does (resp. doesn't) parse a correct (resp. wrong) conf file (wrt Google configuration) ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667:25,Testability,test,test,25,What about simply a unit test that verifies that it does (resp. doesn't) parse a correct (resp. wrong) conf file (wrt Google configuration) ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667:11,Usability,simpl,simply,11,What about simply a unit test that verifies that it does (resp. doesn't) parse a correct (resp. wrong) conf file (wrt Google configuration) ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169074667
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169106882:70,Modifiability,config,config,70,I like the tests - should make it harder to accidentally rebase/merge config incorrectly in the future. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169106882
https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169106882:11,Testability,test,tests,11,I like the tests - should make it harder to accidentally rebase/merge config incorrectly in the future. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/349#issuecomment-169106882
https://github.com/broadinstitute/cromwell/pull/351#issuecomment-169323204:138,Integrability,interface,interfaces,138,"Yes maybe I should have mentioned it when making the PR but this wan't really meant to be merged as is. I was playing around with the nio interfaces and this ticket seemed like a good candidate to try and use a GCS implementation of those interfaces which is why it ends up being here.; However IMO this would require at least a small tech talk to discuss if it's even worth going this way, and if yes there are a few technical implementation details about the paths for example that could be interesting to discuss too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/351#issuecomment-169323204
https://github.com/broadinstitute/cromwell/pull/351#issuecomment-169323204:239,Integrability,interface,interfaces,239,"Yes maybe I should have mentioned it when making the PR but this wan't really meant to be merged as is. I was playing around with the nio interfaces and this ticket seemed like a good candidate to try and use a GCS implementation of those interfaces which is why it ends up being here.; However IMO this would require at least a small tech talk to discuss if it's even worth going this way, and if yes there are a few technical implementation details about the paths for example that could be interesting to discuss too.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/351#issuecomment-169323204
https://github.com/broadinstitute/cromwell/pull/353#issuecomment-170925365:96,Deployability,update,updated,96,@scottfrazer @mcovarr this PR and Tyburn (please also check broadinstitute/tyburn#16) have been updated. There are now just two things to tidy up in WDL4S and a change in the WDL spec...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/353#issuecomment-170925365
https://github.com/broadinstitute/cromwell/pull/353#issuecomment-171037355:19,Modifiability,refactor,refactoring,19,:+1: delta the one refactoring suggestion,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/353#issuecomment-171037355
https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572:10,Availability,failure,failures,10,"Both test failures appear to be bogus, once @kshakir's work to tag the breaking tests as integration is complete the Travis builds should go green.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572
https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572:89,Deployability,integrat,integration,89,"Both test failures appear to be bogus, once @kshakir's work to tag the breaking tests as integration is complete the Travis builds should go green.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572
https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572:141,Energy Efficiency,green,green,141,"Both test failures appear to be bogus, once @kshakir's work to tag the breaking tests as integration is complete the Travis builds should go green.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572
https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572:89,Integrability,integrat,integration,89,"Both test failures appear to be bogus, once @kshakir's work to tag the breaking tests as integration is complete the Travis builds should go green.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572
https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572:5,Testability,test,test,5,"Both test failures appear to be bogus, once @kshakir's work to tag the breaking tests as integration is complete the Travis builds should go green.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572
https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572:80,Testability,test,tests,80,"Both test failures appear to be bogus, once @kshakir's work to tag the breaking tests as integration is complete the Travis builds should go green.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/354#issuecomment-169402572
https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938:38,Deployability,integrat,integration,38,"I'm fine with pushing this in without integration tests, assuming @tovanadler has manually tested. :+1: . Nominating @Horneth as second reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938
https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938:38,Integrability,integrat,integration,38,"I'm fine with pushing this in without integration tests, assuming @tovanadler has manually tested. :+1: . Nominating @Horneth as second reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938
https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938:50,Testability,test,tests,50,"I'm fine with pushing this in without integration tests, assuming @tovanadler has manually tested. :+1: . Nominating @Horneth as second reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938
https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938:91,Testability,test,tested,91,"I'm fine with pushing this in without integration tests, assuming @tovanadler has manually tested. :+1: . Nominating @Horneth as second reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/356#issuecomment-169420938
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511:70,Deployability,integrat,integration,70,"@mcovarr as first reviewer. Travis already seems configured to ignore integration tests, so no other changes appeared necessary for this temporary fix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511:70,Integrability,integrat,integration,70,"@mcovarr as first reviewer. Travis already seems configured to ignore integration tests, so no other changes appeared necessary for this temporary fix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511:49,Modifiability,config,configured,49,"@mcovarr as first reviewer. Travis already seems configured to ignore integration tests, so no other changes appeared necessary for this temporary fix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511:82,Testability,test,tests,82,"@mcovarr as first reviewer. Travis already seems configured to ignore integration tests, so no other changes appeared necessary for this temporary fix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169440511
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288:167,Deployability,integrat,integration,167,"Oh, and `sbt assembly` already had _all_ of its tests disabled by build.sbt, so @geoffjentry's request that ""when one checks out the code, sbt assembly not fail on an integration test"" holds true without any other modifications. :wink:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288:167,Integrability,integrat,integration,167,"Oh, and `sbt assembly` already had _all_ of its tests disabled by build.sbt, so @geoffjentry's request that ""when one checks out the code, sbt assembly not fail on an integration test"" holds true without any other modifications. :wink:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288:48,Testability,test,tests,48,"Oh, and `sbt assembly` already had _all_ of its tests disabled by build.sbt, so @geoffjentry's request that ""when one checks out the code, sbt assembly not fail on an integration test"" holds true without any other modifications. :wink:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288:179,Testability,test,test,179,"Oh, and `sbt assembly` already had _all_ of its tests disabled by build.sbt, so @geoffjentry's request that ""when one checks out the code, sbt assembly not fail on an integration test"" holds true without any other modifications. :wink:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441288
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877:49,Deployability,integrat,integration,49,"True about `sbt assembly`, but do we want to run integration tests by default with `sbt test`? Currently these are on by default and the `.travis.yml` is set up not to run them.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877:49,Integrability,integrat,integration,49,"True about `sbt assembly`, but do we want to run integration tests by default with `sbt test`? Currently these are on by default and the `.travis.yml` is set up not to run them.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877:61,Testability,test,tests,61,"True about `sbt assembly`, but do we want to run integration tests by default with `sbt test`? Currently these are on by default and the `.travis.yml` is set up not to run them.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877:88,Testability,test,test,88,"True about `sbt assembly`, but do we want to run integration tests by default with `sbt test`? Currently these are on by default and the `.travis.yml` is set up not to run them.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169441877
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078:165,Deployability,integrat,integration,165,"Good point of discussion. I defaulted to ""`sbt test` by default runs all tests, for now"". Will leave it up to whomever you recommend as second reviewer to decide if integration tests should be excluded from `sbt test` as part of this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078:165,Integrability,integrat,integration,165,"Good point of discussion. I defaulted to ""`sbt test` by default runs all tests, for now"". Will leave it up to whomever you recommend as second reviewer to decide if integration tests should be excluded from `sbt test` as part of this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078:47,Testability,test,test,47,"Good point of discussion. I defaulted to ""`sbt test` by default runs all tests, for now"". Will leave it up to whomever you recommend as second reviewer to decide if integration tests should be excluded from `sbt test` as part of this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078:73,Testability,test,tests,73,"Good point of discussion. I defaulted to ""`sbt test` by default runs all tests, for now"". Will leave it up to whomever you recommend as second reviewer to decide if integration tests should be excluded from `sbt test` as part of this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078:177,Testability,test,tests,177,"Good point of discussion. I defaulted to ""`sbt test` by default runs all tests, for now"". Will leave it up to whomever you recommend as second reviewer to decide if integration tests should be excluded from `sbt test` as part of this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078:212,Testability,test,test,212,"Good point of discussion. I defaulted to ""`sbt test` by default runs all tests, for now"". Will leave it up to whomever you recommend as second reviewer to decide if integration tests should be excluded from `sbt test` as part of this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169449078
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477:46,Deployability,integrat,integration,46,"Per the direction of the conversation on your integration testing doc, it sounds like there's a sentiment to disable integration (and maybe Docker) tests by default. . The wheel has chosen @scottfrazer but I suspect @geoffjentry may have some opinions here as well. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477:117,Deployability,integrat,integration,117,"Per the direction of the conversation on your integration testing doc, it sounds like there's a sentiment to disable integration (and maybe Docker) tests by default. . The wheel has chosen @scottfrazer but I suspect @geoffjentry may have some opinions here as well. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477:46,Integrability,integrat,integration,46,"Per the direction of the conversation on your integration testing doc, it sounds like there's a sentiment to disable integration (and maybe Docker) tests by default. . The wheel has chosen @scottfrazer but I suspect @geoffjentry may have some opinions here as well. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477:117,Integrability,integrat,integration,117,"Per the direction of the conversation on your integration testing doc, it sounds like there's a sentiment to disable integration (and maybe Docker) tests by default. . The wheel has chosen @scottfrazer but I suspect @geoffjentry may have some opinions here as well. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477:58,Testability,test,testing,58,"Per the direction of the conversation on your integration testing doc, it sounds like there's a sentiment to disable integration (and maybe Docker) tests by default. . The wheel has chosen @scottfrazer but I suspect @geoffjentry may have some opinions here as well. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477:148,Testability,test,tests,148,"Per the direction of the conversation on your integration testing doc, it sounds like there's a sentiment to disable integration (and maybe Docker) tests by default. . The wheel has chosen @scottfrazer but I suspect @geoffjentry may have some opinions here as well. :smile:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450477
https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450879:24,Testability,test,test,24,Note that I always just test via assembly because i'm too lazy to figure out the specific target I want so my opinionation might be lower than you suspect,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/357#issuecomment-169450879
https://github.com/broadinstitute/cromwell/pull/359#issuecomment-170019993:65,Security,authoriz,authorizes,65,"I was asked to modify all the services so that the /api endpoint authorizes users based on their membership in ldap (filrecloud registration). Those are the four new lines added to the end of the file. The other changes are to remove things that are already set as the defaults in the openidc-proxy, so there is no reason to be specifying them. You only need to specify values that are different from the defaults. . The defaults are visible here:. https://github.com/broadinstitute/openidc-baseimage/blob/master/run.sh. and here. https://github.com/broadinstitute/dockerfiles/blob/master/openidc-proxy/override.sh. I also noticed that cromwell and thurloe are the only ones that run on port 8000, rather than port 8080, so that is why you are having to specify the PROXY_URLs as they are non-standard. All the other services in firecloud run on port 8080.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/359#issuecomment-170019993
https://github.com/broadinstitute/cromwell/pull/359#issuecomment-170035498:124,Modifiability,config,config,124,"@lukwam re the port, the people setting up the firecloud environments can twiddle the port to be whatever they want via the config. It's not hardwired into cromwell.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/359#issuecomment-170035498
https://github.com/broadinstitute/cromwell/issues/360#issuecomment-172064962:27,Deployability,release,release,27,This should be in the next release,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/360#issuecomment-172064962
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170649787:309,Integrability,depend,depending,309,"The reason for this is that there are different GCSFileSystems with different ""roots"". `gcsFilesystem` is rooted to the the workflow gcs directory. `GcsOutputsFileSystem` is rooted to the output gcs directory where the outputs are to be copied.; To convert a string to a GCS path we need a gcsFIlesystem, but depending on the string we'll use a different filesystem (the source string path will use the file system rooted to the workflow directory and the destination path will use the filesystem rooted to the output directory).",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170649787
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170668783:13,Deployability,update,updated,13,@cjllanwarne updated,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170668783
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170674873:79,Availability,down,down,79,"@cjllanwarne @Horneth I'll just add that we're going to need to start slimming down WorkflowDescriptor and removing its coupling to Backend, so while if it's the only way to do something for now that's one thing but if it's a matter of how one skins the proverbial cat going another pat would be good",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170674873
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170674873:120,Modifiability,coupling,coupling,120,"@cjllanwarne @Horneth I'll just add that we're going to need to start slimming down WorkflowDescriptor and removing its coupling to Backend, so while if it's the only way to do something for now that's one thing but if it's a matter of how one skins the proverbial cat going another pat would be good",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170674873
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170675299:215,Integrability,depend,depend,215,"@cjllanwarne GCS is not backend specific, which is actually what makes it possible to use GCS on local backend.; We could extract the ""File system logic"" from the WorkflowDescriptor but anything related to GCS will depend on a workflow descriptor because of all the auth stuff",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170675299
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170675299:147,Testability,log,logic,147,"@cjllanwarne GCS is not backend specific, which is actually what makes it possible to use GCS on local backend.; We could extract the ""File system logic"" from the WorkflowDescriptor but anything related to GCS will depend on a workflow descriptor because of all the auth stuff",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170675299
https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170681519:120,Availability,down,down,120,"Not entirely sure I understand the gcsFilesystem in WorkflowDescriptor, but if everyone agrees that it's fine I'll pipe down. So, :+1: from me!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/361#issuecomment-170681519
https://github.com/broadinstitute/cromwell/pull/362#issuecomment-170090256:14,Deployability,update,updated,14,@mcovarr I've updated to report earlier,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/362#issuecomment-170090256
https://github.com/broadinstitute/cromwell/pull/362#issuecomment-170566228:36,Deployability,update,updated,36,@cjllanwarne @mcovarr code has been updated,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/362#issuecomment-170566228
https://github.com/broadinstitute/cromwell/pull/362#issuecomment-170628682:22,Deployability,update,updated,22,@mcovarr @cjllanwarne updated again,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/362#issuecomment-170628682
https://github.com/broadinstitute/cromwell/pull/363#issuecomment-170081954:38,Deployability,update,update,38,why not fix this more narrowly so the update of input expressions isn't broken for non-shards?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/363#issuecomment-170081954
https://github.com/broadinstitute/cromwell/pull/363#issuecomment-170125680:5,Deployability,update,updated,5,Okay updated again...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/363#issuecomment-170125680
https://github.com/broadinstitute/cromwell/pull/365#issuecomment-170286732:38,Performance,load,loading,38,"@kshakir From the PR note: ""currently loading in wdl4s as an unmanaged jar, that'll change prior to merging""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/365#issuecomment-170286732
https://github.com/broadinstitute/cromwell/pull/365#issuecomment-170287369:6,Deployability,update,updates,6,"Minor updates, then LGTM",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/365#issuecomment-170287369
https://github.com/broadinstitute/cromwell/pull/366#issuecomment-170382002:82,Testability,test,test,82,:+1: . I am curious though if there's any concern if the 403 change is due to the test doing something wrong. I'm also a little leery that this is tied to DSDEEPB-2361 somehow. If you think it might be can you make a note on that ticket regarding this code change?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/366#issuecomment-170382002
https://github.com/broadinstitute/cromwell/pull/367#issuecomment-170639638:44,Deployability,update,updated,44,"Also, that `hermes` command now needs to be updated for the context of wdl4s. I can do that though if there's a PR for it on wdl4s",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/367#issuecomment-170639638
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171043307:209,Modifiability,extend,extend,209,"`ThrowableWithErrors` is in `wdl4s`, or will be if/when https://github.com/broadinstitute/wdl4s/pull/3 is merged. We could put it in Cromwell too I guess but then the custom Exception class in wdl4s could not extend it which would make it more annoying to use in Cromwell.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171043307
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171066630:67,Integrability,wrap,wrapped,67,I assume the Blues have been made aware that successes will now be wrapped?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171066630
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:36,Availability,failure,failures,36,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:450,Availability,error,error,450,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:275,Deployability,update,update,275,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:21,Integrability,wrap,wrapped,21,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:222,Integrability,wrap,wrap,222,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:373,Integrability,wrap,wrap,373,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:259,Safety,risk,risky,259,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379:105,Security,validat,validate,105,So successes are not wrapped - only failures are (which the ticket was about). With the exception of the validate endpoint which has a special response format which would have been weird not updating.; It's easy enough to wrap the success too - It just feels risky too me to update the entire API responses format a week before firecloud goes live but if that's fine I can wrap the successes too and let them now. We should tell them anyway that the error format will change.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171069379
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171071369:51,Integrability,wrap,wrapping,51,Oh whoops never mind then. Agreed we should not be wrapping successes. :smile:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171071369
https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171075925:10,Integrability,wrap,wrapping,10,+1 to not wrapping successes. Also +1 to not disturbing the return values without telling blues ahead of time.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/368#issuecomment-171075925
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-170711740:89,Deployability,update,updates,89,"Just before I merge this PR, I will coordinate disabling the existing automatic database updates with @coreone",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-170711740
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-171434974:88,Availability,error,error,88,"@coreone Merge at will. If the database isn't updated, the new build will crash with an error containing the SQL that needs to be run. The paths to the scripts have also changed, so even if an old jenkins job tries to run the scripts manually, I suspect it would fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-171434974
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-171434974:46,Deployability,update,updated,46,"@coreone Merge at will. If the database isn't updated, the new build will crash with an error containing the SQL that needs to be run. The paths to the scripts have also changed, so even if an old jenkins job tries to run the scripts manually, I suspect it would fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-171434974
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-173391410:40,Deployability,update,updates,40,Should we refrain from making liquibase updates until this is merged ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-173391410
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-173437400:49,Deployability,update,update,49,"We can make it happen. We should schedule the PR update. I suspect if one were to touch the `changelog.xml` in develop, it would cause a merge conflict here in this PR, preventing the two changes from being _accidentally_ merged. I would need to rebase this branch on top of any other changes. Specifically, the new liquibase file would need to be moved, along with updating the moved `changelog.xml`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-173437400
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-173437400:33,Energy Efficiency,schedul,schedule,33,"We can make it happen. We should schedule the PR update. I suspect if one were to touch the `changelog.xml` in develop, it would cause a merge conflict here in this PR, preventing the two changes from being _accidentally_ merged. I would need to rebase this branch on top of any other changes. Specifically, the new liquibase file would need to be moved, along with updating the moved `changelog.xml`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-173437400
https://github.com/broadinstitute/cromwell/pull/371#issuecomment-175190695:0,Testability,Test,Tests,0,Tests fixed and conflicts re-resolved. Back to @coreone to merge when ready.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/371#issuecomment-175190695
https://github.com/broadinstitute/cromwell/issues/372#issuecomment-170980870:17,Availability,avail,available,17,Cromwell 0.16 is available now on Macs via `brew install cromwell`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/372#issuecomment-170980870
https://github.com/broadinstitute/cromwell/issues/372#issuecomment-170980870:49,Deployability,install,install,49,Cromwell 0.16 is available now on Macs via `brew install cromwell`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/372#issuecomment-170980870
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-171414380:15,Integrability,depend,depend,15,@slnovak It'll depend on how soon upcoming is for you :) Over the next few weeks there are a couple of broad products sitting on top of Cromwell going live so I expect the bug tickets to be coming in fast and furious. We've been discussing our direction after the dust settles there and one of the priorities will be community requests. We'd certainly welcome a PR but if you have the time to wait a month or so it should hopefully be something we could get to.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-171414380
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-253879748:14,Modifiability,config,config,14,I believe the config backend system in Cromwell 0.21+ now allows for everything that's asked for here.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-253879748
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712:21,Modifiability,config,config,21,"Much like the sample config presented in #472, the config backend system should allow for passing memory and cpu options something like this:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; Integer? docker_memory; Integer? docker_cpu; """"""; submit-docker = """"""docker run --rm ${ ""--memory "" + docker_memory } ${ ""--cpuset-cpu "" + docker_cpu } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. But environment variables are a bit trickier. There doesn't currently seem to be a nice way in WDL of composing a string like`-e key1=value1 -e key2=value2`. I've started working up a proposal over [here](https://github.com/broadinstitute/wdl/pull/84) for one way WDL might support this; feel free to chime in there! 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712:51,Modifiability,config,config,51,"Much like the sample config presented in #472, the config backend system should allow for passing memory and cpu options something like this:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; Integer? docker_memory; Integer? docker_cpu; """"""; submit-docker = """"""docker run --rm ${ ""--memory "" + docker_memory } ${ ""--cpuset-cpu "" + docker_cpu } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. But environment variables are a bit trickier. There doesn't currently seem to be a nice way in WDL of composing a string like`-e key1=value1 -e key2=value2`. I've started working up a proposal over [here](https://github.com/broadinstitute/wdl/pull/84) for one way WDL might support this; feel free to chime in there! 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712:232,Modifiability,config,config,232,"Much like the sample config presented in #472, the config backend system should allow for passing memory and cpu options something like this:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; Integer? docker_memory; Integer? docker_cpu; """"""; submit-docker = """"""docker run --rm ${ ""--memory "" + docker_memory } ${ ""--cpuset-cpu "" + docker_cpu } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. But environment variables are a bit trickier. There doesn't currently seem to be a nice way in WDL of composing a string like`-e key1=value1 -e key2=value2`. I've started working up a proposal over [here](https://github.com/broadinstitute/wdl/pull/84) for one way WDL might support this; feel free to chime in there! 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712:239,Modifiability,Config,ConfigBackendLifecycleActorFactory,239,"Much like the sample config presented in #472, the config backend system should allow for passing memory and cpu options something like this:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; Integer? docker_memory; Integer? docker_cpu; """"""; submit-docker = """"""docker run --rm ${ ""--memory "" + docker_memory } ${ ""--cpuset-cpu "" + docker_cpu } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. But environment variables are a bit trickier. There doesn't currently seem to be a nice way in WDL of composing a string like`-e key1=value1 -e key2=value2`. I've started working up a proposal over [here](https://github.com/broadinstitute/wdl/pull/84) for one way WDL might support this; feel free to chime in there! 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712:276,Modifiability,config,config,276,"Much like the sample config presented in #472, the config backend system should allow for passing memory and cpu options something like this:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; Integer? docker_memory; Integer? docker_cpu; """"""; submit-docker = """"""docker run --rm ${ ""--memory "" + docker_memory } ${ ""--cpuset-cpu "" + docker_cpu } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. But environment variables are a bit trickier. There doesn't currently seem to be a nice way in WDL of composing a string like`-e key1=value1 -e key2=value2`. I've started working up a proposal over [here](https://github.com/broadinstitute/wdl/pull/84) for one way WDL might support this; feel free to chime in there! 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712:592,Modifiability,variab,variables,592,"Much like the sample config presented in #472, the config backend system should allow for passing memory and cpu options something like this:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; Integer? docker_memory; Integer? docker_cpu; """"""; submit-docker = """"""docker run --rm ${ ""--memory "" + docker_memory } ${ ""--cpuset-cpu "" + docker_cpu } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. But environment variables are a bit trickier. There doesn't currently seem to be a nice way in WDL of composing a string like`-e key1=value1 -e key2=value2`. I've started working up a proposal over [here](https://github.com/broadinstitute/wdl/pull/84) for one way WDL might support this; feel free to chime in there! 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-271619712
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410:475,Availability,echo,echo,475,"Given a Local config like:. ```; runtime-attributes = """"""; String? docker; String? docker_user; String? docker_env; """""". submit-docker = """"""docker run ${docker_env} --rm ${""--user "" + docker_user} -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; ```. Docker environment variables could be passed with a WDL like:; ```; task build_env {; Array[String] kvs = [""k1=v1"", ""k2=v2"", ""k3=v3""]; Array[String] prefixed = prefix(""-e "", kvs); command {; echo ""${sep=' ' prefixed}""; }; output {; String out = read_string(stdout()); }; }. task docker_task {; String docker_env. command {; echo $k1; echo $k2; echo $k3; }. runtime {; docker: ""ubuntu:latest""; docker_env: ""${docker_env}""; }. output {; Array[String] out = read_lines(stdout()); }; }. workflow w {; call build_env; call docker_task { input: docker_env = build_env.out }; output {; Array[String] out = docker_task.out; }; }; ```. Having to use a separate task to stringify an array of String kv environment pairs is a little clunky, but it looks like the way the `${sep=' '...}` expansion works currently requires this to be done in the command section.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410:608,Availability,echo,echo,608,"Given a Local config like:. ```; runtime-attributes = """"""; String? docker; String? docker_user; String? docker_env; """""". submit-docker = """"""docker run ${docker_env} --rm ${""--user "" + docker_user} -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; ```. Docker environment variables could be passed with a WDL like:; ```; task build_env {; Array[String] kvs = [""k1=v1"", ""k2=v2"", ""k3=v3""]; Array[String] prefixed = prefix(""-e "", kvs); command {; echo ""${sep=' ' prefixed}""; }; output {; String out = read_string(stdout()); }; }. task docker_task {; String docker_env. command {; echo $k1; echo $k2; echo $k3; }. runtime {; docker: ""ubuntu:latest""; docker_env: ""${docker_env}""; }. output {; Array[String] out = read_lines(stdout()); }; }. workflow w {; call build_env; call docker_task { input: docker_env = build_env.out }; output {; Array[String] out = docker_task.out; }; }; ```. Having to use a separate task to stringify an array of String kv environment pairs is a little clunky, but it looks like the way the `${sep=' '...}` expansion works currently requires this to be done in the command section.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410:618,Availability,echo,echo,618,"Given a Local config like:. ```; runtime-attributes = """"""; String? docker; String? docker_user; String? docker_env; """""". submit-docker = """"""docker run ${docker_env} --rm ${""--user "" + docker_user} -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; ```. Docker environment variables could be passed with a WDL like:; ```; task build_env {; Array[String] kvs = [""k1=v1"", ""k2=v2"", ""k3=v3""]; Array[String] prefixed = prefix(""-e "", kvs); command {; echo ""${sep=' ' prefixed}""; }; output {; String out = read_string(stdout()); }; }. task docker_task {; String docker_env. command {; echo $k1; echo $k2; echo $k3; }. runtime {; docker: ""ubuntu:latest""; docker_env: ""${docker_env}""; }. output {; Array[String] out = read_lines(stdout()); }; }. workflow w {; call build_env; call docker_task { input: docker_env = build_env.out }; output {; Array[String] out = docker_task.out; }; }; ```. Having to use a separate task to stringify an array of String kv environment pairs is a little clunky, but it looks like the way the `${sep=' '...}` expansion works currently requires this to be done in the command section.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410:628,Availability,echo,echo,628,"Given a Local config like:. ```; runtime-attributes = """"""; String? docker; String? docker_user; String? docker_env; """""". submit-docker = """"""docker run ${docker_env} --rm ${""--user "" + docker_user} -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; ```. Docker environment variables could be passed with a WDL like:; ```; task build_env {; Array[String] kvs = [""k1=v1"", ""k2=v2"", ""k3=v3""]; Array[String] prefixed = prefix(""-e "", kvs); command {; echo ""${sep=' ' prefixed}""; }; output {; String out = read_string(stdout()); }; }. task docker_task {; String docker_env. command {; echo $k1; echo $k2; echo $k3; }. runtime {; docker: ""ubuntu:latest""; docker_env: ""${docker_env}""; }. output {; Array[String] out = read_lines(stdout()); }; }. workflow w {; call build_env; call docker_task { input: docker_env = build_env.out }; output {; Array[String] out = docker_task.out; }; }; ```. Having to use a separate task to stringify an array of String kv environment pairs is a little clunky, but it looks like the way the `${sep=' '...}` expansion works currently requires this to be done in the command section.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410:14,Modifiability,config,config,14,"Given a Local config like:. ```; runtime-attributes = """"""; String? docker; String? docker_user; String? docker_env; """""". submit-docker = """"""docker run ${docker_env} --rm ${""--user "" + docker_user} -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; ```. Docker environment variables could be passed with a WDL like:; ```; task build_env {; Array[String] kvs = [""k1=v1"", ""k2=v2"", ""k3=v3""]; Array[String] prefixed = prefix(""-e "", kvs); command {; echo ""${sep=' ' prefixed}""; }; output {; String out = read_string(stdout()); }; }. task docker_task {; String docker_env. command {; echo $k1; echo $k2; echo $k3; }. runtime {; docker: ""ubuntu:latest""; docker_env: ""${docker_env}""; }. output {; Array[String] out = read_lines(stdout()); }; }. workflow w {; call build_env; call docker_task { input: docker_env = build_env.out }; output {; Array[String] out = docker_task.out; }; }; ```. Having to use a separate task to stringify an array of String kv environment pairs is a little clunky, but it looks like the way the `${sep=' '...}` expansion works currently requires this to be done in the command section.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410
https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410:303,Modifiability,variab,variables,303,"Given a Local config like:. ```; runtime-attributes = """"""; String? docker; String? docker_user; String? docker_env; """""". submit-docker = """"""docker run ${docker_env} --rm ${""--user "" + docker_user} -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; ```. Docker environment variables could be passed with a WDL like:; ```; task build_env {; Array[String] kvs = [""k1=v1"", ""k2=v2"", ""k3=v3""]; Array[String] prefixed = prefix(""-e "", kvs); command {; echo ""${sep=' ' prefixed}""; }; output {; String out = read_string(stdout()); }; }. task docker_task {; String docker_env. command {; echo $k1; echo $k2; echo $k3; }. runtime {; docker: ""ubuntu:latest""; docker_env: ""${docker_env}""; }. output {; Array[String] out = read_lines(stdout()); }; }. workflow w {; call build_env; call docker_task { input: docker_env = build_env.out }; output {; Array[String] out = docker_task.out; }; }; ```. Having to use a separate task to stringify an array of String kv environment pairs is a little clunky, but it looks like the way the `${sep=' '...}` expansion works currently requires this to be done in the command section.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/375#issuecomment-273916410
https://github.com/broadinstitute/cromwell/pull/376#issuecomment-171254307:63,Energy Efficiency,green,green,63,HipChat chooses @scottfrazer and @Horneth because they show as green,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/376#issuecomment-171254307
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171410571:75,Security,encrypt,encryption,75,"Based on your description (i.e. not on actually testing this), I think the encryption key will need to be a 256-bit key in Base64 encoding. I've been using `base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""` to be a ""not a real value"".",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171410571
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171410571:164,Security,encrypt,encryption-key,164,"Based on your description (i.e. not on actually testing this), I think the encryption key will need to be a 256-bit key in Base64 encoding. I've been using `base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""` to be a ""not a real value"".",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171410571
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171410571:48,Testability,test,testing,48,"Based on your description (i.e. not on actually testing this), I think the encryption key will need to be a 256-bit key in Base64 encoding. I've been using `base64-encryption-key: ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""` to be a ""not a real value"".",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171410571
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171465923:57,Security,encrypt,encryption,57,":+1: minding Chris comment that ""not a real value"" as an encryption key might break cromwell. So either wait for devops to put the real key before merging or change it to some dummy `""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=""`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171465923
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666354:97,Testability,test,tests,97,"Also, since this is resurrecting a feature we haven't used for a while, have we actually got any tests for this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666354
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666835:193,Availability,down,downloads,193,"On the servers where this will be used, . > Did you install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files?; > http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666835
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666835:208,Availability,down,download-,208,"On the servers where this will be used, . > Did you install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files?; > http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666835
https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666835:52,Deployability,install,install,52,"On the servers where this will be used, . > Did you install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files?; > http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/377#issuecomment-171666835
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171663892:72,Testability,test,test,72,"Except a few minor grumbles, this looks good. Assuming there's a Tyburn test which passes stdout() and stderr() to subsequent tasks (and that this change has passed them!): :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171663892
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171664546:32,Testability,test,test,32,"I've got the WDL for the Tyburn test, I'll open a PR over there for it",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171664546
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171683730:213,Testability,log,log,213,Isn't `gs://path/to/call` already doing to contain the full workflow UUID (and a couple of Rawls UUIDs for good measure)? I'm thinking we could do away with the `e6236763` bit in `gs://path/to/call/e6236763-hello.log`,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171683730
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171690771:104,Testability,test,test,104,"Hopefully the workflow ID prefix can be removed from the filename, and I too would like to see a Tyburn test to demonstrate that these files are suitable replacements for the output we were capturing previously. Delta that :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171690771
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171691530:151,Testability,log,log,151,"@mcovarr you're right... the more real-ish paths would be. ```; gs://<executions>/hello/e6236763-c518-41d0-9688-432549a8bf7c/call-hello/e6236763-hello.log; ```. I hear that people will be copying these files into a single directory, so we shouldn't clobber files. Having the workflow ID in the filename will make it so logs of multiple workflows can exist in a single directory. If that's not a use case we're trying to solve right now then I'm all for removing the short ID from the filename.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171691530
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171691530:319,Testability,log,logs,319,"@mcovarr you're right... the more real-ish paths would be. ```; gs://<executions>/hello/e6236763-c518-41d0-9688-432549a8bf7c/call-hello/e6236763-hello.log; ```. I hear that people will be copying these files into a single directory, so we shouldn't clobber files. Having the workflow ID in the filename will make it so logs of multiple workflows can exist in a single directory. If that's not a use case we're trying to solve right now then I'm all for removing the short ID from the filename.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171691530
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171695991:189,Usability,clear,clear,189,"OK, I was assuming all the copying would be intra-workflow and not inter-workflow, but that might not be a correct assumption. The ticket does say the name shouldn't be a UUID but it's not clear what the name _should_ be. Perhaps we should ask ops exactly how they'd like these names to look.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171695991
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171758540:64,Deployability,update,updated,64,@mcovarr https://github.com/broadinstitute/wdl4s/pull/6. Also I updated the code in this PR,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171758540
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171776989:32,Testability,log,log,32,"@kcibul e.g. `callName-2-stdout.log` Though there are no tests for this specifically, I can probably add one soon",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171776989
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171776989:57,Testability,test,tests,57,"@kcibul e.g. `callName-2-stdout.log` Though there are no tests for this specifically, I can probably add one soon",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-171776989
https://github.com/broadinstitute/cromwell/pull/378#issuecomment-173255935:29,Testability,test,test,29,:+1: delta the commented out test,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/378#issuecomment-173255935
https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172017111:100,Deployability,update,updates,100,_Side note: Hoping our PO prioritizes testing soon. We're about to cross the 70% threshold._. Minor updates and then :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172017111
https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172017111:38,Testability,test,testing,38,_Side note: Hoping our PO prioritizes testing soon. We're about to cross the 70% threshold._. Minor updates and then :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172017111
https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172087798:29,Testability,test,testing,29,"Another vote for prioritized testing, though the increase in test coverage wouldn't automatically be reflected here.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172087798
https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172087798:61,Testability,test,test,61,"Another vote for prioritized testing, though the increase in test coverage wouldn't automatically be reflected here.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172087798
https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172091472:8,Testability,test,test,8,"Added a test, it doesn't really test the full bug fix but at least that we throw `CromwellFatalException`s when a retry exhausts all its tries.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172091472
https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172091472:32,Testability,test,test,32,"Added a test, it doesn't really test the full bug fix but at least that we throw `CromwellFatalException`s when a retry exhausts all its tries.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/386#issuecomment-172091472
https://github.com/broadinstitute/cromwell/pull/389#issuecomment-173351761:61,Modifiability,extend,extended,61,"By the way, there are 2 `var`s in this PR, this is because I extended the Java `ExponentialBackoff.Builder` class to add the initial gap, and thought it would be better to keep the same ""Java"" style it already has (set/get).; If people fell the urge to scream please do so now :p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/389#issuecomment-173351761
https://github.com/broadinstitute/cromwell/pull/390#issuecomment-173585608:337,Modifiability,refactor,refactoring,337,"@francares The backend call actor sends the call to a backend for execution. The FinalCall actor runs tidy-up code locally (i.e. inside cromwell) at the end of an entire workflow (for now - the nice thing about having this in the actor ecosystem is that it's easy to move these wherever and whenever we want). This change is mainly just refactoring of a Future into an explicit actor, so that we can add more easily (do you have access to the Jira backlog? See issue 2542). Your second comment sound ominous... could you elaborate?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/390#issuecomment-173585608
https://github.com/broadinstitute/cromwell/pull/390#issuecomment-173585608:429,Security,access,access,429,"@francares The backend call actor sends the call to a backend for execution. The FinalCall actor runs tidy-up code locally (i.e. inside cromwell) at the end of an entire workflow (for now - the nice thing about having this in the actor ecosystem is that it's easy to move these wherever and whenever we want). This change is mainly just refactoring of a Future into an explicit actor, so that we can add more easily (do you have access to the Jira backlog? See issue 2542). Your second comment sound ominous... could you elaborate?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/390#issuecomment-173585608
https://github.com/broadinstitute/cromwell/pull/390#issuecomment-173695801:133,Modifiability,layers,layers,133,"@francares Oh, I think I see what you're saying - don't worry, if you look at the two *_FinalCallActor_s, they're very (_very_) thin layers around the base trait. . So, it shouldn't be a big issue to incorporate this change when you come to merge. Btw, those two are both already FSM...?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/390#issuecomment-173695801
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173733834:606,Safety,Abort,Aborting,606,"Hi @dgtester, thanks for this! . A few tidbits after a quick scan:; - In general Future is preferred over a raw Thread just because it plays nicer in the scala ecosystem; - Despite the fact that we do exactly this in a few places (bad us), you're really not supposed to be blocking on threads inside of actors - it has the potential to really gum up the works.; - The actor already has a notion of an internal state (NotRunning, Done, etc) that you should be able to leverage here. For instance (and I'm really making this up as I go along, so it's entirely likely to be not a good idea) you could have an Aborting state and when in that state it's waiting for the signal that currently is triggering the mutation on isDone",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173733834
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173748643:366,Availability,avail,available,366,"Yeah - It would be great to play within actors but I'm not sure how much of that's really possible within a shutdown hook. Here are replies to your bullets:; - The JVM shutdown API only takes a Thread, not a Future, so we don't really have a choice what to give it. I could use Scala's ShutdownHookThread if you like but I don't think there's anything like a Future available.; - This doesn't actually block the actor. All that happens in the actor is that the shutdown hook gets configured.; - I agree actors would be nice but delaying shutdown is inherently synchronous - since as soon as that thread returns then the JVM will disappear. If there's another way to get the current state other than my 'done' variable that might be nice though. Do you know of one?. All that's just AFAIK though. Am I missing anything?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173748643
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173748643:480,Modifiability,config,configured,480,"Yeah - It would be great to play within actors but I'm not sure how much of that's really possible within a shutdown hook. Here are replies to your bullets:; - The JVM shutdown API only takes a Thread, not a Future, so we don't really have a choice what to give it. I could use Scala's ShutdownHookThread if you like but I don't think there's anything like a Future available.; - This doesn't actually block the actor. All that happens in the actor is that the shutdown hook gets configured.; - I agree actors would be nice but delaying shutdown is inherently synchronous - since as soon as that thread returns then the JVM will disappear. If there's another way to get the current state other than my 'done' variable that might be nice though. Do you know of one?. All that's just AFAIK though. Am I missing anything?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173748643
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173748643:709,Modifiability,variab,variable,709,"Yeah - It would be great to play within actors but I'm not sure how much of that's really possible within a shutdown hook. Here are replies to your bullets:; - The JVM shutdown API only takes a Thread, not a Future, so we don't really have a choice what to give it. I could use Scala's ShutdownHookThread if you like but I don't think there's anything like a Future available.; - This doesn't actually block the actor. All that happens in the actor is that the shutdown hook gets configured.; - I agree actors would be nice but delaying shutdown is inherently synchronous - since as soon as that thread returns then the JVM will disappear. If there's another way to get the current state other than my 'done' variable that might be nice though. Do you know of one?. All that's just AFAIK though. Am I missing anything?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173748643
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173967513:55,Availability,down,down,55,"There are use cases where we'd want to be able to shut down a Cromwell instance without stopping running jobs. Notably, we want to redeploy without interrupting any long-running tasks (Cromwell can then pick back up where it left off when it restarts). I think we should make this optional.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173967513
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173969537:15,Safety,Abort,Abort,15,"Be aware that ""Abort"" is only functional if you're using the JesBackend in your cromwell.conf",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173969537
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173971121:77,Modifiability,config,config,77,@cjllanwarne - good points about having it optional. I'll look into adding a config option and only running this code if they specify Jes as the backend and also abort.jobs.on.terminate (or whatever it should be called),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173971121
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173971121:162,Safety,abort,abort,162,@cjllanwarne - good points about having it optional. I'll look into adding a config option and only running this code if they specify Jes as the backend and also abort.jobs.on.terminate (or whatever it should be called),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-173971121
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-174198348:113,Integrability,message,message,113,"@dgtester I wouldn't avoid the scala shutdown hook if it makes sense (making this up as I go, but e.g. sending a message to WorkflowActor which then propagates outward), there've been a handful of things that I've been meaning to add to a hook anyways so there'll be one sooner or later anyways",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-174198348
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-174198348:21,Safety,avoid,avoid,21,"@dgtester I wouldn't avoid the scala shutdown hook if it makes sense (making this up as I go, but e.g. sending a message to WorkflowActor which then propagates outward), there've been a handful of things that I've been meaning to add to a hook anyways so there'll be one sooner or later anyways",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-174198348
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175077183:13,Deployability,configurat,configuration,13,I placed the configuration option into backend/abortJobsOnTerminate. If you guys want me to move or rename it to something else I'm happy to.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175077183
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175077183:13,Modifiability,config,configuration,13,I placed the configuration option into backend/abortJobsOnTerminate. If you guys want me to move or rename it to something else I'm happy to.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175077183
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175077183:47,Safety,abort,abortJobsOnTerminate,47,I placed the configuration option into backend/abortJobsOnTerminate. If you guys want me to move or rename it to something else I'm happy to.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175077183
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175717937:23,Energy Efficiency,schedul,schedule,23,"To stick to our launch schedule for the GATK-aaS alpha, I'd really like to see this functionality (enable Cromwell server to treat SIGINT as abort) go in this week. . Is that going to be feasible? Who should David sync with to figure out how best to do it?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175717937
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175717937:141,Safety,abort,abort,141,"To stick to our launch schedule for the GATK-aaS alpha, I'd really like to see this functionality (enable Cromwell server to treat SIGINT as abort) go in this week. . Is that going to be feasible? Who should David sync with to figure out how best to do it?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175717937
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175780493:16,Usability,clear,cleared,16,"OK, this is now cleared to merge pending squash and rebase.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-175780493
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-177668094:323,Performance,perform,performs,323,"I posted at the [following link](https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177665209), a recommendation to turn the `LocalBackend.scala` into a finite-state machine (FSM) as well - besides `WorkflowManagerActor` in PR https://github.com/broadinstitute/cromwell/pull/413 - and catch when the script performs a `SIGINT`:. https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177665209. ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-177668094
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-177691924:129,Performance,load,load-balancing,129,"That will definitely allow for greater flexibility of distributed Cromwell architectures, making it possible to have interactive load-balancing and performing modifications on running workflows. Very cool indeed and looking forward with excited anticipation :) You guys are doing amazing work!. Many thanks,; ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-177691924
https://github.com/broadinstitute/cromwell/pull/397#issuecomment-177691924:148,Performance,perform,performing,148,"That will definitely allow for greater flexibility of distributed Cromwell architectures, making it possible to have interactive load-balancing and performing modifications on running workflows. Very cool indeed and looking forward with excited anticipation :) You guys are doing amazing work!. Many thanks,; ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/397#issuecomment-177691924
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:160,Deployability,integrat,integration,160,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:216,Deployability,integrat,integration,216,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:160,Integrability,integrat,integration,160,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:216,Integrability,integrat,integration,216,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:29,Testability,test,testing,29,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:59,Testability,test,test,59,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:76,Testability,test,test-only,76,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:172,Testability,test,tests,172,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:228,Testability,test,test-only,228,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505:319,Testability,test,test-only,319,"Note for reviewers verifying testing changes: Travis, `sbt test`, and `sbt 'test-only cromwell.engine.db.slick.SlickDataAccessSpec'` no longer run the database integration tests. One must use either:. ``` bash; sbt 'integration:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. or:. ``` bash; sbt 'alltests:test-only cromwell.engine.db.slick.SlickDataAccessSpec'; ```. @cjllanwarne First reviewer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/398#issuecomment-173965505
https://github.com/broadinstitute/cromwell/pull/399#issuecomment-174653940:131,Deployability,update,updated,131,"@francares @geoffjentry I'm going to close this version of the PR. The comments are all heading to the other PR and Master will be updated in about a week anyway when we publish 0.17. . At that point, the Master PR will essentially be equivalent to this one.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/399#issuecomment-174653940
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174084987:98,Integrability,contract,contract,98,"@cjllanwarne Hey Chris..in reference to your question from the previous PR.. checkout the Backend contract defined [here](https://github.com/broadinstitute/cromwell/blob/pluggable_backends/cromwell-backend/src/main/scala/cromwell/backend/BackendActor.scala). We'll need the individual backends to implement that contract, for instance how it's been done to [LocalBackend](https://github.com/broadinstitute/cromwell/blob/pluggable_backends/cromwell-backend/src/main/scala/cromwell/backend/provider/local/LocalBackend.scala). The older methods, such as adjustInputPaths() etc. can be clubbed together in, say, prepare() step. If you think we'll need more methods that can be defined in the BackendActor which are generic enough, please let us know.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174084987
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174084987:312,Integrability,contract,contract,312,"@cjllanwarne Hey Chris..in reference to your question from the previous PR.. checkout the Backend contract defined [here](https://github.com/broadinstitute/cromwell/blob/pluggable_backends/cromwell-backend/src/main/scala/cromwell/backend/BackendActor.scala). We'll need the individual backends to implement that contract, for instance how it's been done to [LocalBackend](https://github.com/broadinstitute/cromwell/blob/pluggable_backends/cromwell-backend/src/main/scala/cromwell/backend/provider/local/LocalBackend.scala). The older methods, such as adjustInputPaths() etc. can be clubbed together in, say, prepare() step. If you think we'll need more methods that can be defined in the BackendActor which are generic enough, please let us know.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174084987
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174085300:18,Safety,risk,risk,18,@gauravs90 at the risk if putting words in his mouth I think he was wondering to what extent this is just moving existing code around vs sweeping changes. IOW is this a 5 min change or a 5 day change?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174085300
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174085760:90,Integrability,depend,dependencies,90,"@cjllanwarne On a high level, you can use Intellij to create a new scala project, add the dependencies (wdl4s and cromwell-backend) in the build.sbt from Broad's artefactory repository, copy the JES code folder from develop to this new project, modify the JesBackend to extend from BackendActor, honor the subsequent intellij warnings to implement the abstract methods, and done. The CallActor will control the flow of the backend, going from prepare() -> execute() -> cleanUp() -> stop() etc..",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174085760
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174085760:270,Modifiability,extend,extend,270,"@cjllanwarne On a high level, you can use Intellij to create a new scala project, add the dependencies (wdl4s and cromwell-backend) in the build.sbt from Broad's artefactory repository, copy the JES code folder from develop to this new project, modify the JesBackend to extend from BackendActor, honor the subsequent intellij warnings to implement the abstract methods, and done. The CallActor will control the flow of the backend, going from prepare() -> execute() -> cleanUp() -> stop() etc..",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174085760
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174086368:342,Integrability,interface,interface,342,"@geoffjentry I'm not sure if it's a 5 min change, but surely it's not a thing for 5 days. We are still working on some of the caching behaviors (we are still not clear on that yet).. and that's why a face-to-face with you guys will help us in understanding the implications of some of the refactoring. The change to implement the new backend interface in it's own will not be much, but the some functionalities like caching may still be lacking as of right now.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174086368
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174086368:289,Modifiability,refactor,refactoring,289,"@geoffjentry I'm not sure if it's a 5 min change, but surely it's not a thing for 5 days. We are still working on some of the caching behaviors (we are still not clear on that yet).. and that's why a face-to-face with you guys will help us in understanding the implications of some of the refactoring. The change to implement the new backend interface in it's own will not be much, but the some functionalities like caching may still be lacking as of right now.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174086368
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174086368:162,Usability,clear,clear,162,"@geoffjentry I'm not sure if it's a 5 min change, but surely it's not a thing for 5 days. We are still working on some of the caching behaviors (we are still not clear on that yet).. and that's why a face-to-face with you guys will help us in understanding the implications of some of the refactoring. The change to implement the new backend interface in it's own will not be much, but the some functionalities like caching may still be lacking as of right now.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174086368
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174210135:165,Security,secur,security,165,"@scottfrazer @francares @geoffjentry @kcibul . The choice of Develop was deliberate. If we review these changes vs master we'll only give ourselves a false sense of security w.r.t the real state of the merge. As I said before, I'm most worried about the divergence between our two branches, not just the implementation diff between this branch and Master. Personally I would address any existing comments and close this version of the PR. But whichever way we go, I recommend against leaving 2 PRs open for the same change at the same time.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174210135
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174213137:391,Availability,robust,robust,391,"@gauravs90 @geoffjentry ; Re JES Backend - there's a _lot_ of hidden complexity in the JES backend that I think could quite easily end up being more than 5 days work to re-implement under another workflow runner. We currently have a Master branch which lets us run hundreds of Genomes-on-the-Cloud jobs concurrently in JES. If this merge goes ahead before the JES backend is made (and is as robust as it currently exists), we LOSE that ability. I don't think we should underestimate this task.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174213137
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174213137:303,Performance,concurren,concurrently,303,"@gauravs90 @geoffjentry ; Re JES Backend - there's a _lot_ of hidden complexity in the JES backend that I think could quite easily end up being more than 5 days work to re-implement under another workflow runner. We currently have a Master branch which lets us run hundreds of Genomes-on-the-Cloud jobs concurrently in JES. If this merge goes ahead before the JES backend is made (and is as robust as it currently exists), we LOSE that ability. I don't think we should underestimate this task.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174213137
https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174601136:217,Availability,down,down,217,"@francares Definitely - the key though is it'll still need to eventually be rebased on top of develop. There are more than one ways to skin this cat but one possibility is that when you're ready you could squash this down to one commit (or some other smaller number) and then rebase those on top of develop, handing the differences there.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/401#issuecomment-174601136
https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174547479:74,Security,validat,validate,74,"@cjllanwarne @scottfrazer Note that I removed the deprecation notice from validate. While the current form wouldn't be long for this world we know that it'll reappear w/ slightly different functionality. Instead of removing it and re-adding the endpoint IMO we might as well leave it here (e.g. in the future it wouldn't be a wdl validation but just a workflow validation - whether that be wdl, cwl, etc - in the context of that cromwell jar)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174547479
https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174547479:330,Security,validat,validation,330,"@cjllanwarne @scottfrazer Note that I removed the deprecation notice from validate. While the current form wouldn't be long for this world we know that it'll reappear w/ slightly different functionality. Instead of removing it and re-adding the endpoint IMO we might as well leave it here (e.g. in the future it wouldn't be a wdl validation but just a workflow validation - whether that be wdl, cwl, etc - in the context of that cromwell jar)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174547479
https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174547479:361,Security,validat,validation,361,"@cjllanwarne @scottfrazer Note that I removed the deprecation notice from validate. While the current form wouldn't be long for this world we know that it'll reappear w/ slightly different functionality. Instead of removing it and re-adding the endpoint IMO we might as well leave it here (e.g. in the future it wouldn't be a wdl validation but just a workflow validation - whether that be wdl, cwl, etc - in the context of that cromwell jar)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174547479
https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174552313:44,Deployability,release,release,44,"@cjllanwarne My plan was following the next release I'd make the change in develop, so 2 releases from now",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174552313
https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174552313:89,Deployability,release,releases,89,"@cjllanwarne My plan was following the next release I'd make the change in develop, so 2 releases from now",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/402#issuecomment-174552313
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109:182,Availability,echo,echo,182,"I think this is actually a separate problem w.r.t. how cromwell constructs its script file. If you look in your GCS folder for the exec.sh, you'll probably see something like:. ```; echo hello && exit 1; cat $? > rc.txt; ```. Although there's no error message returned via the REST api, if you look in the server logs I suspect you'll see something along the lines of ""rc file not found""?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109:246,Availability,error,error,246,"I think this is actually a separate problem w.r.t. how cromwell constructs its script file. If you look in your GCS folder for the exec.sh, you'll probably see something like:. ```; echo hello && exit 1; cat $? > rc.txt; ```. Although there's no error message returned via the REST api, if you look in the server logs I suspect you'll see something along the lines of ""rc file not found""?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109:252,Integrability,message,message,252,"I think this is actually a separate problem w.r.t. how cromwell constructs its script file. If you look in your GCS folder for the exec.sh, you'll probably see something like:. ```; echo hello && exit 1; cat $? > rc.txt; ```. Although there's no error message returned via the REST api, if you look in the server logs I suspect you'll see something along the lines of ""rc file not found""?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109:313,Testability,log,logs,313,"I think this is actually a separate problem w.r.t. how cromwell constructs its script file. If you look in your GCS folder for the exec.sh, you'll probably see something like:. ```; echo hello && exit 1; cat $? > rc.txt; ```. Although there's no error message returned via the REST api, if you look in the server logs I suspect you'll see something along the lines of ""rc file not found""?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174693109
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363:337,Availability,echo,echo,337,"Hi Will,. Try it without the `&& exit 1` portion, as I feel you are exiting before it can complete the workflow. For instance I ran the following code without the Docker portion on a cluster, and it worked. Below are all the steps for it:. 1) The wdl file:. ``` Bash; $ cat error_continue.wdl; task hello {. String addressee. command {; echo ""Hello ${addressee}!""; }. output {; String salutation = read_string(stdout()); }. }. workflow w {; call hello; }; ```. 2) The json inputs file:. ``` Bash; $ java -jar cromwell.jar inputs error_continue.wdl; {; ""w.hello.addressee"": ""String""; }; $ java -jar cromwell.jar inputs error_continue.wdl > error_continue.json; $; ```. 3) And then I ran it:. ``` Bash; $ java -jar cromwell.jar run error_continue.wdl error_continue.json; [2016-01-25 18:25:31,77] [info] RUN sub-command; [2016-01-25 18:25:31,91] [info] WDL file: error_continue.wdl; [2016-01-25 18:25:31,92] [info] Inputs: error_continue.json; [2016-01-25 18:25:31,562] [info] Slf4jLogger started; [2016-01-25 18:25:31,649] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-25 18:25:32,777] [info] Running with database db.url = jdbc:hsqldb:mem:65a527dd-bc31-462e-bca9-05a545fea48a;shutdown=false;hsqldb.tx=mvcc; [2016-01-25 18:25:33,796] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:33,812] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-25 18:25:34,730] [info] WorkflowActor [9cdf23a5]: Start message received; [2016-01-25 18:25:34,997] [info] SingleWorkflowRunnerActor: workflow ID 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:34,999] [info] WorkflowActor [9cdf23a5]: ExecutionStoreCreated(Start) message received; [2016-01-25 18:25:35,11] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-9cdf23a5-1eaa-420a-8fae-ea3e4623d4db#-1942530845],Submitted); [2016-01-25 18:25:35,",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363:2824,Availability,echo,echo,2824,"kflow ID 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:34,999] [info] WorkflowActor [9cdf23a5]: ExecutionStoreCreated(Start) message received; [2016-01-25 18:25:35,11] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-9cdf23a5-1eaa-420a-8fae-ea3e4623d4db#-1942530845],Submitted); [2016-01-25 18:25:35,12] [info] WorkflowActor [9cdf23a5]: Beginning transition from Submitted to Running.; [2016-01-25 18:25:35,16] [info] WorkflowActor [9cdf23a5]: transitioning from Submitted to Running.; [2016-01-25 18:25:35,17] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-25 18:25:35,19] [info] WorkflowActor [9cdf23a5]: starting calls: w.hello; [2016-01-25 18:25:35,21] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Starting.; [2016-01-25 18:25:35,174] [info] WorkflowActor [9cdf23a5]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-25 18:25:35,177] [info] WorkflowActor [9cdf23a5]: created call actor for hello.; [2016-01-25 18:25:35,186] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Running.; [2016-01-25 18:25:35,231] [info] LocalBackend [9cdf23a5:hello]: echo ""Hello String!""; [2016-01-25 18:25:35,279] [info] LocalBackend [9cdf23a5:hello]: command: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/9cdf23a5-1eaa-420a-8fae-ea3e4623d4db/call-hello/script | /bin/bash <&0""; [2016-01-25 18:25:35,305] [info] LocalBackend [9cdf23a5:hello]: Return code: 0; [2016-01-25 18:25:35,377] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Done.; [2016-01-25 18:25:35,413] [info] WorkflowActor [9cdf23a5]: Beginning transition from Running to Succeeded.; [2016-01-25 18:25:35,440] [info] WorkflowActor [9cdf23a5]: transitioning from Running to Succeeded.; {; ""w.hello.salutation"": ""Hello String!""; }; [2016-01-25 18:25:35,505] [info] SingleWorkflowRunnerActor workflow finished with status 'Succeeded'.; $; ```. Hope it helps,; ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363:1514,Integrability,message,message,1514,"on; [2016-01-25 18:25:31,77] [info] RUN sub-command; [2016-01-25 18:25:31,91] [info] WDL file: error_continue.wdl; [2016-01-25 18:25:31,92] [info] Inputs: error_continue.json; [2016-01-25 18:25:31,562] [info] Slf4jLogger started; [2016-01-25 18:25:31,649] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-25 18:25:32,777] [info] Running with database db.url = jdbc:hsqldb:mem:65a527dd-bc31-462e-bca9-05a545fea48a;shutdown=false;hsqldb.tx=mvcc; [2016-01-25 18:25:33,796] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:33,812] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-25 18:25:34,730] [info] WorkflowActor [9cdf23a5]: Start message received; [2016-01-25 18:25:34,997] [info] SingleWorkflowRunnerActor: workflow ID 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:34,999] [info] WorkflowActor [9cdf23a5]: ExecutionStoreCreated(Start) message received; [2016-01-25 18:25:35,11] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-9cdf23a5-1eaa-420a-8fae-ea3e4623d4db#-1942530845],Submitted); [2016-01-25 18:25:35,12] [info] WorkflowActor [9cdf23a5]: Beginning transition from Submitted to Running.; [2016-01-25 18:25:35,16] [info] WorkflowActor [9cdf23a5]: transitioning from Submitted to Running.; [2016-01-25 18:25:35,17] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-25 18:25:35,19] [info] WorkflowActor [9cdf23a5]: starting calls: w.hello; [2016-01-25 18:25:35,21] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Starting.; [2016-01-25 18:25:35,174] [info] WorkflowActor [9cdf23a5]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-25 18:25:35,177] [info] WorkflowActor [9cdf23a5]: created call actor for hello.; [2016-01-25 18:25:35,186] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Running.; [2016-",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363:1730,Integrability,message,message,1730,"on; [2016-01-25 18:25:31,77] [info] RUN sub-command; [2016-01-25 18:25:31,91] [info] WDL file: error_continue.wdl; [2016-01-25 18:25:31,92] [info] Inputs: error_continue.json; [2016-01-25 18:25:31,562] [info] Slf4jLogger started; [2016-01-25 18:25:31,649] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-25 18:25:32,777] [info] Running with database db.url = jdbc:hsqldb:mem:65a527dd-bc31-462e-bca9-05a545fea48a;shutdown=false;hsqldb.tx=mvcc; [2016-01-25 18:25:33,796] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:33,812] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-25 18:25:34,730] [info] WorkflowActor [9cdf23a5]: Start message received; [2016-01-25 18:25:34,997] [info] SingleWorkflowRunnerActor: workflow ID 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:34,999] [info] WorkflowActor [9cdf23a5]: ExecutionStoreCreated(Start) message received; [2016-01-25 18:25:35,11] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-9cdf23a5-1eaa-420a-8fae-ea3e4623d4db#-1942530845],Submitted); [2016-01-25 18:25:35,12] [info] WorkflowActor [9cdf23a5]: Beginning transition from Submitted to Running.; [2016-01-25 18:25:35,16] [info] WorkflowActor [9cdf23a5]: transitioning from Submitted to Running.; [2016-01-25 18:25:35,17] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-25 18:25:35,19] [info] WorkflowActor [9cdf23a5]: starting calls: w.hello; [2016-01-25 18:25:35,21] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Starting.; [2016-01-25 18:25:35,174] [info] WorkflowActor [9cdf23a5]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-25 18:25:35,177] [info] WorkflowActor [9cdf23a5]: created call actor for hello.; [2016-01-25 18:25:35,186] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Running.; [2016-",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363:1827,Integrability,message,message,1827,"on; [2016-01-25 18:25:31,77] [info] RUN sub-command; [2016-01-25 18:25:31,91] [info] WDL file: error_continue.wdl; [2016-01-25 18:25:31,92] [info] Inputs: error_continue.json; [2016-01-25 18:25:31,562] [info] Slf4jLogger started; [2016-01-25 18:25:31,649] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-25 18:25:32,777] [info] Running with database db.url = jdbc:hsqldb:mem:65a527dd-bc31-462e-bca9-05a545fea48a;shutdown=false;hsqldb.tx=mvcc; [2016-01-25 18:25:33,796] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:33,812] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-25 18:25:34,730] [info] WorkflowActor [9cdf23a5]: Start message received; [2016-01-25 18:25:34,997] [info] SingleWorkflowRunnerActor: workflow ID 9cdf23a5-1eaa-420a-8fae-ea3e4623d4db; [2016-01-25 18:25:34,999] [info] WorkflowActor [9cdf23a5]: ExecutionStoreCreated(Start) message received; [2016-01-25 18:25:35,11] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-9cdf23a5-1eaa-420a-8fae-ea3e4623d4db#-1942530845],Submitted); [2016-01-25 18:25:35,12] [info] WorkflowActor [9cdf23a5]: Beginning transition from Submitted to Running.; [2016-01-25 18:25:35,16] [info] WorkflowActor [9cdf23a5]: transitioning from Submitted to Running.; [2016-01-25 18:25:35,17] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-25 18:25:35,19] [info] WorkflowActor [9cdf23a5]: starting calls: w.hello; [2016-01-25 18:25:35,21] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Starting.; [2016-01-25 18:25:35,174] [info] WorkflowActor [9cdf23a5]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-25 18:25:35,177] [info] WorkflowActor [9cdf23a5]: created call actor for hello.; [2016-01-25 18:25:35,186] [info] WorkflowActor [9cdf23a5]: persisting status of hello to Running.; [2016-",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-174729363
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:212,Availability,echo,echo,212,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:244,Availability,echo,echo,244,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:397,Availability,failure,failure,397,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:668,Availability,echo,echo,668,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:560,Energy Efficiency,monitor,monitoring,560,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:344,Testability,test,test,344,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:377,Testability,test,test,377,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792:588,Testability,test,test,588,"@cjllanwarne Thanks for the explanation! Exactly right, this is what the script says: ; #!/bin/bash; export _JAVA_OPTIONS=-Djava.io.tmpdir=/cromwell_root/tmp; export TMPDIR=/cromwell_root/tmp; cd /cromwell_root. echo ""Hello foobar!"" && exit 1; echo $? > job.rc.txt. @pgrosu The exit 1 was the purpose here - I was modifying the basic hello.wdl test, trying to do a lightweight test simulating the failure of the binary being called. Turns out, as @cjllanwarne explains, that exit 1 is not a good way to simulate that, because it defeats Cromwell's return-code monitoring. Here's a better test, which does work as expected: . task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && head nonexistent; }; output {; String salutation = read_string(stdout()); }; runtime {; docker: ""ubuntu:latest""; continueOnReturnCode: true; }; }. workflow w {; call hello; }",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-175739792
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:50,Availability,error,error,50,"Hi Will,. I see, but unfortunately I still get an error - I ran the your updated workflow without the Docker portion and specifically sent an `SIGINT`, and it looks like it ended with an error. Below are the steps - hope this does not affect the launch schedule:. ``` Bash; $ cat error_continue.wdl; task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && kill -SIGINT $BASHPID; }; output {; String salutation = read_string(stdout()); }; runtime {; continueOnReturnCode: true; }; }. workflow w {; call hello; }; $; $ java -jar cromwell.jar inputs error_continue.wdl; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; {; ""w.hello.addressee"": ""String""; }; $; $ java -jar cromwell.jar inputs error_continue.wdl > error_continue.json; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; $; $ java -jar cromwell.jar run error_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkfl",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:187,Availability,error,error,187,"Hi Will,. I see, but unfortunately I still get an error - I ran the your updated workflow without the Docker portion and specifically sent an `SIGINT`, and it looks like it ended with an error. Below are the steps - hope this does not affect the launch schedule:. ``` Bash; $ cat error_continue.wdl; task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && kill -SIGINT $BASHPID; }; output {; String salutation = read_string(stdout()); }; runtime {; continueOnReturnCode: true; }; }. workflow w {; call hello; }; $; $ java -jar cromwell.jar inputs error_continue.wdl; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; {; ""w.hello.addressee"": ""String""; }; $; $ java -jar cromwell.jar inputs error_continue.wdl > error_continue.json; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; $; $ java -jar cromwell.jar run error_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkfl",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:343,Availability,echo,echo,343,"Hi Will,. I see, but unfortunately I still get an error - I ran the your updated workflow without the Docker portion and specifically sent an `SIGINT`, and it looks like it ended with an error. Below are the steps - hope this does not affect the launch schedule:. ``` Bash; $ cat error_continue.wdl; task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && kill -SIGINT $BASHPID; }; output {; String salutation = read_string(stdout()); }; runtime {; continueOnReturnCode: true; }; }. workflow w {; call hello; }; $; $ java -jar cromwell.jar inputs error_continue.wdl; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; {; ""w.hello.addressee"": ""String""; }; $; $ java -jar cromwell.jar inputs error_continue.wdl > error_continue.json; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; $; $ java -jar cromwell.jar run error_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkfl",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:3239,Availability,echo,echo,3239,"te(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-2a89a995-aa89-4172-a5e1-1054cbccd9e0#2034772397],Submitted); [2016-01-31 16:37:28,800] [info] WorkflowActor [2a89a995]: transitioning from Submitted to Running.; [2016-01-31 16:37:28,801] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-31 16:37:28,804] [info] WorkflowActor [2a89a995]: starting calls: w.hello; [2016-01-31 16:37:28,805] [info] WorkflowActor [2a89a995]: persisting status of hello to Starting.; [2016-01-31 16:37:28,959] [info] WorkflowActor [2a89a995]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-31 16:37:28,962] [info] WorkflowActor [2a89a995]: created call actor for hello.; [2016-01-31 16:37:28,970] [info] WorkflowActor [2a89a995]: persisting status of hello to Running.; [2016-01-31 16:37:28,996] [info] LocalBackend [2a89a995:hello]: echo ""Hello String!"" && kill -SIGINT $BASHPID; [2016-01-31 16:37:29,19] [info] LocalBackend [2a89a995:hello]: command: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0""; [2016-01-31 16:37:29,43] [error] CallActor [2a89a995:hello]: Failing call: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. java.lang.Throwable: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.back",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:3501,Availability,error,error,3501,"te(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-2a89a995-aa89-4172-a5e1-1054cbccd9e0#2034772397],Submitted); [2016-01-31 16:37:28,800] [info] WorkflowActor [2a89a995]: transitioning from Submitted to Running.; [2016-01-31 16:37:28,801] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-31 16:37:28,804] [info] WorkflowActor [2a89a995]: starting calls: w.hello; [2016-01-31 16:37:28,805] [info] WorkflowActor [2a89a995]: persisting status of hello to Starting.; [2016-01-31 16:37:28,959] [info] WorkflowActor [2a89a995]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-31 16:37:28,962] [info] WorkflowActor [2a89a995]: created call actor for hello.; [2016-01-31 16:37:28,970] [info] WorkflowActor [2a89a995]: persisting status of hello to Running.; [2016-01-31 16:37:28,996] [info] LocalBackend [2a89a995:hello]: echo ""Hello String!"" && kill -SIGINT $BASHPID; [2016-01-31 16:37:29,19] [info] LocalBackend [2a89a995:hello]: command: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0""; [2016-01-31 16:37:29,43] [error] CallActor [2a89a995:hello]: Failing call: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. java.lang.Throwable: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.back",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:6858,Availability,error,error,6858,"eArray(File.scala:81); at better.files.File.contentAsString(File.scala:91); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply$mcI$sp(LocalBackend.scala:209); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply(LocalBackend.scala:208); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply(LocalBackend.scala:208); at scala.util.Try$.apply(Try.scala:192); at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:207); ... 10 common frames omitted; [2016-01-31 16:37:29,45] [info] WorkflowActor [2a89a995]: persisting status of hello to Failed.; [2016-01-31 16:37:29,45] [info] WorkflowActor [2a89a995]: Beginning transition from Running to Failed.; [2016-01-31 16:37:29,59] [info] WorkflowActor [2a89a995]: transitioning from Running to Failed.; [2016-01-31 16:37:29,60] [info] SingleWorkflowRunnerActor workflow finished with status 'Failed'.; [2016-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.ac",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:73,Deployability,update,updated,73,"Hi Will,. I see, but unfortunately I still get an error - I ran the your updated workflow without the Docker portion and specifically sent an `SIGINT`, and it looks like it ended with an error. Below are the steps - hope this does not affect the launch schedule:. ``` Bash; $ cat error_continue.wdl; task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && kill -SIGINT $BASHPID; }; output {; String salutation = read_string(stdout()); }; runtime {; continueOnReturnCode: true; }; }. workflow w {; call hello; }; $; $ java -jar cromwell.jar inputs error_continue.wdl; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; {; ""w.hello.addressee"": ""String""; }; $; $ java -jar cromwell.jar inputs error_continue.wdl > error_continue.json; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; $; $ java -jar cromwell.jar run error_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkfl",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:253,Energy Efficiency,schedul,schedule,253,"Hi Will,. I see, but unfortunately I still get an error - I ran the your updated workflow without the Docker portion and specifically sent an `SIGINT`, and it looks like it ended with an error. Below are the steps - hope this does not affect the launch schedule:. ``` Bash; $ cat error_continue.wdl; task hello {; String addressee; command {; echo ""Hello ${addressee}!"" && kill -SIGINT $BASHPID; }; output {; String salutation = read_string(stdout()); }; runtime {; continueOnReturnCode: true; }; }. workflow w {; call hello; }; $; $ java -jar cromwell.jar inputs error_continue.wdl; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; {; ""w.hello.addressee"": ""String""; }; $; $ java -jar cromwell.jar inputs error_continue.wdl > error_continue.json; This functionality is deprecated and will be removed in 0.18. Please use wdltool: https://github.com/broadinstitute/wdltool; $; $ java -jar cromwell.jar run error_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkfl",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:1845,Integrability,message,message,1845,"rror_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658]))) message received; [2016-01-31 16:37:28,789] [info] SingleWorkflowRunnerActor: workflow ID 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,798] [info] WorkflowActor [2a89a995]: Beginning transition from Submitted to Running.; [2016-01-31 16:37:28,800] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-2a89a995-aa89-4172-a5e1-1054cbccd9e0#2034772397],Submitted); [2016-01-31 16:37:28,800] [info] WorkflowActor [2a89a995]: transitioning from Submitted to Running.; [2016-01-31 16:37:28,801] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-31 16:37:28,804] [info] WorkflowActor [2a89a995]: starting calls: w.hello; [2016-01-31 16:37:28,805] [info] WorkflowActor [2a89a995]: persisting status of hello to Starting.; [2016-01-31 16:37:28,959] [info] WorkflowActor [2a89a995]: inputs for call 'hello':; addressee -> WdlString(Strin",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:2030,Integrability,message,message,2030,"rror_continue.wdl error_continue.json; [2016-01-31 16:37:25,449] [info] RUN sub-command; [2016-01-31 16:37:25,469] [info] WDL file: error_continue.wdl; [2016-01-31 16:37:25,471] [info] Inputs: error_continue.json; [2016-01-31 16:37:25,989] [info] Slf4jLogger started; [2016-01-31 16:37:26,86] [info] SingleWorkflowRunnerActor: launching workflow; [2016-01-31 16:37:27,345] [info] Running with database db.url = jdbc:hsqldb:mem:748afb13-e3af-4e9d-af14-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658]))) message received; [2016-01-31 16:37:28,789] [info] SingleWorkflowRunnerActor: workflow ID 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,798] [info] WorkflowActor [2a89a995]: Beginning transition from Submitted to Running.; [2016-01-31 16:37:28,800] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-2a89a995-aa89-4172-a5e1-1054cbccd9e0#2034772397],Submitted); [2016-01-31 16:37:28,800] [info] WorkflowActor [2a89a995]: transitioning from Submitted to Running.; [2016-01-31 16:37:28,801] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-31 16:37:28,804] [info] WorkflowActor [2a89a995]: starting calls: w.hello; [2016-01-31 16:37:28,805] [info] WorkflowActor [2a89a995]: persisting status of hello to Starting.; [2016-01-31 16:37:28,959] [info] WorkflowActor [2a89a995]: inputs for call 'hello':; addressee -> WdlString(Strin",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:2346,Integrability,message,message,2346,"4-5c2b3bd209a9;shutdown=false;hsqldb.tx=mvcc; [2016-01-31 16:37:28,247] [info] WorkflowManagerActor submitWorkflow input id = None, effective id = 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,291] [info] WorkflowManagerActor Found no workflows to restart.; [2016-01-31 16:37:28,660] [info] WorkflowActor [2a89a995]: Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658])) message received; [2016-01-31 16:37:28,788] [info] WorkflowActor [2a89a995]: ExecutionStoreCreated(Start(Some(Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor#-896492658]))) message received; [2016-01-31 16:37:28,789] [info] SingleWorkflowRunnerActor: workflow ID 2a89a995-aa89-4172-a5e1-1054cbccd9e0; [2016-01-31 16:37:28,798] [info] WorkflowActor [2a89a995]: Beginning transition from Submitted to Running.; [2016-01-31 16:37:28,800] [warn] SingleWorkflowRunnerActor: received unexpected message: CurrentState(Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-2a89a995-aa89-4172-a5e1-1054cbccd9e0#2034772397],Submitted); [2016-01-31 16:37:28,800] [info] WorkflowActor [2a89a995]: transitioning from Submitted to Running.; [2016-01-31 16:37:28,801] [info] SingleWorkflowRunnerActor: transitioning to Running; [2016-01-31 16:37:28,804] [info] WorkflowActor [2a89a995]: starting calls: w.hello; [2016-01-31 16:37:28,805] [info] WorkflowActor [2a89a995]: persisting status of hello to Starting.; [2016-01-31 16:37:28,959] [info] WorkflowActor [2a89a995]: inputs for call 'hello':; addressee -> WdlString(String); [2016-01-31 16:37:28,962] [info] WorkflowActor [2a89a995]: created call actor for hello.; [2016-01-31 16:37:28,970] [info] WorkflowActor [2a89a995]: persisting status of hello to Running.; [2016-01-31 16:37:28,996] [info] LocalBackend [2a89a995:hello]: echo ""Hello String!"" && kill -SIGINT $BASHPID; [2016-01-31 16:37:29,19] [info] LocalBackend [2a89a995:hello]: command: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054c",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:4543,Performance,concurren,concurrent,4543,": Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. java.lang.Throwable: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:144); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:138); at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24); at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24); at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixExc",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:4633,Performance,concurren,concurrent,4633,"l command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. java.lang.Throwable: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:144); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:138); at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24); at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24); at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107); at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvid",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:4878,Performance,concurren,concurrent,4878,"rowable: Call w.hello, Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0: return code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:144); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:138); at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24); at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24); at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107); at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.Files.readAllBytes(Files.java:3149); at better.files.File.loadBytes(File.scala:80); at better.files.File",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:4951,Performance,concurren,concurrent,4951,"urn code was (none). Full command was: ""/bin/bash"" ""-c"" ""cat cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:144); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:138); at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24); at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24); at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107); at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.Files.readAllBytes(Files.java:3149); at better.files.File.loadBytes(File.scala:80); at better.files.File.byteArray(File.scala:81); at better.files.File.contentAsString(File.scal",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:5036,Performance,concurren,concurrent,5036,"89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/script | /bin/bash <&0"". Contents of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:144); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:138); at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24); at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24); at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107); at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.Files.readAllBytes(Files.java:3149); at better.files.File.loadBytes(File.scala:80); at better.files.File.byteArray(File.scala:81); at better.files.File.contentAsString(File.scala:91); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply$mcI$sp(LocalBac",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:5113,Performance,concurren,concurrent,5113,ts of cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/stderr were empty. at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:246); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:144); at cromwell.engine.backend.local.LocalBackend$$anonfun$execute$1.apply(LocalBackend.scala:138); at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24); at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24); at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107); at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.Files.readAllBytes(Files.java:3149); at better.files.File.loadBytes(File.scala:80); at better.files.File.byteArray(File.scala:81); at better.files.File.contentAsString(File.scala:91); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply$mcI$sp(LocalBackend.scala:209); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.app,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:5838,Performance,load,loadBytes,5838,"tDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Caused by: java.nio.file.NoSuchFileException: /home/pgrosu/me/cromwell/cromwell/cromwell-executions/w/2a89a995-aa89-4172-a5e1-1054cbccd9e0/call-hello/rc; at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102); at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107); at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.Files.readAllBytes(Files.java:3149); at better.files.File.loadBytes(File.scala:80); at better.files.File.byteArray(File.scala:81); at better.files.File.contentAsString(File.scala:91); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply$mcI$sp(LocalBackend.scala:209); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply(LocalBackend.scala:208); at cromwell.engine.backend.local.LocalBackend$$anonfun$3.apply(LocalBackend.scala:208); at scala.util.Try$.apply(Try.scala:192); at cromwell.engine.backend.local.LocalBackend.cromwell$engine$backend$local$LocalBackend$$runSubprocess(LocalBackend.scala:207); ... 10 common frames omitted; [2016-01-31 16:37:29,45] [info] WorkflowActor [2a89a995]: persisting status of hello to Failed.; [2016-01-31 16:37:29,45] [info] WorkflowActor [2a89a995]: Beginning transition from Running to Failed.; [2016-01-31 16:37:29,59] [info] WorkflowActor [2a89a995]: transitioning from Running to Failed.; [2016-01-31 16:37:29,60] [info] SingleWorkflowRunnerActor workflow finished with status 'Failed'.; [2016-01-31 16",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:8437,Performance,concurren,concurrent,8437,"16-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:592); at akka.actor.Actor$class.aroundReceive(Actor.scala:467); at cromwell.engine.workflow.SingleWorkflowRunnerActor.aroundReceive(SingleWorkflowRunnerActor.scala:52); at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516); at akka.actor.ActorCell.invoke(ActorCell.scala:487); at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238); at akka.dispatch.Mailbox.run(Mailbox.scala:220); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; $; ```. ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:8510,Performance,concurren,concurrent,8510,"16-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:592); at akka.actor.Actor$class.aroundReceive(Actor.scala:467); at cromwell.engine.workflow.SingleWorkflowRunnerActor.aroundReceive(SingleWorkflowRunnerActor.scala:52); at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516); at akka.actor.ActorCell.invoke(ActorCell.scala:487); at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238); at akka.dispatch.Mailbox.run(Mailbox.scala:220); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; $; ```. ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:8595,Performance,concurren,concurrent,8595,"16-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:592); at akka.actor.Actor$class.aroundReceive(Actor.scala:467); at cromwell.engine.workflow.SingleWorkflowRunnerActor.aroundReceive(SingleWorkflowRunnerActor.scala:52); at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516); at akka.actor.ActorCell.invoke(ActorCell.scala:487); at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238); at akka.dispatch.Mailbox.run(Mailbox.scala:220); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; $; ```. ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:8672,Performance,concurren,concurrent,8672,"16-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:592); at akka.actor.Actor$class.aroundReceive(Actor.scala:467); at cromwell.engine.workflow.SingleWorkflowRunnerActor.aroundReceive(SingleWorkflowRunnerActor.scala:52); at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516); at akka.actor.ActorCell.invoke(ActorCell.scala:487); at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238); at akka.dispatch.Mailbox.run(Mailbox.scala:220); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107); Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; $; ```. ~p",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:7579,Testability,Log,LoggingFSM,7579,"ansition from Running to Failed.; [2016-01-31 16:37:29,59] [info] WorkflowActor [2a89a995]: transitioning from Running to Failed.; [2016-01-31 16:37:29,60] [info] SingleWorkflowRunnerActor workflow finished with status 'Failed'.; [2016-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:592); at akka.actor.Actor$class.aroundReceive(Actor.scala:467); at cromwell.engine.workflow.SingleWorkflowRunnerActor.aroundReceive(SingleWorkflowRunnerActor.scala:52); at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516); at akka.actor.ActorCell.invoke(ActorCell.scala:487); at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238); at akka.dispatch.Mailbox.run(Mailbox.scala:220); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887:7661,Testability,Log,LoggingFSM,7661,"orkflowActor [2a89a995]: transitioning from Running to Failed.; [2016-01-31 16:37:29,60] [info] SingleWorkflowRunnerActor workflow finished with status 'Failed'.; [2016-01-31 16:37:29,61] [error] Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; java.lang.Throwable: Workflow 2a89a995-aa89-4172-a5e1-1054cbccd9e0 transitioned to state Failed; at cromwell.engine.workflow.SingleWorkflowRunnerActor$RunnerData.addFailure(SingleWorkflowRunnerActor.scala:41); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:99); at cromwell.engine.workflow.SingleWorkflowRunnerActor$$anonfun$2.applyOrElse(SingleWorkflowRunnerActor.scala:77); at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); at akka.actor.FSM$class.processEvent(FSM.scala:604); at cromwell.engine.workflow.SingleWorkflowRunnerActor.akka$actor$LoggingFSM$$super$processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.LoggingFSM$class.processEvent(FSM.scala:734); at cromwell.engine.workflow.SingleWorkflowRunnerActor.processEvent(SingleWorkflowRunnerActor.scala:52); at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:598); at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:592); at akka.actor.Actor$class.aroundReceive(Actor.scala:467); at cromwell.engine.workflow.SingleWorkflowRunnerActor.aroundReceive(SingleWorkflowRunnerActor.scala:52); at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516); at akka.actor.ActorCell.invoke(ActorCell.scala:487); at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238); at akka.dispatch.Mailbox.run(Mailbox.scala:220); at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397); at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260); at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339); at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979); at scal",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177622887
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177665209:94,Performance,perform,performs,94,I would recommend to make this a finite-state machine and have it resubmit if the script-code performs a `SIGINT` for the following line:. ```; val processReturnCode = process.exitValue() // blocks until process finishes; ```. Below is the location of the line:. https://github.com/broadinstitute/cromwell/blob/599f1ddb31fb11bfd4fdc4c49f0505aba69e03f3/src/main/scala/cromwell/engine/backend/local/LocalBackend.scala#L203. ~p,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177665209
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177692501:88,Availability,down,down,88,"@dgtester Since @geoffjentry just brought me up to speed on the exciting changes coming down the line with #401 (as well as #413), it would probably make more sense to revisit some of these tests afterwards, if they are still pertinent at that time.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177692501
https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177692501:190,Testability,test,tests,190,"@dgtester Since @geoffjentry just brought me up to speed on the exciting changes coming down the line with #401 (as well as #413), it would probably make more sense to revisit some of these tests afterwards, if they are still pertinent at that time.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/404#issuecomment-177692501
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044:67,Deployability,Release,Release,67,"https://broadinstitute.atlassian.net/wiki/display/DSDEEPB/Cromwell+Release. One week prior to release cut develop to a release candidate branch (e.g. release-0.18); On develop branch, update build.sbt with the next version number. Unless we want to wait until the actual release day to switch ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044:94,Deployability,release,release,94,"https://broadinstitute.atlassian.net/wiki/display/DSDEEPB/Cromwell+Release. One week prior to release cut develop to a release candidate branch (e.g. release-0.18); On develop branch, update build.sbt with the next version number. Unless we want to wait until the actual release day to switch ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044:119,Deployability,release,release,119,"https://broadinstitute.atlassian.net/wiki/display/DSDEEPB/Cromwell+Release. One week prior to release cut develop to a release candidate branch (e.g. release-0.18); On develop branch, update build.sbt with the next version number. Unless we want to wait until the actual release day to switch ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044:150,Deployability,release,release-,150,"https://broadinstitute.atlassian.net/wiki/display/DSDEEPB/Cromwell+Release. One week prior to release cut develop to a release candidate branch (e.g. release-0.18); On develop branch, update build.sbt with the next version number. Unless we want to wait until the actual release day to switch ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044:184,Deployability,update,update,184,"https://broadinstitute.atlassian.net/wiki/display/DSDEEPB/Cromwell+Release. One week prior to release cut develop to a release candidate branch (e.g. release-0.18); On develop branch, update build.sbt with the next version number. Unless we want to wait until the actual release day to switch ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044:271,Deployability,release,release,271,"https://broadinstitute.atlassian.net/wiki/display/DSDEEPB/Cromwell+Release. One week prior to release cut develop to a release candidate branch (e.g. release-0.18); On develop branch, update build.sbt with the next version number. Unless we want to wait until the actual release day to switch ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175210044
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175232646:68,Deployability,RELEASE,RELEASE,68,Are there any other changes which will have to be wrapped up in the RELEASE 0.17 umbrella?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175232646
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175232646:50,Integrability,wrap,wrapped,50,Are there any other changes which will have to be wrapped up in the RELEASE 0.17 umbrella?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175232646
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175233017:87,Deployability,update,update,87,"~~Also, this is going to be 0.17 so the original version was correct.. maybe we should update the doc to update the SBT version on the first Develop commit AFTER branching?~~. I didn't realise this was for us to continue with after the Develop branch was separated. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175233017
https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175233017:105,Deployability,update,update,105,"~~Also, this is going to be 0.17 so the original version was correct.. maybe we should update the doc to update the SBT version on the first Develop commit AFTER branching?~~. I didn't realise this was for us to continue with after the Develop branch was separated. :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/405#issuecomment-175233017
https://github.com/broadinstitute/cromwell/pull/412#issuecomment-178212782:35,Deployability,update,updated,35,@Horneth Make sure the readme gets updated as appropriate,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/412#issuecomment-178212782
https://github.com/broadinstitute/cromwell/pull/412#issuecomment-181466777:35,Deployability,update,update,35,Please mention the change (and the update to metadata format) in the CHANGELOG.MD,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/412#issuecomment-181466777
https://github.com/broadinstitute/cromwell/pull/413#issuecomment-178247776:42,Modifiability,refactor,refactoring,42,"@dgtester just a heads up that I did some refactoring in the area of your recent PR that might at first look like I deleted your work, but actually that logic has been consolidated to `WorkflowManagerActor`. I've tested that SIGINT still works in both ""run"" and ""server"" use cases, but please let me know if you have any questions or concerns.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/413#issuecomment-178247776
https://github.com/broadinstitute/cromwell/pull/413#issuecomment-178247776:153,Testability,log,logic,153,"@dgtester just a heads up that I did some refactoring in the area of your recent PR that might at first look like I deleted your work, but actually that logic has been consolidated to `WorkflowManagerActor`. I've tested that SIGINT still works in both ""run"" and ""server"" use cases, but please let me know if you have any questions or concerns.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/413#issuecomment-178247776
https://github.com/broadinstitute/cromwell/pull/413#issuecomment-178247776:213,Testability,test,tested,213,"@dgtester just a heads up that I did some refactoring in the area of your recent PR that might at first look like I deleted your work, but actually that logic has been consolidated to `WorkflowManagerActor`. I've tested that SIGINT still works in both ""run"" and ""server"" use cases, but please let me know if you have any questions or concerns.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/413#issuecomment-178247776
https://github.com/broadinstitute/cromwell/pull/414#issuecomment-178252223:27,Availability,fault,fault,27,Thanks Denis - this was my fault :confounded:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/414#issuecomment-178252223
https://github.com/broadinstitute/cromwell/pull/424#issuecomment-180509918:190,Security,access,access,190,"It's entirely possible that this resolves all of the big bang problems, including the spray responsiveness. From what I saw yesterday the pain and suffering was primarily coming from the DB access.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/424#issuecomment-180509918
https://github.com/broadinstitute/cromwell/pull/424#issuecomment-180509918:92,Usability,responsiv,responsiveness,92,"It's entirely possible that this resolves all of the big bang problems, including the spray responsiveness. From what I saw yesterday the pain and suffering was primarily coming from the DB access.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/424#issuecomment-180509918
https://github.com/broadinstitute/cromwell/pull/424#issuecomment-180579934:25,Testability,test,test,25,Added a basic regression test that verifies our deadlock workaround.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/424#issuecomment-180579934
https://github.com/broadinstitute/cromwell/pull/424#issuecomment-181055960:142,Testability,log,logical,142,@kshakir I want to tech talk on this a bit prior to merging. I think it's fine as-is but want to make sure we think through the nuance and/or logical next steps,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/424#issuecomment-181055960
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-181437112:75,Deployability,update,update,75,"Also, if possible, run something in JES beforehand, then run the liquibase update over the existing data and check the /metadata and /timing can still be accessed for the preexisting tasks",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-181437112
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-181437112:154,Security,access,accessed,154,"Also, if possible, run something in JES beforehand, then run the liquibase update over the existing data and check the /metadata and /timing can still be accessed for the preexisting tasks",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-181437112
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-181493008:107,Usability,feedback,feedback,107,"I give a tentative :+1:. Like Chris said, I'd like to see it with the changes you got from the code review feedback from yourself :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-181493008
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182388303:17,Integrability,wrap,wraps,17,"@ccarrizo A call wraps a single command line and thus can only be run on a single backend, correct? Composed backends wouldn't apply for a call. We have a need to be able to report back certain backend specific values and from an operational/regulatory perspective we need to track other things for provenance and such. That information needs to be persisted somewhere - should the backends know about the DB (let's ignore for them oment that one backend does indeed talk directly to the DB)? If not that implies now need to know about the internal persistence. What if we decide to bulkhead all DB access behind a specialized actor/router? You can point to separating out the persistence but that's far beyond the scope of this work and is a separate block entirely. I viewed this as a transitional PR. There'd been a request from team members on our side for a while now that things be done as bit by bit as possible. To do that implies not having full & sweeping changes as the only way to do _that_ is one monolithic PR which causes a ton of problems. The whole process would be a bit smoother if you all could find other portions which could be folded directly into develop _now_ which started to move the ball in the right direction instead of requiring that everything be perfect in one fell swoop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182388303
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182388303:633,Integrability,rout,router,633,"@ccarrizo A call wraps a single command line and thus can only be run on a single backend, correct? Composed backends wouldn't apply for a call. We have a need to be able to report back certain backend specific values and from an operational/regulatory perspective we need to track other things for provenance and such. That information needs to be persisted somewhere - should the backends know about the DB (let's ignore for them oment that one backend does indeed talk directly to the DB)? If not that implies now need to know about the internal persistence. What if we decide to bulkhead all DB access behind a specialized actor/router? You can point to separating out the persistence but that's far beyond the scope of this work and is a separate block entirely. I viewed this as a transitional PR. There'd been a request from team members on our side for a while now that things be done as bit by bit as possible. To do that implies not having full & sweeping changes as the only way to do _that_ is one monolithic PR which causes a ton of problems. The whole process would be a bit smoother if you all could find other portions which could be folded directly into develop _now_ which started to move the ball in the right direction instead of requiring that everything be perfect in one fell swoop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182388303
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182388303:599,Security,access,access,599,"@ccarrizo A call wraps a single command line and thus can only be run on a single backend, correct? Composed backends wouldn't apply for a call. We have a need to be able to report back certain backend specific values and from an operational/regulatory perspective we need to track other things for provenance and such. That information needs to be persisted somewhere - should the backends know about the DB (let's ignore for them oment that one backend does indeed talk directly to the DB)? If not that implies now need to know about the internal persistence. What if we decide to bulkhead all DB access behind a specialized actor/router? You can point to separating out the persistence but that's far beyond the scope of this work and is a separate block entirely. I viewed this as a transitional PR. There'd been a request from team members on our side for a while now that things be done as bit by bit as possible. To do that implies not having full & sweeping changes as the only way to do _that_ is one monolithic PR which causes a ton of problems. The whole process would be a bit smoother if you all could find other portions which could be folded directly into develop _now_ which started to move the ball in the right direction instead of requiring that everything be perfect in one fell swoop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182388303
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182476331:232,Testability,log,logic,232,"@ccarrizo It's more that users & operators might want to be able to see that behavior. . For instance imagine something sitting on top of a cromwell server where they know there's a single backend, they might want to build business logic about specifics of that backend. One could argue over whether or not that's a good thing but the truth is that it's already a reality so one way or the other it needs to remain. Another example would be for operational/debugging bits. As an example some of the data we track which is JES specific has been invaluable when dealing w/ our friends on the other side of the fence in terms of figuring out what's gone awry as both pieces were being built. . The primary reason I can think of to record what type of backend was used to dispatch would mainly be for informational purposes, although I could imagine what backend a call had been run on being part of a potential cost function on determining which backend a subsequent call would be applied to. For both situations you'd only need to store the backend name, not fundamentally link metadata to that backend but it's easy enough to do both in a single table schema.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182476331
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182531090:624,Availability,down,down,624,"@francares I'm not saying the engine itself _needs_ to know (although I could envision a scenario where it'd be useful for it to know), I'm saying that the outside world needs to know information particular to the backend. That information needs to be stored somewhere and right now the only somewhere is in the DB which is accessed purely through engine. I see this PR as a transition point - it's against develop which does _not_ have pluggable backends but starts to remove the direct requirements (i.e. the backend specific tables). It's not the final state things will live in but it makes the ultimate changes smaller down the road.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182531090
https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182531090:324,Security,access,accessed,324,"@francares I'm not saying the engine itself _needs_ to know (although I could envision a scenario where it'd be useful for it to know), I'm saying that the outside world needs to know information particular to the backend. That information needs to be stored somewhere and right now the only somewhere is in the DB which is accessed purely through engine. I see this PR as a transition point - it's against develop which does _not_ have pluggable backends but starts to remove the direct requirements (i.e. the backend specific tables). It's not the final state things will live in but it makes the ultimate changes smaller down the road.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/427#issuecomment-182531090
https://github.com/broadinstitute/cromwell/pull/428#issuecomment-181484804:5,Deployability,update,updated,5,Text updated,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/428#issuecomment-181484804
https://github.com/broadinstitute/cromwell/issues/430#issuecomment-181537885:22,Integrability,depend,dependency,22,Allows for removal of dependency on backend in the various *logs and metadata endpoints. Be careful with how this impacts hashing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/430#issuecomment-181537885
https://github.com/broadinstitute/cromwell/issues/430#issuecomment-181537885:122,Security,hash,hashing,122,Allows for removal of dependency on backend in the various *logs and metadata endpoints. Be careful with how this impacts hashing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/430#issuecomment-181537885
https://github.com/broadinstitute/cromwell/issues/430#issuecomment-181537885:60,Testability,log,logs,60,Allows for removal of dependency on backend in the various *logs and metadata endpoints. Be careful with how this impacts hashing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/430#issuecomment-181537885
https://github.com/broadinstitute/cromwell/pull/434#issuecomment-182103808:40,Testability,test,test,40,Please add to Tyburn's engine functions test. :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/434#issuecomment-182103808
https://github.com/broadinstitute/cromwell/pull/434#issuecomment-182474297:157,Deployability,rolling,rolling,157,Still :+1: for me. . On the issue of whether or not to use the library my general preference is to use well vetted 3rd party libraries for things instead of rolling our own. That said I've not heard of this library before so can't say much (although I did see it endorsed by some people I trust). I don't really care one way or the other on this particular one.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/434#issuecomment-182474297
https://github.com/broadinstitute/cromwell/pull/436#issuecomment-182178955:623,Availability,failure,failure,623,"I came here to make a comment but as I started typing that made me wonder if what I was about to suggest might have been old behavior and explain why (we think) things went from fail slow to fail fast. Or, alternatively it was _always_ fail fast w/o us meaning to do so and this is all bollocks ... At one point startRunnableCalls was called findRunnableCalls, and then it'd kick everything off. I was going to suggest that one thing you could do is find runnable calls, and if the set is empty you know that either the workflow has failed or succeeded based on if the state of all of the calls (all success = success, any failure = failure, some not run ... uh oh!). Now that I go back and look at your code this seems more or less what you're doing, at least in spirit. I was mainly just excited that this might explain the slow -> fast transition (again, assuming it ever actually happened in the first place!)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/436#issuecomment-182178955
https://github.com/broadinstitute/cromwell/pull/436#issuecomment-182178955:633,Availability,failure,failure,633,"I came here to make a comment but as I started typing that made me wonder if what I was about to suggest might have been old behavior and explain why (we think) things went from fail slow to fail fast. Or, alternatively it was _always_ fail fast w/o us meaning to do so and this is all bollocks ... At one point startRunnableCalls was called findRunnableCalls, and then it'd kick everything off. I was going to suggest that one thing you could do is find runnable calls, and if the set is empty you know that either the workflow has failed or succeeded based on if the state of all of the calls (all success = success, any failure = failure, some not run ... uh oh!). Now that I go back and look at your code this seems more or less what you're doing, at least in spirit. I was mainly just excited that this might explain the slow -> fast transition (again, assuming it ever actually happened in the first place!)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/436#issuecomment-182178955
https://github.com/broadinstitute/cromwell/issues/437#issuecomment-182384900:92,Usability,resume,resumed,92,If the server is turned off and brought back up any previously running workflows need to be resumed as they would have previous to this PR,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/437#issuecomment-182384900
https://github.com/broadinstitute/cromwell/issues/437#issuecomment-185444571:25,Availability,redundant,redundant,25,I think the other one is redundant,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/437#issuecomment-185444571
https://github.com/broadinstitute/cromwell/issues/437#issuecomment-185444571:25,Safety,redund,redundant,25,I think the other one is redundant,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/437#issuecomment-185444571
https://github.com/broadinstitute/cromwell/issues/439#issuecomment-185479460:273,Safety,avoid,avoid,273,We really do have a business case for doing this once per workflow. Having this at the task level will run prepare() / cleanup() as many times as we have calls to run on that backend. This specific use case also involves some sensitive data which we'd particularly like to avoid making many copies of unnecessarily.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/439#issuecomment-185479460
https://github.com/broadinstitute/cromwell/issues/439#issuecomment-186006370:137,Usability,simpl,simple,137,It's just a single example. . I find it entirely plausible that a backend might want to act upon something at a workflow level and not a simple task level.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/439#issuecomment-186006370
https://github.com/broadinstitute/cromwell/pull/441#issuecomment-182541538:7,Deployability,update,updated,7,I just updated the description,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/441#issuecomment-182541538
https://github.com/broadinstitute/cromwell/pull/441#issuecomment-182586749:45,Testability,log,logging,45,I think this should only apply to the PRETTY logging mode and be set to DEBUG or something like that so it could be turned back on if desired.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/441#issuecomment-182586749
https://github.com/broadinstitute/cromwell/pull/442#issuecomment-182545324:0,Availability,Ping,Pinging,0,"Pinging @gbggrant on this one, when this is merged it's another tool in your all's arsenal for stability under load",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/442#issuecomment-182545324
https://github.com/broadinstitute/cromwell/pull/442#issuecomment-182545324:111,Performance,load,load,111,"Pinging @gbggrant on this one, when this is merged it's another tool in your all's arsenal for stability under load",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/442#issuecomment-182545324
https://github.com/broadinstitute/cromwell/issues/443#issuecomment-182587558:130,Usability,simpl,simplify,130,@cjllanwarne @geoffjentry are we open to the idea of moving the execution of final calls to the backend? It's possible that could simplify this ticket.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/443#issuecomment-182587558
https://github.com/broadinstitute/cromwell/pull/444#issuecomment-182681779:2,Testability,test,test,2,a test would be nice,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/444#issuecomment-182681779
https://github.com/broadinstitute/cromwell/pull/444#issuecomment-182685685:12,Testability,test,test,12,@mcovarr re test ;) https://www.manning.com/books/type-driven-development-with-idris,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/444#issuecomment-182685685
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184747668:453,Deployability,update,updated,453,"@cjllanwarne @kshakir Thinking more about this, I'm wondering if the ""Backend Return Code"" is something we want to consider abstract/general enough that every backend should have the option to return one (in which case an `Option[BackendRc]` should be wire from the backend back to the CA, like for the script rc), or if it's something really only specific to JES in which case we should treat it the same way we do the JES status and Run ID (which are updated directly from JES Backend, which is not great but will probably be fixed with intel changes when Backends become actors)..",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184747668
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184752207:216,Availability,error,error,216,"@Horneth I think you're right that most reasonable execution backends should have _some_ notion which could be viewed as a numeric return code. Perhaps ""return code"" isn't the right term there, maybe something like ""error code"" would be more apropos. Pinging @mcovarr @gauravs90 and @francares here in case they have thoughts on the matter.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184752207
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184752207:251,Availability,Ping,Pinging,251,"@Horneth I think you're right that most reasonable execution backends should have _some_ notion which could be viewed as a numeric return code. Perhaps ""return code"" isn't the right term there, maybe something like ""error code"" would be more apropos. Pinging @mcovarr @gauravs90 and @francares here in case they have thoughts on the matter.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184752207
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747:125,Availability,failure,failure,125,"@Horneth check out DSDEEPB-2876. Having thought about this and having seen that new issue in our backlog (Add “reason(s) for failure” to database, metadata) I think this would be better reported as a stringly-typed ""reason for failure"" error message rather than an explicit ""backend return code"" field. It would then be the job of the backend to convert its ""backend error code"" into a useable and sensible message to report.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747:227,Availability,failure,failure,227,"@Horneth check out DSDEEPB-2876. Having thought about this and having seen that new issue in our backlog (Add “reason(s) for failure” to database, metadata) I think this would be better reported as a stringly-typed ""reason for failure"" error message rather than an explicit ""backend return code"" field. It would then be the job of the backend to convert its ""backend error code"" into a useable and sensible message to report.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747:236,Availability,error,error,236,"@Horneth check out DSDEEPB-2876. Having thought about this and having seen that new issue in our backlog (Add “reason(s) for failure” to database, metadata) I think this would be better reported as a stringly-typed ""reason for failure"" error message rather than an explicit ""backend return code"" field. It would then be the job of the backend to convert its ""backend error code"" into a useable and sensible message to report.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747:367,Availability,error,error,367,"@Horneth check out DSDEEPB-2876. Having thought about this and having seen that new issue in our backlog (Add “reason(s) for failure” to database, metadata) I think this would be better reported as a stringly-typed ""reason for failure"" error message rather than an explicit ""backend return code"" field. It would then be the job of the backend to convert its ""backend error code"" into a useable and sensible message to report.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747:242,Integrability,message,message,242,"@Horneth check out DSDEEPB-2876. Having thought about this and having seen that new issue in our backlog (Add “reason(s) for failure” to database, metadata) I think this would be better reported as a stringly-typed ""reason for failure"" error message rather than an explicit ""backend return code"" field. It would then be the job of the backend to convert its ""backend error code"" into a useable and sensible message to report.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747:407,Integrability,message,message,407,"@Horneth check out DSDEEPB-2876. Having thought about this and having seen that new issue in our backlog (Add “reason(s) for failure” to database, metadata) I think this would be better reported as a stringly-typed ""reason for failure"" error message rather than an explicit ""backend return code"" field. It would then be the job of the backend to convert its ""backend error code"" into a useable and sensible message to report.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184753747
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184756416:82,Availability,failure,failure,82,"> every backend should have the option to return one. :+1: . > Add “reason(s) for failure” to database, metadata. :+1:, but happy if storing strings waits for a future ticket",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184756416
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184757316:406,Availability,error,error,406,"@geoffjentry In this case I don't think it should be in the ExecutionInfos Table which by my understanding is more of a custom bag of key/values for backend specific info (like JES Run ID and JES status).; If this is general enough to be valid for any backend it should be in the EXECUTION table IMO.; @cjllanwarne Makes sense to have a string yes, which JES returns anyway but for now we only extract the error code from it",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184757316
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184760682:291,Availability,failure,failure,291,"@Horneth my suggestion for this PR (happy to be overruled - @geoffjentry @kcibul) would be to get the return code being ONLY the return code. And forget the ""backend return code"" entirely for now until that upcoming ticket (maybe enhance that other ticket to add ""JES return codes appear in failure message"" as another AC?)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184760682
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184760682:299,Integrability,message,message,299,"@Horneth my suggestion for this PR (happy to be overruled - @geoffjentry @kcibul) would be to get the return code being ONLY the return code. And forget the ""backend return code"" entirely for now until that upcoming ticket (maybe enhance that other ticket to add ""JES return codes appear in failure message"" as another AC?)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184760682
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184760682:230,Modifiability,enhance,enhance,230,"@Horneth my suggestion for this PR (happy to be overruled - @geoffjentry @kcibul) would be to get the return code being ONLY the return code. And forget the ""backend return code"" entirely for now until that upcoming ticket (maybe enhance that other ticket to add ""JES return codes appear in failure message"" as another AC?)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184760682
https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184764627:190,Testability,log,logs,190,@cjllanwarne I'm ok with that as long as we're ok with not persisting the JES return code at all until this other ticket is addressed - which IMO is not a huge deal since we print it in the logs so it's not completely lost anyway if we need to debug.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/447#issuecomment-184764627
https://github.com/broadinstitute/cromwell/pull/449#issuecomment-184922009:557,Availability,error,errors,557,"@cjllanwarne Looking into the WorkflowActor I found this comment . ```; // The assumption for restart is that the call will have been found in state Running. Explicitly; // re-writing the Starting status causes the new start date to be persisted, which is desirable to; // provide a realistic elapsed execution time.; ```. which seems contradictory with DSDEEPB-2127..; This PR doesn't change the current behavior. I found a bug indirectly related to this though where the resumable and non-resumable calls where not processed correctly leading to weird DB errors.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/449#issuecomment-184922009
https://github.com/broadinstitute/cromwell/pull/458#issuecomment-185924247:106,Availability,failure,failures,106,It's very cool that we get the timing breakdown for the preempted ones. As far as I know all of the other failures don't get any events...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/458#issuecomment-185924247
https://github.com/broadinstitute/cromwell/pull/458#issuecomment-185928699:37,Availability,down,down,37,@cjllanwarne Perhaps one is spinning down and the next one has already triggered?. @kcibul :+1:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/458#issuecomment-185928699
https://github.com/broadinstitute/cromwell/pull/461#issuecomment-186290162:56,Energy Efficiency,green,green,56,"Also yellow is kind of a ""warny"" color, maybe a happier green? :frog:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/461#issuecomment-186290162
https://github.com/broadinstitute/cromwell/pull/461#issuecomment-186291377:75,Energy Efficiency,green,green,75,I was trying to pick something we haven't already used and we already have green. The colors they have are here:; https://github.com/demhydraz/badge-collection/blob/master/licenses/bsd3clause.md. We could try to unify all of the colors but that might not be possible on some badges,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/461#issuecomment-186291377
https://github.com/broadinstitute/cromwell/pull/463#issuecomment-187259045:270,Testability,test,tests,270,"I haven't looked at the other PR but I suspect there is a lot of overlap. The way stdout and stderr are handled in the old world is significantly different than what's required in the new. It should be possible to add correct caching behavior to these changes, but unit tests for this functionality on develop would likely need to be rewritten.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/463#issuecomment-187259045
https://github.com/broadinstitute/cromwell/pull/463#issuecomment-187266329:54,Deployability,patch,patch,54,The other PR is probably to be considered a temporary patch until your change gets merge.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/463#issuecomment-187266329
https://github.com/broadinstitute/cromwell/pull/466#issuecomment-187363708:61,Testability,test,test,61,Is this really easier than turning off call caching for that test?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/466#issuecomment-187363708
https://github.com/broadinstitute/cromwell/pull/466#issuecomment-187365049:94,Testability,test,test,94,Oh yeah we could do that too. Call caching should probably only be turned on for call caching test specs actually and turned off by default.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/466#issuecomment-187365049
https://github.com/broadinstitute/cromwell/pull/466#issuecomment-188299463:278,Availability,failure,failures,278,"@geoffjentry Yeah so I actually changed the fix because @cjllanwarne suggestion seemed cleaner and I though it would have the same effects, but apparently it doesn't. I can change it back to the first version that worked for you.; On a larger point, I think (hope) this kind of failures will be a lot less happening when we re-factor the test suite infrastructure. IMO it's happening because we keep doing more and more complex tricks in the spec to get it to do what we need but with all the features we keep adding it keeps getting less and less stable.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/466#issuecomment-188299463
https://github.com/broadinstitute/cromwell/pull/466#issuecomment-188299463:338,Testability,test,test,338,"@geoffjentry Yeah so I actually changed the fix because @cjllanwarne suggestion seemed cleaner and I though it would have the same effects, but apparently it doesn't. I can change it back to the first version that worked for you.; On a larger point, I think (hope) this kind of failures will be a lot less happening when we re-factor the test suite infrastructure. IMO it's happening because we keep doing more and more complex tricks in the spec to get it to do what we need but with all the features we keep adding it keeps getting less and less stable.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/466#issuecomment-188299463
https://github.com/broadinstitute/cromwell/pull/467#issuecomment-187769722:29,Deployability,Update,Updated,29,#466 Fixed one of the tests. Updated this PR to just tag the docker test.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/467#issuecomment-187769722
https://github.com/broadinstitute/cromwell/pull/467#issuecomment-187769722:22,Testability,test,tests,22,#466 Fixed one of the tests. Updated this PR to just tag the docker test.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/467#issuecomment-187769722
https://github.com/broadinstitute/cromwell/pull/467#issuecomment-187769722:68,Testability,test,test,68,#466 Fixed one of the tests. Updated this PR to just tag the docker test.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/467#issuecomment-187769722
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:40,Deployability,configurat,configurations,40,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:40,Modifiability,config,configurations,40,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:159,Modifiability,variab,variables,159,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:73,Testability,log,logs,73,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:241,Testability,log,logging,241,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:313,Testability,log,logback,313,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:477,Testability,log,logs,477,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329:521,Testability,log,log,521,"I am using this code and trying various configurations to write workflow logs, but I find myself confused a lot... Currently the README has [three environment variables](https://github.com/broadinstitute/cromwell/blob/ks_copy_logs/README.md#logging) listed (`LOG_ROOT`, `LOG_MODE`, `LOG_LEVEL`). It appears that `logback.xml` expects `LOG_MODE` to be `pretty` or `standard` but `WorkflowDescriptor` is expecting it to be `server`. I also couldn't figure out how to both output logs to stdout and also write to a workflow log (a feature I'd be particularly interested in!). Also it appears that we only honor `LOG_ROOT` when `LOG_MODE` is `server`. Can we maybe have a tech talk whenever you get a chance to understand how all these options play together?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188390329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063:394,Integrability,synchroniz,synchronize,394,"Here is a random proposal... `LOG_MODE` can be one of `pretty`, `standard`, or `none`. This determines how Cromwell will log to stdout. Defaults are `standard` for server and `pretty` for command line. Then, independent of `LOG_MODE`, users can turn on workflow logging by setting `LOG_ROOT`, which can be overridden via workflow option (currently called `workflow_log_dir`, but perhaps we can synchronize the names of `LOG_ROOT` and `workflow_log_dir`??). If neither are set, then don't write workflow log. thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063:121,Testability,log,log,121,"Here is a random proposal... `LOG_MODE` can be one of `pretty`, `standard`, or `none`. This determines how Cromwell will log to stdout. Defaults are `standard` for server and `pretty` for command line. Then, independent of `LOG_MODE`, users can turn on workflow logging by setting `LOG_ROOT`, which can be overridden via workflow option (currently called `workflow_log_dir`, but perhaps we can synchronize the names of `LOG_ROOT` and `workflow_log_dir`??). If neither are set, then don't write workflow log. thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063:262,Testability,log,logging,262,"Here is a random proposal... `LOG_MODE` can be one of `pretty`, `standard`, or `none`. This determines how Cromwell will log to stdout. Defaults are `standard` for server and `pretty` for command line. Then, independent of `LOG_MODE`, users can turn on workflow logging by setting `LOG_ROOT`, which can be overridden via workflow option (currently called `workflow_log_dir`, but perhaps we can synchronize the names of `LOG_ROOT` and `workflow_log_dir`??). If neither are set, then don't write workflow log. thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063:503,Testability,log,log,503,"Here is a random proposal... `LOG_MODE` can be one of `pretty`, `standard`, or `none`. This determines how Cromwell will log to stdout. Defaults are `standard` for server and `pretty` for command line. Then, independent of `LOG_MODE`, users can turn on workflow logging by setting `LOG_ROOT`, which can be overridden via workflow option (currently called `workflow_log_dir`, but perhaps we can synchronize the names of `LOG_ROOT` and `workflow_log_dir`??). If neither are set, then don't write workflow log. thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188398063
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188440895:78,Testability,log,logging,78,"@scottfrazer IIRC the original use case specified that one turned on workflow logging via workflow option, not at a server level",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188440895
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188441142:52,Security,hash,hashed,52,"Semi :+1: ... I want Scott's various logging things hashed out and I wasn't particularly thorough, trying to balance not delaying you too long, so it'd be good to get another quick pair of eyes or something like that",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188441142
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188441142:37,Testability,log,logging,37,"Semi :+1: ... I want Scott's various logging things hashed out and I wasn't particularly thorough, trying to balance not delaying you too long, so it'd be good to get another quick pair of eyes or something like that",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-188441142
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-190957501:80,Availability,down,down,80,":+1: although I could not agree more with @geoffjentry's sentiments on slimming down `WorkflowDescriptor`, I think that's better done in pluggable backend PRs or maybe completely separate PRs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-190957501
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:585,Availability,error,error,585,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:774,Availability,error,error,774,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:591,Integrability,message,message,591,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:53,Testability,test,testing,53,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:391,Testability,log,logs,391,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:438,Testability,log,log,438,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:988,Testability,log,log,988,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:1084,Testability,log,log,1084,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:1239,Testability,log,log,1239,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:1428,Testability,log,log,1428,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886:1517,Testability,log,log,1517,"I've been playing around with different settings and testing this out a lot. I like it!. I think I might have found a bug with writing to GCS buckets. I'm using this as my options file:. ```; {; ""workflow_log_dir"": ""gs://sfrazer-dev/foobar"",; ""call_logs_dir"": ""gs://sfrazer-dev/foobar/calls""; }; ```. And I ran a workflow both locally and with JES. In both cases it seemed to write the call logs just fine. However, it seems the workflow log got lost somewhere. It did, however, create a file `gs://sfrazer-dev/foobar` with the contents of the file being `foobar`. I also got this odd error message. Indeed the stderr file that was uploaded was zero bytes. However, it is supposed to be zero bytes! I'll try again and send something else to stderr. Might just be a spurious error when your files happen to be zero bytes... ```; [2016-03-04 10:02:32,132] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log; [2016-03-04 10:02:34,490] [info] Got 'range not satisfiable' for reading gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr-stderr.log at position 0; assuming empty.; [2016-03-04 10:02:34,692] [info] JesBackend [7beff6f6]: Trying to copy output file gs://cromwell-dev/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log to gs://sfrazer-dev/foobar/calls/w/7beff6f6-0b44-4b34-8b20-49868740f235/call-arr/arr.log; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192314886
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192326140:19,Integrability,message,message,19,"As I thought, that message was nothing. Once stderr had more than zero bytes it doesn't show up (and the file on GCS is correct)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192326140
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192375329:33,Testability,log,logs,33,"Once the issue with GCS workflow logs is fixed, then this is good to go!! :+1:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-192375329
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-193448598:19,Testability,log,log,19,"Fixed the workflow log duplication in the latest commit. @mcovarr, I'm going to assume you're ok with the latest diff if @scottfrazer gives his approval.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-193448598
https://github.com/broadinstitute/cromwell/pull/468#issuecomment-193473786:83,Modifiability,plugin,plugin,83,"Approved. @mcovarr my name is only attached here because I enabled the PullApprove plugin. Chris turned off the ""required"" piece, so you should still be able to merge. Once a .pullapprove.yml file is in place, it will have the correct people who should actually be doing the approvals.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/468#issuecomment-193473786
https://github.com/broadinstitute/cromwell/pull/471#issuecomment-188452106:23,Availability,down,down,23,"I've always known deep down that I was born in the wrong century, wait millennium !",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/471#issuecomment-188452106
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-252058323:155,Modifiability,config,configureable,155,"I'm also running into this. Would be nice to get some guidance on a fix from the cromwell team. Ideally, maybe both the user and volume mount location are configureable? Not sure yet what the best fix is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-252058323
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-252058323:54,Usability,guid,guidance,54,"I'm also running into this. Would be nice to get some guidance on a fix from the cromwell team. Ideally, maybe both the user and volume mount location are configureable? Not sure yet what the best fix is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-252058323
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:963,Deployability,configurat,configuration,963,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:67,Modifiability,config,config,67,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:170,Modifiability,config,config,170,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:177,Modifiability,Config,ConfigBackendLifecycleActorFactory,177,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:214,Modifiability,config,config,214,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:963,Modifiability,config,configuration,963,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:998,Modifiability,config,config,998,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535:878,Security,secur,security,878,"Looking at this with Cromwell 24, the user can be specified with a config like:. ```; default = ""Local""; providers {; Local {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory""; config {; runtime-attributes = """"""; String? docker; String? docker_user; """"""; submit-docker = """"""docker run --rm ${ ""--user "" + docker_user } -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash ${docker_cwd}/execution/script""""""; .; .; .; ```. The WDL can pass in `docker_user` as a runtime attribute, which could be an expression involving an input or just a hardcoded value. But even with a container path not under `/root`, there are currently permissions problems that prevent this from working due to the different users inside and outside the Docker container. It may be possible to `chmod` and `umask` our way past these problems, but I need to think through the security implications of doing so. Maybe making this more liberal behavior an opt-in configuration value in the backend config would be okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271364535
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271731787:79,Testability,test,test,79,I have some changes for this on a branch that I'd like to try with a realistic test case. Can anyone volunteer an example? Thanks!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-271731787
https://github.com/broadinstitute/cromwell/issues/472#issuecomment-273559606:12,Usability,simpl,simple,12,"@mcovarr: A simple print of the help text from any of our Docker images would fit the bill:; https://hub.docker.com/r/broadinstitute/viral-ngs/tags/. A relevant command would be: `taxon_filter.py --help` (should exit 0):. ```; task dockerTest {; command {; taxon_filter.py --help; }. runtime {; memory: ""8GB""; docker: ""broadinstitute/viral-ngs""; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/472#issuecomment-273559606
https://github.com/broadinstitute/cromwell/pull/473#issuecomment-188389370:42,Testability,test,test,42,@geoffjentry Could you pls check that the test passes on this branch for you ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/473#issuecomment-188389370
https://github.com/broadinstitute/cromwell/pull/473#issuecomment-188503022:68,Deployability,update,update,68,"It works! . Now everyone back away slowly, don't breathe, and never update develop ever again",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/473#issuecomment-188503022
https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686:54,Availability,error,error,54,"~~Am I correct in saying that this PR doesn't capture error messages coming from JES (polling, job creation, job failed...) ?~~; Nop, the error is bubbled up from JES Backend in `Call***Failure`s my bad.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686
https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686:138,Availability,error,error,138,"~~Am I correct in saying that this PR doesn't capture error messages coming from JES (polling, job creation, job failed...) ?~~; Nop, the error is bubbled up from JES Backend in `Call***Failure`s my bad.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686
https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686:186,Availability,Failure,Failure,186,"~~Am I correct in saying that this PR doesn't capture error messages coming from JES (polling, job creation, job failed...) ?~~; Nop, the error is bubbled up from JES Backend in `Call***Failure`s my bad.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686
https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686:60,Integrability,message,messages,60,"~~Am I correct in saying that this PR doesn't capture error messages coming from JES (polling, job creation, job failed...) ?~~; Nop, the error is bubbled up from JES Backend in `Call***Failure`s my bad.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/475#issuecomment-190207686
https://github.com/broadinstitute/cromwell/pull/477#issuecomment-189433723:78,Availability,robust,robust,78,"Yeah it was actually worse than I thought, it was not terribly broken but not robust to all edge cases either. I can explain to you if you want.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/477#issuecomment-189433723
https://github.com/broadinstitute/cromwell/pull/479#issuecomment-190455236:18,Deployability,update,update,18,I need to make an update to changelog,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/479#issuecomment-190455236
https://github.com/broadinstitute/cromwell/issues/483#issuecomment-193898794:17,Integrability,depend,depend,17,This does indeed depend on #482,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/483#issuecomment-193898794
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191364936:184,Testability,test,tested,184,Yeah I'd rather see only code committed that's actually used... can we add these classes in only when they're actually used so we're sure that everything we're adding is hooked up and tested?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191364936
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191372252:196,Integrability,interface,interfaces,196,"@scottfrazer @geoffjentry They are going to be used in the next 3 tasks based on priority (Excel sheet), so I think It does not hurt anyone to have them as a baseline right know (they just define interfaces and not concrete implementations) since we took the work of defining them in the past.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191372252
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191947625:150,Deployability,release,release,150,"@francares sorry for the slow responses this week. We've got people out this week so we're falling a bit behind on code reviews (also this week was a release week, which has taken up a good amount of my time). I will definitely review again by EOD tomorrow, but I'm not avoiding this! I need to review @kshakir's PR first because I'm way overdue on that one, but this one is next.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191947625
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191947625:270,Safety,avoid,avoiding,270,"@francares sorry for the slow responses this week. We've got people out this week so we're falling a bit behind on code reviews (also this week was a release week, which has taken up a good amount of my time). I will definitely review again by EOD tomorrow, but I'm not avoiding this! I need to review @kshakir's PR first because I'm way overdue on that one, but this one is next.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-191947625
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192365299:64,Testability,log,logs,64,"@scottfrazer Yes, that's right. If you take a look to the build logs you will see what your are saying.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192365299
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192365563:27,Integrability,depend,dependencies,27,@geoffjentry I removed lib dependencies in Cromwell-backend.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192365563
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192386095:48,Integrability,depend,dependencies,48,"Does anybody know what happens when versions of dependencies differ between `cromwell` and `cromwell-backend`? I can find out empirically, though I wonder if there are any consequences of this we should be aware of... and if that is a bad thing, is there any way we can define dependencies so they are in lockstep with Cromwell?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192386095
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192386095:277,Integrability,depend,dependencies,277,"Does anybody know what happens when versions of dependencies differ between `cromwell` and `cromwell-backend`? I can find out empirically, though I wonder if there are any consequences of this we should be aware of... and if that is a bad thing, is there any way we can define dependencies so they are in lockstep with Cromwell?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192386095
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192387903:27,Modifiability,inherit,inherit,27,"IIRC you generally want to inherit your deps (and everything else) from the main build.sbt and only vary the things which are actually varying. . Which raises the point that we should be doing that instead of defining all new plugins, deps, etc in here",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192387903
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192387903:226,Modifiability,plugin,plugins,226,"IIRC you generally want to inherit your deps (and everything else) from the main build.sbt and only vary the things which are actually varying. . Which raises the point that we should be doing that instead of defining all new plugins, deps, etc in here",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192387903
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192392206:188,Integrability,interface,interface,188,"Though I guess if they really are pluggable backends, then somebody can create their own SBT project and include whatever they want as long as it exposes a class that adheres to the Actor interface. So we really can't stop differing versions of Akka or any other shared package, right?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192392206
https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192392206:146,Security,expose,exposes,146,"Though I guess if they really are pluggable backends, then somebody can create their own SBT project and include whatever they want as long as it exposes a class that adheres to the Actor interface. So we really can't stop differing versions of Akka or any other shared package, right?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/495#issuecomment-192392206
https://github.com/broadinstitute/cromwell/pull/499#issuecomment-191442121:97,Availability,failure,failure,97,"Don't merge yet, I just discovered another small issue which should take care of the last tyburn failure",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/499#issuecomment-191442121
https://github.com/broadinstitute/cromwell/pull/499#issuecomment-191825712:91,Availability,failure,failures,91,@Horneth and @mcovarr can you review when you get a chance? This should now fix the Tyburn failures on the `develop` branch,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/499#issuecomment-191825712
https://github.com/broadinstitute/cromwell/pull/499#issuecomment-192333588:47,Testability,test,test,47,I'll merge this soon... I think I can increase test coverage a bit first,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/499#issuecomment-192333588
https://github.com/broadinstitute/cromwell/issues/500#issuecomment-191929454:0,Integrability,Depend,Depends,0,"Depends on having call-scoped ~~BackendActors~~ Backends, which currently are a ways off.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/500#issuecomment-191929454
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-191933148:192,Energy Efficiency,reduce,reduce,192,_Big picture:_ This PR introduces a `CallDescriptor` wrapper around some other stuff. How do you envision this to be of use in PBE? Do you see this as turning into a `TaskDescriptor`? Does it reduce any effort later on?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-191933148
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-191933148:53,Integrability,wrap,wrapper,53,_Big picture:_ This PR introduces a `CallDescriptor` wrapper around some other stuff. How do you envision this to be of use in PBE? Do you see this as turning into a `TaskDescriptor`? Does it reduce any effort later on?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-191933148
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:62,Availability,failure,failure,62,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:104,Availability,failure,failure,104,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:265,Availability,failure,failure,265,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2823,Availability,ERROR,ERROR,2823,"-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source); ```. From that point on it's basically a trainwreck of tests cross-talking.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:504,Integrability,message,message,504,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:589,Integrability,message,message,589,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:814,Integrability,message,messages,814,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:856,Integrability,message,message,856,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2046,Performance,concurren,concurrent,2046,"ystem)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintVi",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:899,Safety,timeout,timeout,899,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:3039,Security,integrity,integrity,3039,"-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source); ```. From that point on it's basically a trainwreck of tests cross-talking.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:57,Testability,test,test,57,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:286,Testability,test,test,286,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:710,Testability,test,test,710,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:810,Testability,log,log,810,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:852,Testability,log,log,852,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:948,Testability,test,test-system-akka,948,"tl;dr I'd like to squash / rebase / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpret",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1015,Testability,test,test-system,1015," / merge this despite a test failure during one run since I think that failure was due to unrelated Docker pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart,",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1132,Testability,test,test-system-akka,1132,"er pull issues. So one build for this branch failed:. https://travis-ci.org/broadinstitute/cromwell/builds/113532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1185,Testability,test,test-system,1185,"532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:3",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1266,Testability,test,test-system,1266,"532462. The first failure was a docker test, and looking at this more closely something seems to have gone awry pulling the Docker image. Our build scripts should pre-pull `ubuntu:latest` and normally this takes about 10 seconds and produces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:3",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1479,Testability,test,test-system-akka,1479,"uces a nice success message. In this run the Docker image pull took more than 43 seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] In",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1547,Testability,test,test-system,1547," seconds and the success message appears to be cut off:. ```; Pulling repository docker.io/library/ubuntu; age for ubuntu:latest; ```. The Docker test looks like it's going fine until it's time to actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJo",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1731,Testability,test,test-system,1731," actually run a call, at which point there are no log messages for 16 seconds, and when the log message does arrive it seems to indicate a timeout:. ```; [INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ``",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1885,Testability,test,test,1885,"INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2149,Testability,test,test-system,2149,"spatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.h",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2289,Testability,test,test-system,2289,"ray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown So",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2461,Testability,test,test-system,2461,"tem-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source); ```. From that point on it's basically a trainwreck of tests cross-talkin",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2592,Testability,test,test-system,2592,"-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source); ```. From that point on it's basically a trainwreck of tests cross-talking.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:2904,Testability,test,test-system,2904,"-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source); ```. From that point on it's basically a trainwreck of tests cross-talking.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:3470,Testability,test,tests,3470,"-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; UK_RUNTIME_ATTRIBUTE table: RUNTIME_ATTRIBUTES; at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source); at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source); ```. From that point on it's basically a trainwreck of tests cross-talking.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1952,Usability,pause,paused,1952,"INFO] [03/03/2016 23:43:02.128] [test-system-akka.actor.default-dispatcher-2] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344:1973,Usability,pause,paused,1973,"ystem)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Starting.; [WARN] [03/03/2016 23:43:18.664] [test-system-akka.actor.default-dispatcher-4] [akka://test-system/system/IO-TCP/selectors/$a/1] received dead letter from Actor[akka://test-system/user/IO-HTTP/group-0/1#-1001288108]: Write(ByteString(),spray.io.SslTlsSupport$WriteChunkAck$@22a4ed01); ```. There's another 13 second hang shortly thereafter:. ```; [INFO] [03/03/2016 23:43:19.002] [test-system-akka.actor.default-dispatcher-10] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: persisting status of a to Running.; [INFO] [03/03/2016 23:43:32.134] [pool-7-thread-13-ScalaTest-running-CallCachingWorkflowSpec] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = None, effective id = c21e652b-b5f0-4435-a390-b1d61d1c9b4a; ```. Next it looks like a test is started up while pointing to the same in-memory db as this paused workflow. The paused workflow is interpreted as a workflow needing restart, so another concurrent copy is launched. . ```; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Found 1 workflow to restart.; [INFO] [03/03/2016 23:43:32.139] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor Restarting workflow ID: 299b2fc4-6a26-462f-96e3-1281f172d197; [INFO] [03/03/2016 23:43:32.152] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] Invoking restartableWorkflow on 299b2fc4; [INFO] [03/03/2016 23:43:32.153] [ForkJoinPool-3-worker-3] [akka://test-system/user/$$h] WorkflowManagerActor submitWorkflow input id = Some(299b2fc4-6a26-462f-96e3-1281f172d197), effective id = 299b2fc4-6a26-462f-96e3-1281f172d197; ```. This quickly falls afoul of a uniqueness constraint:. ```; [ERROR] [03/03/2016 23:43:32.236] [ForkJoinPool-3-worker-1] [WorkflowActor(akka://test-system)] WorkflowActor [UUID(299b2fc4)]: Could not persist runtime attributes; java.sql.SQLIntegrityConstraintVi",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/502#issuecomment-192361344
https://github.com/broadinstitute/cromwell/pull/504#issuecomment-191889151:16,Deployability,update,updated,16,"@mcovarr README updated, wording okay?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/504#issuecomment-191889151
https://github.com/broadinstitute/cromwell/pull/505#issuecomment-194339115:109,Energy Efficiency,schedul,schedule,109,@cjllanwarne I asked @Horneth if we could use this during one of the upcoming lunch & learns which i need to schedule,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/505#issuecomment-194339115
https://github.com/broadinstitute/cromwell/pull/505#issuecomment-194339115:86,Usability,learn,learns,86,@cjllanwarne I asked @Horneth if we could use this during one of the upcoming lunch & learns which i need to schedule,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/505#issuecomment-194339115
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193282727:80,Integrability,message,message,80,"Is this ""always on""?. I would have thought we would want a way to stop this log message happening 10,000 times per JES job?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193282727
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193282727:76,Testability,log,log,76,"Is this ""always on""?. I would have thought we would want a way to stop this log message happening 10,000 times per JES job?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193282727
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193334208:160,Testability,log,logback,160,"@Horneth it still feels like debug information to me - especially if you have ~100 workflows happening simultaneously? . Can we make this ""debug"" and allow the logback.xml to make JesBackendCall log at ""debug"" level?. But, happy to be overruled by the next reviewer. The wheel chooses @scottfrazer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193334208
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193334208:195,Testability,log,log,195,"@Horneth it still feels like debug information to me - especially if you have ~100 workflows happening simultaneously? . Can we make this ""debug"" and allow the logback.xml to make JesBackendCall log at ""debug"" level?. But, happy to be overruled by the next reviewer. The wheel chooses @scottfrazer.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193334208
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025:50,Testability,log,log,50,"Agree with @cjllanwarne it would be preferable to log at debug, can this be overridden on the command line to specify debug-level logging rather than requiring changes to logback.xml?. :+1: delta this issue and moving the line where the logging is happening",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025:130,Testability,log,logging,130,"Agree with @cjllanwarne it would be preferable to log at debug, can this be overridden on the command line to specify debug-level logging rather than requiring changes to logback.xml?. :+1: delta this issue and moving the line where the logging is happening",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025:171,Testability,log,logback,171,"Agree with @cjllanwarne it would be preferable to log at debug, can this be overridden on the command line to specify debug-level logging rather than requiring changes to logback.xml?. :+1: delta this issue and moving the line where the logging is happening",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025
https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025:237,Testability,log,logging,237,"Agree with @cjllanwarne it would be preferable to log at debug, can this be overridden on the command line to specify debug-level logging rather than requiring changes to logback.xml?. :+1: delta this issue and moving the line where the logging is happening",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/507#issuecomment-193371025
https://github.com/broadinstitute/cromwell/pull/509#issuecomment-193368423:178,Integrability,interface,interface,178,@cjllanwarne the goal here is to move all backend-specific logic off the `BackendCall` and into the `Backend`. This is an evolutionary step that maintains the same `BackendCall` interface but delegates all meaningful work directly or indirectly to the backend. When this process is complete the `BackendCall` will become useless and methods can become parameterized by `JobDescriptor` instead. The combination of `JobDescriptor` and `Backend` should be able to accomplish any call-level work in the system.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/509#issuecomment-193368423
https://github.com/broadinstitute/cromwell/pull/509#issuecomment-193368423:352,Modifiability,parameteriz,parameterized,352,@cjllanwarne the goal here is to move all backend-specific logic off the `BackendCall` and into the `Backend`. This is an evolutionary step that maintains the same `BackendCall` interface but delegates all meaningful work directly or indirectly to the backend. When this process is complete the `BackendCall` will become useless and methods can become parameterized by `JobDescriptor` instead. The combination of `JobDescriptor` and `Backend` should be able to accomplish any call-level work in the system.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/509#issuecomment-193368423
https://github.com/broadinstitute/cromwell/pull/509#issuecomment-193368423:59,Testability,log,logic,59,@cjllanwarne the goal here is to move all backend-specific logic off the `BackendCall` and into the `Backend`. This is an evolutionary step that maintains the same `BackendCall` interface but delegates all meaningful work directly or indirectly to the backend. When this process is complete the `BackendCall` will become useless and methods can become parameterized by `JobDescriptor` instead. The combination of `JobDescriptor` and `Backend` should be able to accomplish any call-level work in the system.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/509#issuecomment-193368423
https://github.com/broadinstitute/cromwell/pull/510#issuecomment-193329275:34,Integrability,depend,dependency,34,`sbt.ResolveException: unresolved dependency: org.broadinstitute#wdl4s_2.11;0.4: not found` - just because it's waiting for the other PR to be merged?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/510#issuecomment-193329275
https://github.com/broadinstitute/cromwell/pull/510#issuecomment-193330854:111,Deployability,update,update,111,"re the build breakage, I need to have the wdl4s snapshot published by the other PR's merge to develop and then update the build.sbt to reference that.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/510#issuecomment-193330854
https://github.com/broadinstitute/cromwell/issues/515#issuecomment-193897087:0,Integrability,Depend,Depends,0,Depends on #482 #483,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/515#issuecomment-193897087
https://github.com/broadinstitute/cromwell/issues/520#issuecomment-253930606:21,Modifiability,refactor,refactored,21,this bug has so been refactored out of existence,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/520#issuecomment-253930606
https://github.com/broadinstitute/cromwell/pull/522#issuecomment-193983054:60,Testability,test,tests,60,@mcovarr Any reason why the build is failing? I ran all the tests locally and it looked like it ran successfully.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/522#issuecomment-193983054
https://github.com/broadinstitute/cromwell/pull/524#issuecomment-194351937:92,Testability,test,tests,92,Definitely very cool. Do you think this is big enough of a change that we should run Tyburn tests on it before merging?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/524#issuecomment-194351937
https://github.com/broadinstitute/cromwell/pull/527#issuecomment-194107947:261,Integrability,depend,dependency,261,"Amazing! That is the right way to deal with multi project. I don't know if you remember Geoff, Fransico also asked for this approach and I shared quite few links on gitter. But, anyways that's an amazing start for decoupling projects or in other words defining dependency chain. :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/527#issuecomment-194107947
https://github.com/broadinstitute/cromwell/pull/527#issuecomment-194383402:591,Testability,test,test,591,"> All of the code which went into engine retained cromwell as the package instead of cromwell.engine, which causes IntelliJ to whine. I thought it'd be weird as there is a cromwell.engine package already (cromwell.engine.engine?). I'm still trying to understand that statement in the context of what I'm seeing in diff/intellij. I'm especially not sure about the particular IntelliJ ""whine"". If it's about the packages being incorrect in all the files, that warning is because there's a missing ""cromwell"" directory in the file paths.; - engine/src/main/scala/{ => cromwell}/*; - engine/src/test/scala/{ => cromwell}/*",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/527#issuecomment-194383402
https://github.com/broadinstitute/cromwell/pull/528#issuecomment-194307168:37,Usability,simpl,simplicity,37,WHEEL: @geoffjentry @mcovarr ... for simplicity can you also review the WDL4s and Tyburn PRs? They're short!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/528#issuecomment-194307168
https://github.com/broadinstitute/cromwell/issues/531#issuecomment-254213830:34,Testability,test,test,34,I'm pretty sure this is a centaur test,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/531#issuecomment-254213830
https://github.com/broadinstitute/cromwell/issues/539#issuecomment-195063209:45,Testability,test,tests,45,FYI-- Travis doesn't currently run any mysql tests :frowning:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/539#issuecomment-195063209
https://github.com/broadinstitute/cromwell/issues/540#issuecomment-196368658:45,Testability,test,tests,45,I believe this is being worked on via having tests turned off during assembly,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/540#issuecomment-196368658
https://github.com/broadinstitute/cromwell/pull/542#issuecomment-195070940:29,Testability,test,tests,29,Closing this until the MySQL tests are restored,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/542#issuecomment-195070940
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195387043:77,Security,validat,validation,77,"A philosophical question, not a leading one - what about having a persistent validation actor instead of creating them per-validation?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195387043
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195387043:123,Security,validat,validation,123,"A philosophical question, not a leading one - what about having a persistent validation actor instead of creating them per-validation?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195387043
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365:417,Availability,robust,robust,417,"Not really for this PR I think, but looking at the `validateInputs` method, it only validates the inputs if a file was passed (makes sense), but if no input file is specified and the WDL does need an input, validation will return success, which is weird IMO.; @geoffjentry My 2 cents are I personally prefer having small short-lived actors instead of a singleton actor that handle all the requests. I think it's more robust, faster, and less leading towards godlike actors.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365:52,Security,validat,validateInputs,52,"Not really for this PR I think, but looking at the `validateInputs` method, it only validates the inputs if a file was passed (makes sense), but if no input file is specified and the WDL does need an input, validation will return success, which is weird IMO.; @geoffjentry My 2 cents are I personally prefer having small short-lived actors instead of a singleton actor that handle all the requests. I think it's more robust, faster, and less leading towards godlike actors.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365:84,Security,validat,validates,84,"Not really for this PR I think, but looking at the `validateInputs` method, it only validates the inputs if a file was passed (makes sense), but if no input file is specified and the WDL does need an input, validation will return success, which is weird IMO.; @geoffjentry My 2 cents are I personally prefer having small short-lived actors instead of a singleton actor that handle all the requests. I think it's more robust, faster, and less leading towards godlike actors.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365:207,Security,validat,validation,207,"Not really for this PR I think, but looking at the `validateInputs` method, it only validates the inputs if a file was passed (makes sense), but if no input file is specified and the WDL does need an input, validation will return success, which is weird IMO.; @geoffjentry My 2 cents are I personally prefer having small short-lived actors instead of a singleton actor that handle all the requests. I think it's more robust, faster, and less leading towards godlike actors.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195393365
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:205,Availability,fault,fault,205,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:211,Availability,toler,tolerance,211,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:221,Availability,down,down,221,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:410,Availability,error,error,410,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:269,Integrability,rout,router,269,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:189,Performance,perform,performance,189,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:311,Performance,load,load,311,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:125,Security,Validat,Validation,125,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500:367,Security,validat,validation,367,"@Horneth There are certainly tradeoffs and I don't disagree w/ what you said. However consider the flip side - by defining A Validation Actor you're allowing for more granular control over performance and fault tolerance down the road, e.g. you could replace it with a router talking to a bank of VAs and doing load balancing, fiddle with its own threadpool, provide validation specific supervision in case of error, etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195399500
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589:297,Availability,error,error,297,"@geoffjentry I totally agree with having a singleton actor for load balancing / supervision / monitoring etc.. but I think the actual validation work itself is better handled by a one-shot do-and-die actor than by a singleton actor. I don't think the actor that is responsible for load balancing, error handling etc.. should also be responsible for doing the work it's supervising.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589:94,Energy Efficiency,monitor,monitoring,94,"@geoffjentry I totally agree with having a singleton actor for load balancing / supervision / monitoring etc.. but I think the actual validation work itself is better handled by a one-shot do-and-die actor than by a singleton actor. I don't think the actor that is responsible for load balancing, error handling etc.. should also be responsible for doing the work it's supervising.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589:63,Performance,load,load,63,"@geoffjentry I totally agree with having a singleton actor for load balancing / supervision / monitoring etc.. but I think the actual validation work itself is better handled by a one-shot do-and-die actor than by a singleton actor. I don't think the actor that is responsible for load balancing, error handling etc.. should also be responsible for doing the work it's supervising.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589:281,Performance,load,load,281,"@geoffjentry I totally agree with having a singleton actor for load balancing / supervision / monitoring etc.. but I think the actual validation work itself is better handled by a one-shot do-and-die actor than by a singleton actor. I don't think the actor that is responsible for load balancing, error handling etc.. should also be responsible for doing the work it's supervising.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589:134,Security,validat,validation,134,"@geoffjentry I totally agree with having a singleton actor for load balancing / supervision / monitoring etc.. but I think the actual validation work itself is better handled by a one-shot do-and-die actor than by a singleton actor. I don't think the actor that is responsible for load balancing, error handling etc.. should also be responsible for doing the work it's supervising.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195401589
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:1111,Integrability,interface,interface,1111,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:1563,Modifiability,refactor,refactor,1563,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:227,Security,validat,validation,227,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:579,Security,validat,validation,579,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:735,Security,validat,validation,735,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:1006,Security,Validat,Validation,1006,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:1100,Security,validat,validation,1100,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:1410,Security,validat,validation,1410,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168:1611,Security,validat,validation,1611,"@Horneth The more I'm thinking about this I'm transitioning from ""throwing something out there"" to ""advocating"" :). What bothers me about this is that eventually we're going to want workflow submission also go through the same validation actor instead of doing it in multiple ways. Typically you want actor ownership to be hierarchical in nature but this way you'd have multiple parent types. Something to consider - what happens if a VA throws an exception under this model? You'll now need to have supervision code in multiple places. More abstractly what will be said is that validation is A Thing, but needs to exist independently in multiple places - if that's the case it should be pulled out into its own block. Furthermore the validation actor should be the sort of actor which is perfect for being its own concept - it's a completely idempotent, stateless operation. Work gets sent to it, it process the work and responds to the querier. My point about supervision is that by Right Now defining A Validation Actor (presumably owned by the kernel) what you're effectively doing is defining a validation interface. You can change how things are implemented in the future (e.g. it's really a bunch of VAs, it's firing up ephemeral VAs, whatever) and not need to change any code throughout the rest of the system as everything is still talking to the same actorRef that they were before. Alternatively if validation actors are being spun up on demand in multiple places and we decide that we somehow need to handle VAs in a special manner, it'll be a larger refactor. All that said, at the moment only the validation webservice is talking to the VA. I'm happy to shelve this until when something else is talking to VAs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195419168
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195427960:155,Security,validat,validation,155,"@Horneth To play devil's advocate against myself - a bit, as this doesn't matter if it's a short lived or long lived VA, in a world where we want both the validation API and submission to go through the validation actor (reclal that currently submission validation is done by the WMA) the submission endpoint could send the work to the VA who then sends it to the WMA if it is OK. That would at least make the VA fully under the umbrella of the webservice portion of the actor system",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195427960
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195427960:203,Security,validat,validation,203,"@Horneth To play devil's advocate against myself - a bit, as this doesn't matter if it's a short lived or long lived VA, in a world where we want both the validation API and submission to go through the validation actor (reclal that currently submission validation is done by the WMA) the submission endpoint could send the work to the VA who then sends it to the WMA if it is OK. That would at least make the VA fully under the umbrella of the webservice portion of the actor system",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195427960
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195427960:254,Security,validat,validation,254,"@Horneth To play devil's advocate against myself - a bit, as this doesn't matter if it's a short lived or long lived VA, in a world where we want both the validation API and submission to go through the validation actor (reclal that currently submission validation is done by the WMA) the submission endpoint could send the work to the VA who then sends it to the WMA if it is OK. That would at least make the VA fully under the umbrella of the webservice portion of the actor system",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195427960
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195428179:277,Security,Validat,Validation,277,"@geoffjentry I think we're saying the same thing. This is what I'm thinking : [link](https://www.lucidchart.com/publicSegments/view/288aace2-3423-4364-a5f6-6eff306e754e/image.png). (Which is exactly what is in the other ""proof of concept"" branch but with a DB Actor instead of Validation Actor btw)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195428179
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195429261:125,Performance,optimiz,optimization,125,"@Horneth Yeah, almost exactly that. The only beef I have w/ that is that I'd call the ephemeral VAs behind it as a premature optimization, but it is certainly a valid optimization. Similarly maybe there are N fixed VAs behind it or something like that (I'm not advocating for either).",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195429261
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195429261:167,Performance,optimiz,optimization,167,"@Horneth Yeah, almost exactly that. The only beef I have w/ that is that I'd call the ephemeral VAs behind it as a premature optimization, but it is certainly a valid optimization. Similarly maybe there are N fixed VAs behind it or something like that (I'm not advocating for either).",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195429261
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195433266:40,Performance,optimiz,optimization,40,"For this particular case it might be an optimization, but from a general perspective I think it can be a design choice and would avoid creating new Workflow Actors-like",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195433266
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195433266:129,Safety,avoid,avoid,129,"For this particular case it might be an optimization, but from a general perspective I think it can be a design choice and would avoid creating new Workflow Actors-like",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195433266
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195434155:41,Safety,avoid,avoid,41,"@Horneth Anyone who would disagree with ""avoid creating new Workflow Actors-like"" should be sent to the guillotine",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195434155
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195440254:127,Availability,reliab,reliability,127,"@cjllanwarne I'd prefer to see it talking to a single point (currently a single VA, as @Horneth & I discussed, if performance, reliability or complexity call for it, to be morphed into something else). I don't care that much if it happens here, but it's not an onerous change to make on this PR. I _will_ care once something else is talking to a VA",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195440254
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195440254:114,Performance,perform,performance,114,"@cjllanwarne I'd prefer to see it talking to a single point (currently a single VA, as @Horneth & I discussed, if performance, reliability or complexity call for it, to be morphed into something else). I don't care that much if it happens here, but it's not an onerous change to make on this PR. I _will_ care once something else is talking to a VA",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-195440254
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196365782:34,Security,Validat,ValidateActor,34,@gauravs90 is it possible to make ValidateActor a singleton in this PR or would you rather spin that out as a new PR?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196365782
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196425796:106,Modifiability,evolve,evolve,106,"@cjllanwarne Cool. I don't completely agree with that design, but I'll do it in this PR. Let's see how to evolve it more like what the diagram proposes sometime later.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196425796
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196430491:42,Performance,optimiz,optimization,42,@gauravs90 including the bottom row is an optimization once/if the original actor is overloaded. The right optimization at that point might not be what we think it is now - but it'll be trivial to change on the future as clients of this actor were talking about can continue to use the same actor ref without being any the wiser,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196430491
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196430491:107,Performance,optimiz,optimization,107,@gauravs90 including the bottom row is an optimization once/if the original actor is overloaded. The right optimization at that point might not be what we think it is now - but it'll be trivial to change on the future as clients of this actor were talking about can continue to use the same actor ref without being any the wiser,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196430491
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196535579:76,Integrability,interface,interface,76,"Yeah that's good for now, feel free to change the implementation behind the interface if you need to.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196535579
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196540539:148,Integrability,rout,router,148,"@mcovarr Well okay then. Let this remain a singleton as we discussed in the meeting. Later on, if we feel it's a bottleneck, we can make it a kinda router or something.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196540539
https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196540539:113,Performance,bottleneck,bottleneck,113,"@mcovarr Well okay then. Let this remain a singleton as we discussed in the meeting. Later on, if we feel it's a bottleneck, we can make it a kinda router or something.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/548#issuecomment-196540539
https://github.com/broadinstitute/cromwell/issues/554#issuecomment-197620844:151,Deployability,update,updates,151,"Most of the remaining backend dependencies on engine look straightforward to move to backend or core, though there are a few prizes like the direct DB updates from JES and Local backends. No heroics required, but do what's possible to remove unnecessary dependencies.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/554#issuecomment-197620844
https://github.com/broadinstitute/cromwell/issues/554#issuecomment-197620844:30,Integrability,depend,dependencies,30,"Most of the remaining backend dependencies on engine look straightforward to move to backend or core, though there are a few prizes like the direct DB updates from JES and Local backends. No heroics required, but do what's possible to remove unnecessary dependencies.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/554#issuecomment-197620844
https://github.com/broadinstitute/cromwell/issues/554#issuecomment-197620844:254,Integrability,depend,dependencies,254,"Most of the remaining backend dependencies on engine look straightforward to move to backend or core, though there are a few prizes like the direct DB updates from JES and Local backends. No heroics required, but do what's possible to remove unnecessary dependencies.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/554#issuecomment-197620844
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:172,Deployability,integrat,integration,172,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:172,Integrability,integrat,integration,172,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:94,Testability,test,test,94,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:116,Testability,test,test,116,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:139,Testability,test,test,139,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:158,Testability,test,test,158,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681:184,Testability,test,test,184,"After the changes above, I believe the various Specs should run as expected:; - `sbt alltests:test`; - `sbt notests:test`; - `sbt nodocker:test`; - `sbt dbms:test`; - `sbt integration:test`; - etc.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/558#issuecomment-196466681
https://github.com/broadinstitute/cromwell/pull/561#issuecomment-196998638:30,Testability,test,test,30,"only the single-sample Tyburn test failed when I ran the full suite. When I ran this test individually it passed, though. I think it's probably okay but I'll kick off another full Tyburn run (and this time I'll actually keep the logs _oops_) and report back in the AM.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/561#issuecomment-196998638
https://github.com/broadinstitute/cromwell/pull/561#issuecomment-196998638:85,Testability,test,test,85,"only the single-sample Tyburn test failed when I ran the full suite. When I ran this test individually it passed, though. I think it's probably okay but I'll kick off another full Tyburn run (and this time I'll actually keep the logs _oops_) and report back in the AM.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/561#issuecomment-196998638
https://github.com/broadinstitute/cromwell/pull/561#issuecomment-196998638:229,Testability,log,logs,229,"only the single-sample Tyburn test failed when I ran the full suite. When I ran this test individually it passed, though. I think it's probably okay but I'll kick off another full Tyburn run (and this time I'll actually keep the logs _oops_) and report back in the AM.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/561#issuecomment-196998638
https://github.com/broadinstitute/cromwell/pull/561#issuecomment-197287172:11,Testability,test,tests,11,All Tyburn tests pass for this branch.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/561#issuecomment-197287172
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197047812:49,Availability,error,errors,49,Can we also have a test to exercise the multiple errors validations?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197047812
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197047812:56,Security,validat,validations,56,Can we also have a test to exercise the multiple errors validations?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197047812
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197047812:19,Testability,test,test,19,Can we also have a test to exercise the multiple errors validations?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197047812
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197048096:11,Security,validat,validation,11,Yes if the validation is going to be centralized here there have to be tests that are at least equivalent to what's in `WorkflowDescriptor`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197048096
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197048096:71,Testability,test,tests,71,Yes if the validation is going to be centralized here there have to be tests that are at least equivalent to what's in `WorkflowDescriptor`.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197048096
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197586552:14,Testability,test,tests,14,There are not tests associated to WorkflowDescriptor related to this topic. ; I will need to create them.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-197586552
https://github.com/broadinstitute/cromwell/pull/562#issuecomment-198101594:28,Testability,test,tests,28,A few minor comments on the tests. Not sure if you meant to address the actor spinning off `Future`s in this PR or a later one. Otherwise :+1: . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/562/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/562#issuecomment-198101594
https://github.com/broadinstitute/cromwell/issues/564#issuecomment-197299959:463,Integrability,wrap,wrap,463,:+1: a bunch. It didn't take long to make me question why we tried to resolve a problem which involved doing too much stuff up front by adding even more stuff up front. . I was talking about something a lot like this to one of our two main internal customers (I believe FC) and they were good with the idea - however I'd say that we should make sure to have official buy in from our internal policy makers just to be sure. The dept itself seems to be learning to wrap its collective head around models where not everything is immediate & 100% consistent fashion so it should be an easy sell now.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/564#issuecomment-197299959
https://github.com/broadinstitute/cromwell/issues/564#issuecomment-197299959:451,Usability,learn,learning,451,:+1: a bunch. It didn't take long to make me question why we tried to resolve a problem which involved doing too much stuff up front by adding even more stuff up front. . I was talking about something a lot like this to one of our two main internal customers (I believe FC) and they were good with the idea - however I'd say that we should make sure to have official buy in from our internal policy makers just to be sure. The dept itself seems to be learning to wrap its collective head around models where not everything is immediate & 100% consistent fashion so it should be an easy sell now.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/564#issuecomment-197299959
https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197415719:6,Integrability,depend,depending,6,"NOTE: depending on reviewer comments, will log TODOs as new tickets, or continue to try and refactor for this PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197415719
https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197415719:92,Modifiability,refactor,refactor,92,"NOTE: depending on reviewer comments, will log TODOs as new tickets, or continue to try and refactor for this PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197415719
https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197415719:43,Testability,log,log,43,"NOTE: depending on reviewer comments, will log TODOs as new tickets, or continue to try and refactor for this PR",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197415719
https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197553637:39,Modifiability,inherit,inherited,39,:+1: with some grousing about code you inherited that you should feel free to ignore. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/566/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/566#issuecomment-197553637
https://github.com/broadinstitute/cromwell/pull/566#issuecomment-198391517:87,Testability,LOG,LOG,87,"I think I would have preferred a new ""IO"" value on top of ""INPUT"" and ""OUTPUT"", maybe ""LOG"" or something, instead of adding pre/suffixes and having to filter them out with regexs but I don't want to block this PR for this :); :+1: minus a few nitpicks. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/566/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/566#issuecomment-198391517
https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197500994:90,Security,Validat,ValidateActor,90,Please hold on to this thought! I think the responsibility of that shouldn't lie with the ValidateActor!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197500994
https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197505173:385,Security,validat,validation,385,"I'd agree with that. I've always felt that the VA should only return a yes/no, although perhaps my issue is being overly pedantic with the name of the actor. The argument for this though was that because people (including yourself, IIRC) didn't want to receive the simple yes/no and thus replicate the parsing of the input files the VA was handing back the parsed components. Once the validation is taken out of WorkflowDescriptor's apply() method it becomes a simple case class constructed by those same values so the effect is the same.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197505173
https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197505173:265,Usability,simpl,simple,265,"I'd agree with that. I've always felt that the VA should only return a yes/no, although perhaps my issue is being overly pedantic with the name of the actor. The argument for this though was that because people (including yourself, IIRC) didn't want to receive the simple yes/no and thus replicate the parsing of the input files the VA was handing back the parsed components. Once the validation is taken out of WorkflowDescriptor's apply() method it becomes a simple case class constructed by those same values so the effect is the same.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197505173
https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197505173:461,Usability,simpl,simple,461,"I'd agree with that. I've always felt that the VA should only return a yes/no, although perhaps my issue is being overly pedantic with the name of the actor. The argument for this though was that because people (including yourself, IIRC) didn't want to receive the simple yes/no and thus replicate the parsing of the input files the VA was handing back the parsed components. Once the validation is taken out of WorkflowDescriptor's apply() method it becomes a simple case class constructed by those same values so the effect is the same.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/569#issuecomment-197505173
https://github.com/broadinstitute/cromwell/pull/572#issuecomment-197445359:47,Availability,ping,pinging,47,"Anyone can can thumbsup and merge at will, but pinging @geoffjentry if no one else steps up",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/572#issuecomment-197445359
https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197557326:34,Availability,failure,failure,34,any idea what's up with that test failure?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197557326
https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197557326:29,Testability,test,test,29,any idea what's up with that test failure?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197557326
https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197564553:58,Testability,log,logs,58,"Nop, it's weird I can't see any information in the Travis logs about this test, and it passes on my laptop",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197564553
https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197564553:74,Testability,test,test,74,"Nop, it's weird I can't see any information in the Travis logs about this test, and it passes on my laptop",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197564553
https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197986609:22,Availability,failure,failure,22,:+1: barring the test failure... I looked into it briefly but I didn't figure anything out. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/573/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197986609
https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197986609:17,Testability,test,test,17,:+1: barring the test failure... I looked into it briefly but I didn't figure anything out. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/573/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/573#issuecomment-197986609
https://github.com/broadinstitute/cromwell/pull/574#issuecomment-197539418:12,Testability,test,test,12,looks like `test:compile` is broken?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/574#issuecomment-197539418
https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197576143:25,Testability,test,test,25,Have you had a chance to test the fix?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197576143
https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197934567:61,Security,hash,hash,61,"Discussed with @scottfrazer, I reproduced the bug on the git hash provided by Jose, and same wdl didn't yield duplicate inputs on develop.; I think this can be marked resolved.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197934567
https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197941787:72,Security,hash,hash,72,If you don't want to pull directly develop I can provide the oldest git hash that fixes this bug,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197941787
https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197959558:4,Security,hash,hash,4,Git hash: 3eb1623d9a5ffdf0fc3626820eab84ae6560b2cd,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197959558
https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197971028:100,Security,hash,hash,100,"Awesome thanks guys!. On Thu, Mar 17, 2016 at 12:26 PM, Thib notifications@github.com wrote:. > Git hash: 3eb1623; > https://github.com/broadinstitute/cromwell/commit/3eb1623d9a5ffdf0fc3626820eab84ae6560b2cd; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197959558",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/576#issuecomment-197971028
https://github.com/broadinstitute/cromwell/issues/579#issuecomment-197909145:15,Modifiability,refactor,refactoring,15,Does this mean refactoring Final Calls to run on a backend instead of in the engine ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/579#issuecomment-197909145
https://github.com/broadinstitute/cromwell/issues/579#issuecomment-216572364:48,Safety,avoid,avoid,48,"Spoke to Khalid, making a replacement ticket to avoid confusion.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/579#issuecomment-216572364
https://github.com/broadinstitute/cromwell/issues/580#issuecomment-198088351:19,Modifiability,config,config,19,"Be able to parse a config like. ``` hocon; backend {; default = ""local""; providers = [; {; name = ""local""; initClass = ""cromwell.engine.backend.local.LocalBackend""; },; {; name = ""jes""; initClass = ""cromwell.engine.backend.jes.JesBackend""; }; ]; }; ```. Treat `BackendConfiguration` as the canonical registry of backends, disclaiming knowledge of backends not mentioned in the config even if they're actually compiled into Cromwell.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/580#issuecomment-198088351
https://github.com/broadinstitute/cromwell/issues/580#issuecomment-198088351:377,Modifiability,config,config,377,"Be able to parse a config like. ``` hocon; backend {; default = ""local""; providers = [; {; name = ""local""; initClass = ""cromwell.engine.backend.local.LocalBackend""; },; {; name = ""jes""; initClass = ""cromwell.engine.backend.jes.JesBackend""; }; ]; }; ```. Treat `BackendConfiguration` as the canonical registry of backends, disclaiming knowledge of backends not mentioned in the config even if they're actually compiled into Cromwell.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/580#issuecomment-198088351
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:1007,Integrability,message,message,1007,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:1240,Integrability,message,message,1240,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:1339,Integrability,message,message,1339,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:1015,Modifiability,parameteriz,parameterized,1015,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:709,Security,access,access,709,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:577,Usability,resume,resume,577,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112:1232,Usability,Resume,Resumed,1232,"Full sketch of the idea as it applied to the pluggable_backends branch below. This particular ticket is concerned only with moving the DB code and having the engine be able to work with backends to determine which calls are resumable. Those might really be two separate pieces that two people could work in parallel. Cromwell would need to wake up and scan its database for Running workflows with Running calls. Something in Cromwell would then need to classify calls into resumable or not resumable. e.g. for JES, figure out if Cromwell has a JES Run ID that could be used to resume polling an already-launched JES run. Only the JES backend would know how to make this determination, but backends don’t have access to the database. So Cromwell would need to gather up representations of possibly resumable executions, examine on which backend type the executions had been running, create CallActors for each execution using a specified backend type (not a currently supported use case), and send a Restart message parameterized by the representation of the execution. The CallActor would need to create a backend of the specified type and then ask that backend if the execution is resumable. Resumable executions would result in a Resumed message making its way back to the WorkflowActor, otherwise WorkflowActor would get a NotResumable message. For NotResumable executions the WorkflowActor should be free to choose whatever backend it pleases to restart the call and shouldn’t necessarily be bound by the backend type that was chosen for the previous attempt.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/581#issuecomment-197643112
https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202728024:47,Testability,Test,Tests,47,"@mcovarr Just rebased with the latest develop. Tests pass locally, and waiting for the results on Travis :sweat_smile: ; With the time gap b/w us, and given that I'll be a little later here at work tomorrow w.r.t you guys, please feel free to merge this to develop so that the blockers because of this PR can be continued elsewhere (given the tests pass here of course and everything looks good). Else, I can come in and do that if there's any corrections required. Thanks!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202728024
https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202728024:343,Testability,test,tests,343,"@mcovarr Just rebased with the latest develop. Tests pass locally, and waiting for the results on Travis :sweat_smile: ; With the time gap b/w us, and given that I'll be a little later here at work tomorrow w.r.t you guys, please feel free to merge this to develop so that the blockers because of this PR can be continued elsewhere (given the tests pass here of course and everything looks good). Else, I can come in and do that if there's any corrections required. Thanks!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202728024
https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202812799:62,Availability,error,errors,62,"assembly fails consistently in Travis with ""Connection reset"" errors during merge, but it seems to work fine locally. I'll give it a few more chances to straighten itself out in Travis before merging.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202812799
https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202836710:24,Availability,failure,failure,24,"Reproduced the assembly failure in Travis on a different branch that was green last night. i.e., the problem isn't here, so I'm merging this.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202836710
https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202836710:73,Energy Efficiency,green,green,73,"Reproduced the assembly failure in Travis on a different branch that was green last night. i.e., the problem isn't here, so I'm merging this.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/582#issuecomment-202836710
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967:94,Energy Efficiency,efficient,efficient,94,I suggest also allow specifying walltime and queue; walltime in particular as it enables most efficient performance of the scheduler and is often a required resource request in traditional HPC cluster setups.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967:123,Energy Efficiency,schedul,scheduler,123,I suggest also allow specifying walltime and queue; walltime in particular as it enables most efficient performance of the scheduler and is often a required resource request in traditional HPC cluster setups.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967:45,Performance,queue,queue,45,I suggest also allow specifying walltime and queue; walltime in particular as it enables most efficient performance of the scheduler and is often a required resource request in traditional HPC cluster setups.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967:104,Performance,perform,performance,104,I suggest also allow specifying walltime and queue; walltime in particular as it enables most efficient performance of the scheduler and is often a required resource request in traditional HPC cluster setups.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-207641967
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242440566:56,Performance,queue,queue,56,"I can confirm that it is possible to set CPU's, memory, queue and project in the current develop branch. Only wall time I'm not so sure. @kshakir: Maybe you know more about this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242440566
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862:684,Availability,alive,alive,684,"Fixed in #1252. ""walltime"" may now read as a backend specific runtime attribute just like any other. I've called the runtime attribute ""sge_walltime"" below. ```; SGE {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"". config {. runtime-attributes = """"""; Int cpu = 1; Float? memory_gb; String? sge_queue; String? sge_project; String? sge_walltime; """""". submit = """"""; qsub \; -terse \; -V \; -b n \; -N ${job_name} \; -wd ${cwd} \; -o ${out} \; -e ${err} \; -pe smp ${cpu} \; ${""-l m_mem_free="" + memory_gb + ""gb""} \; ${""-q "" + sge_queue} \; ${""-P "" + sge_project} \; ${""-l h rt="" + sge_walltime } \; ${script}; """""". kill = ""qdel ${job_id}"". check-alive = ""qstat -j ${job_id}"". job-id-regex = ""(\\d+)"". }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862:212,Modifiability,config,config,212,"Fixed in #1252. ""walltime"" may now read as a backend specific runtime attribute just like any other. I've called the runtime attribute ""sge_walltime"" below. ```; SGE {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"". config {. runtime-attributes = """"""; Int cpu = 1; Float? memory_gb; String? sge_queue; String? sge_project; String? sge_walltime; """""". submit = """"""; qsub \; -terse \; -V \; -b n \; -N ${job_name} \; -wd ${cwd} \; -o ${out} \; -e ${err} \; -pe smp ${cpu} \; ${""-l m_mem_free="" + memory_gb + ""gb""} \; ${""-q "" + sge_queue} \; ${""-P "" + sge_project} \; ${""-l h rt="" + sge_walltime } \; ${script}; """""". kill = ""qdel ${job_id}"". check-alive = ""qstat -j ${job_id}"". job-id-regex = ""(\\d+)"". }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862:219,Modifiability,Config,ConfigBackendLifecycleActorFactory,219,"Fixed in #1252. ""walltime"" may now read as a backend specific runtime attribute just like any other. I've called the runtime attribute ""sge_walltime"" below. ```; SGE {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"". config {. runtime-attributes = """"""; Int cpu = 1; Float? memory_gb; String? sge_queue; String? sge_project; String? sge_walltime; """""". submit = """"""; qsub \; -terse \; -V \; -b n \; -N ${job_name} \; -wd ${cwd} \; -o ${out} \; -e ${err} \; -pe smp ${cpu} \; ${""-l m_mem_free="" + memory_gb + ""gb""} \; ${""-q "" + sge_queue} \; ${""-P "" + sge_project} \; ${""-l h rt="" + sge_walltime } \; ${script}; """""". kill = ""qdel ${job_id}"". check-alive = ""qstat -j ${job_id}"". job-id-regex = ""(\\d+)"". }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862
https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862:256,Modifiability,config,config,256,"Fixed in #1252. ""walltime"" may now read as a backend specific runtime attribute just like any other. I've called the runtime attribute ""sge_walltime"" below. ```; SGE {; actor-factory = ""cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"". config {. runtime-attributes = """"""; Int cpu = 1; Float? memory_gb; String? sge_queue; String? sge_project; String? sge_walltime; """""". submit = """"""; qsub \; -terse \; -V \; -b n \; -N ${job_name} \; -wd ${cwd} \; -o ${out} \; -e ${err} \; -pe smp ${cpu} \; ${""-l m_mem_free="" + memory_gb + ""gb""} \; ${""-q "" + sge_queue} \; ${""-P "" + sge_project} \; ${""-l h rt="" + sge_walltime } \; ${script}; """""". kill = ""qdel ${job_id}"". check-alive = ""qstat -j ${job_id}"". job-id-regex = ""(\\d+)"". }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/583#issuecomment-242567862
https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198329111:204,Availability,down,down,204,"@geoffjentry actually the constructor is at arity 20 now. I think the point Jeff is driving at is that there aren't built-in Spray marshallers for arities > 22, and I'm actually not sure this won't break down completely for arities > 22 (it is possible to have case class constructors of arity > 22, but functions can't have arity > 22 so something else might still break). So beyond the aesthetic issues here this has become like a game of musical chairs; it might be nice to address this proactively.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198329111
https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198468831:87,Performance,cache,cache,87,Would it be possible to have the Workflow ID / Call FQN of the call that was used as a cache in the metadata ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198468831
https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198528803:10,Deployability,rolling,rolling,10,How about rolling your two new fields up with @Horneth's new field idea and making a composite object that has all the caching stuff in one logical grouping that only increases arity by 1 instead of 3? :smile:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198528803
https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198528803:140,Testability,log,logical,140,How about rolling your two new fields up with @Horneth's new field idea and making a composite object that has all the caching stuff in one logical grouping that only increases arity by 1 instead of 3? :smile:,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/585#issuecomment-198528803
https://github.com/broadinstitute/cromwell/pull/585#issuecomment-199772199:75,Performance,cache,cached,75,Do you think there would be value in showing whether a call is used as the cached result for other calls?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/585#issuecomment-199772199
https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078:68,Deployability,update,update,68,@gauravs90 @francares Please note I've rebased and therefore had to update the ValidateActor to no longer require a backend on construction. I've also modified ValidateActorSpec to feed in the mock backend to the static CromwellBackend pool during testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078
https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078:79,Security,Validat,ValidateActor,79,@gauravs90 @francares Please note I've rebased and therefore had to update the ValidateActor to no longer require a backend on construction. I've also modified ValidateActorSpec to feed in the mock backend to the static CromwellBackend pool during testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078
https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078:160,Security,Validat,ValidateActorSpec,160,@gauravs90 @francares Please note I've rebased and therefore had to update the ValidateActor to no longer require a backend on construction. I've also modified ValidateActorSpec to feed in the mock backend to the static CromwellBackend pool during testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078
https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078:193,Testability,mock,mock,193,@gauravs90 @francares Please note I've rebased and therefore had to update the ValidateActor to no longer require a backend on construction. I've also modified ValidateActorSpec to feed in the mock backend to the static CromwellBackend pool during testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078
https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078:248,Testability,test,testing,248,@gauravs90 @francares Please note I've rebased and therefore had to update the ValidateActor to no longer require a backend on construction. I've also modified ValidateActorSpec to feed in the mock backend to the static CromwellBackend pool during testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/586#issuecomment-199336078
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198424257:45,Safety,abort,abort,45,"To be clear, fail-fast should not attempt to abort currently running calls even if those calls might otherwise continue to run for a long time?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198424257
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198424257:6,Usability,clear,clear,6,"To be clear, fail-fast should not attempt to abort currently running calls even if those calls might otherwise continue to run for a long time?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198424257
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198425156:249,Safety,abort,abort,249,"Yes that is correct. A future feature could be ""fail immediate"" which would terminate running jobs, but that isn't this one. > On Mar 18, 2016, at 11:55 AM, mcovarr notifications@github.com wrote:; > ; > To be clear, fail-fast should not attempt to abort currently running calls even if those calls might otherwise continue to run for a long time?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198425156
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198425156:210,Usability,clear,clear,210,"Yes that is correct. A future feature could be ""fail immediate"" which would terminate running jobs, but that isn't this one. > On Mar 18, 2016, at 11:55 AM, mcovarr notifications@github.com wrote:; > ; > To be clear, fail-fast should not attempt to abort currently running calls even if those calls might otherwise continue to run for a long time?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198425156
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198459262:21,Deployability,patch,patch,21,"I believe we want to patch this off of the cromwell hash we are currently; using - 3eb1623; https://github.com/broadinstitute/cromwell/commit/3eb1623d9a5ffdf0fc3626820eab84ae6560b2cd. On Fri, Mar 18, 2016 at 12:01 PM, mcovarr notifications@github.com wrote:. > Sounds good; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198426842",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198459262
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198459262:52,Security,hash,hash,52,"I believe we want to patch this off of the cromwell hash we are currently; using - 3eb1623; https://github.com/broadinstitute/cromwell/commit/3eb1623d9a5ffdf0fc3626820eab84ae6560b2cd. On Fri, Mar 18, 2016 at 12:01 PM, mcovarr notifications@github.com wrote:. > Sounds good; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198426842",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198459262
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198466801:153,Security,hash,hash,153,"Hey @jsotobroad sorry if this is a well-known issue but I've been OOO for a couple of days, but why would these changes be made relative to a particular hash and not off develop?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198466801
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198468069:116,Safety,safe,safer,116,@mcovarr We though develop is in a relative unstable state with all the restructuring going on and that it would be safer to branch off of an earlier version. This commit is the commit that fixed the duplicate inputs bug.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198468069
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198469706:182,Testability,test,tested,182,Is there a specific instability we're concerned about? Otherwise I thought one of the advantages of doing the PBE restructuring against develop was to get our changes out and battle-tested as we go along. Interested to hear from @kcibul and @geoffjentry on this point.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198469706
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198478646:567,Testability,test,tested,567,"If the cromwell team feels like develop is as stable as it was a few weeks; back, I'd support using it. Thibault raised a concern that this might not; be the case. ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Fri, Mar 18, 2016 at 1:52 PM, mcovarr notifications@github.com wrote:. > Is there a specific instability we're concerned about? Otherwise I thought; > one of the advantages of doing the PBE restructuring against develop was to; > get our changes out and battle-tested as we go along. Interested to hear; > from @kcibul https://github.com/kcibul and @geoffjentry; > https://github.com/geoffjentry on this point.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198469706",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198478646
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018:154,Deployability,release,releases,154,"I have no reason to believe develop is any less stable today than it was a few weeks ago, but if anyone feels otherwise please speak up! . Branching GotC releases from a branch based at this hash means we'll need to put fixes on both the GotC branch and develop going forward. That will become increasingly difficult as these branches diverge. And eventually PBE Cromwell would be released with the full bolus of ported fixes that were never previously tested at scale.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018:381,Deployability,release,released,381,"I have no reason to believe develop is any less stable today than it was a few weeks ago, but if anyone feels otherwise please speak up! . Branching GotC releases from a branch based at this hash means we'll need to put fixes on both the GotC branch and develop going forward. That will become increasingly difficult as these branches diverge. And eventually PBE Cromwell would be released with the full bolus of ported fixes that were never previously tested at scale.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018:191,Security,hash,hash,191,"I have no reason to believe develop is any less stable today than it was a few weeks ago, but if anyone feels otherwise please speak up! . Branching GotC releases from a branch based at this hash means we'll need to put fixes on both the GotC branch and develop going forward. That will become increasingly difficult as these branches diverge. And eventually PBE Cromwell would be released with the full bolus of ported fixes that were never previously tested at scale.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018:453,Testability,test,tested,453,"I have no reason to believe develop is any less stable today than it was a few weeks ago, but if anyone feels otherwise please speak up! . Branching GotC releases from a branch based at this hash means we'll need to put fixes on both the GotC branch and develop going forward. That will become increasingly difficult as these branches diverge. And eventually PBE Cromwell would be released with the full bolus of ported fixes that were never previously tested at scale.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198489018
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198492190:77,Testability,test,tests,77,":+1: to what @mcovarr said. Every merge into develop is run against the same tests/tyburn as any other thing so the fact that it involves backends shouldn't matter. Further, doing it this way gives us better insight as we move along.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198492190
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198504455:250,Testability,test,tested,250,"It just feels to me that we're adding a lot of ""temporary features"" - ""step towards PBE that are going to disappear with the next PR"", TODOs like ""this is awful but will be better soon"", and I'm not 100% confident that all of these are getting fully tested (which makes sense because we know they're temporary anyway).; As far as I understand GotC are trying to have 200 running smoothly and having them alpha-test our PBE WIP may not be the best way to do that.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198504455
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198504455:410,Testability,test,test,410,"It just feels to me that we're adding a lot of ""temporary features"" - ""step towards PBE that are going to disappear with the next PR"", TODOs like ""this is awful but will be better soon"", and I'm not 100% confident that all of these are getting fully tested (which makes sense because we know they're temporary anyway).; As far as I understand GotC are trying to have 200 running smoothly and having them alpha-test our PBE WIP may not be the best way to do that.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198504455
https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198509511:119,Testability,log,logical,119,"If we think what we're doing is that bad I don't think it should go to develop. We could branch develop to hold back a logical grouping of WIP until it stabilizes, and once it does stabilize then merge it to develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/587#issuecomment-198509511
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:2522,Availability,ERROR,ERROR,2522,"xecutionStoreCreated(Restart) message received; 2016-04-26 18:26:09,432 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Beginning transition from Submitted to Running.; 2016-04-26 18:26:09,432 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: transitioning from Submitted to Running.; 2016-04-26 18:26:09,646 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: starting calls: GenomeStripBamWorkflow.ComputeMetadata, GenomeStripBamWorkflow.ComputeStatistics; 2016-04-26 18:26:09,646 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeStatistics to Starting.; 2016-04-26 18:26:09,657 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeMetadata to Starting. 2016-04-26 18:26:09,845 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Could not persist runtime attributes; com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '163979-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_72]; at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_72]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.Util.getInstance(Util.java:383) ~[cromwell.jar:0.19]; at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:973) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3847) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3783) ~[cromwell.jar:0.19]",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:6768,Availability,ERROR,ERROR,6768,"ion.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Could not persist runtime attributes; com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_72]; at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_72]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.Util.getInstance(Util.java:383) ~[cromwell.jar:0.19]; at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:973) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3847) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3783) ~[cromwell.jar:0.19]",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:11014,Availability,ERROR,ERROR,11014,"ach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,885 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeStatistics to Failed.; 2016-04-26 18:26:09,888 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163979-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,889 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeMetadata to Failed.; 2016-04-26 18:26:10,263 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Beginning transition from Running to Failed.; 2016-04-26 18:26:12,042 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: transitioning from Running to Failed. ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:11424,Availability,ERROR,ERROR,11424,"ach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,885 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeStatistics to Failed.; 2016-04-26 18:26:09,888 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163979-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,889 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeMetadata to Failed.; 2016-04-26 18:26:10,263 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Beginning transition from Running to Failed.; 2016-04-26 18:26:12,042 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: transitioning from Running to Failed. ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:1159,Integrability,message,message,1159,",035 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowManagerActor Restarting workflow IDs: 0bbd4dc6-bfa5-4ccb-bcdf-bb3a62bbc24b, 81182fb4-22b5-460b-b78e-72f7750aa598, abafd1cc-977a-47d6-acce-c1b2907829a8, ea0272fc-42ef-4852-8143-8b14d34bfd8a. 2016-04-26 18:26:08,700 cromwell-system-akka.actor.default-dispatcher-11 INFO - Invoking restartableWorkflow on ea0272fc; 2016-04-26 18:26:08,700 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowManagerActor submitWorkflow input id = Some(ea0272fc-42ef-4852-8143-8b14d34bfd8a), effective id = ea0272fc-42ef-4852-8143-8b14d34bfd8a; 2016-04-26 18:26:08,772 cromwell-system-akka.actor.default-dispatcher-10 INFO - Updating WorkflowManager state. New Data: (ea0272fc-42ef-4852-8143-8b14d34bfd8a,Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-ea0272fc-42ef-4852-8143-8b14d34bfd8a#787056469]); 2016-04-26 18:26:08,773 cromwell-system-akka.actor.default-dispatcher-3 INFO - WorkflowActor [UUID(ea0272fc)]: Restart message received; 2016-04-26 18:26:09,112 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Initial symbols:. 2016-04-26 18:26:09,129 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Initial executions:. 2016-04-26 18:26:09,156 cromwell-system-akka.actor.default-dispatcher-2 INFO - WorkflowActor [UUID(ea0272fc)]: ExecutionStoreCreated(Restart) message received; 2016-04-26 18:26:09,432 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Beginning transition from Submitted to Running.; 2016-04-26 18:26:09,432 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: transitioning from Submitted to Running.; 2016-04-26 18:26:09,646 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: starting calls: GenomeStripBamWorkflow.ComputeMetadata, GenomeStripBamWorkflow.ComputeStatistics; 2016-04-26 18:26:09,646 cromwell-",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:1582,Integrability,message,message,1582,"l-system-akka.actor.default-dispatcher-11 INFO - WorkflowManagerActor submitWorkflow input id = Some(ea0272fc-42ef-4852-8143-8b14d34bfd8a), effective id = ea0272fc-42ef-4852-8143-8b14d34bfd8a; 2016-04-26 18:26:08,772 cromwell-system-akka.actor.default-dispatcher-10 INFO - Updating WorkflowManager state. New Data: (ea0272fc-42ef-4852-8143-8b14d34bfd8a,Actor[akka://cromwell-system/user/WorkflowManagerActor/WorkflowActor-ea0272fc-42ef-4852-8143-8b14d34bfd8a#787056469]); 2016-04-26 18:26:08,773 cromwell-system-akka.actor.default-dispatcher-3 INFO - WorkflowActor [UUID(ea0272fc)]: Restart message received; 2016-04-26 18:26:09,112 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Initial symbols:. 2016-04-26 18:26:09,129 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Initial executions:. 2016-04-26 18:26:09,156 cromwell-system-akka.actor.default-dispatcher-2 INFO - WorkflowActor [UUID(ea0272fc)]: ExecutionStoreCreated(Restart) message received; 2016-04-26 18:26:09,432 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: Beginning transition from Submitted to Running.; 2016-04-26 18:26:09,432 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: transitioning from Submitted to Running.; 2016-04-26 18:26:09,646 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: starting calls: GenomeStripBamWorkflow.ComputeMetadata, GenomeStripBamWorkflow.ComputeStatistics; 2016-04-26 18:26:09,646 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeStatistics to Starting.; 2016-04-26 18:26:09,657 cromwell-system-akka.actor.default-dispatcher-7 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeMetadata to Starting. 2016-04-26 18:26:09,845 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Could ",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:6453,Performance,concurren,concurrent,6453,"nComponent.scala:29) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Could not persist runtime attributes; com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_72]; at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_72]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwe",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:6552,Performance,concurren,concurrent,6552,"IOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Could not persist runtime attributes; com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_72]; at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_72]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.Util.getInstance(Util.java:383) ~[cromwell.jar:0.19]; at com.mysql.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:10699,Performance,concurren,concurrent,10699,"nComponent.scala:29) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,885 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeStatistics to Failed.; 2016-04-26 18:26:09,888 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163979-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,889 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272f",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:10798,Performance,concurren,concurrent,10798,"IOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; 2016-04-26 18:26:09,846 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163980-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,885 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeStatistics to Failed.; 2016-04-26 18:26:09,888 cromwell-system-akka.actor.default-dispatcher-11 ERROR - WorkflowActor [UUID(ea0272fc)]: Call failed to initialize: Could not persist runtime attributes: Duplicate entry '163979-preemptible' for key 'UK_RUNTIME_ATTRIBUTE'; 2016-04-26 18:26:09,889 cromwell-system-akka.actor.default-dispatcher-11 INFO - WorkflowActor [UUID(ea0272fc)]: persisting status of ComputeMetadata to Failed.; 2016-04-26 18:26:10,263 cromwell-system-akka.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:5307,Usability,Simpl,SimpleJdbcDriverAction,5307,cromwell.jar:0.19]; at com.zaxxer.hikari.proxy.PreparedStatementJavassistProxy.executeUpdate(PreparedStatementJavassistProxy.java) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:507) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$SessionDef$class.withPreparedInsertStatement(JdbcBackend.scala:354) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.withPreparedInsertStatement(JdbcBackend.scala:407) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$ReturningInsertActionComposerImpl.preparedInsert(JdbcActionComponent.scala:636) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction.run(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:32) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:29) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:5422,Usability,Simpl,SimpleJdbcDriverAction,5422,sistProxy.java) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:507) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$SessionDef$class.withPreparedInsertStatement(JdbcBackend.scala:354) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.withPreparedInsertStatement(JdbcBackend.scala:407) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$ReturningInsertActionComposerImpl.preparedInsert(JdbcActionComponent.scala:636) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction.run(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:32) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:29) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[crom,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:9553,Usability,Simpl,SimpleJdbcDriverAction,9553,cromwell.jar:0.19]; at com.zaxxer.hikari.proxy.PreparedStatementJavassistProxy.executeUpdate(PreparedStatementJavassistProxy.java) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:507) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$SessionDef$class.withPreparedInsertStatement(JdbcBackend.scala:354) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.withPreparedInsertStatement(JdbcBackend.scala:407) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$ReturningInsertActionComposerImpl.preparedInsert(JdbcActionComponent.scala:636) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction.run(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:32) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:29) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251:9668,Usability,Simpl,SimpleJdbcDriverAction,9668,sistProxy.java) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:507) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction$$anonfun$run$7.apply(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$SessionDef$class.withPreparedInsertStatement(JdbcBackend.scala:354) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.withPreparedInsertStatement(JdbcBackend.scala:407) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$ReturningInsertActionComposerImpl.preparedInsert(JdbcActionComponent.scala:636) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$InsertActionComposerImpl$SingleInsertAction.run(JdbcActionComponent.scala:504) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:32) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$SimpleJdbcDriverAction.run(JdbcActionComponent.scala:29) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1$$anonfun$run$1.apply(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at scala.collection.Iterator$class.foreach(Iterator.scala:742) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterator.foreach(Iterator.scala:1194) ~[cromwell.jar:0.19]; at scala.collection.IterableLike$class.foreach(IterableLike.scala:72) ~[cromwell.jar:0.19]; at scala.collection.AbstractIterable.foreach(Iterable.scala:54) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:161) ~[cromwell.jar:0.19]; at slick.dbio.DBIOAction$$anon$1.run(DBIOAction.scala:158) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[crom,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215113251
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215125595:21,Availability,failure,failure,21,"This second class of failure seems straightforward: there's code in `WorkflowActor` to `setRuntimeAttributes` that makes no allowance for the attributes already having been written, but this scenario can definitely occur. For a master-like branch, the most expedient solution is probably to turn these inserts into upserts. For develop it would be nice to write these attributes in an event-sourcish way that for writes doesn't clobber existing values, but which always takes the latest values for reads. Still investigating the first class of failure.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215125595
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215125595:544,Availability,failure,failure,544,"This second class of failure seems straightforward: there's code in `WorkflowActor` to `setRuntimeAttributes` that makes no allowance for the attributes already having been written, but this scenario can definitely occur. For a master-like branch, the most expedient solution is probably to turn these inserts into upserts. For develop it would be nice to write these attributes in an event-sourcish way that for writes doesn't clobber existing values, but which always takes the latest values for reads. Still investigating the first class of failure.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215125595
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215127512:19,Availability,error,error,19,wdl from the first error; [wdl.txt](https://github.com/broadinstitute/cromwell/files/238897/wdl.txt). wdl from the second error; [wdl2.txt](https://github.com/broadinstitute/cromwell/files/238908/wdl2.txt),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215127512
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215127512:122,Availability,error,error,122,wdl from the first error; [wdl.txt](https://github.com/broadinstitute/cromwell/files/238897/wdl.txt). wdl from the second error; [wdl2.txt](https://github.com/broadinstitute/cromwell/files/238908/wdl2.txt),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215127512
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215134213:19,Availability,failure,failure,19,"The first class of failure is similar to the second, we write outputs and execution events before attempting to write status. The code is written to `setOutputs` and `setExecutionEvents` and does not deal well with preexisting data. Similar fixes as per the second failure class should apply here.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215134213
https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215134213:265,Availability,failure,failure,265,"The first class of failure is similar to the second, we write outputs and execution events before attempting to write status. The code is written to `setOutputs` and `setExecutionEvents` and does not deal well with preexisting data. Similar fixes as per the second failure class should apply here.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/588#issuecomment-215134213
https://github.com/broadinstitute/cromwell/issues/591#issuecomment-198775260:18,Testability,Test,Tester,18,Artifact. Trusted Tester required to use the old API,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/591#issuecomment-198775260
https://github.com/broadinstitute/cromwell/pull/593#issuecomment-199443309:15,Availability,failure,failure,15,"The one Travis failure in ""push"" occurs in the ""fail slow"" test :frowning:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/593#issuecomment-199443309
https://github.com/broadinstitute/cromwell/pull/593#issuecomment-199443309:59,Testability,test,test,59,"The one Travis failure in ""push"" occurs in the ""fail slow"" test :frowning:",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/593#issuecomment-199443309
https://github.com/broadinstitute/cromwell/pull/593#issuecomment-200062488:13,Testability,test,test,13,looks like a test is failing for realz,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/593#issuecomment-200062488
https://github.com/broadinstitute/cromwell/pull/593#issuecomment-202949745:24,Deployability,release,release,24,Do we want this for the release ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/593#issuecomment-202949745
https://github.com/broadinstitute/cromwell/pull/594#issuecomment-199399532:18,Deployability,update,update,18,@cjllanwarne I'll update that too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/594#issuecomment-199399532
https://github.com/broadinstitute/cromwell/pull/599#issuecomment-200356197:6,Deployability,update,updates,6,"Minor updates, then :+1: . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/599/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/599#issuecomment-200356197
https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040:72,Availability,avail,available,72,"@kcibul @ruchim Could you opine (since ""Job Avoidance"" is certainly now available) what kind of behaviour we want if we ""clear up"" a call-cached task?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040
https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040:138,Performance,cache,cached,138,"@kcibul @ruchim Could you opine (since ""Job Avoidance"" is certainly now available) what kind of behaviour we want if we ""clear up"" a call-cached task?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040
https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040:44,Safety,Avoid,Avoidance,44,"@kcibul @ruchim Could you opine (since ""Job Avoidance"" is certainly now available) what kind of behaviour we want if we ""clear up"" a call-cached task?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040
https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040:121,Usability,clear,clear,121,"@kcibul @ruchim Could you opine (since ""Job Avoidance"" is certainly now available) what kind of behaviour we want if we ""clear up"" a call-cached task?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/601#issuecomment-254317040
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200936859:266,Integrability,message,messages,266,My comment to resurrect a hidden comment was also just hidden - so I'll drop it here instead :). You mentioned caching before as something that needs to be added to the BackendActor. Did you mean for the caching writing or reading? And did you foresee other command messages for the BackendActor being necessary for that/those?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200936859
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:460,Integrability,message,message,460,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:678,Integrability,depend,depend,678,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:334,Performance,cache,cached,334,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:355,Performance,Cache,Cache,355,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:488,Performance,cache,cached,488,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:550,Performance,cache,cached,550,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495:442,Security,expose,expose,442,"@cjllanwarne yes, comments were hidden due to file name change.; Ans 1. Adding hidden comment I did: Caching functionality is missing here. Shouldn't each backend implement caching and when engine ask for a jobExecutor, backend may return BackendCachedJobExecutor?; Doing that we can get rid of the engine responsibility to deal with cached data...; IMO, Cache should be encapsulated in each backend. The only thing I'm not sure if we should expose a standard message to force not to use cached data. So with that you tell to each backend to not use cached data but instead to process data again.; Ans 2. I'm not seeing any new msg for WorkflowBackendActor right now. That will depend on the UCs... for CCC backend those msgs are OK.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200953495
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492:242,Integrability,message,message,242,"@francares Ah! I see. Yeah, I asked because I wasn't sure why we'd need another command type, we could either make a different type of ExecutorActor or have a branch in the existing ExecutorActor for caches. So we agree there. As for another message type, I believe this is all configured in (a) global config file and (b) workflow options so the actors should already have everything they need to decide whether to allow caching or not. So IMO there's no special case at this layer to handle caching.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492:278,Modifiability,config,configured,278,"@francares Ah! I see. Yeah, I asked because I wasn't sure why we'd need another command type, we could either make a different type of ExecutorActor or have a branch in the existing ExecutorActor for caches. So we agree there. As for another message type, I believe this is all configured in (a) global config file and (b) workflow options so the actors should already have everything they need to decide whether to allow caching or not. So IMO there's no special case at this layer to handle caching.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492:303,Modifiability,config,config,303,"@francares Ah! I see. Yeah, I asked because I wasn't sure why we'd need another command type, we could either make a different type of ExecutorActor or have a branch in the existing ExecutorActor for caches. So we agree there. As for another message type, I believe this is all configured in (a) global config file and (b) workflow options so the actors should already have everything they need to decide whether to allow caching or not. So IMO there's no special case at this layer to handle caching.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492:200,Performance,cache,caches,200,"@francares Ah! I see. Yeah, I asked because I wasn't sure why we'd need another command type, we could either make a different type of ExecutorActor or have a branch in the existing ExecutorActor for caches. So we agree there. As for another message type, I believe this is all configured in (a) global config file and (b) workflow options so the actors should already have everything they need to decide whether to allow caching or not. So IMO there's no special case at this layer to handle caching.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-200959492
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205881870:54,Security,validat,validate,54,- WA will receive a WdlSource in preStart will try to validate it.; - BA will receive a list of jobDescriptors and will try to validate runtime requirements.; - Needs to defined if the will be a MIM in validation state in WA.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205881870
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205881870:127,Security,validat,validate,127,- WA will receive a WdlSource in preStart will try to validate it.; - BA will receive a list of jobDescriptors and will try to validate runtime requirements.; - Needs to defined if the will be a MIM in validation state in WA.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205881870
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205881870:202,Security,validat,validation,202,- WA will receive a WdlSource in preStart will try to validate it.; - BA will receive a list of jobDescriptors and will try to validate runtime requirements.; - Needs to defined if the will be a MIM in validation state in WA.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205881870
https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205956569:58,Modifiability,config,config,58,"BA will receive (Calls, workflowInputs, workflowOptions), config, serviceReg.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/604#issuecomment-205956569
https://github.com/broadinstitute/cromwell/pull/605#issuecomment-200489510:390,Energy Efficiency,Green,Green,390,"What's here looks good, but our tech talk left me wondering if this is actually going to address the problems the ticket is looking to solve. i.e., if we tell people there's this new `sub()` function but when they try to write real-world WDLs that use it they can't because of existing language restrictions that aren't really related to the changes here. I'm thinking we might want to ask Green for samples of their workflows that have been `sub`bed and see if Cromwell can deal with them on this branch.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/605#issuecomment-200489510
https://github.com/broadinstitute/cromwell/pull/605#issuecomment-200498163:0,Deployability,Update,Update,0,Update WDL spec too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/605#issuecomment-200498163
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-200579236:110,Safety,Abort,AbortAllWorkflows,110,"If this sounds like a good idea, we probably may be needing more discussions in terms of handling cases like `AbortAllWorkflows`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-200579236
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-200836619:28,Safety,Abort,Abort,28,"As long as we can still do ""Abort All"" and support Ctrl-C",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-200836619
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201018255:183,Energy Efficiency,reduce,reduce,183,"Looking at it, and chewing my own words, the changes that I'm seeing has a few round-trips to the database (e.g. getting workflows in a particular state). Given that we are trying to reduce DB calls from the engine, do you guys think it to be a good idea?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201018255
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201066311:29,Performance,race condition,race conditions,29,"It's possible there could be race conditions with this: submissions that were accepted but haven't been persisted yet, or persisted workflows that don't have workflow actors yet. I'm starting to think that state data is more useful than I originally thought...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201066311
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201068582:129,Integrability,rout,route,129,"@Horneth I believe the transformation is more like `StateData + DB Calls` to `DB Calls + more DB Calls`. Currently, the AbortAll route just sends a msg to all the WorkflowActorRefs in the state data, and then waits's until the all the actors have responded with a terminal state.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201068582
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201068582:120,Safety,Abort,AbortAll,120,"@Horneth I believe the transformation is more like `StateData + DB Calls` to `DB Calls + more DB Calls`. Currently, the AbortAll route just sends a msg to all the WorkflowActorRefs in the state data, and then waits's until the all the actors have responded with a terminal state.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201068582
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201069170:90,Performance,scalab,scalability,90,"In general, I feel that the DB calls should be used as sparingly as possible to have good scalability. And Miguel may be right here I believe",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201069170
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201106013:77,Performance,optimiz,optimizing,77,"Heh, fair point :). I just meant that it's probably not worth worrying about optimizing stuff around submission (although there are other aspects at play here besides submission) since itll need to be changed around soon anyways",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-201106013
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-236298310:58,Integrability,rout,route,58,"If I recall correctly, it was proposed to not follow this route because the state consisted of the child workflow actor references in it, and was used to kill (or maybe abort) the workflow it was executing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-236298310
https://github.com/broadinstitute/cromwell/issues/606#issuecomment-236298310:169,Safety,abort,abort,169,"If I recall correctly, it was proposed to not follow this route because the state consisted of the child workflow actor references in it, and was used to kill (or maybe abort) the workflow it was executing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/606#issuecomment-236298310
https://github.com/broadinstitute/cromwell/issues/609#issuecomment-200998167:12,Testability,test,test,12,In order to test Issue 588 (and general restart issues) - run more than one multistep workflows and restart Cromwell 3x -- confirm it doesn't cause tasks to fail.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/609#issuecomment-200998167
https://github.com/broadinstitute/cromwell/issues/609#issuecomment-203068046:77,Deployability,configurat,configuration,77,"Someone will need to document the new `defaultBackend` and `backendsAllowed` configuration in the CHANGELOG, and the workflow option `backend` before this can be released. Should I do that?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/609#issuecomment-203068046
https://github.com/broadinstitute/cromwell/issues/609#issuecomment-203068046:162,Deployability,release,released,162,"Someone will need to document the new `defaultBackend` and `backendsAllowed` configuration in the CHANGELOG, and the workflow option `backend` before this can be released. Should I do that?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/609#issuecomment-203068046
https://github.com/broadinstitute/cromwell/issues/609#issuecomment-203068046:77,Modifiability,config,configuration,77,"Someone will need to document the new `defaultBackend` and `backendsAllowed` configuration in the CHANGELOG, and the workflow option `backend` before this can be released. Should I do that?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/609#issuecomment-203068046
https://github.com/broadinstitute/cromwell/issues/615#issuecomment-270210508:120,Availability,failure,failure,120,"In this case `df` produces space-separated columns, but `read_object` is looking for tab separators. So this particular failure is to be expected.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/615#issuecomment-270210508
https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201016504:0,Security,Hash,Hashes,0,"Hashes are busted in travis for some reason, but overall :+1: . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/616/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201016504
https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201246839:28,Deployability,update,update,28,Travis thinks you forgot to update some hash expectations,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201246839
https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201246839:40,Security,hash,hash,40,Travis thinks you forgot to update some hash expectations,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201246839
https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201451830:61,Testability,test,tests,61,"@mcovarr Fixes made. Not sure what's up with Travis now. The tests themselves passed, assembly failed for deduplication reasons...?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/616#issuecomment-201451830
https://github.com/broadinstitute/cromwell/issues/618#issuecomment-254319626:82,Performance,scalab,scalability,82,"Closing as not-very-compelling. But maybe we'll hit something similar during the ""scalability"" work",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/618#issuecomment-254319626
https://github.com/broadinstitute/cromwell/pull/623#issuecomment-202399216:15,Testability,test,test,15,Any way we can test this? Centaur?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/623#issuecomment-202399216
https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202554850:142,Availability,error,error,142,I don't think it closes anything no. It should be enough for the release though ? We'll see if/where we need more retries in the logs if this error pops up again.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202554850
https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202554850:65,Deployability,release,release,65,I don't think it closes anything no. It should be enough for the release though ? We'll see if/where we need more retries in the logs if this error pops up again.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202554850
https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202554850:129,Testability,log,logs,129,I don't think it closes anything no. It should be enough for the release though ? We'll see if/where we need more retries in the logs if this error pops up again.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202554850
https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202592548:47,Deployability,release,release,47,"Yes, as far as I'm concerned it's :+1: for the release. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/625/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/625#issuecomment-202592548
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203033909:121,Modifiability,config,config,121,"@mcovarr regarding some of the badness, if this isn't going into 0.19 (and thus causing ppl to need to repeatedly modify config) I feel like the nice likely outweighs the naughty ... he says w/o having his lunch settled yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203033909
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203034975:50,Deployability,release,release,50,"@geoffjentry yes I'm fine with merging this after release (or the release branch is cut), barring any substantive problems turned up by eagle-eyed reviewers.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203034975
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203034975:66,Deployability,release,release,66,"@geoffjentry yes I'm fine with merging this after release (or the release branch is cut), barring any substantive problems turned up by eagle-eyed reviewers.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203034975
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203057361:16,Deployability,update,updated,16,Also I have not updated the README whatsoever,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203057361
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203071973:230,Security,authenticat,authentication,230,"I was trying to find a way to re-arrange the conf wrt file systems and came up with this; https://gist.github.com/Horneth/42d5656afced5795f0d2cafe3e9ef0f2. For the Firecloud case, one could have . ``` hcon; file-systems {; gcs {; authentication {; authenticationScheme = ""refresh_token""; refreshTokenAuth = {; client_id = """"; client_secret = """"; }; }; }; }; ```. instead of. ``` hcon; file-systems {; gcs {; authentication = ""default""; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203071973
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203071973:248,Security,authenticat,authenticationScheme,248,"I was trying to find a way to re-arrange the conf wrt file systems and came up with this; https://gist.github.com/Horneth/42d5656afced5795f0d2cafe3e9ef0f2. For the Firecloud case, one could have . ``` hcon; file-systems {; gcs {; authentication {; authenticationScheme = ""refresh_token""; refreshTokenAuth = {; client_id = """"; client_secret = """"; }; }; }; }; ```. instead of. ``` hcon; file-systems {; gcs {; authentication = ""default""; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203071973
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203071973:408,Security,authenticat,authentication,408,"I was trying to find a way to re-arrange the conf wrt file systems and came up with this; https://gist.github.com/Horneth/42d5656afced5795f0d2cafe3e9ef0f2. For the Firecloud case, one could have . ``` hcon; file-systems {; gcs {; authentication {; authenticationScheme = ""refresh_token""; refreshTokenAuth = {; client_id = """"; client_secret = """"; }; }; }; }; ```. instead of. ``` hcon; file-systems {; gcs {; authentication = ""default""; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203071973
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203452830:29,Modifiability,config,configs,29,"@mcovarr I like your example configs, excepting the (hopefully) upcoming backend/filesystem split. Are they represented in the code as it is now?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203452830
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:220,Deployability,configurat,configuration,220,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:588,Deployability,configurat,configuration,588,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:821,Deployability,pipeline,pipeline,821,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:867,Deployability,pipeline,pipeline,867,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:152,Modifiability,flexible,flexible,152,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:220,Modifiability,config,configuration,220,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:588,Modifiability,config,configuration,588,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:339,Security,authenticat,authentication,339,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:387,Security,authenticat,authentication,387,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:410,Security,authenticat,authentication,410,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:466,Security,authenticat,authentication,466,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031:500,Security,authenticat,authentication,500,"@mcovarr It's more concise but it makes several implicit assumptions to fit exactly our 2 current JES use cases (GotC and FireCloud).; IMO it should be flexible enough so that GotC and Firecloud are just combinations of configuration entries among all the possible ones. > // The JES backend is assumed to use the GCS filesystem with user authentication, dropping back to Cromwell; > // authentication if user authentication is not defined. In GotC there is no user authentication, so; > // Cromwell authentication it is. This is tailor made to accommodate GotC and FireCloud with as few configuration changes as possible, but I think we should move towards something more generic, even if the confs look a bit more different between the two.; For example what if you want to use refresh token auth mode for creating the pipeline as well ?; Or refresh token only for pipeline and service account for gcs ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203453031
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472:136,Modifiability,config,config,136,"@Horneth @cjllanwarne sure we can make the choice of auths explicit in `genomics` and `filesystems`. I did want to keep it clear in the config which auth was for Cromwell and which was for the user so we didn't make it impossible to implement call log copying in FireCloud (in case someday we want to use that feature there). How about something like the following for FireCloud:. ``` hocon. // Same as the preceding FireCloud sample conf; google {; application-name = ""cromwell"". // There may be instances like the final call that copies call logs which will need to be able to generate both; // Cromwell and user authentication, so making these explicit.; cromwellAuthentication {; scheme = ""application_default""; }. // Used for engine functions involving the filesystem.; userAuthentication {; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; }. // genomics with explicitly selected conf; genomics {; ...; auth = ""cromwell""; ...; }. ...; filesystems = [; // gcs filesystem with explicitly selected conf; gcs {; auth = ""user""; }; ]; ... ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472:615,Security,authenticat,authentication,615,"@Horneth @cjllanwarne sure we can make the choice of auths explicit in `genomics` and `filesystems`. I did want to keep it clear in the config which auth was for Cromwell and which was for the user so we didn't make it impossible to implement call log copying in FireCloud (in case someday we want to use that feature there). How about something like the following for FireCloud:. ``` hocon. // Same as the preceding FireCloud sample conf; google {; application-name = ""cromwell"". // There may be instances like the final call that copies call logs which will need to be able to generate both; // Cromwell and user authentication, so making these explicit.; cromwellAuthentication {; scheme = ""application_default""; }. // Used for engine functions involving the filesystem.; userAuthentication {; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; }. // genomics with explicitly selected conf; genomics {; ...; auth = ""cromwell""; ...; }. ...; filesystems = [; // gcs filesystem with explicitly selected conf; gcs {; auth = ""user""; }; ]; ... ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472:248,Testability,log,log,248,"@Horneth @cjllanwarne sure we can make the choice of auths explicit in `genomics` and `filesystems`. I did want to keep it clear in the config which auth was for Cromwell and which was for the user so we didn't make it impossible to implement call log copying in FireCloud (in case someday we want to use that feature there). How about something like the following for FireCloud:. ``` hocon. // Same as the preceding FireCloud sample conf; google {; application-name = ""cromwell"". // There may be instances like the final call that copies call logs which will need to be able to generate both; // Cromwell and user authentication, so making these explicit.; cromwellAuthentication {; scheme = ""application_default""; }. // Used for engine functions involving the filesystem.; userAuthentication {; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; }. // genomics with explicitly selected conf; genomics {; ...; auth = ""cromwell""; ...; }. ...; filesystems = [; // gcs filesystem with explicitly selected conf; gcs {; auth = ""user""; }; ]; ... ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472:544,Testability,log,logs,544,"@Horneth @cjllanwarne sure we can make the choice of auths explicit in `genomics` and `filesystems`. I did want to keep it clear in the config which auth was for Cromwell and which was for the user so we didn't make it impossible to implement call log copying in FireCloud (in case someday we want to use that feature there). How about something like the following for FireCloud:. ``` hocon. // Same as the preceding FireCloud sample conf; google {; application-name = ""cromwell"". // There may be instances like the final call that copies call logs which will need to be able to generate both; // Cromwell and user authentication, so making these explicit.; cromwellAuthentication {; scheme = ""application_default""; }. // Used for engine functions involving the filesystem.; userAuthentication {; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; }. // genomics with explicitly selected conf; genomics {; ...; auth = ""cromwell""; ...; }. ...; filesystems = [; // gcs filesystem with explicitly selected conf; gcs {; auth = ""user""; }; ]; ... ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472:123,Usability,clear,clear,123,"@Horneth @cjllanwarne sure we can make the choice of auths explicit in `genomics` and `filesystems`. I did want to keep it clear in the config which auth was for Cromwell and which was for the user so we didn't make it impossible to implement call log copying in FireCloud (in case someday we want to use that feature there). How about something like the following for FireCloud:. ``` hocon. // Same as the preceding FireCloud sample conf; google {; application-name = ""cromwell"". // There may be instances like the final call that copies call logs which will need to be able to generate both; // Cromwell and user authentication, so making these explicit.; cromwellAuthentication {; scheme = ""application_default""; }. // Used for engine functions involving the filesystem.; userAuthentication {; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; }. // genomics with explicitly selected conf; genomics {; ...; auth = ""cromwell""; ...; }. ...; filesystems = [; // gcs filesystem with explicitly selected conf; gcs {; auth = ""user""; }; ]; ... ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203469472
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203478872:416,Deployability,pipeline,pipelines,416,"Actually what is bugging me I think is precisely the distinction between ""cromwell"" and ""user"" auth I think :smile: ; I think we called them like this because it makes sense in the current way we use them. We use ""cromwell"" auth pretty much always with service-account and ""user"" auth with a ""refreh token mode"" (falling back to the ""cromwell"" auth if there's no ""user"" auth). But really what we need is an auth for pipelines and another one for gcs (they might be the same or not, use service account or refresh tokens, but we shouldn't care from a cromwell perspective).",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203478872
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203481252:157,Security,authenticat,authentication,157,"I'm thinking having more a ""google auth template"" in the conf, with all the auth mode supported by cromwell.; And each section of the conf that needs google authentication (JES genomics, gcs filesystem,...) would provide the auth scheme that it wants to use for this particular feature.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203481252
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203488655:240,Deployability,pipeline,pipelineservicejar,240,"i.e. something like:. ```; auths {; googleauth1: {; class: ""path.to.googleauth""; otherstuff: ""blah""; }; }. filesystems {; fs1 {; class: ""path.to.gcs.filesystem""; auth: googleauth1; }; }. backends {; googlepipelineservice {; class: ""path.to.pipelineservicejar""; gcsfilesystem: fs1; auth: googleauth1; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203488655
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203502798:624,Deployability,Pipeline,Pipeline,624,"OK, after discussion with @Horneth and @cjllanwarne:. ``` hocon; google {; application-name = ""cromwell"". auths = [; {; name = ""cromwell-service-account""; scheme = ""application_default""; },; {; name = ""user-via-refresh""; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; ]; }. backend {; default = ""JES""; providers = [; {; name = ""JES""; class = ""cromwell.engine.backend.jes.JesBackend""; config {; ...; genomics {; // Endpoint for APIs, no reason to change this unless directed by Google.; endpoint-url = ""https://genomics.googleapis.com/""; // Use the Cromwell service account for creating the Pipeline and manipulating auth JSONs.; auth = ""cromwell-service-account""; }; filesystems = [; {; gcs {; auth = ""user-via-refresh""; }; }; ]; }; },; ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203502798
https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203502798:418,Modifiability,config,config,418,"OK, after discussion with @Horneth and @cjllanwarne:. ``` hocon; google {; application-name = ""cromwell"". auths = [; {; name = ""cromwell-service-account""; scheme = ""application_default""; },; {; name = ""user-via-refresh""; scheme = ""refresh""; client-id = ""secret_id""; client-secret = ""secret_secret""; }; ]; }. backend {; default = ""JES""; providers = [; {; name = ""JES""; class = ""cromwell.engine.backend.jes.JesBackend""; config {; ...; genomics {; // Endpoint for APIs, no reason to change this unless directed by Google.; endpoint-url = ""https://genomics.googleapis.com/""; // Use the Cromwell service account for creating the Pipeline and manipulating auth JSONs.; auth = ""cromwell-service-account""; }; filesystems = [; {; gcs {; auth = ""user-via-refresh""; }; }; ]; }; },; ...; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/627#issuecomment-203502798
https://github.com/broadinstitute/cromwell/issues/628#issuecomment-255446008:25,Testability,test,tested,25,Works as expected when I tested it today,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/628#issuecomment-255446008
https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209958715:60,Integrability,depend,dependencies,60,"Hey @francares, just re-opening the ticket so that when the dependencies related to BackendConfigs and ShadowWorkflowActor are resolved, it can be then be worked on in the future. Hope thats okay!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209958715
https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209963451:56,Usability,clear,clear,56,@francares Now that this is back in ready column can we clear the assignment?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209963451
https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209990438:176,Usability,clear,clear,176,"Yes, we can.; On Apr 14, 2016 7:14 AM, ""Jeff Gentry"" notifications@github.com wrote:. > @francares https://github.com/francares Now that this is back in ready; > column can we clear the assignment?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209963451",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/649#issuecomment-209990438
https://github.com/broadinstitute/cromwell/issues/651#issuecomment-209968612:48,Security,validat,validate,48,"NB I think this should be renamed to ""... into `validate()` on the `BackendWorkflowInitializationActor`"" :)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/651#issuecomment-209968612
https://github.com/broadinstitute/cromwell/issues/652#issuecomment-211918816:281,Integrability,interface,interface,281,"@gauravs90 I would say this maybe could be done in smaller chunks. For this first step, maybe just implement enough for a single step workflow to pass through the WorkflowExecutionActor? I think that should be fairly small but will involve ironing out a lot of the issues with the interface.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/652#issuecomment-211918816
https://github.com/broadinstitute/cromwell/issues/652#issuecomment-212055939:116,Usability,simpl,simplistically,116,"Alright. So I'll base this off of #717, and this PR will target to run (hopefully) n number of calls in a workflow (simplistically, a three step workflow should be able to go through completion)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/652#issuecomment-212055939
https://github.com/broadinstitute/cromwell/issues/655#issuecomment-213414391:13,Integrability,depend,depends,13,I think this depends on #652 (implement execution),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/655#issuecomment-213414391
https://github.com/broadinstitute/cromwell/issues/655#issuecomment-216631299:59,Availability,failure,failure,59,"@cjllanwarne Does this only require handling the retryable failure in the WorkflowExecutionActor, by re-running the failed call up to a `max` number of retries? Your previous comment somehow indicates this is perhaps more than this.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/655#issuecomment-216631299
https://github.com/broadinstitute/cromwell/issues/664#issuecomment-233432623:20,Availability,Recover,RecoverJobCommand,20,The EJEA is sending RecoverJobCommand or ExecuteJobCommand depending on if the workflow is restarting or not. So I think this is already done.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/664#issuecomment-233432623
https://github.com/broadinstitute/cromwell/issues/664#issuecomment-233432623:59,Integrability,depend,depending,59,The EJEA is sending RecoverJobCommand or ExecuteJobCommand depending on if the workflow is restarting or not. So I think this is already done.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/664#issuecomment-233432623
https://github.com/broadinstitute/cromwell/issues/664#issuecomment-233432623:20,Safety,Recover,RecoverJobCommand,20,The EJEA is sending RecoverJobCommand or ExecuteJobCommand depending on if the workflow is restarting or not. So I think this is already done.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/664#issuecomment-233432623
https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645:97,Availability,recover,recovering,97,"Based on the conversation after standup yesterday, this ticket needs more refinement. Currently, recovering a call for the local backend is the same as executing a fresh call. It's possible there are other ways to wire recovery and that question needs to be answered. @kcibul @geoffjentry I'm returning it to the milestone backlog but hopefully something we can discuss at the prioritization today--seems like a technical/PO type of refinement.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645
https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645:219,Availability,recover,recovery,219,"Based on the conversation after standup yesterday, this ticket needs more refinement. Currently, recovering a call for the local backend is the same as executing a fresh call. It's possible there are other ways to wire recovery and that question needs to be answered. @kcibul @geoffjentry I'm returning it to the milestone backlog but hopefully something we can discuss at the prioritization today--seems like a technical/PO type of refinement.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645
https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645:97,Safety,recover,recovering,97,"Based on the conversation after standup yesterday, this ticket needs more refinement. Currently, recovering a call for the local backend is the same as executing a fresh call. It's possible there are other ways to wire recovery and that question needs to be answered. @kcibul @geoffjentry I'm returning it to the milestone backlog but hopefully something we can discuss at the prioritization today--seems like a technical/PO type of refinement.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645
https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645:219,Safety,recover,recovery,219,"Based on the conversation after standup yesterday, this ticket needs more refinement. Currently, recovering a call for the local backend is the same as executing a fresh call. It's possible there are other ways to wire recovery and that question needs to be answered. @kcibul @geoffjentry I'm returning it to the milestone backlog but hopefully something we can discuss at the prioritization today--seems like a technical/PO type of refinement.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/666#issuecomment-235909645
https://github.com/broadinstitute/cromwell/issues/668#issuecomment-217204672:0,Integrability,Depend,Depends,0,"Depends on #782, #783",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/668#issuecomment-217204672
https://github.com/broadinstitute/cromwell/issues/670#issuecomment-217204829:0,Integrability,Depend,Depends,0,"Depends on #782, #783",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/670#issuecomment-217204829
https://github.com/broadinstitute/cromwell/pull/678#issuecomment-208430231:27,Integrability,interface,interface,27,I would like to merge this interface so I can continue with other task until all dependencies are satisfied. @cjllanwarne and @scottfrazer Can you review this small piece of code?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/678#issuecomment-208430231
https://github.com/broadinstitute/cromwell/pull/678#issuecomment-208430231:81,Integrability,depend,dependencies,81,I would like to merge this interface so I can continue with other task until all dependencies are satisfied. @cjllanwarne and @scottfrazer Can you review this small piece of code?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/678#issuecomment-208430231
https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208383581:178,Testability,test,test,178,"I would _prefer_ - but not necessarily in this PR - if **all** backends were separate jars from the start. So that we dog-food on the whole ""pluggable"" thing. And so that we can test (e.g.) a cromwell which doesn't have the concept of LocalBackend anywhere in its classpath to make sure we didn't accidentally rely on it somewhere",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208383581
https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208423531:85,Availability,down,downloadable,85,"@cjllanwarne I disagree. IMO officially supported backends should be provided by the downloadable fat jar, we should not require a user to need to download multiple jars if all they want to do is fart around w/ the officially supported stuff.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208423531
https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208423531:147,Availability,down,download,147,"@cjllanwarne I disagree. IMO officially supported backends should be provided by the downloadable fat jar, we should not require a user to need to download multiple jars if all they want to do is fart around w/ the officially supported stuff.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208423531
https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208424103:62,Deployability,release,release,62,"@cjllanwarne Although perhaps the solution there is to have a release assembly which bundles everything together and a lighter weight one as well, which we can use for the situation you describe",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/681#issuecomment-208424103
https://github.com/broadinstitute/cromwell/issues/685#issuecomment-253877212:16,Deployability,release,release,16,Considering the release and thus the release notes have already happened I'm going to close this even if it wasn't fully satisfied. @jsotobroad You likely already know this but FWIW the caching is not forward compatible from 0.19 to 0.21 but we expect to be forward compatible from here on out,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/685#issuecomment-253877212
https://github.com/broadinstitute/cromwell/issues/685#issuecomment-253877212:37,Deployability,release,release,37,Considering the release and thus the release notes have already happened I'm going to close this even if it wasn't fully satisfied. @jsotobroad You likely already know this but FWIW the caching is not forward compatible from 0.19 to 0.21 but we expect to be forward compatible from here on out,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/685#issuecomment-253877212
https://github.com/broadinstitute/cromwell/pull/686#issuecomment-207555857:4,Usability,simpl,simplicity,4,"For simplicity, I'm making my two changes into a single PR - they're more entwined than I realised. Please see #688 instead!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/686#issuecomment-207555857
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-207589678:151,Deployability,a/b,a/broadinstitute,151,"I've had a request from @geoffjentry and @mcovarr to convert the ""validation response aggregation"" into a separate actor - see https://docs.google.com/a/broadinstitute.com/document/d/1qTXiPtiJcmfmWghLC_uBeWlL2SuCE2Ek1xBiT0j8-iQ/edit?usp=sharing - I'll rework this PR then re-open",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-207589678
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-207589678:66,Security,validat,validation,66,"I've had a request from @geoffjentry and @mcovarr to convert the ""validation response aggregation"" into a separate actor - see https://docs.google.com/a/broadinstitute.com/document/d/1qTXiPtiJcmfmWghLC_uBeWlL2SuCE2Ek1xBiT0j8-iQ/edit?usp=sharing - I'll rework this PR then re-open",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-207589678
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208437456:46,Testability,test,tests,46,Is there any way to get even just some simple tests for `ShadowWorkflowActor`? I feel like there are some things in `ShadowWorkflowActor` that could be restructured for better testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208437456
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208437456:176,Testability,test,testing,176,Is there any way to get even just some simple tests for `ShadowWorkflowActor`? I feel like there are some things in `ShadowWorkflowActor` that could be restructured for better testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208437456
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208437456:39,Usability,simpl,simple,39,Is there any way to get even just some simple tests for `ShadowWorkflowActor`? I feel like there are some things in `ShadowWorkflowActor` that could be restructured for better testing.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208437456
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208964105:84,Testability,test,tests,84,"@scottfrazer @mcovarr I think your two remaining comments are related - having some tests for this, and replacing the existing WMA with the new version. I'd lobby for doing them together in the very next ticket I'm picking up - i.e. #692",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-208964105
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209002741:63,Usability,clear,clear,63,:+1: for this iteration. There are some topics that are not so clear at this moment (such as sharing information between beforeAll->execute->afterAll) but I think we can move forward with this. It might suffer changes in the future but it's a starting point. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/688/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209002741
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545:407,Integrability,message,message,407,"Okay so my understanding of this so far (I'm just reiterating what you have in your diagram for my own benefit):. `ShadowWorkflowActor` has 4 ""lifecycle"" states as actors:; - `MaterializeWorkflowDescriptorActor` - basic validation and `WorkflowDescriptor` creation; - `EngineWorkflowInitializationActor` - spawns 1 or more `BackendWorkflowInitializationActor`, then aggregates results from all of these and message back `ShadowWorkflowActor`; - `EngineWorkflowExecutionActor` - sent a Start or Restart message, performs the execution, sends back result of execution. Spawns `BackendWorkflowExecutionActor`s; - `EngineWorkflowFinalizationActor` - do post-workflow termination actions. Spawns `BackendWorkflowFinalizationActor`s. _I'm just thinking out loud here... if you think this is stupid, I won't feel bad if you ignore me_. I guess the only comments on this scheme are about naming... . I feel like `MaterializeWorkflowDescriptorActor` should follow the same naming scheme and maybe be called something like `EngineWorkflowDescriptorActor` or `EngineWorkflowParserActor`. I'm also not a huge fan of prepending `Engine` onto these actors... maybe we can just drop `Engine`?; - `WorkflowDescriptorActor`; - `WorkflowInitializationActor`; - `WorkflowExecutionActor`; - `WorkflowFinalizationActor`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545:502,Integrability,message,message,502,"Okay so my understanding of this so far (I'm just reiterating what you have in your diagram for my own benefit):. `ShadowWorkflowActor` has 4 ""lifecycle"" states as actors:; - `MaterializeWorkflowDescriptorActor` - basic validation and `WorkflowDescriptor` creation; - `EngineWorkflowInitializationActor` - spawns 1 or more `BackendWorkflowInitializationActor`, then aggregates results from all of these and message back `ShadowWorkflowActor`; - `EngineWorkflowExecutionActor` - sent a Start or Restart message, performs the execution, sends back result of execution. Spawns `BackendWorkflowExecutionActor`s; - `EngineWorkflowFinalizationActor` - do post-workflow termination actions. Spawns `BackendWorkflowFinalizationActor`s. _I'm just thinking out loud here... if you think this is stupid, I won't feel bad if you ignore me_. I guess the only comments on this scheme are about naming... . I feel like `MaterializeWorkflowDescriptorActor` should follow the same naming scheme and maybe be called something like `EngineWorkflowDescriptorActor` or `EngineWorkflowParserActor`. I'm also not a huge fan of prepending `Engine` onto these actors... maybe we can just drop `Engine`?; - `WorkflowDescriptorActor`; - `WorkflowInitializationActor`; - `WorkflowExecutionActor`; - `WorkflowFinalizationActor`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545:511,Performance,perform,performs,511,"Okay so my understanding of this so far (I'm just reiterating what you have in your diagram for my own benefit):. `ShadowWorkflowActor` has 4 ""lifecycle"" states as actors:; - `MaterializeWorkflowDescriptorActor` - basic validation and `WorkflowDescriptor` creation; - `EngineWorkflowInitializationActor` - spawns 1 or more `BackendWorkflowInitializationActor`, then aggregates results from all of these and message back `ShadowWorkflowActor`; - `EngineWorkflowExecutionActor` - sent a Start or Restart message, performs the execution, sends back result of execution. Spawns `BackendWorkflowExecutionActor`s; - `EngineWorkflowFinalizationActor` - do post-workflow termination actions. Spawns `BackendWorkflowFinalizationActor`s. _I'm just thinking out loud here... if you think this is stupid, I won't feel bad if you ignore me_. I guess the only comments on this scheme are about naming... . I feel like `MaterializeWorkflowDescriptorActor` should follow the same naming scheme and maybe be called something like `EngineWorkflowDescriptorActor` or `EngineWorkflowParserActor`. I'm also not a huge fan of prepending `Engine` onto these actors... maybe we can just drop `Engine`?; - `WorkflowDescriptorActor`; - `WorkflowInitializationActor`; - `WorkflowExecutionActor`; - `WorkflowFinalizationActor`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545:220,Security,validat,validation,220,"Okay so my understanding of this so far (I'm just reiterating what you have in your diagram for my own benefit):. `ShadowWorkflowActor` has 4 ""lifecycle"" states as actors:; - `MaterializeWorkflowDescriptorActor` - basic validation and `WorkflowDescriptor` creation; - `EngineWorkflowInitializationActor` - spawns 1 or more `BackendWorkflowInitializationActor`, then aggregates results from all of these and message back `ShadowWorkflowActor`; - `EngineWorkflowExecutionActor` - sent a Start or Restart message, performs the execution, sends back result of execution. Spawns `BackendWorkflowExecutionActor`s; - `EngineWorkflowFinalizationActor` - do post-workflow termination actions. Spawns `BackendWorkflowFinalizationActor`s. _I'm just thinking out loud here... if you think this is stupid, I won't feel bad if you ignore me_. I guess the only comments on this scheme are about naming... . I feel like `MaterializeWorkflowDescriptorActor` should follow the same naming scheme and maybe be called something like `EngineWorkflowDescriptorActor` or `EngineWorkflowParserActor`. I'm also not a huge fan of prepending `Engine` onto these actors... maybe we can just drop `Engine`?; - `WorkflowDescriptorActor`; - `WorkflowInitializationActor`; - `WorkflowExecutionActor`; - `WorkflowFinalizationActor`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209515545
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209533242:1192,Testability,test,test,1192,"What was the rationale behind the `supportedBackends` directory? Right now it seems [incredibly sparse](https://gist.github.com/scottfrazer/2fc865fab8f200cf6bb9cf09eb0f1905) and I don't see what benefit we gain from putting them there. I also have a hard time seeing how we share code between backends in this scheme, like in the case of Local and SGE using a lot of the same functionality. I realize you're all going to pile on and flog me for even suggesting this... but I kinda thought it was going to be something kind of similar to this (but obviously structured better):. ```; $ tree backend/src; backend/src; ├── main; │   ├── java; │   ├── resources; │   ├── scala; │   │   └── cromwell; │   │   └── backend; │   │   ├── BackendJobExecutionActor.scala; │   │   ├── BackendLifecycleActor.scala; │   │   ├── BackendWorkflowFinalizationActor.scala; │   │   ├── BackendWorkflowInitializationActor.scala; │   │   ├── WorkflowBackendActorFactory.scala; │   │   ├── package.scala; │   │   └── supported; │   │   ├── HtCondorBackend.scala; │   │   ├── JesBackend.scala; │   │   ├── LocalBackend.scala; │   │   ├── SgeBackend.scala; │   │   └── SharedFileSystem.scala; │   └── scala-2.11; └── test; ├── java; ├── resources; ├── scala; └── scala-2.11; ```. EDIT: alternatively these could be in the `engine` project under a package that isn't `crowmell.engine`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209533242
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209547143:241,Integrability,interface,interface,241,"I may not know sbt enough to know if there is a way around, but by putting the backend implementations into the backend project, I think the backend jar will contain all the backend implementations, which is not its role.; It's providing an interface for any potential backend implementor and they might not want to also get all our ""supported"" backends with it.; My understanding of pluggable backend is that we have self-contained jars that only need the backend interface (and messages etc..) and cromwell-core. Those jars can be plugged-in and out seemingly in the conf file, and will be used by the engine. I think it's a good idea to also do that for our own backend implementations, even if they're then aggregated into the master cromwell jar.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209547143
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209547143:465,Integrability,interface,interface,465,"I may not know sbt enough to know if there is a way around, but by putting the backend implementations into the backend project, I think the backend jar will contain all the backend implementations, which is not its role.; It's providing an interface for any potential backend implementor and they might not want to also get all our ""supported"" backends with it.; My understanding of pluggable backend is that we have self-contained jars that only need the backend interface (and messages etc..) and cromwell-core. Those jars can be plugged-in and out seemingly in the conf file, and will be used by the engine. I think it's a good idea to also do that for our own backend implementations, even if they're then aggregated into the master cromwell jar.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209547143
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209547143:480,Integrability,message,messages,480,"I may not know sbt enough to know if there is a way around, but by putting the backend implementations into the backend project, I think the backend jar will contain all the backend implementations, which is not its role.; It's providing an interface for any potential backend implementor and they might not want to also get all our ""supported"" backends with it.; My understanding of pluggable backend is that we have self-contained jars that only need the backend interface (and messages etc..) and cromwell-core. Those jars can be plugged-in and out seemingly in the conf file, and will be used by the engine. I think it's a good idea to also do that for our own backend implementations, even if they're then aggregated into the master cromwell jar.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209547143
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209591621:110,Safety,avoid,avoid,110,"Okay, I'm having a little bit of trouble keeping track of what JARs are allowed to included where... but I'll avoid hijacking this PR to talk about that.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209591621
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235:544,Availability,down,down,544,"@scottfrazer FWIW my vision of the world was a lot closer to the diagram you drew up but I don't have strong feelings on that. In terms of distributed jars what I'd like to see distributed to the world would be:; - cromwell.jar: full fat jar like we have today which also includes all of the supported backends built in; - cromwell-backend.jar: a jar providing the interface stuff which someone can use to build their own backend jar. I'd be totally okay with (and could see value in):; - cromwell-lite.jar (or something like that): a stripped down fat jar w/o any supported backends or maybe local; - foo-backend.jar for each supported backend. My main concern though is that we always make the most obvious download for a naive user of cromwell to be the one with all of the supported (or perhaps a 'very common supported' subset) backends built in so as to minimize the work someone needs to do to get rolling. The other jars are really an artifact of the multi-project model and can be ignored. The side discussion about `core` is exactly why I was picturing the hierarchy stemming from `backend` all along. Despite the name of `supportedBackends` being my request I'll admit I was just looking at the name when I said that, not thinking the whole thing through critically :). IMO `core` should be code which is shared between all components, I'd call the filesystem concept a component, not something in core itself.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235:709,Availability,down,download,709,"@scottfrazer FWIW my vision of the world was a lot closer to the diagram you drew up but I don't have strong feelings on that. In terms of distributed jars what I'd like to see distributed to the world would be:; - cromwell.jar: full fat jar like we have today which also includes all of the supported backends built in; - cromwell-backend.jar: a jar providing the interface stuff which someone can use to build their own backend jar. I'd be totally okay with (and could see value in):; - cromwell-lite.jar (or something like that): a stripped down fat jar w/o any supported backends or maybe local; - foo-backend.jar for each supported backend. My main concern though is that we always make the most obvious download for a naive user of cromwell to be the one with all of the supported (or perhaps a 'very common supported' subset) backends built in so as to minimize the work someone needs to do to get rolling. The other jars are really an artifact of the multi-project model and can be ignored. The side discussion about `core` is exactly why I was picturing the hierarchy stemming from `backend` all along. Despite the name of `supportedBackends` being my request I'll admit I was just looking at the name when I said that, not thinking the whole thing through critically :). IMO `core` should be code which is shared between all components, I'd call the filesystem concept a component, not something in core itself.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235:905,Deployability,rolling,rolling,905,"@scottfrazer FWIW my vision of the world was a lot closer to the diagram you drew up but I don't have strong feelings on that. In terms of distributed jars what I'd like to see distributed to the world would be:; - cromwell.jar: full fat jar like we have today which also includes all of the supported backends built in; - cromwell-backend.jar: a jar providing the interface stuff which someone can use to build their own backend jar. I'd be totally okay with (and could see value in):; - cromwell-lite.jar (or something like that): a stripped down fat jar w/o any supported backends or maybe local; - foo-backend.jar for each supported backend. My main concern though is that we always make the most obvious download for a naive user of cromwell to be the one with all of the supported (or perhaps a 'very common supported' subset) backends built in so as to minimize the work someone needs to do to get rolling. The other jars are really an artifact of the multi-project model and can be ignored. The side discussion about `core` is exactly why I was picturing the hierarchy stemming from `backend` all along. Despite the name of `supportedBackends` being my request I'll admit I was just looking at the name when I said that, not thinking the whole thing through critically :). IMO `core` should be code which is shared between all components, I'd call the filesystem concept a component, not something in core itself.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235
https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235:365,Integrability,interface,interface,365,"@scottfrazer FWIW my vision of the world was a lot closer to the diagram you drew up but I don't have strong feelings on that. In terms of distributed jars what I'd like to see distributed to the world would be:; - cromwell.jar: full fat jar like we have today which also includes all of the supported backends built in; - cromwell-backend.jar: a jar providing the interface stuff which someone can use to build their own backend jar. I'd be totally okay with (and could see value in):; - cromwell-lite.jar (or something like that): a stripped down fat jar w/o any supported backends or maybe local; - foo-backend.jar for each supported backend. My main concern though is that we always make the most obvious download for a naive user of cromwell to be the one with all of the supported (or perhaps a 'very common supported' subset) backends built in so as to minimize the work someone needs to do to get rolling. The other jars are really an artifact of the multi-project model and can be ignored. The side discussion about `core` is exactly why I was picturing the hierarchy stemming from `backend` all along. Despite the name of `supportedBackends` being my request I'll admit I was just looking at the name when I said that, not thinking the whole thing through critically :). IMO `core` should be code which is shared between all components, I'd call the filesystem concept a component, not something in core itself.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/688#issuecomment-209656235
https://github.com/broadinstitute/cromwell/pull/689#issuecomment-208433501:83,Testability,test,test,83,First pass complete. Main code looks good. Just a few suggestions / preference for test code.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/689#issuecomment-208433501
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-207589925:128,Integrability,interface,interface,128,"I'm (obviously) not terribly good at spotting problems in the logic, but it seems good to me... I share your desire to make the interface a little better somehow... But perhaps that's a ticket for later?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-207589925
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-207589925:62,Testability,log,logic,62,"I'm (obviously) not terribly good at spotting problems in the logic, but it seems good to me... I share your desire to make the interface a little better somehow... But perhaps that's a ticket for later?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-207589925
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-207650934:414,Integrability,wrap,wrapping,414,"I'm definitely ok with any ""ticket(s) for later"", as long as Miguel's comments in the parent PR are addressed. Retries should be _outside_ of the `Await.result()`, and by association should not retry within `runTransaction`. This PR is only one example that does an outer retry, choosing implementation details such as:; 1. Communicating ""whoops, please retry"" via a functional parameter `shouldRetry`, instead of wrapping the JDBC exception to our own expected-exception-for-retries, such as ~~`cromwell.actor.TransientException`~~ `lethall.actor.TransientException`.; 2. Invoking `withRetry` via an overloaded `DataAccess` method, instead having the caller invoke `withRetry`. In general, if a similar but different version of `withRetry` outside `runTransaction` appears, it'll get a thumbsup from me.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-207650934
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208340703:77,Integrability,interface,interface,77,"@geoffjentry my understanding is that the logic here is what we want but the interface could be a little better, and a little more fully implemented. Correct me if I'm wrong, but I _think_ we want all `DataAccess` methods to automatically (and transparently) have deadlock retries. If we were to do that for all methods in `DataAccess` using the scheme laid out in this PR, then we'd be duplicating all of the methods in `DataAccess`. Perhaps we could construct `DataAccess` with an `ActorSystem`... though I can't remember if @kshakir objected to this for a reason that is currently escaping me. We could also just make the whole thing an actor, or put an actor in front of `DataAccess`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208340703
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208340703:42,Testability,log,logic,42,"@geoffjentry my understanding is that the logic here is what we want but the interface could be a little better, and a little more fully implemented. Correct me if I'm wrong, but I _think_ we want all `DataAccess` methods to automatically (and transparently) have deadlock retries. If we were to do that for all methods in `DataAccess` using the scheme laid out in this PR, then we'd be duplicating all of the methods in `DataAccess`. Perhaps we could construct `DataAccess` with an `ActorSystem`... though I can't remember if @kshakir objected to this for a reason that is currently escaping me. We could also just make the whole thing an actor, or put an actor in front of `DataAccess`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208340703
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208375082:31,Modifiability,refactor,refactoring,31,"No current opinions on further refactoring DataAccess, as those discussions are outside of the parent PR, though happy participate in a tech talk if desired. I will admit I ""started it"" by embellishing beyond simply inverting the futures within `runTransactionWithRollbackRetry`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208375082
https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208375082:209,Usability,simpl,simply,209,"No current opinions on further refactoring DataAccess, as those discussions are outside of the parent PR, though happy participate in a tech talk if desired. I will admit I ""started it"" by embellishing beyond simply inverting the futures within `runTransactionWithRollbackRetry`.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/690#issuecomment-208375082
https://github.com/broadinstitute/cromwell/issues/692#issuecomment-208380569:6,Integrability,depend,depend,6,Might depend on #688 / #683,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/692#issuecomment-208380569
https://github.com/broadinstitute/cromwell/pull/694#issuecomment-210003861:252,Deployability,patch,patches,252,"Let's chat IRL later ~~today~~. To be clear, I'm totally fine mothballing this PR. In the context of PBE, conceivably this ticket was introduced so one could implement other final calls that run on a backend?. EDIT: No rush on this ticket. Making some patches, but will chat about next steps some other time when we can.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/694#issuecomment-210003861
https://github.com/broadinstitute/cromwell/pull/694#issuecomment-210003861:38,Usability,clear,clear,38,"Let's chat IRL later ~~today~~. To be clear, I'm totally fine mothballing this PR. In the context of PBE, conceivably this ticket was introduced so one could implement other final calls that run on a backend?. EDIT: No rush on this ticket. Making some patches, but will chat about next steps some other time when we can.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/694#issuecomment-210003861
https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209056982:105,Availability,error,errors,105,The following WDL runs to a certain point and then fails (when running the STAR aligner) without writing errors to stdout/stderr (which it does when running out of resources when run locally). Example input JSON also attached. [samtofastq_star_rsem.txt](https://github.com/broadinstitute/cromwell/files/215739/samtofastq_star_rsem.txt); [inputs.txt](https://github.com/broadinstitute/cromwell/files/215783/inputs.txt),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209056982
https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497:430,Availability,error,error,430,"Note to those trying to reproduce-- the wdl is reported to run fine on the combination of:; 1. Local; 2. Small inputs. It should reproducibly fail on the combination of:; 1. Current JES / Firecloud (cromwell 0.18); 2. Normal (aka large) input files. The JES logs showed that it started localizing, and then four minutes later began delocalizing files. The STAR stderr printed that the program was starting, but there was no other error other message in the stderr nor jes log. AFAIK, there did not seem to be any other current indication via the Firecloud interface as to why the job was exiting prematurely.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497
https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497:442,Integrability,message,message,442,"Note to those trying to reproduce-- the wdl is reported to run fine on the combination of:; 1. Local; 2. Small inputs. It should reproducibly fail on the combination of:; 1. Current JES / Firecloud (cromwell 0.18); 2. Normal (aka large) input files. The JES logs showed that it started localizing, and then four minutes later began delocalizing files. The STAR stderr printed that the program was starting, but there was no other error other message in the stderr nor jes log. AFAIK, there did not seem to be any other current indication via the Firecloud interface as to why the job was exiting prematurely.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497
https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497:556,Integrability,interface,interface,556,"Note to those trying to reproduce-- the wdl is reported to run fine on the combination of:; 1. Local; 2. Small inputs. It should reproducibly fail on the combination of:; 1. Current JES / Firecloud (cromwell 0.18); 2. Normal (aka large) input files. The JES logs showed that it started localizing, and then four minutes later began delocalizing files. The STAR stderr printed that the program was starting, but there was no other error other message in the stderr nor jes log. AFAIK, there did not seem to be any other current indication via the Firecloud interface as to why the job was exiting prematurely.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497
https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497:258,Testability,log,logs,258,"Note to those trying to reproduce-- the wdl is reported to run fine on the combination of:; 1. Local; 2. Small inputs. It should reproducibly fail on the combination of:; 1. Current JES / Firecloud (cromwell 0.18); 2. Normal (aka large) input files. The JES logs showed that it started localizing, and then four minutes later began delocalizing files. The STAR stderr printed that the program was starting, but there was no other error other message in the stderr nor jes log. AFAIK, there did not seem to be any other current indication via the Firecloud interface as to why the job was exiting prematurely.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497
https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497:472,Testability,log,log,472,"Note to those trying to reproduce-- the wdl is reported to run fine on the combination of:; 1. Local; 2. Small inputs. It should reproducibly fail on the combination of:; 1. Current JES / Firecloud (cromwell 0.18); 2. Normal (aka large) input files. The JES logs showed that it started localizing, and then four minutes later began delocalizing files. The STAR stderr printed that the program was starting, but there was no other error other message in the stderr nor jes log. AFAIK, there did not seem to be any other current indication via the Firecloud interface as to why the job was exiting prematurely.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/698#issuecomment-209079497
https://github.com/broadinstitute/cromwell/issues/699#issuecomment-210234833:232,Availability,echo,echo,232,"The following WDL reproduces the problem with the JES backend, though the magic number is consistently 1899 files. Local backend does not have this problem. . ```; task make_files {; command <<<; mkdir files; for i in {1..5000}; do echo ""foo"" > files/$i.txt; done; >>>; output {; Array[File] files = glob(""files/*.txt""); }; runtime {; docker: ""ubuntu:latest""; }; }. workflow piles_of_files {; call make_files; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/699#issuecomment-210234833
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581:129,Availability,error,error,129,"Not sure if this is a separate issue or not, but when @knoblett and I were submitting a workflow yesterday we got the exact same error message (submitted with Swagger). The issue for her was that there was an input that was specified to be a File type, but in reality it was just a String (so I'm guessing the issue was similar in that it couldn't find the ""file""). Unfortunately, it validated just fine, but we weren't able to submit it. . I'd be happy to provide the WDL and JSON files (both the broken version and the fixed version) but they won't attach in a github comment.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581:135,Integrability,message,message,135,"Not sure if this is a separate issue or not, but when @knoblett and I were submitting a workflow yesterday we got the exact same error message (submitted with Swagger). The issue for her was that there was an input that was specified to be a File type, but in reality it was just a String (so I'm guessing the issue was similar in that it couldn't find the ""file""). Unfortunately, it validated just fine, but we weren't able to submit it. . I'd be happy to provide the WDL and JSON files (both the broken version and the fixed version) but they won't attach in a github comment.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581:384,Security,validat,validated,384,"Not sure if this is a separate issue or not, but when @knoblett and I were submitting a workflow yesterday we got the exact same error message (submitted with Swagger). The issue for her was that there was an input that was specified to be a File type, but in reality it was just a String (so I'm guessing the issue was similar in that it couldn't find the ""file""). Unfortunately, it validated just fine, but we weren't able to submit it. . I'd be happy to provide the WDL and JSON files (both the broken version and the fixed version) but they won't attach in a github comment.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921:409,Availability,error,error,409,"I submitted the regular single_sample.wdl with the VIR_1923 .JSON that's; there...I guess I don't have permissions or something to access the files; that are listed. On Thu, Apr 14, 2016 at 9:01 AM, meganshand notifications@github.com; wrote:. > Not sure if this is a separate issue or not, but when @knoblett; > https://github.com/knoblett and I were submitting a workflow yesterday; > we got the exact same error message (submitted with Swagger). The issue for; > her was that there was an input that was specified to be a File type, but; > in reality it was just a String (so I'm guessing the issue was similar in; > that it couldn't find the ""file""). Unfortunately, it validated just fine,; > but we weren't able to submit it.; > ; > I'd be happy to provide the WDL and JSON files (both the broken version; > and the fixed version) but they won't attach in a github comment.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921:415,Integrability,message,message,415,"I submitted the regular single_sample.wdl with the VIR_1923 .JSON that's; there...I guess I don't have permissions or something to access the files; that are listed. On Thu, Apr 14, 2016 at 9:01 AM, meganshand notifications@github.com; wrote:. > Not sure if this is a separate issue or not, but when @knoblett; > https://github.com/knoblett and I were submitting a workflow yesterday; > we got the exact same error message (submitted with Swagger). The issue for; > her was that there was an input that was specified to be a File type, but; > in reality it was just a String (so I'm guessing the issue was similar in; > that it couldn't find the ""file""). Unfortunately, it validated just fine,; > but we weren't able to submit it.; > ; > I'd be happy to provide the WDL and JSON files (both the broken version; > and the fixed version) but they won't attach in a github comment.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921:131,Security,access,access,131,"I submitted the regular single_sample.wdl with the VIR_1923 .JSON that's; there...I guess I don't have permissions or something to access the files; that are listed. On Thu, Apr 14, 2016 at 9:01 AM, meganshand notifications@github.com; wrote:. > Not sure if this is a separate issue or not, but when @knoblett; > https://github.com/knoblett and I were submitting a workflow yesterday; > we got the exact same error message (submitted with Swagger). The issue for; > her was that there was an input that was specified to be a File type, but; > in reality it was just a String (so I'm guessing the issue was similar in; > that it couldn't find the ""file""). Unfortunately, it validated just fine,; > but we weren't able to submit it.; > ; > I'd be happy to provide the WDL and JSON files (both the broken version; > and the fixed version) but they won't attach in a github comment.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921:673,Security,validat,validated,673,"I submitted the regular single_sample.wdl with the VIR_1923 .JSON that's; there...I guess I don't have permissions or something to access the files; that are listed. On Thu, Apr 14, 2016 at 9:01 AM, meganshand notifications@github.com; wrote:. > Not sure if this is a separate issue or not, but when @knoblett; > https://github.com/knoblett and I were submitting a workflow yesterday; > we got the exact same error message (submitted with Swagger). The issue for; > her was that there was an input that was specified to be a File type, but; > in reality it was just a String (so I'm guessing the issue was similar in; > that it couldn't find the ""file""). Unfortunately, it validated just fine,; > but we weren't able to submit it.; > ; > I'd be happy to provide the WDL and JSON files (both the broken version; > and the fixed version) but they won't attach in a github comment.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209931581",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209935921
https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209937270:272,Security,access,access,272,"Actually if that's true, then I think this is related to #589. @yfarjoun This is assuming that you were submitting with swagger (vs curl in the other issue) and that the project the cromwell server you were using was not the same as broad-gp-gotc-pilot (so it didn't have access to those input files).",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/703#issuecomment-209937270
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210132769:39,Energy Efficiency,green,green,39,"wth is going on with Coveralls, we get green ticks for -0.2% now?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210132769
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210148650:130,Deployability,integrat,integrate,130,":+1: . Yeah this is going to change a lot in the shadow world, but these changes do eliminate a lot of db stuff from the backend, integrate retries on the upserts, and test the heck out of restarts. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210148650
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210148650:130,Integrability,integrat,integrate,130,":+1: . Yeah this is going to change a lot in the shadow world, but these changes do eliminate a lot of db stuff from the backend, integrate retries on the upserts, and test the heck out of restarts. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210148650
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210148650:168,Testability,test,test,168,":+1: . Yeah this is going to change a lot in the shadow world, but these changes do eliminate a lot of db stuff from the backend, integrate retries on the upserts, and test the heck out of restarts. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210148650
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210442317:19,Testability,test,test,19,"@mcovarr regarding test coverage, I'm sure I can add some tests, or at least verify that all paths through that restart code are hit",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210442317
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210442317:58,Testability,test,tests,58,"@mcovarr regarding test coverage, I'm sure I can add some tests, or at least verify that all paths through that restart code are hit",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210442317
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785:51,Testability,test,test,51,"Seems that it's not (easily) possible to correctly test restarts the way the code is structured now. . I need to be able to pass in a modified `LocalBackend` which overrides `isResumable`, and `isRestartable`, and `resume`. The problem is that `WorkflowDescriptor` has a reference to the `Backend` but also the `MaterializedWorkflowDescriptorActor` reaches into the global map of backends too... I had a very hard time constructing a custom `LocalBackend` that could be used for a workflow submission. So I ended up adding a happy-path test but I'll wait until the shadow world emerges before adding other tests I guess...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785:536,Testability,test,test,536,"Seems that it's not (easily) possible to correctly test restarts the way the code is structured now. . I need to be able to pass in a modified `LocalBackend` which overrides `isResumable`, and `isRestartable`, and `resume`. The problem is that `WorkflowDescriptor` has a reference to the `Backend` but also the `MaterializedWorkflowDescriptorActor` reaches into the global map of backends too... I had a very hard time constructing a custom `LocalBackend` that could be used for a workflow submission. So I ended up adding a happy-path test but I'll wait until the shadow world emerges before adding other tests I guess...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785:606,Testability,test,tests,606,"Seems that it's not (easily) possible to correctly test restarts the way the code is structured now. . I need to be able to pass in a modified `LocalBackend` which overrides `isResumable`, and `isRestartable`, and `resume`. The problem is that `WorkflowDescriptor` has a reference to the `Backend` but also the `MaterializedWorkflowDescriptorActor` reaches into the global map of backends too... I had a very hard time constructing a custom `LocalBackend` that could be used for a workflow submission. So I ended up adding a happy-path test but I'll wait until the shadow world emerges before adding other tests I guess...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785
https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785:215,Usability,resume,resume,215,"Seems that it's not (easily) possible to correctly test restarts the way the code is structured now. . I need to be able to pass in a modified `LocalBackend` which overrides `isResumable`, and `isRestartable`, and `resume`. The problem is that `WorkflowDescriptor` has a reference to the `Backend` but also the `MaterializedWorkflowDescriptorActor` reaches into the global map of backends too... I had a very hard time constructing a custom `LocalBackend` that could be used for a workflow submission. So I ended up adding a happy-path test but I'll wait until the shadow world emerges before adding other tests I guess...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/704#issuecomment-210606785
https://github.com/broadinstitute/cromwell/issues/705#issuecomment-212617929:54,Deployability,update,updated,54,"@scottfrazer @geoffjentry Should ""getting started"" be updated to point users to our website's documentation, or is this a separate issue?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/705#issuecomment-212617929
https://github.com/broadinstitute/cromwell/pull/707#issuecomment-210641359:153,Testability,test,tests,153,"@cjllanwarne I would like to rebase my PR ~~with~~ on your branch, and merge it into yours (stuff where I'm populating the Call -> Assignment map + some tests). Do you think that's fine?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/707#issuecomment-210641359
https://github.com/broadinstitute/cromwell/pull/707#issuecomment-211403226:96,Deployability,integrat,integration,96,@gauravs90 I'm happy to handle the tidy-up of this PR. Could you though review it (including my integration of your changes) and thumbs-up if you're happy? Cheers!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/707#issuecomment-211403226
https://github.com/broadinstitute/cromwell/pull/707#issuecomment-211403226:96,Integrability,integrat,integration,96,@gauravs90 I'm happy to handle the tidy-up of this PR. Could you though review it (including my integration of your changes) and thumbs-up if you're happy? Cheers!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/707#issuecomment-211403226
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-210454891:78,Security,validat,validations,78,"I like the scheme of providing a standard functions library to do some common validations for a user. . I'm a little wary of listing backend-specific keys in that library though. In particular I don't want to give any backend developers the impression that either they (a) cannot use their own custom keys or (b) must use every ""standard"" key. But mostly, this looks good!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-210454891
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212150073:157,Testability,test,tests,157,@cjllanwarne @Horneth I did the changes in order to evaluate expressions based on @Horneth recommendation (Could you review it?). I also created a couple of tests cases for LocalBackend so you can see the whole idea behind it.; I will continue adding all needed tests for all supported backends and once they are in place I will let you know to review the whole PR so then I can merge it.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212150073
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212150073:262,Testability,test,tests,262,@cjllanwarne @Horneth I did the changes in order to evaluate expressions based on @Horneth recommendation (Could you review it?). I also created a couple of tests cases for LocalBackend so you can see the whole idea behind it.; I will continue adding all needed tests for all supported backends and once they are in place I will let you know to review the whole PR so then I can merge it.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212150073
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212170300:75,Security,validat,validation,75,"@geoffjentry I'm working on JES unit test cases now... which are the cases validation should fail if entry is not present?; Let's say Docker entry is not provided in RuntimeAttributes, should validation fails in this case for JES?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212170300
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212170300:192,Security,validat,validation,192,"@geoffjentry I'm working on JES unit test cases now... which are the cases validation should fail if entry is not present?; Let's say Docker entry is not provided in RuntimeAttributes, should validation fails in this case for JES?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212170300
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212170300:37,Testability,test,test,37,"@geoffjentry I'm working on JES unit test cases now... which are the cases validation should fail if entry is not present?; Let's say Docker entry is not provided in RuntimeAttributes, should validation fails in this case for JES?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212170300
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212482498:141,Deployability,pipeline,pipeline,141,@francares I believe the only attribute strictly required is docker as all of the other ones should have defaults set by the google genomics pipeline API (e.g. disk defaults to 500GB). Anything provided should be valid however.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212482498
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212545369:108,Performance,load,load,108,@geoffjentry @scottfrazer It seems the parser is validating memory runtime attribute entry when it tries to load namespaces.; I think it should be removed to follow the current idea.; This is the link to the code that is causing related test to fail (look for ignore word in the PR) => https://github.com/broadinstitute/wdl4s/blob/d7e19c9f4dfbc5ad912cf641af9c640eb8a9a9c7/src/main/scala/wdl4s/RuntimeAttributes.scala; Let me know how to proceed with this...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212545369
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212545369:49,Security,validat,validating,49,@geoffjentry @scottfrazer It seems the parser is validating memory runtime attribute entry when it tries to load namespaces.; I think it should be removed to follow the current idea.; This is the link to the code that is causing related test to fail (look for ignore word in the PR) => https://github.com/broadinstitute/wdl4s/blob/d7e19c9f4dfbc5ad912cf641af9c640eb8a9a9c7/src/main/scala/wdl4s/RuntimeAttributes.scala; Let me know how to proceed with this...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212545369
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212545369:237,Testability,test,test,237,@geoffjentry @scottfrazer It seems the parser is validating memory runtime attribute entry when it tries to load namespaces.; I think it should be removed to follow the current idea.; This is the link to the code that is causing related test to fail (look for ignore word in the PR) => https://github.com/broadinstitute/wdl4s/blob/d7e19c9f4dfbc5ad912cf641af9c640eb8a9a9c7/src/main/scala/wdl4s/RuntimeAttributes.scala; Let me know how to proceed with this...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212545369
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212551388:205,Availability,down,down,205,"Honestly I'd really like it if that validation were removed from wdl4s. Even though it ""makes sense"" for it to be there because ""the spec says memory should be formatted like this so we should validate it down at the wdl4s level"". I still would rather change the spec to be a suggestion rather than something that's mandatory so we don't have this one outlier which actually makes the code a lot harder to write. If we do change that now, I'll shed a tear because I have to rebase those changes on my super long lived branch that we were going to get to once PBE was finished.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212551388
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212551388:36,Security,validat,validation,36,"Honestly I'd really like it if that validation were removed from wdl4s. Even though it ""makes sense"" for it to be there because ""the spec says memory should be formatted like this so we should validate it down at the wdl4s level"". I still would rather change the spec to be a suggestion rather than something that's mandatory so we don't have this one outlier which actually makes the code a lot harder to write. If we do change that now, I'll shed a tear because I have to rebase those changes on my super long lived branch that we were going to get to once PBE was finished.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212551388
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212551388:193,Security,validat,validate,193,"Honestly I'd really like it if that validation were removed from wdl4s. Even though it ""makes sense"" for it to be there because ""the spec says memory should be formatted like this so we should validate it down at the wdl4s level"". I still would rather change the spec to be a suggestion rather than something that's mandatory so we don't have this one outlier which actually makes the code a lot harder to write. If we do change that now, I'll shed a tear because I have to rebase those changes on my super long lived branch that we were going to get to once PBE was finished.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212551388
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683:231,Integrability,message,message,231,"Ok, just for clarification I will do the following:; 1. Remove validateRuntimeValue from wdl4s and create a PR in that repo.; 2. Add validateMemoryValue to JesInitializationActor.; 3. Refactor validateMemoryValue to return similar message than the other ones.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683:184,Modifiability,Refactor,Refactor,184,"Ok, just for clarification I will do the following:; 1. Remove validateRuntimeValue from wdl4s and create a PR in that repo.; 2. Add validateMemoryValue to JesInitializationActor.; 3. Refactor validateMemoryValue to return similar message than the other ones.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683:63,Security,validat,validateRuntimeValue,63,"Ok, just for clarification I will do the following:; 1. Remove validateRuntimeValue from wdl4s and create a PR in that repo.; 2. Add validateMemoryValue to JesInitializationActor.; 3. Refactor validateMemoryValue to return similar message than the other ones.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683:133,Security,validat,validateMemoryValue,133,"Ok, just for clarification I will do the following:; 1. Remove validateRuntimeValue from wdl4s and create a PR in that repo.; 2. Add validateMemoryValue to JesInitializationActor.; 3. Refactor validateMemoryValue to return similar message than the other ones.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683:193,Security,validat,validateMemoryValue,193,"Ok, just for clarification I will do the following:; 1. Remove validateRuntimeValue from wdl4s and create a PR in that repo.; 2. Add validateMemoryValue to JesInitializationActor.; 3. Refactor validateMemoryValue to return similar message than the other ones.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212581683
https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212986086:49,Security,validat,validation,49,👍 with a ticket to not forget about slow failing validation. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/708/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/708#issuecomment-212986086
https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658:107,Integrability,message,message,107,"Hey @gauravs90 - this looks like it shares a bit of work with the stuff I did in my #707 PR, trying to get message processing as far through the system as possible without backends. Luckily, you've focused in a different place (the actual validation) so combining/merging them shouldn't be too tough. The big differences I can see:; - I did the Materialization in a shadow actor to avoid interrupting the main one; - I moved backend assignment into my ShadowMaterializeWorkflowDescriptorActor; - MaterializeWorkflowDescriptorActor creates a data-only EngineWorkflowDescriptor. Literally just a BackendWorkflowDescriptor plus backend assignments. Having looked at your code though, I'm now unsure which is better; - It turned out I wasn't 100% correct first time so there was a lot of tidying up in the interfaces between the lifecycle states :-/ . Anyway, I've added you as a reviewer on my PR so you can have a look at what I've done - it'd be nice to try to work out where these things should go and maybe rebase or merge these PRs since they're making changes in similar places?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658
https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658:802,Integrability,interface,interfaces,802,"Hey @gauravs90 - this looks like it shares a bit of work with the stuff I did in my #707 PR, trying to get message processing as far through the system as possible without backends. Luckily, you've focused in a different place (the actual validation) so combining/merging them shouldn't be too tough. The big differences I can see:; - I did the Materialization in a shadow actor to avoid interrupting the main one; - I moved backend assignment into my ShadowMaterializeWorkflowDescriptorActor; - MaterializeWorkflowDescriptorActor creates a data-only EngineWorkflowDescriptor. Literally just a BackendWorkflowDescriptor plus backend assignments. Having looked at your code though, I'm now unsure which is better; - It turned out I wasn't 100% correct first time so there was a lot of tidying up in the interfaces between the lifecycle states :-/ . Anyway, I've added you as a reviewer on my PR so you can have a look at what I've done - it'd be nice to try to work out where these things should go and maybe rebase or merge these PRs since they're making changes in similar places?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658
https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658:382,Safety,avoid,avoid,382,"Hey @gauravs90 - this looks like it shares a bit of work with the stuff I did in my #707 PR, trying to get message processing as far through the system as possible without backends. Luckily, you've focused in a different place (the actual validation) so combining/merging them shouldn't be too tough. The big differences I can see:; - I did the Materialization in a shadow actor to avoid interrupting the main one; - I moved backend assignment into my ShadowMaterializeWorkflowDescriptorActor; - MaterializeWorkflowDescriptorActor creates a data-only EngineWorkflowDescriptor. Literally just a BackendWorkflowDescriptor plus backend assignments. Having looked at your code though, I'm now unsure which is better; - It turned out I wasn't 100% correct first time so there was a lot of tidying up in the interfaces between the lifecycle states :-/ . Anyway, I've added you as a reviewer on my PR so you can have a look at what I've done - it'd be nice to try to work out where these things should go and maybe rebase or merge these PRs since they're making changes in similar places?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658
https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658:239,Security,validat,validation,239,"Hey @gauravs90 - this looks like it shares a bit of work with the stuff I did in my #707 PR, trying to get message processing as far through the system as possible without backends. Luckily, you've focused in a different place (the actual validation) so combining/merging them shouldn't be too tough. The big differences I can see:; - I did the Materialization in a shadow actor to avoid interrupting the main one; - I moved backend assignment into my ShadowMaterializeWorkflowDescriptorActor; - MaterializeWorkflowDescriptorActor creates a data-only EngineWorkflowDescriptor. Literally just a BackendWorkflowDescriptor plus backend assignments. Having looked at your code though, I'm now unsure which is better; - It turned out I wasn't 100% correct first time so there was a lot of tidying up in the interfaces between the lifecycle states :-/ . Anyway, I've added you as a reviewer on my PR so you can have a look at what I've done - it'd be nice to try to work out where these things should go and maybe rebase or merge these PRs since they're making changes in similar places?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/709#issuecomment-210438658
https://github.com/broadinstitute/cromwell/pull/710#issuecomment-210459331:21,Testability,test,tested,21,"Assuming that you've tested it, my previous comment is probably irrelevant. So :+1: . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/710/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/710#issuecomment-210459331
https://github.com/broadinstitute/cromwell/pull/710#issuecomment-210461439:396,Availability,avail,available,396,"Upon further reflection I think I might want to work on this a bit more before merging. This addresses the problems of the list limit being too low and not configurable, but it doesn't yet address the problem that when the list limit is hit the code silently truncates. I'm not sure if GCS provides an API to say how many object have a given prefix, but I'd like to see if something like that is available. If the number of objects that would be returned by list() exceeds our limit, I think the code should fail noisily and not silently.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/710#issuecomment-210461439
https://github.com/broadinstitute/cromwell/pull/710#issuecomment-210461439:156,Modifiability,config,configurable,156,"Upon further reflection I think I might want to work on this a bit more before merging. This addresses the problems of the list limit being too low and not configurable, but it doesn't yet address the problem that when the list limit is hit the code silently truncates. I'm not sure if GCS provides an API to say how many object have a given prefix, but I'd like to see if something like that is available. If the number of objects that would be returned by list() exceeds our limit, I think the code should fail noisily and not silently.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/710#issuecomment-210461439
https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212404457:28,Availability,failure,failures,28,"Uh, if this is causing test failures, then we have something very wrong in our tests",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212404457
https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212404457:23,Testability,test,test,23,"Uh, if this is causing test failures, then we have something very wrong in our tests",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212404457
https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212404457:79,Testability,test,tests,79,"Uh, if this is causing test failures, then we have something very wrong in our tests",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212404457
https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212408133:65,Availability,failure,failure,65,@cjllanwarne I'm going to go out on a limb and say that the test failure had nothing to do with this change. Just a guess.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212408133
https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212408133:60,Testability,test,test,60,@cjllanwarne I'm going to go out on a limb and say that the test failure had nothing to do with this change. Just a guess.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/718#issuecomment-212408133
https://github.com/broadinstitute/cromwell/issues/719#issuecomment-212041006:106,Energy Efficiency,Green,GreenFriends,106,"Hey @jsotobroad -- if you think you need this fix for sometime in the near future then we should label it GreenFriends so it gets the deserved attention. Otherwise, this sounds like a bug--I would consider it a regression as I believe we expect all WF's to produce metadata.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/719#issuecomment-212041006
https://github.com/broadinstitute/cromwell/issues/719#issuecomment-213249737:290,Integrability,depend,depending,290,"This is not the same as #695. #719 is, our workflow metadata response to a massive wdl is a massively slow build of metadata. This metadata includes lots of trips to the database, lots of conversion from DB objects to JSON-friendly objects, and possibly retrieves values that aren't needed depending on the consumer. In addition to investigating what should be returned by the existing metadata endpoint, we may want two additional metadata builders:; 1. For showing timing diagrams -- doesn't need things such as the output paths, etc.; 2. For running the existing 3-types of final calls -- doesn't need all the existing metadata, and definitely doesn't need to be created 3x, once per type of final call",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/719#issuecomment-213249737
https://github.com/broadinstitute/cromwell/pull/721#issuecomment-212049869:54,Testability,test,test,54,"Another weekend hack, no rush on the PR review. On my test mysql database with hundreds of dummy workflows, the spec was materializing _all_ of the dummy workflows before then filtering, and timing out.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/721#issuecomment-212049869
https://github.com/broadinstitute/cromwell/issues/724#issuecomment-254304221:202,Modifiability,config,config,202,At a workflow level this has been prioritised as #908. For backends I believe this should be done on a case-by-case basis by the backend owner. There'll always be something that doesn't make sense as a config option so a set of more focused tickets will be much easier to prioritise and then handle.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/724#issuecomment-254304221
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213246179:10,Deployability,patch,patch,10,"A similar patch was tested by @jsotobroad. Once this PR against develop is reviewed & merged, we can submit another PR against master, and _that one_ should make #695 good to go.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213246179
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213246179:20,Testability,test,tested,20,"A similar patch was tested by @jsotobroad. Once this PR against develop is reviewed & merged, we can submit another PR against master, and _that one_ should make #695 good to go.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213246179
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213251040:106,Availability,repair,repaired,106,"@geoffjentry & @Horneth for review please, including the lenthall patch needed to get this cromwell build repaired",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213251040
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213251040:66,Deployability,patch,patch,66,"@geoffjentry & @Horneth for review please, including the lenthall patch needed to get this cromwell build repaired",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213251040
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213449018:51,Deployability,patch,patch,51,"In case @kshakir isn't the one managing the master patch today, reminder that lenthall needs to be deal with in that situation as well",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213449018
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213477862:71,Deployability,patch,patch,71,"This should go green soon and be good to merge. I'll submit the master patch tomorrow, unless someone else gets to it first.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213477862
https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213477862:15,Energy Efficiency,green,green,15,"This should go green soon and be good to merge. I'll submit the master patch tomorrow, unless someone else gets to it first.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/728#issuecomment-213477862
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458:511,Availability,robust,robust,511,"Hi @seandavi - That does seem like it should work. Thinking back in my past I've definitely encountered tools which expect TMPDIR to exist and aren't smart enough to create it themselves. Also in JES there shouldn't be any issues with permissions, etc. We'd certainly welcome a PR if you're game for it, either (or both) against `0.19_hotfix` or `develop`. On that note, I should point out that a new release (currently `develop`) is imminent and for all but one use case (call caching) we beliee it to be more robust/stable that 0.19. I'd personally recommend people who don't need call caching work with the new system, but I understand that some people aren't comfortable working with code which isn't yet released.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458:401,Deployability,release,release,401,"Hi @seandavi - That does seem like it should work. Thinking back in my past I've definitely encountered tools which expect TMPDIR to exist and aren't smart enough to create it themselves. Also in JES there shouldn't be any issues with permissions, etc. We'd certainly welcome a PR if you're game for it, either (or both) against `0.19_hotfix` or `develop`. On that note, I should point out that a new release (currently `develop`) is imminent and for all but one use case (call caching) we beliee it to be more robust/stable that 0.19. I'd personally recommend people who don't need call caching work with the new system, but I understand that some people aren't comfortable working with code which isn't yet released.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458:709,Deployability,release,released,709,"Hi @seandavi - That does seem like it should work. Thinking back in my past I've definitely encountered tools which expect TMPDIR to exist and aren't smart enough to create it themselves. Also in JES there shouldn't be any issues with permissions, etc. We'd certainly welcome a PR if you're game for it, either (or both) against `0.19_hotfix` or `develop`. On that note, I should point out that a new release (currently `develop`) is imminent and for all but one use case (call caching) we beliee it to be more robust/stable that 0.19. I'd personally recommend people who don't need call caching work with the new system, but I understand that some people aren't comfortable working with code which isn't yet released.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687994:761,Availability,robust,robust,761,"I'll start working with development, then. We don't have anything in; ""production"" that we cannot break. Thanks for the direction. On Aug 14, 2016 14:05, ""Jeff Gentry"" notifications@github.com wrote:. > Hi @seandavi https://github.com/seandavi - That does seem like it; > should work. Thinking back in my past I've definitely encountered tools; > which expect TMPDIR to exist and aren't smart enough to create it; > themselves. Also in JES there shouldn't be any issues with permissions, etc.; > ; > We'd certainly welcome a PR if you're game for it, either (or both); > against 0.19_hotfix or develop. On that note, I should point out that a; > new release (currently develop) is imminent and for all but one use case; > (call caching) we beliee it to be more robust/stable that 0.19. I'd; > personally recommend people who don't need call caching work with the new; > system, but I understand that some people aren't comfortable working with; > code which isn't yet released.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/AAFpE17tmdKE5bY42PWUnqMW6YV6rifAks5qf1jugaJpZM4INzbb; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687994
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687994:650,Deployability,release,release,650,"I'll start working with development, then. We don't have anything in; ""production"" that we cannot break. Thanks for the direction. On Aug 14, 2016 14:05, ""Jeff Gentry"" notifications@github.com wrote:. > Hi @seandavi https://github.com/seandavi - That does seem like it; > should work. Thinking back in my past I've definitely encountered tools; > which expect TMPDIR to exist and aren't smart enough to create it; > themselves. Also in JES there shouldn't be any issues with permissions, etc.; > ; > We'd certainly welcome a PR if you're game for it, either (or both); > against 0.19_hotfix or develop. On that note, I should point out that a; > new release (currently develop) is imminent and for all but one use case; > (call caching) we beliee it to be more robust/stable that 0.19. I'd; > personally recommend people who don't need call caching work with the new; > system, but I understand that some people aren't comfortable working with; > code which isn't yet released.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/AAFpE17tmdKE5bY42PWUnqMW6YV6rifAks5qf1jugaJpZM4INzbb; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687994
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687994:968,Deployability,release,released,968,"I'll start working with development, then. We don't have anything in; ""production"" that we cannot break. Thanks for the direction. On Aug 14, 2016 14:05, ""Jeff Gentry"" notifications@github.com wrote:. > Hi @seandavi https://github.com/seandavi - That does seem like it; > should work. Thinking back in my past I've definitely encountered tools; > which expect TMPDIR to exist and aren't smart enough to create it; > themselves. Also in JES there shouldn't be any issues with permissions, etc.; > ; > We'd certainly welcome a PR if you're game for it, either (or both); > against 0.19_hotfix or develop. On that note, I should point out that a; > new release (currently develop) is imminent and for all but one use case; > (call caching) we beliee it to be more robust/stable that 0.19. I'd; > personally recommend people who don't need call caching work with the new; > system, but I understand that some people aren't comfortable working with; > code which isn't yet released.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687458,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/AAFpE17tmdKE5bY42PWUnqMW6YV6rifAks5qf1jugaJpZM4INzbb; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-239687994
https://github.com/broadinstitute/cromwell/issues/731#issuecomment-254303273:96,Testability,test,testing,96,"Closing this as ""believed fixed in 21+"". @seandavi , please let us know if it reappears in your testing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/731#issuecomment-254303273
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720:316,Energy Efficiency,adapt,adapter,316,"I think technically these could be collapsed into one class, but from your description maybe it's preferable to keep this structure with the roles of the classes more clearly articulated? The outer actor has the responsibility of implementing the `BackendJobExecutionActor` trait, but can be implemented as a simple adapter to any backend-specific means of executing jobs, which here just happens to be an FSM. Not sure what the best nomenclature would be for this distinction.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720:316,Integrability,adapter,adapter,316,"I think technically these could be collapsed into one class, but from your description maybe it's preferable to keep this structure with the roles of the classes more clearly articulated? The outer actor has the responsibility of implementing the `BackendJobExecutionActor` trait, but can be implemented as a simple adapter to any backend-specific means of executing jobs, which here just happens to be an FSM. Not sure what the best nomenclature would be for this distinction.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720:316,Modifiability,adapt,adapter,316,"I think technically these could be collapsed into one class, but from your description maybe it's preferable to keep this structure with the roles of the classes more clearly articulated? The outer actor has the responsibility of implementing the `BackendJobExecutionActor` trait, but can be implemented as a simple adapter to any backend-specific means of executing jobs, which here just happens to be an FSM. Not sure what the best nomenclature would be for this distinction.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720:167,Usability,clear,clearly,167,"I think technically these could be collapsed into one class, but from your description maybe it's preferable to keep this structure with the roles of the classes more clearly articulated? The outer actor has the responsibility of implementing the `BackendJobExecutionActor` trait, but can be implemented as a simple adapter to any backend-specific means of executing jobs, which here just happens to be an FSM. Not sure what the best nomenclature would be for this distinction.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720:309,Usability,simpl,simple,309,"I think technically these could be collapsed into one class, but from your description maybe it's preferable to keep this structure with the roles of the classes more clearly articulated? The outer actor has the responsibility of implementing the `BackendJobExecutionActor` trait, but can be implemented as a simple adapter to any backend-specific means of executing jobs, which here just happens to be an FSM. Not sure what the best nomenclature would be for this distinction.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214527720
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214750391:151,Safety,abort,abort,151,"@mcovarr Yeah the reason for this PR is that there is currently a mutable `var` that holds the process when it's created, so it can be accessed by the abort method. I know `var`s are evil but in this case creating an underlying FSM just to get rid of this `var` does seem an overkill to me. I couldn't find a way to use the `BackendJobExecutionActor` itself to encapsulate this mutable state though, which is why I ended up with this. I can give it another shot.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214750391
https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214750391:135,Security,access,accessed,135,"@mcovarr Yeah the reason for this PR is that there is currently a mutable `var` that holds the process when it's created, so it can be accessed by the abort method. I know `var`s are evil but in this case creating an underlying FSM just to get rid of this `var` does seem an overkill to me. I couldn't find a way to use the `BackendJobExecutionActor` itself to encapsulate this mutable state though, which is why I ended up with this. I can give it another shot.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/734#issuecomment-214750391
https://github.com/broadinstitute/cromwell/issues/735#issuecomment-217288661:73,Deployability,hotfix,hotfix,73,"Talked to @jsotobroad in person.; - Kamon was removed in develop, but no hotfix needed because; - Green team changed their `java ...` script to not invoke the kamon code. No longer seems to be an issue. Closing and removing my branch that, in parallel, tested the kamon removal against a stale version of 0.19_hotfix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/735#issuecomment-217288661
https://github.com/broadinstitute/cromwell/issues/735#issuecomment-217288661:98,Energy Efficiency,Green,Green,98,"Talked to @jsotobroad in person.; - Kamon was removed in develop, but no hotfix needed because; - Green team changed their `java ...` script to not invoke the kamon code. No longer seems to be an issue. Closing and removing my branch that, in parallel, tested the kamon removal against a stale version of 0.19_hotfix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/735#issuecomment-217288661
https://github.com/broadinstitute/cromwell/issues/735#issuecomment-217288661:253,Testability,test,tested,253,"Talked to @jsotobroad in person.; - Kamon was removed in develop, but no hotfix needed because; - Green team changed their `java ...` script to not invoke the kamon code. No longer seems to be an issue. Closing and removing my branch that, in parallel, tested the kamon removal against a stale version of 0.19_hotfix.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/735#issuecomment-217288661
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-214518906:1273,Performance,concurren,concurrent,1273,Stacktrace:. ```; java.sql.SQLTimeoutException: Timeout after 5059ms of waiting for a connection.; at com.zaxxer.hikari.pool.BaseHikariPool.getConnection(BaseHikariPool.java:227) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.pool.BaseHikariPool.getConnection(BaseHikariPool.java:182) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:93) ~[cromwell.jar:0.19]; at slick.jdbc.hikaricp.HikariCPJdbcDataSource.createConnection(HikariCPJdbcDataSource.scala:12) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.conn$lzycompute(JdbcBackend.scala:415) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.conn(JdbcBackend.scala:414) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.startInTransaction(JdbcBackend.scala:437) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$StartTransaction$.run(JdbcActionComponent.scala:41) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$StartTransaction$.run(JdbcActionComponent.scala:38) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-214518906
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-214518906:1372,Performance,concurren,concurrent,1372,Stacktrace:. ```; java.sql.SQLTimeoutException: Timeout after 5059ms of waiting for a connection.; at com.zaxxer.hikari.pool.BaseHikariPool.getConnection(BaseHikariPool.java:227) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.pool.BaseHikariPool.getConnection(BaseHikariPool.java:182) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:93) ~[cromwell.jar:0.19]; at slick.jdbc.hikaricp.HikariCPJdbcDataSource.createConnection(HikariCPJdbcDataSource.scala:12) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.conn$lzycompute(JdbcBackend.scala:415) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.conn(JdbcBackend.scala:414) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.startInTransaction(JdbcBackend.scala:437) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$StartTransaction$.run(JdbcActionComponent.scala:41) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$StartTransaction$.run(JdbcActionComponent.scala:38) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-214518906
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-214518906:48,Safety,Timeout,Timeout,48,Stacktrace:. ```; java.sql.SQLTimeoutException: Timeout after 5059ms of waiting for a connection.; at com.zaxxer.hikari.pool.BaseHikariPool.getConnection(BaseHikariPool.java:227) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.pool.BaseHikariPool.getConnection(BaseHikariPool.java:182) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:93) ~[cromwell.jar:0.19]; at slick.jdbc.hikaricp.HikariCPJdbcDataSource.createConnection(HikariCPJdbcDataSource.scala:12) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.conn$lzycompute(JdbcBackend.scala:415) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.conn(JdbcBackend.scala:414) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.startInTransaction(JdbcBackend.scala:437) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$StartTransaction$.run(JdbcActionComponent.scala:41) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$StartTransaction$.run(JdbcActionComponent.scala:38) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-214518906
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-228104671:76,Availability,failure,failures,76,"@kcibul @ruchim FYI - this has failed 62 workflows for us (out of 277 total failures, 22%). It is tied for our largest source of failure. We have not seen it since 6/7",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-228104671
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-228104671:129,Availability,failure,failure,129,"@kcibul @ruchim FYI - this has failed 62 workflows for us (out of 277 total failures, 22%). It is tied for our largest source of failure. We have not seen it since 6/7",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-228104671
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-229635762:124,Deployability,hotfix,hotfix,124,Please investigate and see what the root cause is. Then let's decide if would still be a problem on 0.20+ and if we need to hotfix it in 0.19,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-229635762
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-230537661:98,Availability,toler,tolerate,98,@ktibbett can you comment if this is something you need patched into hotfix? Or something you can tolerate until you're on 0.20+,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-230537661
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-230537661:56,Deployability,patch,patched,56,@ktibbett can you comment if this is something you need patched into hotfix? Or something you can tolerate until you're on 0.20+,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-230537661
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-230537661:69,Deployability,hotfix,hotfix,69,@ktibbett can you comment if this is something you need patched into hotfix? Or something you can tolerate until you're on 0.20+,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-230537661
https://github.com/broadinstitute/cromwell/issues/737#issuecomment-253877756:100,Deployability,upgrade,upgrades,100,@kcibul I strike to close this - no one has answered your last question for multiple months now and upgrades to 0.2x are underway,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/737#issuecomment-253877756
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7168,Energy Efficiency,Adapt,AdaptedForkJoinTask,7168,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:1344,Integrability,protocol,protocol,1344,va.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_72]; 905151- at sun.security.ssl.InputRecord.readFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0.19]; 905167- at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:972) ~[cromwell.jar:0.19]; 905168- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; 905169- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.ex,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:1460,Integrability,protocol,protocol,1460,adFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0.19]; 905167- at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:972) ~[cromwell.jar:0.19]; 905168- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; 905169- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; 905170- at com.google.api.client.googleapi,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:1673,Integrability,protocol,protocol,1673,8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0.19]; 905167- at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:972) ~[cromwell.jar:0.19]; 905168- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; 905169- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; 905170- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; 905171- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(Gcs,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7168,Modifiability,Adapt,AdaptedForkJoinTask,7168,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:6152,Performance,concurren,concurrent,6152,edValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; 905193- at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:777) ~[cromwell.jar:0.19]; 905194- at scala.collection.MapLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; 905195- at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; 905196- at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; 905197- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionCo,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:6252,Performance,concurren,concurrent,6252,e$WithFilter.foreach(TraversableLike.scala:777) ~[cromwell.jar:0.19]; 905194- at scala.collection.MapLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; 905195- at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; 905196- at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; 905197- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at ,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:6352,Performance,concurren,concurrent,6352,pLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; 905195- at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; 905196- at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; 905197- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:6458,Performance,concurren,concurrent,6458,eLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; 905196- at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; 905197- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7037,Performance,concurren,concurrent,7037,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7131,Performance,concurren,concurrent,7131,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7264,Performance,concurren,concurrent,7264,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7365,Performance,concurren,concurrent,7365,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7478,Performance,concurren,concurrent,7478,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:7583,Performance,concurren,concurrent,7583,un$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; 905198- at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; 905199- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905200- at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; 905201- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; 905202- at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; 905203- at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; 905204- at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; 905205- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 905206- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 905207- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 905208- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 905209- at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; 905210- at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; 905211- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 905212- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 905213- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 905214- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]. ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:437,Security,secur,security,437,Stacktrace:. ```; 905146-java.net.SocketTimeoutException: Read timed out; 905147- at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_72]; 905148- at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_72]; 905149- at java.net.SocketInputStream.read(SocketInputStream.java:170) ~[na:1.8.0_72]; 905150- at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_72]; 905151- at sun.security.ssl.InputRecord.readFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:525,Security,secur,security,525,Stacktrace:. ```; 905146-java.net.SocketTimeoutException: Read timed out; 905147- at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_72]; 905148- at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_72]; 905149- at java.net.SocketInputStream.read(SocketInputStream.java:170) ~[na:1.8.0_72]; 905150- at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_72]; 905151- at sun.security.ssl.InputRecord.readFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:608,Security,secur,security,608,Stacktrace:. ```; 905146-java.net.SocketTimeoutException: Read timed out; 905147- at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_72]; 905148- at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_72]; 905149- at java.net.SocketInputStream.read(SocketInputStream.java:170) ~[na:1.8.0_72]; 905150- at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_72]; 905151- at sun.security.ssl.InputRecord.readFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:701,Security,secur,security,701,Stacktrace:. ```; 905146-java.net.SocketTimeoutException: Read timed out; 905147- at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_72]; 905148- at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_72]; 905149- at java.net.SocketInputStream.read(SocketInputStream.java:170) ~[na:1.8.0_72]; 905150- at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_72]; 905151- at sun.security.ssl.InputRecord.readFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:798,Security,secur,security,798,Stacktrace:. ```; 905146-java.net.SocketTimeoutException: Read timed out; 905147- at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_72]; 905148- at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_72]; 905149- at java.net.SocketInputStream.read(SocketInputStream.java:170) ~[na:1.8.0_72]; 905150- at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_72]; 905151- at sun.security.ssl.InputRecord.readFully(InputRecord.java:465) ~[na:1.8.0_72]; 905152- at sun.security.ssl.InputRecord.read(InputRecord.java:503) ~[na:1.8.0_72]; 905153- at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_72]; 905154- at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:930) ~[na:1.8.0_72]; 905155- at sun.security.ssl.AppInputStream.read(AppInputStream.java:105) ~[na:1.8.0_72]; 905156- at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_72]; 905157- at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_72]; 905158- at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_72]; 905159- at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:704) ~[na:1.8.0_72]; 905160- at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647) ~[na:1.8.0_72]; 905161- at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536) ~[na:1.8.0_72]; 905162- at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[na:1.8.0_72]; 905163- at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480) ~[na:1.8.0_72]; 905164- at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338) ~[na:1.8.0_72]; 905165- at com.google.api.client.http.javanet.NetHttpResponse.<init>(NetHttpResponse.java:37) ~[cromwell.jar:0.19]; 905166- at com.google.api.client.http.javanet.NetHttpRequest.execute(NetHttpRequest.java:94) ~[cromwell.jar:0,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:3299,Security,hash,hash,3299,services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; 905170- at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; 905171- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; 905172- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; 905173- at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; 905174- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$.withRetry(GcsFileSystemProvider.scala:44) ~[cromwell.jar:0.19]; 905175- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider.crc32cHash(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; 905176- at cromwell.engine.backend.io.package$PathEnhanced$.hash$extension(package.scala:32) ~[cromwell.jar:0.19]; 905177- at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:65) ~[cromwell.jar:0.19]; 905178- at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:63) ~[cromwell.jar:0.19]; 905179- at wdl4s.values.WdlValue$class.computeHash(WdlValue.scala:63) ~[cromwell.jar:0.19]; 905180- at wdl4s.values.WdlSingleFile.computeHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; 905181- at cromwell.engine.backend.WorkflowDescriptor.hash(WorkflowDescriptor.scala:229) ~[cromwell.jar:0.19]; 905182- at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:627) ~[cromwell.jar:0.19]; 905183- at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:626) ~[cromwell.jar:0.19]; 905184- at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; 9,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102:3856,Security,hash,hash,3856,cromwell.jar:0.19]; 905173- at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; 905174- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$.withRetry(GcsFileSystemProvider.scala:44) ~[cromwell.jar:0.19]; 905175- at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider.crc32cHash(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; 905176- at cromwell.engine.backend.io.package$PathEnhanced$.hash$extension(package.scala:32) ~[cromwell.jar:0.19]; 905177- at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:65) ~[cromwell.jar:0.19]; 905178- at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:63) ~[cromwell.jar:0.19]; 905179- at wdl4s.values.WdlValue$class.computeHash(WdlValue.scala:63) ~[cromwell.jar:0.19]; 905180- at wdl4s.values.WdlSingleFile.computeHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; 905181- at cromwell.engine.backend.WorkflowDescriptor.hash(WorkflowDescriptor.scala:229) ~[cromwell.jar:0.19]; 905182- at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:627) ~[cromwell.jar:0.19]; 905183- at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:626) ~[cromwell.jar:0.19]; 905184- at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; 905185- at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; 905186- at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:778) ~[cromwell.jar:0.19]; 905187- at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; 905188- at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; 905189- at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(Trav,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-214521102
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:39,Availability,failure,failure,39,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:219,Availability,ERROR,ERROR,219,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:423,Availability,error,errors,423,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:481,Availability,Error,Error,481,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:544,Availability,Error,Error,544,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5983,Energy Efficiency,Adapt,AdaptedForkJoinTask,5983,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:461,Integrability,message,message,461,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:524,Integrability,message,message,524,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5983,Modifiability,Adapt,AdaptedForkJoinTask,5983,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5039,Performance,concurren,concurrent,5039,leLike.scala:777) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:777) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cro,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5131,Performance,concurren,concurrent,5131,Like.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:777) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cr,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5223,Performance,concurren,concurrent,5223,(TraversableLike.scala:777) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues.foreach(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.j,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5321,Performance,concurren,concurrent,5321,(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.ja,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5860,Performance,concurren,concurrent,5860,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:5946,Performance,concurren,concurrent,5946,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:6071,Performance,concurren,concurrent,6071,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:6164,Performance,concurren,concurrent,6164,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:6269,Performance,concurren,concurrent,6269,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:6366,Performance,concurren,concurrent,6366,scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:569) ~[cromwell.jar:0.19]; at cromwell.engine.db.slick.SlickDataAccess$$anonfun$46.apply(SlickDataAccess.scala:568) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anonfun$runInContext$1.apply(DatabaseComponent.scala:146) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:251) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$flatMap$1.apply(Future.scala:249) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at scala.concurrent.impl.ExecutionContextImpl$AdaptedForkJoinTask.exec(ExecutionContextImpl.scala:121) ~[cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:76,Security,hash,hash,76,"Another example of a workflow complete failure possibly due to grabbing the hash from google. Workflow 0c7da038-172a-4081-8850-c87fec05f4c1. ```; 2016-04-26 20:52:05,279 cromwell-system-akka.actor.default-dispatcher-28 ERROR - WorkflowActor [UUID(0c7da038)]: Completion work failed for call HaplotypeCaller:46.; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:2386,Security,hash,hash,2386,cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$.withRetry(GcsFileSystemProvider.scala:44) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider.crc32cHash(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.package$PathEnhanced$.hash$extension(package.scala:32) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:65) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlValue$class.computeHash(WdlValue.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlSingleFile.computeHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor.hash(WorkflowDescriptor.scala:229) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:627) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:626) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618:2903,Security,hash,hash,2903,Provider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$.withRetry(GcsFileSystemProvider.scala:44) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider.crc32cHash(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.package$PathEnhanced$.hash$extension(package.scala:32) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:65) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlValue$class.computeHash(WdlValue.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlSingleFile.computeHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor.hash(WorkflowDescriptor.scala:229) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:627) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$postProcess$1$$anonfun$apply$14.apply(JesBackend.scala:626) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:778) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.MapLike$MappedValues$$anonfun$foreach$3.apply(MapLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:778) ~[cromwell.jar:0.19]; at scala.collection,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/738#issuecomment-215187618
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:38,Availability,failure,failure,38,"We've now seen a new ""flavor"" of this failure mode, where this same ""Communications link failure"" error is cropping up but it's following some type of HttpRequest failure: ; 2016-05-16 23:42:39,080 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(e7e4c6d2)]: Collection complete for Scattered Call CollectQualityYieldMetrics.; 2016-05-16 23:42:39,365 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(e7e4c6d2)]: persisting status of CollectQualityYieldMetrics to Done.; 2016-05-16 23:42:45,957 cromwell-system-akka.actor.default-dispatcher-21 INFO - JES Run [UUID(303ad2dd):ScatterIntervalList]: Status change from Running to Success; 2016-05-16 23:42:50,399 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of ScatterIntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-pr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:89,Availability,failure,failure,89,"We've now seen a new ""flavor"" of this failure mode, where this same ""Communications link failure"" error is cropping up but it's following some type of HttpRequest failure: ; 2016-05-16 23:42:39,080 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(e7e4c6d2)]: Collection complete for Scattered Call CollectQualityYieldMetrics.; 2016-05-16 23:42:39,365 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(e7e4c6d2)]: persisting status of CollectQualityYieldMetrics to Done.; 2016-05-16 23:42:45,957 cromwell-system-akka.actor.default-dispatcher-21 INFO - JES Run [UUID(303ad2dd):ScatterIntervalList]: Status change from Running to Success; 2016-05-16 23:42:50,399 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of ScatterIntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-pr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:98,Availability,error,error,98,"We've now seen a new ""flavor"" of this failure mode, where this same ""Communications link failure"" error is cropping up but it's following some type of HttpRequest failure: ; 2016-05-16 23:42:39,080 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(e7e4c6d2)]: Collection complete for Scattered Call CollectQualityYieldMetrics.; 2016-05-16 23:42:39,365 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(e7e4c6d2)]: persisting status of CollectQualityYieldMetrics to Done.; 2016-05-16 23:42:45,957 cromwell-system-akka.actor.default-dispatcher-21 INFO - JES Run [UUID(303ad2dd):ScatterIntervalList]: Status change from Running to Success; 2016-05-16 23:42:50,399 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of ScatterIntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-pr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:163,Availability,failure,failure,163,"We've now seen a new ""flavor"" of this failure mode, where this same ""Communications link failure"" error is cropping up but it's following some type of HttpRequest failure: ; 2016-05-16 23:42:39,080 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(e7e4c6d2)]: Collection complete for Scattered Call CollectQualityYieldMetrics.; 2016-05-16 23:42:39,365 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(e7e4c6d2)]: persisting status of CollectQualityYieldMetrics to Done.; 2016-05-16 23:42:45,957 cromwell-system-akka.actor.default-dispatcher-21 INFO - JES Run [UUID(303ad2dd):ScatterIntervalList]: Status change from Running to Success; 2016-05-16 23:42:50,399 cromwell-system-akka.actor.default-dispatcher-18 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of ScatterIntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-pr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:1743,Availability,ERROR,ERROR,1743,"IntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-For: 69.173.127.107, User-Agent: Java/1.8.0, Host: app:8000),Empty,HTTP/1.1); com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure. The last packet successfully received from the server was 0 milliseconds ago. The last packet sent successfully to the server was 0 milliseconds ago.; at sun.reflect.GeneratedConstructorAccessor101.newInstance(Unknown Source) ~[na:na]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1038) ~[cromwell.jar:0.19]; at com.mysql.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:1751,Availability,Error,Error,1751,"IntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-For: 69.173.127.107, User-Agent: Java/1.8.0, Host: app:8000),Empty,HTTP/1.1); com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure. The last packet successfully received from the server was 0 milliseconds ago. The last packet sent successfully to the server was 0 milliseconds ago.; at sun.reflect.GeneratedConstructorAccessor101.newInstance(Unknown Source) ~[na:na]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1038) ~[cromwell.jar:0.19]; at com.mysql.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:1901,Availability,Alive,Alive,1901,"IntervalList to Done.; 2016-05-16 23:42:51,977 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Starting.; 2016-05-16 23:42:55,593 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(303ad2dd)]: persisting status of $scatter_2 to Done.; 2016-05-16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-For: 69.173.127.107, User-Agent: Java/1.8.0, Host: app:8000),Empty,HTTP/1.1); com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure. The last packet successfully received from the server was 0 milliseconds ago. The last packet sent successfully to the server was 0 milliseconds ago.; at sun.reflect.GeneratedConstructorAccessor101.newInstance(Unknown Source) ~[na:na]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1038) ~[cromwell.jar:0.19]; at com.mysql.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:2191,Availability,failure,failure,2191,"16 23:43:15,790 cromwell-system-akka.actor.default-dispatcher-17 INFO - JES Run [UUID(303ad2dd):CollectQualityYieldMetrics:0:2]: Status change from Initializing to Running; 2016-05-16 23:43:18,436 cromwell-system-akka.actor.default-dispatcher-4 INFO - JES Run [UUID(7bbc0491):HaplotypeCaller:35]: Status change from Running to Success; 2016-05-16 23:43:19,178 cromwell-system-akka.actor.default-dispatcher-17 INFO - WorkflowActor [UUID(7bbc0491)]: persisting status of HaplotypeCaller:35 to Done.; 2016-05-16 23:43:29,519 cromwell-system-akka.actor.default-dispatcher-21 ERROR - Error during processing of request HttpRequest(GET,http://app:8000/api/workflows/v1/9c68fe34-7a9e-434a-b958-aa4d91339da9/status,List(Connection: Keep-Alive, X-Forwarded-Server: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-Host: cromwell.gotc-prod.broadinstitute.org, X-Forwarded-For: 69.173.127.107, User-Agent: Java/1.8.0, Host: app:8000),Empty,HTTP/1.1); com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure. The last packet successfully received from the server was 0 milliseconds ago. The last packet sent successfully to the server was 0 milliseconds ago.; at sun.reflect.GeneratedConstructorAccessor101.newInstance(Unknown Source) ~[na:na]; at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_72]; at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_72]; at com.mysql.jdbc.Util.handleNewInstance(Util.java:400) ~[cromwell.jar:0.19]; at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1038) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3434) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3334) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3774) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2447) ~[cromwell.jar:0.19]; at com.mysql.jdbc.Mysq",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:4184,Performance,concurren,concurrent,4184,"ReadPacket(MysqlIO.java:3334) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3774) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2447) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2594) ~[cromwell.jar:0.19]; at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2541) ~[cromwell.jar:0.19]; at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4882) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.proxy.ConnectionProxy.setAutoCommit(ConnectionProxy.java:334) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.proxy.ConnectionJavassistProxy.setAutoCommit(ConnectionJavassistProxy.java) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.endInTransaction(JdbcBackend.scala:443) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$Commit$.run(JdbcActionComponent.scala:48) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$Commit$.run(JdbcActionComponent.scala:46) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.; at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2926) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3344) ~[cromwell.jar:0.19]; ... 16 common frames omitted. Saw this in workflow 9c68fe34-7a9e-434a-b958-aa4d91339da9, can't figure out which JES operations ID this is associated with, it's not captured really in the metadata...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650:4283,Performance,concurren,concurrent,4283,"ReadPacket(MysqlIO.java:3334) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3774) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2447) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2594) ~[cromwell.jar:0.19]; at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2541) ~[cromwell.jar:0.19]; at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4882) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.proxy.ConnectionProxy.setAutoCommit(ConnectionProxy.java:334) ~[cromwell.jar:0.19]; at com.zaxxer.hikari.proxy.ConnectionJavassistProxy.setAutoCommit(ConnectionJavassistProxy.java) ~[cromwell.jar:0.19]; at slick.jdbc.JdbcBackend$BaseSession.endInTransaction(JdbcBackend.scala:443) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$Commit$.run(JdbcActionComponent.scala:48) ~[cromwell.jar:0.19]; at slick.driver.JdbcActionComponent$Commit$.run(JdbcActionComponent.scala:46) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.liftedTree1$1(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at slick.backend.DatabaseComponent$DatabaseDef$$anon$2.run(DatabaseComponent.scala:237) ~[cromwell.jar:0.19]; at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_72]; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_72]; at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_72]; Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.; at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2926) ~[cromwell.jar:0.19]; at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3344) ~[cromwell.jar:0.19]; ... 16 common frames omitted. Saw this in workflow 9c68fe34-7a9e-434a-b958-aa4d91339da9, can't figure out which JES operations ID this is associated with, it's not captured really in the metadata...",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/742#issuecomment-221909650
https://github.com/broadinstitute/cromwell/pull/743#issuecomment-215527919:481,Availability,down,down,481,"@gauravs90 a couple of global comments:; - The symbol store and execution store in the old WorkflowActor were not necessarily database-backed. They just stored which calls were completed and which were in flight.; - The graph is a nice idea but currently isn't as eager as it could be. Consider:. ```; A -> B -> C; X -> Y -> Z; ```; - I believe this will run this in pairs, `(A,X)`, `(B,Y)`, `(C,Z)`. But what if A and B are really quick but X and Y are really slow - we're slowed down from executing C because the unrelated tasks X and Y haven't finished yet.; - I think I would prefer the existing method of determining (after every job completes) the set of jobs which have now become runnable. There's already an implicit DAG there. ; - A major reason is, it has already been shown to work with the scatter/gather and other features which update the graph at run-time and I can't see how that would work with this static graph approach?. _NB Sorry all for the repeated almost-identical edits to the above comment. Markdown is hard... :(_",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/743#issuecomment-215527919
https://github.com/broadinstitute/cromwell/pull/743#issuecomment-215527919:843,Deployability,update,update,843,"@gauravs90 a couple of global comments:; - The symbol store and execution store in the old WorkflowActor were not necessarily database-backed. They just stored which calls were completed and which were in flight.; - The graph is a nice idea but currently isn't as eager as it could be. Consider:. ```; A -> B -> C; X -> Y -> Z; ```; - I believe this will run this in pairs, `(A,X)`, `(B,Y)`, `(C,Z)`. But what if A and B are really quick but X and Y are really slow - we're slowed down from executing C because the unrelated tasks X and Y haven't finished yet.; - I think I would prefer the existing method of determining (after every job completes) the set of jobs which have now become runnable. There's already an implicit DAG there. ; - A major reason is, it has already been shown to work with the scatter/gather and other features which update the graph at run-time and I can't see how that would work with this static graph approach?. _NB Sorry all for the repeated almost-identical edits to the above comment. Markdown is hard... :(_",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/743#issuecomment-215527919
https://github.com/broadinstitute/cromwell/pull/743#issuecomment-215708494:347,Usability,simpl,simple,347,"@gauravs90 I'm :-1: on the actual graph implementation. If we were to stick with this scheme I'd want something much different. In terms of the scheme, I'm ok with the general concept (it's not unlike what I wanted to do originally as it turns out) but I question the utility of making this change. The old findRunnableCalls scheme was relatively simple and did the job - changing that seems out of scope for this ticket.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/743#issuecomment-215708494
https://github.com/broadinstitute/cromwell/pull/743#issuecomment-216255705:165,Testability,test,testing,165,@gauravs90 this is really exciting. I suggest you rebase on top of @scottfrazer's #766 (or develop when he merges it) which means we'll have all the pieces to start testing end-to-end workflows!!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/743#issuecomment-216255705
https://github.com/broadinstitute/cromwell/pull/743#issuecomment-216323662:60,Safety,abort,abort,60,"@scottfrazer is currently rebasing on top of @cjllanwarne's abort merge, if you merge now he'll need to rebase again on top of this. Maybe we can wait to get the factory mergable/merged to rebase this one ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/743#issuecomment-216323662
https://github.com/broadinstitute/cromwell/pull/743#issuecomment-216383637:126,Testability,test,tests,126,@cjllanwarne and @Horneth I have rebased with the latest develop. Awaiting you guys approvals now. ; Also for some reason the tests have started failing locally for mw (files which are irrelevant for this PR). I checked out the latest develop separately and it also seems to fail there. Still looking into it but not sure how to proceed with that.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/743#issuecomment-216383637
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:78,Availability,error,errorCode,78,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:94,Availability,error,errorMessage,94,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:270,Availability,error,errorCode,270,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:289,Availability,error,errorMessage,289,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:365,Availability,error,errorMessage,365,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:530,Availability,error,error,530,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:546,Availability,error,error,546,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:563,Availability,error,errorMessage,563,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:552,Integrability,message,message,552,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:165,Testability,log,logger,165,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007:496,Testability,log,logger,496,"This appears to be the way it already works. ``` scala; private def preempted(errorCode: Int, errorMessage: Option[String], jobDescriptor: BackendCallJobDescriptor, logger: WorkflowLogger): Boolean = {; def isPreemptionCode(code: Int) = code == 13 || code == 14. try {; errorCode == 10 && errorMessage.isDefined && isPreemptionCode(extractErrorCodeFromErrorMessage(errorMessage.get)) && jobDescriptor.preemptible; } catch {; case _: NumberFormatException | _: StringIndexOutOfBoundsException =>; logger.warn(s""Unable to parse JES error code from error message: ${errorMessage.get}, assuming this was not a preempted VM.""); false; }; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215214007
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215216473:73,Testability,log,logs,73,"So then there should have been a retry... @jacarey, can you please share logs/other information related to the specific case you emailed Dion about?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215216473
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1015,Availability,failure,failures,1015," useful. Thanks. Workflow Id:. `129f0510-5d6b-4c4c-b266-116a9a52f325`. Step meta data:. ```. {; ""preemptible"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1031,Availability,failure,failure,1031," useful. Thanks. Workflow Id:. `129f0510-5d6b-4c4c-b266-116a9a52f325`. Step meta data:. ```. {; ""preemptible"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1119,Availability,error,error,1119," useful. Thanks. Workflow Id:. `129f0510-5d6b-4c4c-b266-116a9a52f325`. Step meta data:. ```. {; ""preemptible"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1180,Availability,down,down,1180,"e"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.defau",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2183,Availability,ERROR,ERROR,2183,"""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 358",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2339,Availability,error,error,2339,"""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 358",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2400,Availability,down,down,2400,"stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2526,Availability,error,error,2526,"4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 358986",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2587,Availability,down,down,2587,"rics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.a",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:4887,Availability,ERROR,ERROR,4887,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:5004,Availability,error,error,5004,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:5065,Availability,down,down,5065,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1134,Integrability,Message,Message,1134,"e"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.defau",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2354,Integrability,Message,Message,2354,"stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:2541,Integrability,Message,Message,2541,"rics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.a",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:5019,Integrability,Message,Message,5019,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:757,Performance,cache,cache,757,"Let me know if there is any more information that would be useful. Thanks. Workflow Id:. `129f0510-5d6b-4c4c-b266-116a9a52f325`. Step meta data:. ```. {; ""preemptible"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:3030,Performance,concurren,concurrent,3030,"llectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:3150,Performance,concurren,concurrent,3150,actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.s,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:3272,Performance,concurren,concurrent,3272,d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:3871,Performance,concurren,concurrent,3871,":0.19]; 3589858- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:659) ~[cromwell.jar:0.19]; 3589859- at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-disp",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:4205,Performance,concurren,concurrent,4205,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:4307,Performance,concurren,concurrent,4307,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:4421,Performance,concurren,concurrent,4421,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:4527,Performance,concurren,concurrent,4527,"e1$1(Future.scala:24) ~[cromwell.jar:0.19]; 3589860- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) ~[cromwell.jar:0.19]; 3589861- at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) ~[cromwell.jar:0.19]; 3589862- at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; 3589863- at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; 3589864- at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; 3589865- at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; 3589866- at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) ~[cromwell.jar:0.19]; 3589867- at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; 3589868- at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; 3589869- at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; 3589870- at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; 3589871- at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; 3589872- at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; 3589873:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 INFO - WorkflowActor [UUID(129f0510)]: persisting status of CollectQualityYieldMetrics:2 to Failed.; 3589874:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - WorkflowActor [UUID(129f0510)]: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:409,Testability,log,log,409,"Let me know if there is any more information that would be useful. Thanks. Workflow Id:. `129f0510-5d6b-4c4c-b266-116a9a52f325`. Step meta data:. ```. {; ""preemptible"": false,; ""executionStatus"": ""Failed"",; ""stdout"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stdout.log"",; ""backendStatus"": ""Failed"",; ""shardIndex"": 2,; ""outputs"": {. },; ""runtimeAttributes"": {; ""preemptible"": ""0"",; ""failOnStderr"": ""false"",; ""bootDiskSizeGb"": ""10"",; ""disks"": ""local-disk 100 HDD"",; ""continueOnReturnCode"": ""0"",; ""docker"": ""broadinstitute/genomes-in-the-cloud:2.0.0"",; ""cpu"": ""1"",; ""zones"": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1586,Testability,log,log,1586,": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(Je",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1651,Testability,log,log,1651,": ""us-central1-c"",; ""memory"": ""2 GB""; },; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""disk_size"": ""flowcell_small_disk"",; ""input_bam"": ""unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(Je",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1842,Testability,log,log,1842,"unmapped_bam"",; ""metrics_filename"": ""sub(sub(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862:1897,Testability,Log,Log,1897,"b(unmapped_bam, sub_strip_path, \""\""), sub_strip_unmapped, \""\"") + \"".unmapped.quality_yield_metrics\""""; },; ""failures"": [{; ""failure"": ""Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly."",; ""timestamp"": ""2016-04-24T20:04:45.145Z""; }],; ""jobId"": ""operations/EIXH28fEKhisk93Qxr_9-K4BIJ-ikOmeDSoPcHJvZHVjdGlvblF1ZXVl"",; ""backend"": ""JES"",; ""end"": ""2016-04-24T20:04:45.000Z"",; ""stderr"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2-stderr.log"",; ""attempt"": 1,; ""executionEvents"": [],; ""backendLogs"": {; ""log"": ""gs://broad-gotc-prod-storage/cromwell_execution/PairedEndSingleSampleWorkflow/129f0510-5d6b-4c4c-b266-116a9a52f325/call-CollectQualityYieldMetrics/shard-2/CollectQualityYieldMetrics-2.log""; },; ""start"": ""2016-04-24T15:50:19.000Z""; }. ```. Log stack trace: . ```; 3589853:2016-04-24 20:04:45,142 cromwell-system-akka.actor.default-dispatcher-16 INFO - JES Run [UUID(129f0510):CollectQualityYieldMetrics:2]: Status change from Running to Failed; 3589854:2016-04-24 20:04:45,145 cromwell-system-akka.actor.default-dispatcher-16 ERROR - CallActor [UUID(129f0510):CollectQualityYieldMetrics:2]: Failing call: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589855:java.lang.Throwable: Task 129f0510-5d6b-4c4c-b266-116a9a52f325:CollectQualityYieldMetrics failed: error code 10. Message: 13: VM ggp-12606127296447203756 shut down unexpectedly.; 3589856- at cromwell.engine.backend.jes.JesBackend.cromwell$engine$backend$jes$JesBackend$$handleFailure(JesBackend.scala:774) ~[cromwell.jar:0.19]; 3589857- at cromwell.engine.backend.jes.JesBackend$$anonfun$executionResult$1.apply(JesBackend.scala:685) ~[cromwell.jar:0.19]; 3589858- at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/744#issuecomment-215222862
https://github.com/broadinstitute/cromwell/pull/746#issuecomment-215549418:79,Security,validat,validation,79,👍 . Once the dust settles w/ PBE I think we should go back and abstract common validation patterns which might exist across the backends into some place of optional utility functions for other backend implementers but that's not for now IMO. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/746/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/746#issuecomment-215549418
https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703:138,Availability,Recover,Recover,138,"If this ticket is about what I think it is (picking up jobs that were running when Cromwell is restarted), I think this ticket should be ""Recover Support"". I believe ""retry"" describes Cromwell's resilience to transient failures with Google Cloud services.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703
https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703:195,Availability,resilien,resilience,195,"If this ticket is about what I think it is (picking up jobs that were running when Cromwell is restarted), I think this ticket should be ""Recover Support"". I believe ""retry"" describes Cromwell's resilience to transient failures with Google Cloud services.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703
https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703:219,Availability,failure,failures,219,"If this ticket is about what I think it is (picking up jobs that were running when Cromwell is restarted), I think this ticket should be ""Recover Support"". I believe ""retry"" describes Cromwell's resilience to transient failures with Google Cloud services.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703
https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703:138,Safety,Recover,Recover,138,"If this ticket is about what I think it is (picking up jobs that were running when Cromwell is restarted), I think this ticket should be ""Recover Support"". I believe ""retry"" describes Cromwell's resilience to transient failures with Google Cloud services.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217901703
https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217903096:33,Availability,Recover,Recover,33,"Oh nm, it looks like #751 is the Recover ticket. Is this the preemptibility ticket?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217903096
https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217903096:33,Safety,Recover,Recover,33,"Oh nm, it looks like #751 is the Recover ticket. Is this the preemptibility ticket?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/749#issuecomment-217903096
https://github.com/broadinstitute/cromwell/issues/755#issuecomment-218190886:60,Deployability,hotfix,hotfix,60,"One last question, @geoffjentry --is this a change just for hotfix branch or develop as well?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/755#issuecomment-218190886
https://github.com/broadinstitute/cromwell/issues/756#issuecomment-217231102:0,Availability,Failure,Failure,0,Failure and RetryableFailure are 2 different messages so in this case I think this is a no-op ? We just never return RetryableFailure messages in Local ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/756#issuecomment-217231102
https://github.com/broadinstitute/cromwell/issues/756#issuecomment-217231102:45,Integrability,message,messages,45,Failure and RetryableFailure are 2 different messages so in this case I think this is a no-op ? We just never return RetryableFailure messages in Local ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/756#issuecomment-217231102
https://github.com/broadinstitute/cromwell/issues/756#issuecomment-217231102:134,Integrability,message,messages,134,Failure and RetryableFailure are 2 different messages so in this case I think this is a no-op ? We just never return RetryableFailure messages in Local ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/756#issuecomment-217231102
https://github.com/broadinstitute/cromwell/issues/757#issuecomment-215479245:54,Availability,error,error,54,"According to the naming rules in the [link within the error message](https://cloud.google.com/compute/docs/reference/latest/disks#name) ""the first character must be a lowercase letter,"" which your disk name does not comply with. I'm not an expert with JES, but perhaps the fix is to simply change the disk name to follow that rule?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/757#issuecomment-215479245
https://github.com/broadinstitute/cromwell/issues/757#issuecomment-215479245:60,Integrability,message,message,60,"According to the naming rules in the [link within the error message](https://cloud.google.com/compute/docs/reference/latest/disks#name) ""the first character must be a lowercase letter,"" which your disk name does not comply with. I'm not an expert with JES, but perhaps the fix is to simply change the disk name to follow that rule?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/757#issuecomment-215479245
https://github.com/broadinstitute/cromwell/issues/757#issuecomment-215479245:283,Usability,simpl,simply,283,"According to the naming rules in the [link within the error message](https://cloud.google.com/compute/docs/reference/latest/disks#name) ""the first character must be a lowercase letter,"" which your disk name does not comply with. I'm not an expert with JES, but perhaps the fix is to simply change the disk name to follow that rule?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/757#issuecomment-215479245
https://github.com/broadinstitute/cromwell/issues/757#issuecomment-217263652:23,Deployability,hotfix,hotfix,23,"@mcovarr fixed this in hotfix, so please check that out when fixing this in develop",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/757#issuecomment-217263652
https://github.com/broadinstitute/cromwell/pull/758#issuecomment-216398775:53,Safety,avoid,avoid,53,@geoffjentry @cjllanwarne I removed model package to avoid larger discussions on the topic.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/758#issuecomment-216398775
https://github.com/broadinstitute/cromwell/pull/759#issuecomment-215548808:81,Safety,abort,abort,81,"The wheel has chosen @Horneth and @mcovarr. I hope the fundamental choice of how abort now works isn't too controversial (as I understand it, it's how things work currently) but I'm happy to do a meet 'n' discuss if you want.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/759#issuecomment-215548808
https://github.com/broadinstitute/cromwell/pull/770#issuecomment-217264157:40,Testability,test,tests,40,All fixed and squashed. Will merge once tests pass unless someone else has comments before then,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/770#issuecomment-217264157
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:169,Security,access,access,169,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:305,Security,access,access,305,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:146,Testability,log,logs,146,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:206,Testability,Log,Log,206,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:393,Testability,log,logs,393,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:405,Testability,log,logs,405,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957:571,Testability,log,log,571,"From discussion yesterday it seems that this needs the metadata service to be implemented. There are three kinds of final calls:; - Copy workflow logs - this only needs access to filesystems in the engine. Log location is specified in the workflow options; - Copy workflow outputs - this needs filesystem access in the engine. Takes a sub-set of the call outputs and copies them.; - Copy call logs - Call logs can be different for each backend, and since this information is now being stored in the metadata service, we need some convention for which keys are valid call-log keys.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/773#issuecomment-218142957
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216658926:26,Testability,log,logs,26,We can look at the server logs when they are copied out to the filesystem,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216658926
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028:116,Availability,error,error,116,This is a [Not Acceptable](http://stackoverflow.com/questions/14251851/what-is-406-not-acceptable-response-in-http) error. The content types that Green said it would accept in the response were not compatible with the type of response Cromwell produced. It may be that Cromwell experienced a real error (which was hopefully logged) and returned a text/plain error response which I don't think you'd accept.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028:297,Availability,error,error,297,This is a [Not Acceptable](http://stackoverflow.com/questions/14251851/what-is-406-not-acceptable-response-in-http) error. The content types that Green said it would accept in the response were not compatible with the type of response Cromwell produced. It may be that Cromwell experienced a real error (which was hopefully logged) and returned a text/plain error response which I don't think you'd accept.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028:358,Availability,error,error,358,This is a [Not Acceptable](http://stackoverflow.com/questions/14251851/what-is-406-not-acceptable-response-in-http) error. The content types that Green said it would accept in the response were not compatible with the type of response Cromwell produced. It may be that Cromwell experienced a real error (which was hopefully logged) and returned a text/plain error response which I don't think you'd accept.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028:146,Energy Efficiency,Green,Green,146,This is a [Not Acceptable](http://stackoverflow.com/questions/14251851/what-is-406-not-acceptable-response-in-http) error. The content types that Green said it would accept in the response were not compatible with the type of response Cromwell produced. It may be that Cromwell experienced a real error (which was hopefully logged) and returned a text/plain error response which I don't think you'd accept.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028:324,Testability,log,logged,324,This is a [Not Acceptable](http://stackoverflow.com/questions/14251851/what-is-406-not-acceptable-response-in-http) error. The content types that Green said it would accept in the response were not compatible with the type of response Cromwell produced. It may be that Cromwell experienced a real error (which was hopefully logged) and returned a text/plain error response which I don't think you'd accept.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216659028
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:16,Availability,error,error,16,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:170,Availability,ERROR,ERROR,170,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:311,Availability,error,errors,311,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:369,Availability,Error,Error,369,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:432,Availability,Error,Error,432,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:554,Availability,error,errors,554,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:612,Availability,Error,Error,612,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:675,Availability,Error,Error,675,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6838,Availability,error,errors,6838,"r.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJso",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:7183,Availability,error,errors,7183,"oin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClient",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:349,Integrability,message,message,349,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:412,Integrability,message,message,412,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:592,Integrability,message,message,592,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:655,Integrability,message,message,655,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6876,Integrability,message,message,6876,"r.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJso",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6975,Integrability,message,message,6975,"xecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractG",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:7221,Integrability,message,message,7221,"oin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClient",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:7320,Integrability,message,message,7320,"rkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.Abstr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:4311,Performance,concurren,concurrent,4311,$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59) ~[cromwell.jar:0.19]; at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akk,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:4399,Performance,concurren,concurrent,4399,n.mutable.ResizableArray$class.foreach(ResizableArray.scala:59) ~[cromwell.jar:0.19]; at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:4487,Performance,concurren,concurrent,4487, scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfu,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:4585,Performance,concurren,concurrent,4585,.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$B,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:5124,Performance,concurren,concurrent,5124,ap$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(Fo,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:5684,Performance,concurren,concurrent,5684,"untime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; ",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6088,Performance,concurren,concurrent,6088,"~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:31) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.clie",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6181,Performance,concurren,concurrent,6181,"ell.jar:0.19]; at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""erro",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6286,Performance,concurren,concurrent,6286,"cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reaso",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6383,Performance,concurren,concurrent,6383,"BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91) ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""sta",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:9260,Performance,concurren,concurrent,9260,mwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.Run.status(Run.scala:133) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.Run.checkStatus(Run.scala:146) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoin,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:9370,Performance,concurren,concurrent,9370,ractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.Run.status(Run.scala:133) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.Run.checkStatus(Run.scala:146) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:9482,Performance,concurren,concurrent,9482,gleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.Run.status(Run.scala:133) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.Run.checkStatus(Run.scala:146) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoin,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:10031,Performance,concurren,concurrent,10031,9]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:10336,Performance,concurren,concurrent,10336,9]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:10429,Performance,concurren,concurrent,10429,9]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:10534,Performance,concurren,concurrent,10534,9]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:10631,Performance,concurren,concurrent,10631,9]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1$$anonfun$42.apply(JesBackend.scala:892) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:892) [cromwell.jar:0.19]; at cromwell.engine.backend.jes.JesBackend$$anonfun$poll$1.apply(JesBackend.scala:886) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run_aroundBody0(Future.scala:24) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable$AjcClosure1.run(Future.scala:1) [cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) [cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) [cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation.aroundExecution(FutureInstrumentation.scala:43) [cromwell.jar:0.19]; at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:60,Security,hash,hash,60,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:2517,Security,hash,hash,2517,cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$.withRetry(GcsFileSystemProvider.scala:44) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider.crc32cHash(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.package$PathEnhanced$.hash$extension(package.scala:32) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:65) ~[cromwell.jar:0.19]; at cromwell.engine.backend.WorkflowDescriptor$$anonfun$fileHasher$1.apply(WorkflowDescriptor.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlValue$class.computeHash(WdlValue.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlSingleFile.computeHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59) ~[cromwell.jar:0.19]; at scala.collection.mutable.ArrayBuffer,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:3840,Security,hash,hashGivenDockerHash,3840,.WdlValue$class.computeHash(WdlValue.scala:63) ~[cromwell.jar:0.19]; at wdl4s.values.WdlSingleFile.computeHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59) ~[cromwell.jar:0.19]; at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$arou,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:3945,Security,hash,hash,3945,uteHash(WdlFile.scala:39) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59) ~[cromwell.jar:0.19]; at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withC,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:4043,Security,hash,hash,4043,y(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$8.apply(Backend.scala:193) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59) ~[cromwell.jar:0.19]; at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48) ~[cromwell.jar:0.19]; at scala.collection.TraversableLike$class.map(TraversableLike.scala:245) ~[cromwell.jar:0.19]; at scala.collection.AbstractTraversable.map(Traversable.scala:104) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$class.cromwell$engine$backend$Backend$$hashGivenDockerHash(Backend.scala:193) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at cromwell.engine.backend.Backend$$anonfun$hash$3.apply(Backend.scala:214) ~[cromwell.jar:0.19]; at scala.util.Success$$anonfun$map$1.apply(Try.scala:237) ~[cromwell.jar:0.19]; at scala.util.Try$.apply(Try.scala:192) ~[cromwell.jar:0.19]; at scala.util.Success.map(Try.scala:237) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable.run_aroundBody0(Promise.scala:32) ~[cromwell.jar:0.19]; at scala.concurrent.impl.CallbackRunnable$AjcClosure1.run(Promise.scala:1) ~[cromwell.jar:0.19]; at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumentation$$anonfun$aroundExecution$1.apply(FutureInstrumentation.scala:44) ~[cromwell.jar:0.19]; at kamon.trace.Tracer$.withContext(TracerModule.scala:53) ~[cromwell.jar:0.19]; at kamon.scala.instrumentation.FutureInstrumen,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:6621,Security,Validat,ValidateReadGroupSamFile,6621,") ~[cromwell.jar:0.19]; at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72) ~[cromwell.jar:0.19]; at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90) ~[cromwell.jar:0.19]; at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) ~[cromwell.jar:0.19]; at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [cromwell.jar:0.19]; at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [cromwell.jar:0.19]; ```. AND 8 instances of these:. ```; 2016-05-03 17:58:04,687 cromwell-system-akka.actor.default-dispatcher-18 INFO - JES Run [UUID(d3ba97c6):ValidateReadGroupSamFile:13]: Status change from Running to Success; 2016-05-03 17:58:04,820 cromwell-system-akka.actor.default-dispatcher-8 WARN - Caught exception, retrying: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 504 Gateway Time-out; {; ""code"" : 504,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Deadline expired before operation could complete."",; ""reason"" : ""backendError""; } ],; ""message"" : ""Deadline expired before operation could complete."",; ""status"" : ""DEADLINE_EXCEEDED""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnEr",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991:22,Testability,log,logging,22,"I don't see any error logging associated with this cromwell hash. However, I did see this:. ```; 2016-05-03 10:14:45,314 cromwell-system-akka.actor.default-dispatcher-17 ERROR - BackendCallExecutionActor [UUID(643d3c46):CollectUnsortedReadgroupBamQualityMetrics:22]: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; com.google.api.client.googleapis.json.GoogleJsonResponseException: 503 Service Unavailable; {; ""code"" : 503,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Backend Error"",; ""reason"" : ""backendError""; } ],; ""message"" : ""Backend Error""; }; at com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:145) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:113) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:40) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:321) ~[cromwell.jar:0.19]; at com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1056) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:419) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:352) ~[cromwell.jar:0.19]; at com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:469) ~[cromwell.jar:0.19]; at cromwell.engine.backend.io.filesystem.gcs.GcsFileSystemProvider$$anonfun$crc32cHash$1.apply(GcsFileSystemProvider.scala:191) ~[cromwell.jar:0.19]; at cromwell.e",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216661991
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574:25,Availability,recover,recoverable,25,"This seems like a pretty recoverable error. It fails the zamboni workflow but not the cromwell workflow. So it can easily be overcome with a reconsider in zamboni. Ideally the Zamboni workflow would catch and be robust to these sorts of things, or at least log the response.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574:37,Availability,error,error,37,"This seems like a pretty recoverable error. It fails the zamboni workflow but not the cromwell workflow. So it can easily be overcome with a reconsider in zamboni. Ideally the Zamboni workflow would catch and be robust to these sorts of things, or at least log the response.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574:212,Availability,robust,robust,212,"This seems like a pretty recoverable error. It fails the zamboni workflow but not the cromwell workflow. So it can easily be overcome with a reconsider in zamboni. Ideally the Zamboni workflow would catch and be robust to these sorts of things, or at least log the response.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574:25,Safety,recover,recoverable,25,"This seems like a pretty recoverable error. It fails the zamboni workflow but not the cromwell workflow. So it can easily be overcome with a reconsider in zamboni. Ideally the Zamboni workflow would catch and be robust to these sorts of things, or at least log the response.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574:257,Testability,log,log,257,"This seems like a pretty recoverable error. It fails the zamboni workflow but not the cromwell workflow. So it can easily be overcome with a reconsider in zamboni. Ideally the Zamboni workflow would catch and be robust to these sorts of things, or at least log the response.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-216873574
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199:118,Performance,scalab,scalability,118,Closing this one. We use the status endpoint in our scaling tests so we can now regression test the responsiveness vs scalability too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199:60,Testability,test,tests,60,Closing this one. We use the status endpoint in our scaling tests so we can now regression test the responsiveness vs scalability too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199:91,Testability,test,test,91,Closing this one. We use the status endpoint in our scaling tests so we can now regression test the responsiveness vs scalability too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199
https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199:100,Usability,responsiv,responsiveness,100,Closing this one. We use the status endpoint in our scaling tests so we can now regression test the responsiveness vs scalability too,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/775#issuecomment-254301199
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-225260047:52,Integrability,message,messages,52,Another thing I've noticed is that a ton of our log messages are at debug level but most people aren't using debug level logging. Oopsie Daisy,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-225260047
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-225260047:48,Testability,log,log,48,Another thing I've noticed is that a ton of our log messages are at debug level but most people aren't using debug level logging. Oopsie Daisy,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-225260047
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-225260047:121,Testability,log,logging,121,Another thing I've noticed is that a ton of our log messages are at debug level but most people aren't using debug level logging. Oopsie Daisy,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-225260047
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253:405,Energy Efficiency,reduce,reduce,405,"from Ruchi. > Currently we have a lot of information that gets logged by Cromwell and some of it seems like it may not be useful to our customers. For example, every actor state transition gets logged, but it's unclear who is using that information.; > ; > We tech talked today an the suggestion was to meet with some key customer's, figure out if there are aspects of our logging they don't need to help reduce, and instead just redirect the unwanted logging to debug level, so that it can still be used for debugging purposes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253:63,Testability,log,logged,63,"from Ruchi. > Currently we have a lot of information that gets logged by Cromwell and some of it seems like it may not be useful to our customers. For example, every actor state transition gets logged, but it's unclear who is using that information.; > ; > We tech talked today an the suggestion was to meet with some key customer's, figure out if there are aspects of our logging they don't need to help reduce, and instead just redirect the unwanted logging to debug level, so that it can still be used for debugging purposes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253:194,Testability,log,logged,194,"from Ruchi. > Currently we have a lot of information that gets logged by Cromwell and some of it seems like it may not be useful to our customers. For example, every actor state transition gets logged, but it's unclear who is using that information.; > ; > We tech talked today an the suggestion was to meet with some key customer's, figure out if there are aspects of our logging they don't need to help reduce, and instead just redirect the unwanted logging to debug level, so that it can still be used for debugging purposes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253:373,Testability,log,logging,373,"from Ruchi. > Currently we have a lot of information that gets logged by Cromwell and some of it seems like it may not be useful to our customers. For example, every actor state transition gets logged, but it's unclear who is using that information.; > ; > We tech talked today an the suggestion was to meet with some key customer's, figure out if there are aspects of our logging they don't need to help reduce, and instead just redirect the unwanted logging to debug level, so that it can still be used for debugging purposes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253:452,Testability,log,logging,452,"from Ruchi. > Currently we have a lot of information that gets logged by Cromwell and some of it seems like it may not be useful to our customers. For example, every actor state transition gets logged, but it's unclear who is using that information.; > ; > We tech talked today an the suggestion was to meet with some key customer's, figure out if there are aspects of our logging they don't need to help reduce, and instead just redirect the unwanted logging to debug level, so that it can still be used for debugging purposes.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-232424253
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-254300811:68,Testability,log,logs,68,I believe we're much smarter now that we no longer rely on detailed logs for test cases to pass. Closing for now,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-254300811
https://github.com/broadinstitute/cromwell/issues/778#issuecomment-254300811:77,Testability,test,test,77,I believe we're much smarter now that we no longer rely on detailed logs for test cases to pass. Closing for now,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/778#issuecomment-254300811
https://github.com/broadinstitute/cromwell/issues/781#issuecomment-248372180:84,Modifiability,variab,variable,84,"I've been running into this a lot recently. My current workaround is to add a dummy variable so it will rerun the task, but sometimes I don't know that a task will have identical inputs until it actually runs, therefore making the whole workflow fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/781#issuecomment-248372180
https://github.com/broadinstitute/cromwell/issues/781#issuecomment-252242676:51,Deployability,release,release,51,@meganshand I've confirmed this bug is resolved in release 0.21! I'm closing this issue for that reason.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/781#issuecomment-252242676
https://github.com/broadinstitute/cromwell/issues/783#issuecomment-217204424:0,Integrability,Depend,Depends,0,Depends on #782,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/783#issuecomment-217204424
https://github.com/broadinstitute/cromwell/issues/784#issuecomment-217204572:0,Integrability,Depend,Depends,0,"Depends on #782, #783",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/784#issuecomment-217204572
https://github.com/broadinstitute/cromwell/issues/785#issuecomment-217205147:0,Integrability,Depend,Depends,0,"Depends on #782, #783",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/785#issuecomment-217205147
https://github.com/broadinstitute/cromwell/issues/787#issuecomment-217204734:0,Integrability,Depend,Depends,0,"Depends on #782, #783",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/787#issuecomment-217204734
https://github.com/broadinstitute/cromwell/issues/789#issuecomment-219158010:0,Integrability,Depend,Depends,0,"Depends on #785 (which it is currently prioritized ahead of in Ready for Development), #788 (which is currently in development), and #668 (in review)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/789#issuecomment-219158010
https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226247983:324,Deployability,update,update,324,"@kcibul A few questions about this:; - Should it support in-place DB migration, or DB A to DB B, or both ?; - Is it a separate program that runs independently ? If yes does it still live in the Cromwell repo ? Or a new flag in cromwell (like server, run, migration), ? Is there any ""automagic"" detection that my DB needs an update when I run cromwell 0.20 on a pre-0.20 DB ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226247983
https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226247983:294,Safety,detect,detection,294,"@kcibul A few questions about this:; - Should it support in-place DB migration, or DB A to DB B, or both ?; - Is it a separate program that runs independently ? If yes does it still live in the Cromwell repo ? Or a new flag in cromwell (like server, run, migration), ? Is there any ""automagic"" detection that my DB needs an update when I run cromwell 0.20 on a pre-0.20 DB ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226247983
https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226603031:195,Deployability,upgrade,upgrade,195,"It should be in-place (e.g. the source and destination tables are in the same database). . It would be nice to be automagic (e.g. liquibase), but just having a script in the repository to do the upgrade would be fine as well. It's really just for existing production customers who need to bridge the gap (GOTC/FC)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226603031
https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226603031:289,Integrability,bridg,bridge,289,"It should be in-place (e.g. the source and destination tables are in the same database). . It would be nice to be automagic (e.g. liquibase), but just having a script in the repository to do the upgrade would be fine as well. It's really just for existing production customers who need to bridge the gap (GOTC/FC)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/789#issuecomment-226603031
https://github.com/broadinstitute/cromwell/issues/789#issuecomment-240220087:59,Testability,test,tested,59,Working with Henry tomorrow to get these migration changes tested.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/789#issuecomment-240220087
https://github.com/broadinstitute/cromwell/pull/792#issuecomment-217541408:43,Safety,sanity check,sanity check,43,"@geoffjentry when you have 5 mins, can you sanity check the last 3 commits?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/792#issuecomment-217541408
https://github.com/broadinstitute/cromwell/pull/792#issuecomment-217962409:128,Energy Efficiency,reduce,reduce,128,"Since Jeff is probably busy, this is the ticket where hopefully @Horneth can take his place. I'll switch out the assignments to reduce confusion...sorry @geoffjentry!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/792#issuecomment-217962409
https://github.com/broadinstitute/cromwell/issues/794#issuecomment-235082067:49,Security,hash,hash,49,"This turns out to be easy to explain. Every file hash was being checked against the google API and was a fully blocking operation (complete with blocking retries). While within a call each file was checked serially (a problem in and of itself), when there were many calls running at once w/ File objects they'd each sit there and block. That's not a recipe for success",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/794#issuecomment-235082067
https://github.com/broadinstitute/cromwell/issues/794#issuecomment-248658974:19,Deployability,update,update,19,@ruchim -- can you update this ticket with the current status (e.g. how far we scaled initially)?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/794#issuecomment-248658974
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231463505:78,Deployability,configurat,configuration-properties-using-akka-extensions,78,Implementer - please check out https://www.trivento.io/creating-settingsactor-configuration-properties-using-akka-extensions/,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231463505
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231463505:78,Modifiability,config,configuration-properties-using-akka-extensions,78,Implementer - please check out https://www.trivento.io/creating-settingsactor-configuration-properties-using-akka-extensions/,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231463505
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231745141:152,Modifiability,Config,ConfigFactory,152,Actually the link I posted (also it's one of the key examples in the Akka docs) might not be so useful as it looks like a lot of the places we're using ConfigFactory.load don't have access to the main actor system,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231745141
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231745141:166,Performance,load,load,166,Actually the link I posted (also it's one of the key examples in the Akka docs) might not be so useful as it looks like a lot of the places we're using ConfigFactory.load don't have access to the main actor system,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231745141
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231745141:182,Security,access,access,182,Actually the link I posted (also it's one of the key examples in the Akka docs) might not be so useful as it looks like a lot of the places we're using ConfigFactory.load don't have access to the main actor system,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-231745141
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:1,Modifiability,Config,ConfigFactory,1,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:61,Modifiability,config,config,61,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:92,Modifiability,config,config,92,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:99,Modifiability,Config,ConfigFactory,99,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:130,Modifiability,config,config,130,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:186,Modifiability,config,config,186,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:261,Modifiability,config,config,261,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:292,Modifiability,config,config,292,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:299,Modifiability,Config,ConfigFactory,299,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:15,Performance,load,load,15,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:24,Performance,cache,caches,24,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917:118,Performance,load,load,118,`ConfigFactory.load()` [caches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#load--) the config on the first call and returns the same singleton config until someone calls [invalidateCaches](http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234338917
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037:94,Modifiability,config,config,94,"I read this as complaining about having all of the separate calls + the logic to dig into the config everywhere, not a complaint about physically loading the config. That said, having looked at this w/ that lens a few times I never saw a way that'd work everywhere which would be better than doing the above",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037:158,Modifiability,config,config,158,"I read this as complaining about having all of the separate calls + the logic to dig into the config everywhere, not a complaint about physically loading the config. That said, having looked at this w/ that lens a few times I never saw a way that'd work everywhere which would be better than doing the above",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037:146,Performance,load,loading,146,"I read this as complaining about having all of the separate calls + the logic to dig into the config everywhere, not a complaint about physically loading the config. That said, having looked at this w/ that lens a few times I never saw a way that'd work everywhere which would be better than doing the above",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037
https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037:72,Testability,log,logic,72,"I read this as complaining about having all of the separate calls + the logic to dig into the config everywhere, not a complaint about physically loading the config. That said, having looked at this w/ that lens a few times I never saw a way that'd work everywhere which would be better than doing the above",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/796#issuecomment-234340037
https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217940619:23,Usability,learn,learnt,23,@mcovarr those lessons learnt look pretty valuable too! Is there any reason for not ticketing them too?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217940619
https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217980738:41,Modifiability,config,config,41,"@cjllanwarne #811 #812 for Local and JES config sanity checking, #813 to create filesystems in the initialization actor. The logging issue might be better suited for discussion prior to ticketing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217980738
https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217980738:48,Safety,sanity check,sanity checking,48,"@cjllanwarne #811 #812 for Local and JES config sanity checking, #813 to create filesystems in the initialization actor. The logging issue might be better suited for discussion prior to ticketing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217980738
https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217980738:125,Testability,log,logging,125,"@cjllanwarne #811 #812 for Local and JES config sanity checking, #813 to create filesystems in the initialization actor. The logging issue might be better suited for discussion prior to ticketing.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/797#issuecomment-217980738
https://github.com/broadinstitute/cromwell/issues/800#issuecomment-217917736:207,Safety,timeout,timeouts,207,"To get more specific on this one (as Jose has informed me that the issue of Cromwell status updating is really a collection of different things) what it looks like here is we had a recent slew of connection timeouts when Cromwell tried to talk to the DB, on Saturday morning it appears. Perhaps we need to up the wait time from 5000ms?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/800#issuecomment-217917736
https://github.com/broadinstitute/cromwell/issues/800#issuecomment-229770714:101,Performance,queue,queued,101,@kcibul this is likely a very nontrivial fix in 0.19 - can we discuss importance and if it should be queued up for work?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/800#issuecomment-229770714
https://github.com/broadinstitute/cromwell/issues/800#issuecomment-229824713:48,Availability,robust,robustness,48,"ok, lets defer this one till after 0.20 (it's a robustness problem, not a fire)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/800#issuecomment-229824713
https://github.com/broadinstitute/cromwell/issues/800#issuecomment-229824845:148,Deployability,patch,patching,148,"This is a thing which theoretically shouldn't even be possible in 0.20+, another reason I didn't want to tackle the ticket. . If you're fine on not patching 0.19, I'd like to move to close this ticket.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/800#issuecomment-229824845
https://github.com/broadinstitute/cromwell/issues/802#issuecomment-217951965:85,Modifiability,config,configurable,85,"Hmm... is this a security flaw? Should people even be allowed to do this (or is this configurable?). Current thinking... it might be ok because if you are running a cromwell with a local docker engine you may very well want to do this. If you are running cromwell with local docker, and allowing someone to run jobs on your server, they could gain access to any file anyway via their jobs. . Thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/802#issuecomment-217951965
https://github.com/broadinstitute/cromwell/issues/802#issuecomment-217951965:17,Security,secur,security,17,"Hmm... is this a security flaw? Should people even be allowed to do this (or is this configurable?). Current thinking... it might be ok because if you are running a cromwell with a local docker engine you may very well want to do this. If you are running cromwell with local docker, and allowing someone to run jobs on your server, they could gain access to any file anyway via their jobs. . Thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/802#issuecomment-217951965
https://github.com/broadinstitute/cromwell/issues/802#issuecomment-217951965:348,Security,access,access,348,"Hmm... is this a security flaw? Should people even be allowed to do this (or is this configurable?). Current thinking... it might be ok because if you are running a cromwell with a local docker engine you may very well want to do this. If you are running cromwell with local docker, and allowing someone to run jobs on your server, they could gain access to any file anyway via their jobs. . Thoughts?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/802#issuecomment-217951965
https://github.com/broadinstitute/cromwell/issues/802#issuecomment-218461055:398,Security,secur,security,398,"In the scatter PR I needed to create a ""Workflow level WDL functions"" (or whatever we want to call it) to evaluate the scatter collection expression, and I gave it the default local filesystem, which effectively makes this supported. ; https://github.com/broadinstitute/cromwell/pull/818/files#diff-04167311d295d2ed1ab92a70830d9a8dR19. Should I remove it until we figure out if this is a potential security flaw ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/802#issuecomment-218461055
https://github.com/broadinstitute/cromwell/issues/802#issuecomment-218461557:63,Security,Secur,SecurityManager,63,"Also, on this topic, I don't know much about it but Java has a SecurityManager and Security policies which might (?) be able to restrict to which part of the filesystem cromwell would be able to read from ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/802#issuecomment-218461557
https://github.com/broadinstitute/cromwell/issues/802#issuecomment-218461557:83,Security,Secur,Security,83,"Also, on this topic, I don't know much about it but Java has a SecurityManager and Security policies which might (?) be able to restrict to which part of the filesystem cromwell would be able to read from ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/802#issuecomment-218461557
https://github.com/broadinstitute/cromwell/pull/804#issuecomment-218265245:37,Deployability,install,install,37,Added some cleanup after the apt-get install to clean up that layer due to suggestions from @hjfbynara,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/804#issuecomment-218265245
https://github.com/broadinstitute/cromwell/issues/810#issuecomment-217979491:243,Deployability,hotfix,hotfix,243,Yeah currently there are 3 non-exponentially-backed-off retries with 500 ms pauses in GcsFileSystemProvider#crc32cHash. Given the comments in the vicinity I don't think there would be strong objections to increasing the number of retries in a hotfix. This should be implemented differently in PBEs so it's not Thread.sleeping.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/810#issuecomment-217979491
https://github.com/broadinstitute/cromwell/issues/810#issuecomment-217979491:76,Usability,pause,pauses,76,Yeah currently there are 3 non-exponentially-backed-off retries with 500 ms pauses in GcsFileSystemProvider#crc32cHash. Given the comments in the vicinity I don't think there would be strong objections to increasing the number of retries in a hotfix. This should be implemented differently in PBEs so it's not Thread.sleeping.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/810#issuecomment-217979491
https://github.com/broadinstitute/cromwell/issues/811#issuecomment-218773899:108,Modifiability,config,config,108,Comments apply to both this and #812: . Currently there is no format checking of any of the content in the `config {...}` sections for either Local or JES PBE. The respective backend impls assume the keys are present and the values have the expected shapes.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/811#issuecomment-218773899
https://github.com/broadinstitute/cromwell/issues/811#issuecomment-254296481:35,Security,validat,validation,35,We currently do have basic backend validation. Closing this on the expectation that we can always have a more specific new ticket if necessary.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/811#issuecomment-254296481
https://github.com/broadinstitute/cromwell/issues/812#issuecomment-254296247:35,Security,validat,validation,35,We currently do have basic backend validation. Closing this on the expectation that we can always have a more specific new ticket if necessary.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/812#issuecomment-254296247
https://github.com/broadinstitute/cromwell/issues/813#issuecomment-218495580:35,Performance,perform,perform,35,"This is likely a specific case of ""perform expensive creation of shareable resources only once in the initialization actor and figure out how to share them with the other actors collaborating in the workflow execution"".",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/813#issuecomment-218495580
https://github.com/broadinstitute/cromwell/issues/813#issuecomment-221260748:107,Performance,optimiz,optimization,107,"@mcovarr -- can you describe what we can't do now, that will be possible in the future? Or is this just an optimization/efficiency item?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/813#issuecomment-221260748
https://github.com/broadinstitute/cromwell/issues/813#issuecomment-221290874:11,Performance,optimiz,optimization,11,This is an optimization. Currently we create one filesystem per call when really we only need one per workflow.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/813#issuecomment-221290874
https://github.com/broadinstitute/cromwell/issues/814#issuecomment-224749514:44,Testability,log,logs,44,Is this 0.20-worthy? It seems that workflow logs are kind of a big deal and currently we aren't even trying to support them in the New Worlde.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/814#issuecomment-224749514
https://github.com/broadinstitute/cromwell/issues/814#issuecomment-224761993:64,Testability,log,logs,64,@mcovarr I can't imagine 0.20 being useful to GOTC w/o workflow logs,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/814#issuecomment-224761993
https://github.com/broadinstitute/cromwell/pull/817#issuecomment-218249165:67,Testability,test,testing,67,hey @ruchim -- can I get a review from you on this? related to our testing push!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/817#issuecomment-218249165
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218550510:64,Safety,avoid,avoid,64,"@Horneth While there are places we can't help it, I""d prefer we avoid creating Futures inside of actors, instead preferring worker actors for async behavior. That helps to preserve the actor model/abstraction and removes a huge potential pitfall",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218550510
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678:267,Deployability,rolling,rolling,267,"@horneth - so I see 2 Futures in here. One the little bit changing the state (around the Props) and the other was resolveAndEvaluate. As background for my statement I'll say the following:; - We've already seen firsthand the havoc which can erupt from having Futures rolling around inside an Actor. They break the Actor Model's abstraction that the internals of an actor are single threaded, meaning you now have to reason about shared mutable state, etc. We _can_ do that, but there are easier paths than actors to deal with that. We've been better about this recently but my concern is that it's too easy for stuff like that to sneak into what were previously pure Futures. Mixing Futures & Actors is not really a great idea.; - There are two async operations in the actor, which means that it is certainly doing two different things (I'll admit that the creation of an actor is a fairly lame 'thing'), disrupting Akka's mantra that actors should do one thing only. What I was suggesting was that the work being performed by these Futures be themselves pushed to their own actors. When they complete they can message back to this one, and those messages could be use to manage state transitions and such. (and to be clear, this is _not_ our little 'tol' code phrase - it's something I think we need to be much better about as we refactor cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678:1111,Integrability,message,message,1111,"@horneth - so I see 2 Futures in here. One the little bit changing the state (around the Props) and the other was resolveAndEvaluate. As background for my statement I'll say the following:; - We've already seen firsthand the havoc which can erupt from having Futures rolling around inside an Actor. They break the Actor Model's abstraction that the internals of an actor are single threaded, meaning you now have to reason about shared mutable state, etc. We _can_ do that, but there are easier paths than actors to deal with that. We've been better about this recently but my concern is that it's too easy for stuff like that to sneak into what were previously pure Futures. Mixing Futures & Actors is not really a great idea.; - There are two async operations in the actor, which means that it is certainly doing two different things (I'll admit that the creation of an actor is a fairly lame 'thing'), disrupting Akka's mantra that actors should do one thing only. What I was suggesting was that the work being performed by these Futures be themselves pushed to their own actors. When they complete they can message back to this one, and those messages could be use to manage state transitions and such. (and to be clear, this is _not_ our little 'tol' code phrase - it's something I think we need to be much better about as we refactor cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678:1147,Integrability,message,messages,1147,"@horneth - so I see 2 Futures in here. One the little bit changing the state (around the Props) and the other was resolveAndEvaluate. As background for my statement I'll say the following:; - We've already seen firsthand the havoc which can erupt from having Futures rolling around inside an Actor. They break the Actor Model's abstraction that the internals of an actor are single threaded, meaning you now have to reason about shared mutable state, etc. We _can_ do that, but there are easier paths than actors to deal with that. We've been better about this recently but my concern is that it's too easy for stuff like that to sneak into what were previously pure Futures. Mixing Futures & Actors is not really a great idea.; - There are two async operations in the actor, which means that it is certainly doing two different things (I'll admit that the creation of an actor is a fairly lame 'thing'), disrupting Akka's mantra that actors should do one thing only. What I was suggesting was that the work being performed by these Futures be themselves pushed to their own actors. When they complete they can message back to this one, and those messages could be use to manage state transitions and such. (and to be clear, this is _not_ our little 'tol' code phrase - it's something I think we need to be much better about as we refactor cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678:1331,Modifiability,refactor,refactor,1331,"@horneth - so I see 2 Futures in here. One the little bit changing the state (around the Props) and the other was resolveAndEvaluate. As background for my statement I'll say the following:; - We've already seen firsthand the havoc which can erupt from having Futures rolling around inside an Actor. They break the Actor Model's abstraction that the internals of an actor are single threaded, meaning you now have to reason about shared mutable state, etc. We _can_ do that, but there are easier paths than actors to deal with that. We've been better about this recently but my concern is that it's too easy for stuff like that to sneak into what were previously pure Futures. Mixing Futures & Actors is not really a great idea.; - There are two async operations in the actor, which means that it is certainly doing two different things (I'll admit that the creation of an actor is a fairly lame 'thing'), disrupting Akka's mantra that actors should do one thing only. What I was suggesting was that the work being performed by these Futures be themselves pushed to their own actors. When they complete they can message back to this one, and those messages could be use to manage state transitions and such. (and to be clear, this is _not_ our little 'tol' code phrase - it's something I think we need to be much better about as we refactor cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678:1014,Performance,perform,performed,1014,"@horneth - so I see 2 Futures in here. One the little bit changing the state (around the Props) and the other was resolveAndEvaluate. As background for my statement I'll say the following:; - We've already seen firsthand the havoc which can erupt from having Futures rolling around inside an Actor. They break the Actor Model's abstraction that the internals of an actor are single threaded, meaning you now have to reason about shared mutable state, etc. We _can_ do that, but there are easier paths than actors to deal with that. We've been better about this recently but my concern is that it's too easy for stuff like that to sneak into what were previously pure Futures. Mixing Futures & Actors is not really a great idea.; - There are two async operations in the actor, which means that it is certainly doing two different things (I'll admit that the creation of an actor is a fairly lame 'thing'), disrupting Akka's mantra that actors should do one thing only. What I was suggesting was that the work being performed by these Futures be themselves pushed to their own actors. When they complete they can message back to this one, and those messages could be use to manage state transitions and such. (and to be clear, this is _not_ our little 'tol' code phrase - it's something I think we need to be much better about as we refactor cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678:1218,Usability,clear,clear,1218,"@horneth - so I see 2 Futures in here. One the little bit changing the state (around the Props) and the other was resolveAndEvaluate. As background for my statement I'll say the following:; - We've already seen firsthand the havoc which can erupt from having Futures rolling around inside an Actor. They break the Actor Model's abstraction that the internals of an actor are single threaded, meaning you now have to reason about shared mutable state, etc. We _can_ do that, but there are easier paths than actors to deal with that. We've been better about this recently but my concern is that it's too easy for stuff like that to sneak into what were previously pure Futures. Mixing Futures & Actors is not really a great idea.; - There are two async operations in the actor, which means that it is certainly doing two different things (I'll admit that the creation of an actor is a fairly lame 'thing'), disrupting Akka's mantra that actors should do one thing only. What I was suggesting was that the work being performed by these Futures be themselves pushed to their own actors. When they complete they can message back to this one, and those messages could be use to manage state transitions and such. (and to be clear, this is _not_ our little 'tol' code phrase - it's something I think we need to be much better about as we refactor cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218573678
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218578385:385,Integrability,message,messages,385,"@geoffjentry I think I understand what you mean. From my perspective it's a matter of where to stop.; We could ban entirely `Future`s from the codebase and decide that every asynchronous task deserves its own actor. That seems a bit extreme to me though.; I see your point about future being dangerous inside of actors. However I believe that small actors with 2 states and 3 internal messages are a small enough unit to be understood well enough to avoid the kind of problems we encountered before. This actor doesn't even have state data, there's no state to be shared or mutated.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218578385
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218578385:450,Safety,avoid,avoid,450,"@geoffjentry I think I understand what you mean. From my perspective it's a matter of where to stop.; We could ban entirely `Future`s from the codebase and decide that every asynchronous task deserves its own actor. That seems a bit extreme to me though.; I see your point about future being dangerous inside of actors. However I believe that small actors with 2 states and 3 internal messages are a small enough unit to be understood well enough to avoid the kind of problems we encountered before. This actor doesn't even have state data, there's no state to be shared or mutated.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218578385
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218579639:1131,Safety,avoid,avoid,1131,"Futures are fine, just not in the code which the actor itself directly controls - e.g. if an actor calls a function that lives elsewhere in our code, and internally that's using a Future, that's fine as it can't directly manipulate the actor's state (sort of - there's still an issue that the DB is a giant bit of shared mutable state, but that's harder to get around). I agree with your statement. My point is by making that claim that the burden is now on all future developers/reviewers/etc to notice if that actor somehow modifies beyond the ""oh, it's okay for now"" point. That's a lot easier said than done, better to prevent the pain from the get-go, it's not like the medicine is all that much extra work. edit: I'd also like for people to get in the habit of being extremely critical of futures inside an actor's event loop - requiring a strong defense of it as opposed to the opposite needing to be argued for. As you say, sometimes it's fine, but we should be critical at all times that it's _really_ a net win to do so. There's some psychology at work here - people see constructs and assume they're ok, the more we can avoid anti-patterns the less likely people are to misuse them.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218579639
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592:479,Energy Efficiency,reduce,reduce,479,"> Futures are fine, just not in the code which the actor itself directly controls. Hmm pretty much all our relevant code lives in actors so if the only place where we can use `Future`s is outside of actors, then I'd say `Future`'s days are counted xD. The _burden_ of verifying that new code doesn't break anything is part of the review process anyway IMHO, and adding N more actors instead of `Future`s with twice as many more messages, states, transitions, and classes doesn't reduce the burden of checking that everything is wired correctly, as far as I'm concerned. . Also, about futures being dangerous in actors because they can mutate state, this can only happen in a true `Actor` where your state pretty much has to be `var`s if you want to be able to mutate it, or in an `FSM` where you would also store some state as mutable `var`s inside the actor, instead of using the FSM data.; If you're using an FSM and all your mutable data is contained in the FSM data, then I don't see how creating futures would ever lead to mutating your state (and by state I mean mutable data, not FSM state) asynchronously. The FSM data is only updatable when the actor receives a message and decides to change state or stay in the same. A future `onComplete` could never force the FSM to mutate its data, which is why all we do is always send a message to someone when the future completes. And I don't see what difference it makes, from an actor perspective, if a message comes from a `Future` or another actor.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592:428,Integrability,message,messages,428,"> Futures are fine, just not in the code which the actor itself directly controls. Hmm pretty much all our relevant code lives in actors so if the only place where we can use `Future`s is outside of actors, then I'd say `Future`'s days are counted xD. The _burden_ of verifying that new code doesn't break anything is part of the review process anyway IMHO, and adding N more actors instead of `Future`s with twice as many more messages, states, transitions, and classes doesn't reduce the burden of checking that everything is wired correctly, as far as I'm concerned. . Also, about futures being dangerous in actors because they can mutate state, this can only happen in a true `Actor` where your state pretty much has to be `var`s if you want to be able to mutate it, or in an `FSM` where you would also store some state as mutable `var`s inside the actor, instead of using the FSM data.; If you're using an FSM and all your mutable data is contained in the FSM data, then I don't see how creating futures would ever lead to mutating your state (and by state I mean mutable data, not FSM state) asynchronously. The FSM data is only updatable when the actor receives a message and decides to change state or stay in the same. A future `onComplete` could never force the FSM to mutate its data, which is why all we do is always send a message to someone when the future completes. And I don't see what difference it makes, from an actor perspective, if a message comes from a `Future` or another actor.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592:1171,Integrability,message,message,1171,"> Futures are fine, just not in the code which the actor itself directly controls. Hmm pretty much all our relevant code lives in actors so if the only place where we can use `Future`s is outside of actors, then I'd say `Future`'s days are counted xD. The _burden_ of verifying that new code doesn't break anything is part of the review process anyway IMHO, and adding N more actors instead of `Future`s with twice as many more messages, states, transitions, and classes doesn't reduce the burden of checking that everything is wired correctly, as far as I'm concerned. . Also, about futures being dangerous in actors because they can mutate state, this can only happen in a true `Actor` where your state pretty much has to be `var`s if you want to be able to mutate it, or in an `FSM` where you would also store some state as mutable `var`s inside the actor, instead of using the FSM data.; If you're using an FSM and all your mutable data is contained in the FSM data, then I don't see how creating futures would ever lead to mutating your state (and by state I mean mutable data, not FSM state) asynchronously. The FSM data is only updatable when the actor receives a message and decides to change state or stay in the same. A future `onComplete` could never force the FSM to mutate its data, which is why all we do is always send a message to someone when the future completes. And I don't see what difference it makes, from an actor perspective, if a message comes from a `Future` or another actor.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592:1336,Integrability,message,message,1336,"> Futures are fine, just not in the code which the actor itself directly controls. Hmm pretty much all our relevant code lives in actors so if the only place where we can use `Future`s is outside of actors, then I'd say `Future`'s days are counted xD. The _burden_ of verifying that new code doesn't break anything is part of the review process anyway IMHO, and adding N more actors instead of `Future`s with twice as many more messages, states, transitions, and classes doesn't reduce the burden of checking that everything is wired correctly, as far as I'm concerned. . Also, about futures being dangerous in actors because they can mutate state, this can only happen in a true `Actor` where your state pretty much has to be `var`s if you want to be able to mutate it, or in an `FSM` where you would also store some state as mutable `var`s inside the actor, instead of using the FSM data.; If you're using an FSM and all your mutable data is contained in the FSM data, then I don't see how creating futures would ever lead to mutating your state (and by state I mean mutable data, not FSM state) asynchronously. The FSM data is only updatable when the actor receives a message and decides to change state or stay in the same. A future `onComplete` could never force the FSM to mutate its data, which is why all we do is always send a message to someone when the future completes. And I don't see what difference it makes, from an actor perspective, if a message comes from a `Future` or another actor.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592:1456,Integrability,message,message,1456,"> Futures are fine, just not in the code which the actor itself directly controls. Hmm pretty much all our relevant code lives in actors so if the only place where we can use `Future`s is outside of actors, then I'd say `Future`'s days are counted xD. The _burden_ of verifying that new code doesn't break anything is part of the review process anyway IMHO, and adding N more actors instead of `Future`s with twice as many more messages, states, transitions, and classes doesn't reduce the burden of checking that everything is wired correctly, as far as I'm concerned. . Also, about futures being dangerous in actors because they can mutate state, this can only happen in a true `Actor` where your state pretty much has to be `var`s if you want to be able to mutate it, or in an `FSM` where you would also store some state as mutable `var`s inside the actor, instead of using the FSM data.; If you're using an FSM and all your mutable data is contained in the FSM data, then I don't see how creating futures would ever lead to mutating your state (and by state I mean mutable data, not FSM state) asynchronously. The FSM data is only updatable when the actor receives a message and decides to change state or stay in the same. A future `onComplete` could never force the FSM to mutate its data, which is why all we do is always send a message to someone when the future completes. And I don't see what difference it makes, from an actor perspective, if a message comes from a `Future` or another actor.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218595592
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218602712:196,Modifiability,refactor,refactored,196,"Remember, @Horneth's first thought is always correct. 😄 . I think the code is fine as it is, plus the author gets the edge anyway. If there gets to be more complexity here this could certainly be refactored to use a separate actor, but I don't think a separate actor is warranted given the current situation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218602712
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073:381,Availability,failure,failure,381,"@mcovarr And originally @Horneth had one fewer Future, listen to your own (well, my own) advice ;). Ok - so now that I have a chance to look at this more closely, it's unclear why there are any futures at all going on here. If I'm reading things right (as always, a big if) only one thing ever messages it (once) and then waits for a response. That response is either a success or failure. Why not just do the stuff it needs to do in the event loop (as nothing should be messaging it anyways)? The one argument I can come up with is that this would tie tie up one of the actorsystem dispatcher's threads but that's just as easily handled by giving this actor class its own dispatcher - that gets you the same effect as putting the Future in the global EC without all of the state changing and such. If you all want to make the claim that reasoning about the actor with futures kicking around inside is easier to reason about than multiple actors (a claim I vehemently disagree with), I'd put forth that the futures/states are themselves far more difficult to reason about than just simply doing the work straight up considering how simple this is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073:294,Integrability,message,messages,294,"@mcovarr And originally @Horneth had one fewer Future, listen to your own (well, my own) advice ;). Ok - so now that I have a chance to look at this more closely, it's unclear why there are any futures at all going on here. If I'm reading things right (as always, a big if) only one thing ever messages it (once) and then waits for a response. That response is either a success or failure. Why not just do the stuff it needs to do in the event loop (as nothing should be messaging it anyways)? The one argument I can come up with is that this would tie tie up one of the actorsystem dispatcher's threads but that's just as easily handled by giving this actor class its own dispatcher - that gets you the same effect as putting the Future in the global EC without all of the state changing and such. If you all want to make the claim that reasoning about the actor with futures kicking around inside is easier to reason about than multiple actors (a claim I vehemently disagree with), I'd put forth that the futures/states are themselves far more difficult to reason about than just simply doing the work straight up considering how simple this is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073:1082,Usability,simpl,simply,1082,"@mcovarr And originally @Horneth had one fewer Future, listen to your own (well, my own) advice ;). Ok - so now that I have a chance to look at this more closely, it's unclear why there are any futures at all going on here. If I'm reading things right (as always, a big if) only one thing ever messages it (once) and then waits for a response. That response is either a success or failure. Why not just do the stuff it needs to do in the event loop (as nothing should be messaging it anyways)? The one argument I can come up with is that this would tie tie up one of the actorsystem dispatcher's threads but that's just as easily handled by giving this actor class its own dispatcher - that gets you the same effect as putting the Future in the global EC without all of the state changing and such. If you all want to make the claim that reasoning about the actor with futures kicking around inside is easier to reason about than multiple actors (a claim I vehemently disagree with), I'd put forth that the futures/states are themselves far more difficult to reason about than just simply doing the work straight up considering how simple this is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073:1132,Usability,simpl,simple,1132,"@mcovarr And originally @Horneth had one fewer Future, listen to your own (well, my own) advice ;). Ok - so now that I have a chance to look at this more closely, it's unclear why there are any futures at all going on here. If I'm reading things right (as always, a big if) only one thing ever messages it (once) and then waits for a response. That response is either a success or failure. Why not just do the stuff it needs to do in the event loop (as nothing should be messaging it anyways)? The one argument I can come up with is that this would tie tie up one of the actorsystem dispatcher's threads but that's just as easily handled by giving this actor class its own dispatcher - that gets you the same effect as putting the Future in the global EC without all of the state changing and such. If you all want to make the claim that reasoning about the actor with futures kicking around inside is easier to reason about than multiple actors (a claim I vehemently disagree with), I'd put forth that the futures/states are themselves far more difficult to reason about than just simply doing the work straight up considering how simple this is.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218610073
https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218612697:84,Usability,simpl,simplest,84,"Hmm yeah if we bulkhead the thread pool for this actor class, blocking might be the simplest thing to do.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/818#issuecomment-218612697
https://github.com/broadinstitute/cromwell/issues/820#issuecomment-218557707:227,Availability,down,down,227,"I confirmed with EB that the file used here does not need to be protected, so that should make things easier. Whoever takes this ticket... if you find it takes too long to run still let me know and we can work together to slim down the use case even further I think (but it may be just fine the way it is)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/820#issuecomment-218557707
https://github.com/broadinstitute/cromwell/issues/821#issuecomment-254295981:23,Modifiability,config,config,23,FileSystems (and their config) are now backend specific and the local backend can be disabled. I think this one can be closed.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/821#issuecomment-254295981
https://github.com/broadinstitute/cromwell/pull/822#issuecomment-218866972:189,Integrability,inject,injection,189,"@gauravs90 I've generally seen the akka folks recommend directly passing references to actors which need to be used. That has multiple benefits (e.g. makes it easy to switch out and/or dep injection, etc). My off the cuff reaction is that that seems simpler to just pass the required reference around, although I'll admit I'm basing that purely on your description and not having looked at the changes yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/822#issuecomment-218866972
https://github.com/broadinstitute/cromwell/pull/822#issuecomment-218866972:189,Security,inject,injection,189,"@gauravs90 I've generally seen the akka folks recommend directly passing references to actors which need to be used. That has multiple benefits (e.g. makes it easy to switch out and/or dep injection, etc). My off the cuff reaction is that that seems simpler to just pass the required reference around, although I'll admit I'm basing that purely on your description and not having looked at the changes yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/822#issuecomment-218866972
https://github.com/broadinstitute/cromwell/pull/822#issuecomment-218866972:250,Usability,simpl,simpler,250,"@gauravs90 I've generally seen the akka folks recommend directly passing references to actors which need to be used. That has multiple benefits (e.g. makes it easy to switch out and/or dep injection, etc). My off the cuff reaction is that that seems simpler to just pass the required reference around, although I'll admit I'm basing that purely on your description and not having looked at the changes yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/822#issuecomment-218866972
https://github.com/broadinstitute/cromwell/pull/823#issuecomment-218770232:31,Deployability,update,update,31,"@ruchim . I think it's fine to update the README even though it's not usable - the develop branch is known to be unstable at the moment, and isn't the default branch on github. 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/823/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/823#issuecomment-218770232
https://github.com/broadinstitute/cromwell/pull/823#issuecomment-218770232:70,Usability,usab,usable,70,"@ruchim . I think it's fine to update the README even though it's not usable - the develop branch is known to be unstable at the moment, and isn't the default branch on github. 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/823/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/823#issuecomment-218770232
https://github.com/broadinstitute/cromwell/pull/823#issuecomment-218793047:97,Deployability,hotfix,hotfix,97,👍 I thought Kristian mentioned this is important for Firecloud... does this also need to go into hotfix?. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/823/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/823#issuecomment-218793047
https://github.com/broadinstitute/cromwell/pull/824#issuecomment-218835359:132,Modifiability,config,config,132,Maybe the default application.conf should start with Local FS instead of GCS by default - since we want it to be a pick-up-and-play config?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/824#issuecomment-218835359
https://github.com/broadinstitute/cromwell/issues/826#issuecomment-221895948:214,Availability,failure,failure,214,"FYI - @ruchim I assigned this to you for prioritization. We've seen 6 workflows fail since 5/10, including a couple in the past day. We've also seen it a couple times in the controller test. This is the same total failure rate as https://github.com/broadinstitute/cromwell/issues/738, but is slightly higher priority because it's happened more recently. Whenever we get an issue for ""Error during processing of request HttpRequest"" this will be well below that",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/826#issuecomment-221895948
https://github.com/broadinstitute/cromwell/issues/826#issuecomment-221895948:384,Availability,Error,Error,384,"FYI - @ruchim I assigned this to you for prioritization. We've seen 6 workflows fail since 5/10, including a couple in the past day. We've also seen it a couple times in the controller test. This is the same total failure rate as https://github.com/broadinstitute/cromwell/issues/738, but is slightly higher priority because it's happened more recently. Whenever we get an issue for ""Error during processing of request HttpRequest"" this will be well below that",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/826#issuecomment-221895948
https://github.com/broadinstitute/cromwell/issues/826#issuecomment-221895948:185,Testability,test,test,185,"FYI - @ruchim I assigned this to you for prioritization. We've seen 6 workflows fail since 5/10, including a couple in the past day. We've also seen it a couple times in the controller test. This is the same total failure rate as https://github.com/broadinstitute/cromwell/issues/738, but is slightly higher priority because it's happened more recently. Whenever we get an issue for ""Error during processing of request HttpRequest"" this will be well below that",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/826#issuecomment-221895948
https://github.com/broadinstitute/cromwell/issues/826#issuecomment-228104876:15,Availability,failure,failures,15,Up to 15 total failures,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/826#issuecomment-228104876
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218895676:257,Integrability,inject,injection,257,"Quoting @geoffjentry from earlier comment so that it's not lost:. > @gauravs90 I've generally seen the akka folks recommend directly passing references to actors which need to be used. That has multiple benefits (e.g. makes it easy to switch out and/or dep injection, etc). My off the cuff reaction is that that seems simpler to just pass the required reference around, although I'll admit I'm basing that purely on your description and not having looked at the changes yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218895676
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218895676:257,Security,inject,injection,257,"Quoting @geoffjentry from earlier comment so that it's not lost:. > @gauravs90 I've generally seen the akka folks recommend directly passing references to actors which need to be used. That has multiple benefits (e.g. makes it easy to switch out and/or dep injection, etc). My off the cuff reaction is that that seems simpler to just pass the required reference around, although I'll admit I'm basing that purely on your description and not having looked at the changes yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218895676
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218895676:318,Usability,simpl,simpler,318,"Quoting @geoffjentry from earlier comment so that it's not lost:. > @gauravs90 I've generally seen the akka folks recommend directly passing references to actors which need to be used. That has multiple benefits (e.g. makes it easy to switch out and/or dep injection, etc). My off the cuff reaction is that that seems simpler to just pass the required reference around, although I'll admit I'm basing that purely on your description and not having looked at the changes yet",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218895676
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218898687:382,Availability,down,down,382,"@gauravs90 I don't doubt that passing the actorref around everywhere looked ugly. But in terms of moving parts and other such things my bet is that it's worth it. Your description of this scheme sounds a lot more complex (publishing, assuming everything going to metadata will always track w/ state change, having to shoehorn the data side in, etc) than simply passing the metadata down as is typically suggested.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218898687
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218898687:354,Usability,simpl,simply,354,"@gauravs90 I don't doubt that passing the actorref around everywhere looked ugly. But in terms of moving parts and other such things my bet is that it's worth it. Your description of this scheme sounds a lot more complex (publishing, assuming everything going to metadata will always track w/ state change, having to shoehorn the data side in, etc) than simply passing the metadata down as is typically suggested.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218898687
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:119,Safety,avoid,avoidable,119,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:539,Security,access,accessing,539,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:836,Security,access,access,836,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:882,Usability,simpl,simple,882,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:1367,Usability,simpl,simply,1367,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:1435,Usability,simpl,simply,1435,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121:1898,Usability,clear,clear,1898,"@geoffjentry Verbosity is just a small part of that. Making different parts of the code aware of the each other, where avoidable, doesn't seem like a very good idea. If I'm not mistaken, what you're saying (and what I initially implemented) is something like the erstwhile `DataAccess` (which would be the `ServiceRegistoryActor` in the current world). With this, each step (actor) of the workflow had a reference to it and pushed to it independently. Any change to the dataAccess might have required changes to all the classes which were accessing it. Alternatively, if there was just one entity which handled the responsibility of collecting the metadata, by sniffing around the actors without their knowledge, and then pushed to the database, we need only change this entity for any modifications if there were to happen to the data access stuff. I'll try to explain with a very simple (and silly) analogy: (Honestly, couldn't come up with anything better.); Consider a ginormous Octopus (= `ServiceRegistry`) with a black ink on the tips of it's tentacles, with each of it's legs touching upon different rooms (= classes) in a house. If someday we decide to replace that octopus with something else, we'll be needing to wipe that ink from all the rooms upon which it was standing. On the other hand, if it were to sit and cuddle up just in a single room, there's simply less and comparatively easy work to do to wipe that up. It's simply the same idea here. The Metadata producing entities in the engine can just go about minding their own business, while a third party (those classes with some weird names currently [CromwellProfilerFsm and WorkflowProfilerActor]) handle what they are meant to do: Profile a given workflow execution. (all the while without explicitly telling those execution engine entities that it's reading it's state and data information). If the intentions are still not clear, let's talk about it tomorrow in the meeting to make progress with this?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-218970121
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219040152:364,Integrability,message,messages,364,"Hey @gauravs90 , so I'm going to rephrase to see if I understand what's happening.; Actors (`WorkflowExecutionActor`, `WorkflowActor`, `BackendActor`s ...), when mixing in this `CromwellProfilerFsm` trait, publish their state and data to the world via the akka event stream, on every state transition. Another actor, akka (pun intended) `TheProfiler`, reads those messages, and depending on where they come from, creates custom MetadataEvents, which it pushes to the metadata service. Does that sound close from what you're doing ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219040152
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219040152:378,Integrability,depend,depending,378,"Hey @gauravs90 , so I'm going to rephrase to see if I understand what's happening.; Actors (`WorkflowExecutionActor`, `WorkflowActor`, `BackendActor`s ...), when mixing in this `CromwellProfilerFsm` trait, publish their state and data to the world via the akka event stream, on every state transition. Another actor, akka (pun intended) `TheProfiler`, reads those messages, and depending on where they come from, creates custom MetadataEvents, which it pushes to the metadata service. Does that sound close from what you're doing ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219040152
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219041395:17,Usability,clear,clear,17,"@gauravs90 To be clear my primary objection is the assumption will always be tied to state changes and/or all actors involved will be FSM. The analogy to DataAccess isn't the same - the issue with DataAccess was that you were handing the keys to shared mutable state (the DB) to async processes. In this case the metadata service was designed to not work like that. . In my mind there already _is_ an abstraction for metadata, the metadata service. While I'm not opposed to putting something between the engine and it, I still fall back to the point that when the akka people talk about setting up your system so that one actor can share info with another they tend to recommend passing the reference directly and it's only particular situations where things start listening on eventstreams and such. So even if the proposal was to have an intermediary I'd still say to pass the actorref around ... and I still don't see the value in that intermediary if one were to do away with the notion that metadata always equaled state changes. Also I think it'll be far easier to transition _to_ the direction you're talking about than _from_, if things get more complicated we can always do osmething like you're proposing. It's fully in the engine, it's trivial to change.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219041395
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219042534:586,Deployability,update,update,586,"Assuming I'm not too far from the reality, my opinion on this is that ; - I like that the actors don't have to know about the actual reference of the Metadata service. Meaning I'm ok with the push to the event stream approach.; - I like less that metadata is pushed only when actors change state. Their data can be changed (and is changed) when they receive a message but don't necessarily transition. And if I'm understanding this correctly this is not enough to capture that.; For example, the `WorkflowExecutionActor` state are basically `NotRunning`, `Running`, `Done`, we can only update metadata between those states. So there's no update of call status in real-time, outputs etc... Now from your comment I understand you want to do this by having the backend actors publishing metadata, but ; 1) nothing guarantees that they will, or with which format; 2) there are states that could only be known by then engine and that we might want to publish (`JobInitializing`, `Finalizing` etc...). Even more generally, I think the engine is the ultimate decider of what the state of a call is in the workflow, and relying on the backend to get this information seems a bit wrong.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219042534
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219042534:638,Deployability,update,update,638,"Assuming I'm not too far from the reality, my opinion on this is that ; - I like that the actors don't have to know about the actual reference of the Metadata service. Meaning I'm ok with the push to the event stream approach.; - I like less that metadata is pushed only when actors change state. Their data can be changed (and is changed) when they receive a message but don't necessarily transition. And if I'm understanding this correctly this is not enough to capture that.; For example, the `WorkflowExecutionActor` state are basically `NotRunning`, `Running`, `Done`, we can only update metadata between those states. So there's no update of call status in real-time, outputs etc... Now from your comment I understand you want to do this by having the backend actors publishing metadata, but ; 1) nothing guarantees that they will, or with which format; 2) there are states that could only be known by then engine and that we might want to publish (`JobInitializing`, `Finalizing` etc...). Even more generally, I think the engine is the ultimate decider of what the state of a call is in the workflow, and relying on the backend to get this information seems a bit wrong.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219042534
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219042534:360,Integrability,message,message,360,"Assuming I'm not too far from the reality, my opinion on this is that ; - I like that the actors don't have to know about the actual reference of the Metadata service. Meaning I'm ok with the push to the event stream approach.; - I like less that metadata is pushed only when actors change state. Their data can be changed (and is changed) when they receive a message but don't necessarily transition. And if I'm understanding this correctly this is not enough to capture that.; For example, the `WorkflowExecutionActor` state are basically `NotRunning`, `Running`, `Done`, we can only update metadata between those states. So there's no update of call status in real-time, outputs etc... Now from your comment I understand you want to do this by having the backend actors publishing metadata, but ; 1) nothing guarantees that they will, or with which format; 2) there are states that could only be known by then engine and that we might want to publish (`JobInitializing`, `Finalizing` etc...). Even more generally, I think the engine is the ultimate decider of what the state of a call is in the workflow, and relying on the backend to get this information seems a bit wrong.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219042534
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219083782:186,Integrability,message,message,186,"@gauravs90 I'm slightly confused here!. The model I thought we agreed on was:; - Everything has access to the `ServiceRegistry`; - Anyone (including the Engine) can send a `MetadataPut` message to the `ServiceRegistry`, which will forward it automagically to the `MetadataService`.; - ... That's it!. So, just send a bunch of `MetadataPut` messages to `ServiceRegistry` from the engine, and you're done, no need for all the extra stuff",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219083782
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219083782:340,Integrability,message,messages,340,"@gauravs90 I'm slightly confused here!. The model I thought we agreed on was:; - Everything has access to the `ServiceRegistry`; - Anyone (including the Engine) can send a `MetadataPut` message to the `ServiceRegistry`, which will forward it automagically to the `MetadataService`.; - ... That's it!. So, just send a bunch of `MetadataPut` messages to `ServiceRegistry` from the engine, and you're done, no need for all the extra stuff",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219083782
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219083782:96,Security,access,access,96,"@gauravs90 I'm slightly confused here!. The model I thought we agreed on was:; - Everything has access to the `ServiceRegistry`; - Anyone (including the Engine) can send a `MetadataPut` message to the `ServiceRegistry`, which will forward it automagically to the `MetadataService`.; - ... That's it!. So, just send a bunch of `MetadataPut` messages to `ServiceRegistry` from the engine, and you're done, no need for all the extra stuff",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219083782
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219110124:174,Integrability,message,message,174,"@cjllanwarne :. > Everything has access to the ServiceRegistry. This premise still holds. Why do you think otherwise?. > Anyone (including the Engine) can send a MetadataPut message to the ServiceRegistry, which will forward it automagically to the MetadataService. This is how the magic is currently happening as well. The engine _is_ sending MetadataPut messages to the ServiceRegistry.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219110124
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219110124:356,Integrability,message,messages,356,"@cjllanwarne :. > Everything has access to the ServiceRegistry. This premise still holds. Why do you think otherwise?. > Anyone (including the Engine) can send a MetadataPut message to the ServiceRegistry, which will forward it automagically to the MetadataService. This is how the magic is currently happening as well. The engine _is_ sending MetadataPut messages to the ServiceRegistry.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219110124
https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219110124:33,Security,access,access,33,"@cjllanwarne :. > Everything has access to the ServiceRegistry. This premise still holds. Why do you think otherwise?. > Anyone (including the Engine) can send a MetadataPut message to the ServiceRegistry, which will forward it automagically to the MetadataService. This is how the magic is currently happening as well. The engine _is_ sending MetadataPut messages to the ServiceRegistry.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/829#issuecomment-219110124
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219088738:20,Deployability,update,updated,20,README.md should be updated,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219088738
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219112569:124,Usability,usab,usable,124,Did you mean for this PR to be against develop? We're currently using this branch for pluggable backend work which won't be usable for GOTC for quite a while.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219112569
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219122627:67,Deployability,hotfix,hotfix,67,It was suggested that we create both a develop PR as well as for a hotfix. Had I been aware of the differences between the two branches I probably would not have created this PR... but we had already finished. Similar work will be done for a PR on the hotfix branch. I'm happy to do whatever your team prefers. I suspect that this work will need to be duplicated in either case. :(,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219122627
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219122627:252,Deployability,hotfix,hotfix,252,It was suggested that we create both a develop PR as well as for a hotfix. Had I been aware of the differences between the two branches I probably would not have created this PR... but we had already finished. Similar work will be done for a PR on the hotfix branch. I'm happy to do whatever your team prefers. I suspect that this work will need to be duplicated in either case. :(,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219122627
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219124036:74,Deployability,hotfix,hotfix,74,"I'd be surprised if these changes can't be migrated fairly easily to 0.19-hotfix. Metadata is an area under heavy construction on develop, and I suspect you're right this will need to be completely reimplemented once the dust settles. 😦 . I'd certainly thumbs up a 0.19-hotfix version of this with updates to the README.md. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219124036
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219124036:270,Deployability,hotfix,hotfix,270,"I'd be surprised if these changes can't be migrated fairly easily to 0.19-hotfix. Metadata is an area under heavy construction on develop, and I suspect you're right this will need to be completely reimplemented once the dust settles. 😦 . I'd certainly thumbs up a 0.19-hotfix version of this with updates to the README.md. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219124036
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219124036:298,Deployability,update,updates,298,"I'd be surprised if these changes can't be migrated fairly easily to 0.19-hotfix. Metadata is an area under heavy construction on develop, and I suspect you're right this will need to be completely reimplemented once the dust settles. 😦 . I'd certainly thumbs up a 0.19-hotfix version of this with updates to the README.md. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219124036
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219125700:75,Deployability,hotfix,hotfix,75,Thanks Miguel. Sounds like it makes sense to close this PR. We'll create a hotfix PR with this functionality.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219125700
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219185802:257,Modifiability,refactor,refactoring,257,"Actually now I'm realizing that the data retrieved by this API is not really of the ""meta"" variety, so it's possible this might continue to work in the PBE world as is. You might want to leave this open, the worst that could happen is it gets disabled in a refactoring. But PBE is probably a couple of months away, so if you'd like to use this functionality before then you'll still need to make a 0.19_hotfix version of this PR as well.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219185802
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219757976:12,Deployability,hotfix,hotfix,12,This is the hotfix PR:; https://github.com/broadinstitute/cromwell/pull/842,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-219757976
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-221861480:136,Deployability,update,update,136,We made changes to avoid changing the model that was returned (opting for metadata instead) those changes aren't reflected here. I will update this PR shortly.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-221861480
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-221861480:19,Safety,avoid,avoid,19,We made changes to avoid changing the model that was returned (opting for metadata instead) those changes aren't reflected here. I will update this PR shortly.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-221861480
https://github.com/broadinstitute/cromwell/pull/830#issuecomment-221913147:8,Deployability,update,updated,8,Ok I've updated the PR.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/830#issuecomment-221913147
https://github.com/broadinstitute/cromwell/issues/832#issuecomment-220715450:197,Performance,cache,cache,197,"Verified as working now. However @jsotobroad - your example matrix rotator will need to use `Array[Array[File]]` not `Array[Array[String]]` (on both input and output), otherwise it will never call cache",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/832#issuecomment-220715450
https://github.com/broadinstitute/cromwell/pull/834#issuecomment-219721904:8,Availability,fault,fault,8,"I can't fault the code, but as you say, at the moment it doesn't complete the ticket. Can we add another ticket to actually wire this up?. Otherwise, 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/834/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/834#issuecomment-219721904
https://github.com/broadinstitute/cromwell/pull/834#issuecomment-219795863:307,Deployability,hotfix,hotfix,307,"@geoffjentry I removed retry in two spots which hopefully could be added back per this scheme as part of #808. Note that neither of those spots corresponds to GCS auth upload, which should be happening in the initialization actor and is the subject of #806. I actually thought this ticket was meant for the hotfix branch to deal with problems the Greenies had seen, but there doesn't seem to be any more detail or labeling to confirm or refute that.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/834#issuecomment-219795863
https://github.com/broadinstitute/cromwell/pull/834#issuecomment-219795863:347,Energy Efficiency,Green,Greenies,347,"@geoffjentry I removed retry in two spots which hopefully could be added back per this scheme as part of #808. Note that neither of those spots corresponds to GCS auth upload, which should be happening in the initialization actor and is the subject of #806. I actually thought this ticket was meant for the hotfix branch to deal with problems the Greenies had seen, but there doesn't seem to be any more detail or labeling to confirm or refute that.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/834#issuecomment-219795863
https://github.com/broadinstitute/cromwell/issues/836#issuecomment-219547574:246,Testability,log,logs,246,The workflow that causes this is the one from #820 . Basically for each task everything happens quickly as expected until after the equivalent of `JES Run [97832d03:SplitGvcfTouch:86]: Status change from Running to Success` gets printed into the logs. The time between the JES Run succeeded and the task being persisted to `Done` can range anywhere from 8 minutes to over an hour. This wait is not seen if call caching is turned off in the Cromwell conf.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/836#issuecomment-219547574
https://github.com/broadinstitute/cromwell/issues/838#issuecomment-248064995:416,Availability,error,error,416,"## I want to. ## (i) scatter scatters as requested by @skazakoff above (aka ""nested scatter"") and also. ## (ii) re-array and scatter again (what I'm calling criss-cross scatter). As I show in this diagram: . ![img_4460](https://cloud.githubusercontent.com/assets/11543866/18210288/d489f7b4-7105-11e6-9737-59f75d4a6949.JPG). My attempt to ask WDL/Cromwell to do the first scatter-of-scatter above gives the following error:. ```; [2016-09-02 16:30:43,699] [error] WorkflowActor [e1b18d33]: Call failed to initialize: Failed to start call: Nested Scatters are not supported (yet).; ```. It was unclear how I would go about criss-cross scattering. My current solution around this is to run two separate WDL workflows. Between the two workflows, I use a simple python script to organize the files for the second scatter. The first WDL workflow is per sample, while the second WDL workflow acts on all the outputs of the multiple runs of the first workflow (multiple samples). ---. ## Example of workflows that I want to run within a single WDL workflow. These are scripts that run on the cloud that I would like to run within a single WDL script using the nest-scatter and criss-cross-scatter features. Currently, I run the first script per sample (1) for multiple samples, then run a helper script to organize all the outputs (1.5), and finally run the second WDL script across the multi-sample outputs per genomic interval (2). . I would like to be able to scatter the samples, scatter per interval, then run a differently organized (criss-cross) scatter across all the samples per interval. ### (1) First WDL workflow. #### UltimateScatterHaplotypeCaller_cloud_quicktest.wdl. ```; # ScatterHaplotypeCaller.wdl #############################################################; # Must use GATK v3.6, especially with hg38 where contig names have colons,; # as a bug in prior versions of GATK strips this off.; # Each BAM file represents a single different sample.; # Option to include an additional file to H",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/838#issuecomment-248064995
https://github.com/broadinstitute/cromwell/issues/838#issuecomment-248064995:456,Availability,error,error,456,"## I want to. ## (i) scatter scatters as requested by @skazakoff above (aka ""nested scatter"") and also. ## (ii) re-array and scatter again (what I'm calling criss-cross scatter). As I show in this diagram: . ![img_4460](https://cloud.githubusercontent.com/assets/11543866/18210288/d489f7b4-7105-11e6-9737-59f75d4a6949.JPG). My attempt to ask WDL/Cromwell to do the first scatter-of-scatter above gives the following error:. ```; [2016-09-02 16:30:43,699] [error] WorkflowActor [e1b18d33]: Call failed to initialize: Failed to start call: Nested Scatters are not supported (yet).; ```. It was unclear how I would go about criss-cross scattering. My current solution around this is to run two separate WDL workflows. Between the two workflows, I use a simple python script to organize the files for the second scatter. The first WDL workflow is per sample, while the second WDL workflow acts on all the outputs of the multiple runs of the first workflow (multiple samples). ---. ## Example of workflows that I want to run within a single WDL workflow. These are scripts that run on the cloud that I would like to run within a single WDL script using the nest-scatter and criss-cross-scatter features. Currently, I run the first script per sample (1) for multiple samples, then run a helper script to organize all the outputs (1.5), and finally run the second WDL script across the multi-sample outputs per genomic interval (2). . I would like to be able to scatter the samples, scatter per interval, then run a differently organized (criss-cross) scatter across all the samples per interval. ### (1) First WDL workflow. #### UltimateScatterHaplotypeCaller_cloud_quicktest.wdl. ```; # ScatterHaplotypeCaller.wdl #############################################################; # Must use GATK v3.6, especially with hg38 where contig names have colons,; # as a bug in prior versions of GATK strips this off.; # Each BAM file represents a single different sample.; # Option to include an additional file to H",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/838#issuecomment-248064995
https://github.com/broadinstitute/cromwell/issues/838#issuecomment-248064995:750,Usability,simpl,simple,750,"## I want to. ## (i) scatter scatters as requested by @skazakoff above (aka ""nested scatter"") and also. ## (ii) re-array and scatter again (what I'm calling criss-cross scatter). As I show in this diagram: . ![img_4460](https://cloud.githubusercontent.com/assets/11543866/18210288/d489f7b4-7105-11e6-9737-59f75d4a6949.JPG). My attempt to ask WDL/Cromwell to do the first scatter-of-scatter above gives the following error:. ```; [2016-09-02 16:30:43,699] [error] WorkflowActor [e1b18d33]: Call failed to initialize: Failed to start call: Nested Scatters are not supported (yet).; ```. It was unclear how I would go about criss-cross scattering. My current solution around this is to run two separate WDL workflows. Between the two workflows, I use a simple python script to organize the files for the second scatter. The first WDL workflow is per sample, while the second WDL workflow acts on all the outputs of the multiple runs of the first workflow (multiple samples). ---. ## Example of workflows that I want to run within a single WDL workflow. These are scripts that run on the cloud that I would like to run within a single WDL script using the nest-scatter and criss-cross-scatter features. Currently, I run the first script per sample (1) for multiple samples, then run a helper script to organize all the outputs (1.5), and finally run the second WDL script across the multi-sample outputs per genomic interval (2). . I would like to be able to scatter the samples, scatter per interval, then run a differently organized (criss-cross) scatter across all the samples per interval. ### (1) First WDL workflow. #### UltimateScatterHaplotypeCaller_cloud_quicktest.wdl. ```; # ScatterHaplotypeCaller.wdl #############################################################; # Must use GATK v3.6, especially with hg38 where contig names have colons,; # as a bug in prior versions of GATK strips this off.; # Each BAM file represents a single different sample.; # Option to include an additional file to H",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/838#issuecomment-248064995
https://github.com/broadinstitute/cromwell/issues/838#issuecomment-260672380:28,Deployability,update,update,28,"Ah, okay! Thank you for the update.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/838#issuecomment-260672380
https://github.com/broadinstitute/cromwell/issues/838#issuecomment-327008191:383,Deployability,pipeline,pipeline,383,"> If that isn't good enough (e.g. you need to do something to a before you scatter over the bs), you can put the inner scatter into a sub-workflow and Cromwell will be able to run it just fine. This is what I have implemented in order to get around this but it adds significant complexity to code. I agree that support for a nested scatter option is an excellent idea and would save pipeline writers a lot of time.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/838#issuecomment-327008191
https://github.com/broadinstitute/cromwell/pull/841#issuecomment-220142251:30,Modifiability,refactor,refactor,30,"I was working with @ruchim to refactor this a bit, got distracted and now she's away for a few days. @kcibul am I correct in remembering that this isn't particularly high priority? If I'm right, I can work with her on Monday on this.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/841#issuecomment-220142251
https://github.com/broadinstitute/cromwell/pull/842#issuecomment-220619184:29,Safety,sanity check,sanity check,29,"@jacarey @vivster7 Just as a sanity check, I'm assuming you all actually tested this for realz, right? i.e. not just unit tests? . 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/842/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/842#issuecomment-220619184
https://github.com/broadinstitute/cromwell/pull/842#issuecomment-220619184:73,Testability,test,tested,73,"@jacarey @vivster7 Just as a sanity check, I'm assuming you all actually tested this for realz, right? i.e. not just unit tests? . 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/842/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/842#issuecomment-220619184
https://github.com/broadinstitute/cromwell/pull/842#issuecomment-220619184:122,Testability,test,tests,122,"@jacarey @vivster7 Just as a sanity check, I'm assuming you all actually tested this for realz, right? i.e. not just unit tests? . 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/842/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/842#issuecomment-220619184
https://github.com/broadinstitute/cromwell/issues/843#issuecomment-230882499:18,Deployability,Pipeline,Pipelines,18,Tracked as Google Pipelines API Feature Request #28858407 and is in progress,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/843#issuecomment-230882499
https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224686926:144,Deployability,hotfix,hotfix,144,I'm a bit confused by this... it's labelled with 0.20 milestone but this is for a feature that's only in 0.19? This should be fixed on the 0.19 hotfix branch right?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224686926
https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224689981:36,Modifiability,config,config,36,Interesting... because my new-world config does not have a value for system.workflow-restart and it works fine,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224689981
https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224691653:78,Deployability,hotfix,hotfix,78,Hmm yeah you're right. Scrolling up it looks like this ticket was referencing hotfix and not develop. And yeah we're not even trying to load this key on develop so Cromwell certainly shouldn't fail for its absence.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224691653
https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224691653:136,Performance,load,load,136,Hmm yeah you're right. Scrolling up it looks like this ticket was referencing hotfix and not develop. And yeah we're not even trying to load this key on develop so Cromwell certainly shouldn't fail for its absence.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224691653
https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224696780:87,Deployability,hotfix,hotfix,87,"I guess I'm still confused... is there anything for me to do with this ticket? On both hotfix and develop, I can leave out the `system.workflow-restart` and it works.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/845#issuecomment-224696780
https://github.com/broadinstitute/cromwell/pull/846#issuecomment-219845066:25,Deployability,hotfix,hotfix,25,should really go against hotfix though,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/846#issuecomment-219845066
https://github.com/broadinstitute/cromwell/pull/846#issuecomment-219846749:8,Deployability,hotfix,hotfix,8,Against hotfix instead https://github.com/broadinstitute/cromwell/pull/847,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/846#issuecomment-219846749
https://github.com/broadinstitute/cromwell/issues/848#issuecomment-236285934:31,Modifiability,Refactor,Refactoring,31,In light of the Great Database Refactoring this is not gonna happen,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/848#issuecomment-236285934
https://github.com/broadinstitute/cromwell/pull/851#issuecomment-220343998:168,Security,access,access,168,"To keep ourselves honest, and convince ourselves that this is a swappable service rather than a core part of cromwell, I would like to see all of the metadata database access stuff in the `services.metadata` package rather than the engine's `dataAccess` parts",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/851#issuecomment-220343998
https://github.com/broadinstitute/cromwell/pull/853#issuecomment-220192170:195,Security,hash,hashes,195,"@jsotobroad I haven't run this at scale on JES, but with some small local tests I'm pretty sure that's the reason why scatter collection is so slow with call caching on.; We basically re-compute hashes for all the elements in the array when the shards are collected...; I ran without and with this fix and scatter collection went from ~75ms to ~2ms.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/853#issuecomment-220192170
https://github.com/broadinstitute/cromwell/pull/853#issuecomment-220192170:74,Testability,test,tests,74,"@jsotobroad I haven't run this at scale on JES, but with some small local tests I'm pretty sure that's the reason why scatter collection is so slow with call caching on.; We basically re-compute hashes for all the elements in the array when the shards are collected...; I ran without and with this fix and scatter collection went from ~75ms to ~2ms.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/853#issuecomment-220192170
https://github.com/broadinstitute/cromwell/issues/856#issuecomment-220454280:18,Deployability,hotfix,hotfix,18,should there be a hotfix version too?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/856#issuecomment-220454280
https://github.com/broadinstitute/cromwell/issues/856#issuecomment-221252219:59,Deployability,Hotfix,Hotfix,59,"can I close this ticket and we can make a separate one for Hotfix? I'm also unsure of why the ""closes #issue"" doesn't seem to be working properly for most tickets.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/856#issuecomment-221252219
https://github.com/broadinstitute/cromwell/pull/859#issuecomment-220466761:27,Testability,test,tests,27,Removes files left over by tests.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/859#issuecomment-220466761
https://github.com/broadinstitute/cromwell/pull/864#issuecomment-220720400:60,Deployability,hotfix,hotfix,60,@mcovarr @Horneth - the code is slightly different than the hotfix to account for slightly different realities (plus a moving-stuff-around refactor) but more or less the same.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/864#issuecomment-220720400
https://github.com/broadinstitute/cromwell/pull/864#issuecomment-220720400:139,Modifiability,refactor,refactor,139,@mcovarr @Horneth - the code is slightly different than the hotfix to account for slightly different realities (plus a moving-stuff-around refactor) but more or less the same.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/864#issuecomment-220720400
https://github.com/broadinstitute/cromwell/pull/868#issuecomment-220802012:48,Safety,timeout,timeout,48,rebasing to develop is causing all the tests to timeout :(,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/868#issuecomment-220802012
https://github.com/broadinstitute/cromwell/pull/868#issuecomment-220802012:39,Testability,test,tests,39,rebasing to develop is causing all the tests to timeout :(,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/868#issuecomment-220802012
https://github.com/broadinstitute/cromwell/issues/869#issuecomment-253919168:60,Availability,error,error,60,"Given the re-architecting of 0.21+ Cromwell this particular error can no longer occur, but please let us know if you see any other problems. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/869#issuecomment-253919168
https://github.com/broadinstitute/cromwell/pull/875#issuecomment-221363178:98,Deployability,patch,patch,98,"Thanks mcovarr and scottfrazer for your helpful suggestions/comments. . I'm going to resubmit the patch with the suggested changes; and go from there, . Thanks,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/875#issuecomment-221363178
https://github.com/broadinstitute/cromwell/pull/875#issuecomment-222772287:6,Deployability,update,updated,6,"Hi, I updated this patch with suggestions made by @mcovarr and also updated README.md documenting the new SGE backend optional parameters. Let me know what you guys think!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/875#issuecomment-222772287
https://github.com/broadinstitute/cromwell/pull/875#issuecomment-222772287:19,Deployability,patch,patch,19,"Hi, I updated this patch with suggestions made by @mcovarr and also updated README.md documenting the new SGE backend optional parameters. Let me know what you guys think!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/875#issuecomment-222772287
https://github.com/broadinstitute/cromwell/pull/875#issuecomment-222772287:68,Deployability,update,updated,68,"Hi, I updated this patch with suggestions made by @mcovarr and also updated README.md documenting the new SGE backend optional parameters. Let me know what you guys think!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/875#issuecomment-222772287
https://github.com/broadinstitute/cromwell/issues/877#issuecomment-224281792:5,Testability,test,test,5,This test changed a lot since this ticket was initially filed. I cannot reproduce it.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/877#issuecomment-224281792
https://github.com/broadinstitute/cromwell/pull/878#issuecomment-221298017:22,Testability,test,test,22,:+1: nice bump in the test coverage! 😄 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/878/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/878#issuecomment-221298017
https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221376763:533,Modifiability,refactor,refactoring,533,"Among other warts labeled as ""TODO: PBE:"", there are now two directories serving the package `cromwell.service`:; - [`services/src/main/scala/cromwell/services`](https://github.com/broadinstitute/cromwell/tree/ks_jes_return_of_the_metadata/services/src/main/scala/cromwell/services); - [`. engine/src/main/scala/cromwell/services`](https://github.com/broadinstitute/cromwell/tree/ks_jes_return_of_the_metadata/engine/src/main/scala/cromwell/services). The latter directory are services that still access the engine. Some engineering/refactoring will be needed if we want them moved to the ""services"" sub-project, but I wasn't sure where to draw the line on changes for this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221376763
https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221376763:497,Security,access,access,497,"Among other warts labeled as ""TODO: PBE:"", there are now two directories serving the package `cromwell.service`:; - [`services/src/main/scala/cromwell/services`](https://github.com/broadinstitute/cromwell/tree/ks_jes_return_of_the_metadata/services/src/main/scala/cromwell/services); - [`. engine/src/main/scala/cromwell/services`](https://github.com/broadinstitute/cromwell/tree/ks_jes_return_of_the_metadata/engine/src/main/scala/cromwell/services). The latter directory are services that still access the engine. Some engineering/refactoring will be needed if we want them moved to the ""services"" sub-project, but I wasn't sure where to draw the line on changes for this PR.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221376763
https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221395379:299,Availability,ERROR,ERROR,299,"When I run this I get a lot of unexpected messages. Presumably we just want to drop these acks:. ```; 2016-05-24 16:42:22,511 cromwell-system-akka.actor.default-dispatcher-30 INFO - Status change from Initializing to Running; 2016-05-24 16:42:22,515 cromwell-system-akka.actor.default-dispatcher-30 ERROR - Unexpected message MetadataPutAcknowledgement(PutMetadataAction(MetadataEvent(MetadataKey(da17555a-11bc-4e72-a338-a2f177718435,Some(MetadataJobKey(DeliciousFileSpam.rotateInner,None,1)),backendStatus),MetadataValue(Running),2016-05-24 16:42:22.511))).; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221395379
https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221395379:42,Integrability,message,messages,42,"When I run this I get a lot of unexpected messages. Presumably we just want to drop these acks:. ```; 2016-05-24 16:42:22,511 cromwell-system-akka.actor.default-dispatcher-30 INFO - Status change from Initializing to Running; 2016-05-24 16:42:22,515 cromwell-system-akka.actor.default-dispatcher-30 ERROR - Unexpected message MetadataPutAcknowledgement(PutMetadataAction(MetadataEvent(MetadataKey(da17555a-11bc-4e72-a338-a2f177718435,Some(MetadataJobKey(DeliciousFileSpam.rotateInner,None,1)),backendStatus),MetadataValue(Running),2016-05-24 16:42:22.511))).; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221395379
https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221395379:318,Integrability,message,message,318,"When I run this I get a lot of unexpected messages. Presumably we just want to drop these acks:. ```; 2016-05-24 16:42:22,511 cromwell-system-akka.actor.default-dispatcher-30 INFO - Status change from Initializing to Running; 2016-05-24 16:42:22,515 cromwell-system-akka.actor.default-dispatcher-30 ERROR - Unexpected message MetadataPutAcknowledgement(PutMetadataAction(MetadataEvent(MetadataKey(da17555a-11bc-4e72-a338-a2f177718435,Some(MetadataJobKey(DeliciousFileSpam.rotateInner,None,1)),backendStatus),MetadataValue(Running),2016-05-24 16:42:22.511))).; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/883#issuecomment-221395379
https://github.com/broadinstitute/cromwell/issues/887#issuecomment-234768170:50,Modifiability,refactor,refactoring,50,Has this been resolved with the recent `services` refactoring?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/887#issuecomment-234768170
https://github.com/broadinstitute/cromwell/pull/889#issuecomment-221670548:26,Testability,test,tests,26,👍 with a nitpick and once tests pass :). [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/889/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/889#issuecomment-221670548
https://github.com/broadinstitute/cromwell/issues/891#issuecomment-224936166:264,Availability,error,error,264,So I'm getting much different behavior than the ticket describes... basically this WDL file is hanging indefinitely. The first task finishes on both JES and local backends. The second behaves in very strange ways. It loops infinitely on JES and has a localization error on local. I suspect it might be because of the problem with the WDL file itself (see previous comment),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/891#issuecomment-224936166
https://github.com/broadinstitute/cromwell/pull/893#issuecomment-222332578:6,Deployability,update,updates,6,"Minor updates, plus (yet another) rebase. 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/893/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/893#issuecomment-222332578
https://github.com/broadinstitute/cromwell/pull/893#issuecomment-222828225:62,Safety,abort,aborting,62,TOL - Shouldn't we run the finalization actor anyway if we're aborting during execution ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/893#issuecomment-222828225
https://github.com/broadinstitute/cromwell/pull/893#issuecomment-222984745:119,Safety,abort,abort,119,@geoffjentry The PR is to make it run if execution fails. I didn't want to conflict with Scott's PR so I didn't do the abort case,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/893#issuecomment-222984745
https://github.com/broadinstitute/cromwell/pull/893#issuecomment-223352694:37,Deployability,update,updated,37,"Alright, @cjllanwarne and @kshakir I updated the code again... it's changed quite significantly to address all comments so probably needs another look!",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/893#issuecomment-223352694
https://github.com/broadinstitute/cromwell/pull/893#issuecomment-223408968:87,Deployability,patch,patch,87,"Review complete. 👍 after one new ""PBE"" comment in the code, and a string interpolation patch. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/893/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/893#issuecomment-223408968
https://github.com/broadinstitute/cromwell/pull/895#issuecomment-222008720:4,Integrability,depend,dependency,4,"One dependency to be removed, then 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/895/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/895#issuecomment-222008720
https://github.com/broadinstitute/cromwell/pull/897#issuecomment-221956021:46,Integrability,message,messages,46,Who is responsible for converting the current messages into appropriate MetadataTypes?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/897#issuecomment-221956021
https://github.com/broadinstitute/cromwell/issues/898#issuecomment-222184572:58,Availability,alive,alive,58,"Could you comment on the granularity?. Is it ""cromwell is alive, hooray!"" or some more involved breakdown of various subsystems, e.g. ""can't talk to JES right now, the DB is being a poop, but SGE is going swimmingly!""?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/898#issuecomment-222184572
https://github.com/broadinstitute/cromwell/issues/901#issuecomment-288137272:67,Deployability,update,updated,67,"This is potentially still an issue but the version of Cromwell has updated significantly. If you do still notice a problem, feel free to file a new issue.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/901#issuecomment-288137272
https://github.com/broadinstitute/cromwell/issues/901#issuecomment-296289162:153,Energy Efficiency,green,green,153,"Below is a timing diagram from a run of this WDL on develop Cromwell. The large turquoise blobs are `BackendIsCopyingCachedOutputs` and the small bright green blobs that immediately follow are `UpdatingCallCache` (the medium sized forest green blobs that follow that are `UpdatingJobStore` and are the subject of a [separate ticket](https://github.com/broadinstitute/cromwell/issues/2085)). For this particular WDL the former consumes slightly over 6 minutes and the latter about 9 seconds, but everything seems to happen in parallel for all shards. . Does this seem acceptable or should this get more attention?. <img width=""1062"" alt=""screen shot 2017-04-21 at 3 11 54 pm"" src=""https://cloud.githubusercontent.com/assets/10790523/25292867/160548a0-26a6-11e7-8573-f6dff2948df3.png"">",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/901#issuecomment-296289162
https://github.com/broadinstitute/cromwell/issues/901#issuecomment-296289162:238,Energy Efficiency,green,green,238,"Below is a timing diagram from a run of this WDL on develop Cromwell. The large turquoise blobs are `BackendIsCopyingCachedOutputs` and the small bright green blobs that immediately follow are `UpdatingCallCache` (the medium sized forest green blobs that follow that are `UpdatingJobStore` and are the subject of a [separate ticket](https://github.com/broadinstitute/cromwell/issues/2085)). For this particular WDL the former consumes slightly over 6 minutes and the latter about 9 seconds, but everything seems to happen in parallel for all shards. . Does this seem acceptable or should this get more attention?. <img width=""1062"" alt=""screen shot 2017-04-21 at 3 11 54 pm"" src=""https://cloud.githubusercontent.com/assets/10790523/25292867/160548a0-26a6-11e7-8573-f6dff2948df3.png"">",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/901#issuecomment-296289162
https://github.com/broadinstitute/cromwell/issues/901#issuecomment-323877533:313,Performance,cache,cache,313,"If this is really about the file copying like the later comments suggest, it's not even really something that google can solve (or at least, they're not going to). the only way around something like this is for us to not to copy all of those files, which is now possible if a user wants to use the reference call cache scheme. We can only issue so many calls per second so if you have oodles of calls to make it'll take time to work through them.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/901#issuecomment-323877533
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221978601:7,Testability,test,tested,7,"Tried, tested and true 👍",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221978601
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279:143,Testability,Test,TestKit,143,Unfortunately Travis isn't as fast as our local machines. 😢 . Travis was timing out on the hard stop 3 second limit imposed by default in Akka TestKit. This wasn't an issue until _this_ PR started running those tests on the slower Travis VMs. I've dilated the time travis takes to run in the latest commit to account for travis being slower than our machines. Will also log a ticket regarding the extensive [actor system leaks](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L705-L706).,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279:211,Testability,test,tests,211,Unfortunately Travis isn't as fast as our local machines. 😢 . Travis was timing out on the hard stop 3 second limit imposed by default in Akka TestKit. This wasn't an issue until _this_ PR started running those tests on the slower Travis VMs. I've dilated the time travis takes to run in the latest commit to account for travis being slower than our machines. Will also log a ticket regarding the extensive [actor system leaks](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L705-L706).,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279:370,Testability,log,log,370,Unfortunately Travis isn't as fast as our local machines. 😢 . Travis was timing out on the hard stop 3 second limit imposed by default in Akka TestKit. This wasn't an issue until _this_ PR started running those tests on the slower Travis VMs. I've dilated the time travis takes to run in the latest commit to account for travis being slower than our machines. Will also log a ticket regarding the extensive [actor system leaks](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L705-L706).,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279:475,Testability,test,testkit,475,Unfortunately Travis isn't as fast as our local machines. 😢 . Travis was timing out on the hard stop 3 second limit imposed by default in Akka TestKit. This wasn't an issue until _this_ PR started running those tests on the slower Travis VMs. I've dilated the time travis takes to run in the latest commit to account for travis being slower than our machines. Will also log a ticket regarding the extensive [actor system leaks](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L705-L706).,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279:503,Testability,test,testkit,503,Unfortunately Travis isn't as fast as our local machines. 😢 . Travis was timing out on the hard stop 3 second limit imposed by default in Akka TestKit. This wasn't an issue until _this_ PR started running those tests on the slower Travis VMs. I've dilated the time travis takes to run in the latest commit to account for travis being slower than our machines. Will also log a ticket regarding the extensive [actor system leaks](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L705-L706).,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279:511,Testability,Test,TestKit,511,Unfortunately Travis isn't as fast as our local machines. 😢 . Travis was timing out on the hard stop 3 second limit imposed by default in Akka TestKit. This wasn't an issue until _this_ PR started running those tests on the slower Travis VMs. I've dilated the time travis takes to run in the latest commit to account for travis being slower than our machines. Will also log a ticket regarding the extensive [actor system leaks](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L705-L706).,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-221987279
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-222046685:68,Modifiability,config,config,68,"Dilation failed, as the affected tests seemed to ignore the default config. I ~~hacked~~ put a bandaid solution in for now and left `PBE` notes todo later.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-222046685
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-222046685:33,Testability,test,tests,33,"Dilation failed, as the affected tests seemed to ignore the default config. I ~~hacked~~ put a bandaid solution in for now and left `PBE` notes todo later.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-222046685
https://github.com/broadinstitute/cromwell/pull/902#issuecomment-222160086:46,Modifiability,config,configs,46,"I concur with your TODO on DRYing up the Akka configs, but still :+1:. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/902/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/902#issuecomment-222160086
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:406,Availability,error,errors,406,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:633,Availability,error,error,633,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:665,Availability,error,error,665,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:988,Availability,failure,failures,988,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:1043,Availability,avail,available,1043,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:1080,Availability,error,error,1080,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:604,Energy Efficiency,monitor,monitoring,604,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:205,Integrability,depend,dependencies,205,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:260,Performance,response time,response times,260,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850:422,Usability,clear,clearly,422,"we had emailed Dion about this a few weeks back, he said, . > ""Yep, we do run more tasks in prod, but even with those tasks we can not guarantee 100% of RPCs succeeding. Internally we do retry any backend dependencies silently (may manifest in slightly higher response times), but it's not unexpected to have a few sneak through. For these situations it's advisable to have a backoff / retry for 5xx level errors that are clearly a problem on our end.; > I've checked back on the time range on those two operations, there doesn't seem to be any wide spread issues during that time on our end. We do have monitoring on the unexpected error rates, would you say your error rates are higher than 0.1 or 0.01% ?  (per RPC call vs per operation, as I think you poll each operation a significant number of times?)."". In conversation, Miguel said:. > ""We have a retry on this call, but it does not back off very aggressively. I'll make a note of it with the Cromwell devs."". Almost all of these failures happened on 5/25. It seems like JES is mostly available, but when unavailable this error causes almost everything running to fail.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/903#issuecomment-222799850
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:36,Availability,down,down,36,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:266,Deployability,configurat,configuration,266,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:45,Modifiability,refactor,refactor,45,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:266,Modifiability,config,configuration,266,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:309,Modifiability,Config,ConfigFactory,309,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:323,Performance,load,load,323,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:379,Testability,test,test,379,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:444,Testability,test,testkit,444,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:472,Testability,test,testkit,472,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926:480,Testability,Test,TestKit,480,"ToL:. It'd probably be best to slim down and refactor the old engine `cromwell.CromwellTestkitSpec` to a `cromwell.core.CromwellTestKitSpec` and `cromwell.engine.WorkflowTestKitSpec`. Also, the actor system created in the current `CromwellTestkitSpec` uses a custom configuration. As it doesn't fall back to `ConfigFactory.load()`, it doesn't seem to be support modifying [`akka.test.timefactor`](https://github.com/akka/akka/blob/v2.3.12/akka-testkit/src/main/scala/akka/testkit/TestKit.scala#L712-L714) on the sbt command line.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/906#issuecomment-222010926
https://github.com/broadinstitute/cromwell/issues/910#issuecomment-224591221:20,Availability,avail,available,20,The nucleus team is available again ...,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/910#issuecomment-224591221
https://github.com/broadinstitute/cromwell/issues/910#issuecomment-224691438:80,Deployability,hotfix,hotfix,80,Ok -- after discussion it seems worth it to enable compression on this field on hotfix so that they can scale to ~5000 samples,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/910#issuecomment-224691438
https://github.com/broadinstitute/cromwell/issues/910#issuecomment-225966019:196,Availability,error,error,196,"All right so after some investigations here is what I found:; - This problem only seems to appear on MySQL / CloudSQL 5.6; I created 2 CloudSQL instances, 1 on MySQL 5.6 and one on 5.7. I got the error with 5.6 but not 5.7. So if creating a new empty DB is not a problem for this workflow, I think that could be a (temporary) solution.; - About compression, based on the 5.6 instance I created on google, I think the size limit would be closer to 26MB; It's a 5.6.26 version exactly. ```; Your MySQL connection id is 15; Server version: 5.6.26 (Google); ```. And because it's post 5.6.22 the formula to get the max limit is `10% of innodb_log_file_size * innodb_log_files_in_group` (https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_log_file_size) . Which on the 5.6 instance is. ```; | innodb_log_file_size | 134217728 |; | innodb_log_files_in_group | 2 ; ```. => `(134217728 * 2) / 10 = 26843545 B ~= 26 MB`; - One other option could be like Henry said to not store the beginning of the paths and add it back at runtime when needed. This could (maybe) work for `File`s but not for `String`s, which I think is what is needed for this case (manipulate paths as `String`s). @jsotobroad ?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/910#issuecomment-225966019
https://github.com/broadinstitute/cromwell/issues/910#issuecomment-225997061:93,Testability,test,testing,93,"So talking with @jsotobroad the GOTC CloudSQL is a 2nd generation and the one I used for 5.6 testing is a first, the difference is the default `innodb_log_file_size` is ~500MB instead of ~130MB, which pushes the limit to ~100MB (and not 26MB). So only compression might be enough.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/910#issuecomment-225997061
https://github.com/broadinstitute/cromwell/pull/916#issuecomment-223408127:36,Safety,abort,abort,36,👍 -- though it'd be nice to add the abort case too. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/916/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/916#issuecomment-223408127
https://github.com/broadinstitute/cromwell/pull/917#issuecomment-223011653:43,Testability,test,test,43,as per discussion -- one thumb is good for test fixin,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/917#issuecomment-223011653
https://github.com/broadinstitute/cromwell/pull/923#issuecomment-223111670:4,Testability,Test,Tests,4,"👍 . Tests pass, count is up, code looks reasonable. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/923/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/923#issuecomment-223111670
https://github.com/broadinstitute/cromwell/pull/929#issuecomment-223190534:0,Testability,Test,Tested,0,Tested locally. Wheel chose @scottfrazer and @geoffjentry. cc'ing @coreone,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/929#issuecomment-223190534
https://github.com/broadinstitute/cromwell/issues/932#issuecomment-223980068:90,Availability,error,error,90,"Seems to be a transient (GCS/JES) issue as it was reproducible multiple times the day the error was first seen. Since then it has not been reproducible. Closing issue, will reopen if it pops up again.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/932#issuecomment-223980068
https://github.com/broadinstitute/cromwell/pull/934#issuecomment-223690956:63,Testability,test,tested,63,"Good to go for merge as is, assuming the headers will be fixed+tested+documented+used at some future date. 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/934/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/934#issuecomment-223690956
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223494912:22,Testability,log,logic,22,"Moved more of the biz logic out of the slick specific code. There's still a bit in there that could be abstracted out (for example: calculating a max row id, specifying what metadata keys to return, etc.), but it at least passes Travis now.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223494912
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223559375:308,Integrability,depend,depend,308,"Potential tech talk subject: WTH is `core` for? When I first made it, I intended it to be a grab bag of stuff that everything else sat on top. This is not the first time someone else had a differing view (e.g. someone had said at one point that they thought it was a place to put stuff that everything _did_ depend on, not just _could_ depend on). I don't really care what the answer is, although I'm thinking the nomenclature is no longer accurate and perhaps should be changed. Something to talk about after standup?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223559375
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223559375:336,Integrability,depend,depend,336,"Potential tech talk subject: WTH is `core` for? When I first made it, I intended it to be a grab bag of stuff that everything else sat on top. This is not the first time someone else had a differing view (e.g. someone had said at one point that they thought it was a place to put stuff that everything _did_ depend on, not just _could_ depend on). I don't really care what the answer is, although I'm thinking the nomenclature is no longer accurate and perhaps should be changed. Something to talk about after standup?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223559375
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1070,Integrability,depend,dependency,1070,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1187,Integrability,depend,depend,1187,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1209,Integrability,depend,depends,1209,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1284,Integrability,depend,dependency,1284,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1357,Integrability,depend,dependency,1357,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1635,Integrability,depend,dependency,1635,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:290,Modifiability,evolve,evolve,290,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:1111,Security,access,access,1111,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591:945,Testability,mock,mocks,945,"@mcovarr I believe all issues are addressed. I'll let you cherry-pick / merge / squash or even reject this PR at your will. Pre-tech talk with @geoffjentry (including a TLA extravaganza!):. **TL;DR The database/slick is for CRUD, not for the T in ETL.**. IMHO, the database code started to evolve well beyond CRUD. Very often in slick specific code, one saw multiple lines of code like: ""before inserting rows in slick, quickly (E)xtract some other rows, (T)ransform them into core objects, filter, re-transform them into new core objects, then (L)oad the new objects into slick."" That ETL embedded in slick could never be used DRY-ly, and to me smelled as violating separation of concerns. With the current SoC, the slick code is _mostly_ concerned with marshaling data to and from the database via slick. If I wanted to, I could very trivially create a different layer that marshaled data using hibernate, a thin layer of prepared statements, mocks, etc., _without_ duplicating a lot of the ETL code. Another way of visualizing the issue: Below is the current project dependency diagram. The services need to access data from the database. Currently that's implemented as the services depend on engine that depends on the database. The database used to have a similar same circular dependency. Gun-shy of folks (including myself) re-introducing a similar dependency loop, I've kept core as far away as possible from the database/slick, because the slick specific code _should not_ need core for basic CRUD. As for the rest of the system, I see core as a base of objects for backends and the engine to communicate. ![cromwell project dependency diagram](https://cloud.githubusercontent.com/assets/791985/15779136/92db94a6-2968-11e6-90f8-c0b40d162a56.png)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223577591
https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223613634:55,Usability,feedback,feedback,55,@kshakir this needs a rebase as I incorporated some PR feedback and a rebase on develop,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/935#issuecomment-223613634
https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341:1482,Availability,avail,available,1482,"I ran a couple workflows, against 0.19 and against develop (considering the workflow id wrapping issue is resolved). Here are some differences I found, there might be other that those workflow didn't catch.; - The ""Collector"" of a scatter is present in the metadata in develop, and wasn't in 0.19. Oddly it doesn't contain its output though : . ```; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ```; - `stdout` and `stderr` are missing (**Local only**); - `runtimeAttributes` is missing ; Completely missing on local.; On JES, only attributes in the WDL show up, those for which the default value was used are missing.; - `executionEvents` is missing (even if there is none, there is an attribute with an empty list in 0.19); - `cache` is missing (**Local only**); e.g. ```; ""cache"": {; ""allowResultReuse"": true; }; ```; - `inputs` at the call level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `inputs` at the workflow level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `outputs` at the workflow level is missing if there are no inputs (`""outputs"" : {}` was present in 0.19); - Scatter keys are shown in develop's metadata as a normal call:. ```; ""w.$scatter_0"": [; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ]; ```; - `submission` is missing; - In 0.19, all ""first level"" (non-shards) calls would appear in the metadata right away, with a `NotStarted` status and some basic available information:. ```; ""example.gatherUltimateAnalysis"": [; {; ""executionStatus"": ""NotStarted"",; ""shardIndex"": -1,; ""outputs"": {},; ""runtimeAttributes"": {},; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""array"": ""ultimateAnalysis.out""; },; ""backend"": ""JES"",; ""attempt"": 1,; ""executionEvents"": []; }; ]; ```. In develop, a call appears in the metadata only at runtime; - `backendStatus` has been renamed to `jesOperationStatus` (JES status)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341
https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341:88,Integrability,wrap,wrapping,88,"I ran a couple workflows, against 0.19 and against develop (considering the workflow id wrapping issue is resolved). Here are some differences I found, there might be other that those workflow didn't catch.; - The ""Collector"" of a scatter is present in the metadata in develop, and wasn't in 0.19. Oddly it doesn't contain its output though : . ```; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ```; - `stdout` and `stderr` are missing (**Local only**); - `runtimeAttributes` is missing ; Completely missing on local.; On JES, only attributes in the WDL show up, those for which the default value was used are missing.; - `executionEvents` is missing (even if there is none, there is an attribute with an empty list in 0.19); - `cache` is missing (**Local only**); e.g. ```; ""cache"": {; ""allowResultReuse"": true; }; ```; - `inputs` at the call level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `inputs` at the workflow level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `outputs` at the workflow level is missing if there are no inputs (`""outputs"" : {}` was present in 0.19); - Scatter keys are shown in develop's metadata as a normal call:. ```; ""w.$scatter_0"": [; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ]; ```; - `submission` is missing; - In 0.19, all ""first level"" (non-shards) calls would appear in the metadata right away, with a `NotStarted` status and some basic available information:. ```; ""example.gatherUltimateAnalysis"": [; {; ""executionStatus"": ""NotStarted"",; ""shardIndex"": -1,; ""outputs"": {},; ""runtimeAttributes"": {},; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""array"": ""ultimateAnalysis.out""; },; ""backend"": ""JES"",; ""attempt"": 1,; ""executionEvents"": []; }; ]; ```. In develop, a call appears in the metadata only at runtime; - `backendStatus` has been renamed to `jesOperationStatus` (JES status)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341
https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341:751,Performance,cache,cache,751,"I ran a couple workflows, against 0.19 and against develop (considering the workflow id wrapping issue is resolved). Here are some differences I found, there might be other that those workflow didn't catch.; - The ""Collector"" of a scatter is present in the metadata in develop, and wasn't in 0.19. Oddly it doesn't contain its output though : . ```; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ```; - `stdout` and `stderr` are missing (**Local only**); - `runtimeAttributes` is missing ; Completely missing on local.; On JES, only attributes in the WDL show up, those for which the default value was used are missing.; - `executionEvents` is missing (even if there is none, there is an attribute with an empty list in 0.19); - `cache` is missing (**Local only**); e.g. ```; ""cache"": {; ""allowResultReuse"": true; }; ```; - `inputs` at the call level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `inputs` at the workflow level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `outputs` at the workflow level is missing if there are no inputs (`""outputs"" : {}` was present in 0.19); - Scatter keys are shown in develop's metadata as a normal call:. ```; ""w.$scatter_0"": [; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ]; ```; - `submission` is missing; - In 0.19, all ""first level"" (non-shards) calls would appear in the metadata right away, with a `NotStarted` status and some basic available information:. ```; ""example.gatherUltimateAnalysis"": [; {; ""executionStatus"": ""NotStarted"",; ""shardIndex"": -1,; ""outputs"": {},; ""runtimeAttributes"": {},; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""array"": ""ultimateAnalysis.out""; },; ""backend"": ""JES"",; ""attempt"": 1,; ""executionEvents"": []; }; ]; ```. In develop, a call appears in the metadata only at runtime; - `backendStatus` has been renamed to `jesOperationStatus` (JES status)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341
https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341:798,Performance,cache,cache,798,"I ran a couple workflows, against 0.19 and against develop (considering the workflow id wrapping issue is resolved). Here are some differences I found, there might be other that those workflow didn't catch.; - The ""Collector"" of a scatter is present in the metadata in develop, and wasn't in 0.19. Oddly it doesn't contain its output though : . ```; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ```; - `stdout` and `stderr` are missing (**Local only**); - `runtimeAttributes` is missing ; Completely missing on local.; On JES, only attributes in the WDL show up, those for which the default value was used are missing.; - `executionEvents` is missing (even if there is none, there is an attribute with an empty list in 0.19); - `cache` is missing (**Local only**); e.g. ```; ""cache"": {; ""allowResultReuse"": true; }; ```; - `inputs` at the call level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `inputs` at the workflow level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `outputs` at the workflow level is missing if there are no inputs (`""outputs"" : {}` was present in 0.19); - Scatter keys are shown in develop's metadata as a normal call:. ```; ""w.$scatter_0"": [; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ]; ```; - `submission` is missing; - In 0.19, all ""first level"" (non-shards) calls would appear in the metadata right away, with a `NotStarted` status and some basic available information:. ```; ""example.gatherUltimateAnalysis"": [; {; ""executionStatus"": ""NotStarted"",; ""shardIndex"": -1,; ""outputs"": {},; ""runtimeAttributes"": {},; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""array"": ""ultimateAnalysis.out""; },; ""backend"": ""JES"",; ""attempt"": 1,; ""executionEvents"": []; }; ]; ```. In develop, a call appears in the metadata only at runtime; - `backendStatus` has been renamed to `jesOperationStatus` (JES status)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341
https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341:1647,Performance,cache,cache,1647,"I ran a couple workflows, against 0.19 and against develop (considering the workflow id wrapping issue is resolved). Here are some differences I found, there might be other that those workflow didn't catch.; - The ""Collector"" of a scatter is present in the metadata in develop, and wasn't in 0.19. Oddly it doesn't contain its output though : . ```; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ```; - `stdout` and `stderr` are missing (**Local only**); - `runtimeAttributes` is missing ; Completely missing on local.; On JES, only attributes in the WDL show up, those for which the default value was used are missing.; - `executionEvents` is missing (even if there is none, there is an attribute with an empty list in 0.19); - `cache` is missing (**Local only**); e.g. ```; ""cache"": {; ""allowResultReuse"": true; }; ```; - `inputs` at the call level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `inputs` at the workflow level is missing if there are no inputs (`""inputs"" : {}` was present in 0.19); - `outputs` at the workflow level is missing if there are no inputs (`""outputs"" : {}` was present in 0.19); - Scatter keys are shown in develop's metadata as a normal call:. ```; ""w.$scatter_0"": [; {; ""attempt"": 1,; ""executionStatus"": ""Done"",; ""shardIndex"": -1; }; ]; ```; - `submission` is missing; - In 0.19, all ""first level"" (non-shards) calls would appear in the metadata right away, with a `NotStarted` status and some basic available information:. ```; ""example.gatherUltimateAnalysis"": [; {; ""executionStatus"": ""NotStarted"",; ""shardIndex"": -1,; ""outputs"": {},; ""runtimeAttributes"": {},; ""cache"": {; ""allowResultReuse"": true; },; ""inputs"": {; ""array"": ""ultimateAnalysis.out""; },; ""backend"": ""JES"",; ""attempt"": 1,; ""executionEvents"": []; }; ]; ```. In develop, a call appears in the metadata only at runtime; - `backendStatus` has been renamed to `jesOperationStatus` (JES status)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/936#issuecomment-223718341
https://github.com/broadinstitute/cromwell/pull/938#issuecomment-223711434:422,Integrability,wrap,wrapping,422,"Totally TOL, but I think just replacing. ``` scala; case MetadataQuery(w, None, None) => IndexedJsonObject(Map(w.id.toString -> MetadataBuilderActor.parseWorkflowEventsToIndexedJsonValue(eventsList))).toJson.asJsObject; ```. with. ``` scala; case MetadataQuery(w, _, _) => MetadataBuilderActor.parseWorkflowEvents(eventsList); ```. in `processMetadataResponse`; would give you what you want. Also, if we don't want the id wrapping the metadata maybe we still want it as an attribute ? . ``` scala; case MetadataQuery(w, _, _) => JsObject(MetadataBuilderActor.parseWorkflowEvents(eventsList).fields + (""workflowId"" -> JsString(w.id.toString))); ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/938#issuecomment-223711434
https://github.com/broadinstitute/cromwell/issues/940#issuecomment-224394911:111,Safety,abort,aborting,111,"Looking closer at the specific problem @abaumann reported, it appears to just be workflow level mismatches and aborting - I'll fix just those first and we'll see if the problems are deeper than that",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/940#issuecomment-224394911
https://github.com/broadinstitute/cromwell/issues/947#issuecomment-231108479:39,Deployability,hotfix,hotfix,39,@vivster7 is this issue meant for 0.19 hotfix or PBE Cromwell (or both)?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/947#issuecomment-231108479
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224113013:68,Availability,failure,failure,68,"The workflow itself seems to succeed, but Centaur thinks there is a failure due to #962.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224113013
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892:307,Availability,failure,failures,307,"Once I implemented a cache locally the workflow runs to Succeeded, but then the Centaur test fails because it's configured to expect workflowfailure. Judging by the fact that this test was part of [Tyburn](https://github.com/broadinstitute/tyburn/pull/27/files) which I believe lacked support for asserting failures, I don't think this is the correct expectation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892:112,Modifiability,config,configured,112,"Once I implemented a cache locally the workflow runs to Succeeded, but then the Centaur test fails because it's configured to expect workflowfailure. Judging by the fact that this test was part of [Tyburn](https://github.com/broadinstitute/tyburn/pull/27/files) which I believe lacked support for asserting failures, I don't think this is the correct expectation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892:21,Performance,cache,cache,21,"Once I implemented a cache locally the workflow runs to Succeeded, but then the Centaur test fails because it's configured to expect workflowfailure. Judging by the fact that this test was part of [Tyburn](https://github.com/broadinstitute/tyburn/pull/27/files) which I believe lacked support for asserting failures, I don't think this is the correct expectation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892:88,Testability,test,test,88,"Once I implemented a cache locally the workflow runs to Succeeded, but then the Centaur test fails because it's configured to expect workflowfailure. Judging by the fact that this test was part of [Tyburn](https://github.com/broadinstitute/tyburn/pull/27/files) which I believe lacked support for asserting failures, I don't think this is the correct expectation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892:180,Testability,test,test,180,"Once I implemented a cache locally the workflow runs to Succeeded, but then the Centaur test fails because it's configured to expect workflowfailure. Judging by the fact that this test was part of [Tyburn](https://github.com/broadinstitute/tyburn/pull/27/files) which I believe lacked support for asserting failures, I don't think this is the correct expectation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892:297,Testability,assert,asserting,297,"Once I implemented a cache locally the workflow runs to Succeeded, but then the Centaur test fails because it's configured to expect workflowfailure. Judging by the fact that this test was part of [Tyburn](https://github.com/broadinstitute/tyburn/pull/27/files) which I believe lacked support for asserting failures, I don't think this is the correct expectation.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224117892
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224282366:115,Testability,Test,Test,115,"@mcovarr yeah, when I ran this I got `Succeeded but expected Failed` which seemed odd - hence the ""Fix/Investigate Test"" rather than ""Missing Functionality""",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224282366
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224284216:86,Testability,test,tests,86,@mcovarr I'd be careful - I don't know about this one in particular but some of those tests aren't 100% ports from tyburn and actually have changed For Reasons,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224284216
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:208,Availability,failure,failure,208,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:281,Availability,down,down,281,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:1101,Availability,ERROR,ERROR,1101,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:127,Testability,test,test,127,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:291,Testability,log,logs,291,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:579,Testability,log,log,579,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256:1340,Testability,log,log,1340,"I thought it might be a good idea to run Centaur against 0.19_hotfix for comparison. It turns out that this particular Centaur test ""passes"" on 0.19_hotfix since the workflow fails consistently. However this failure appears to be due to botched call path construction when pulling down call logs and not for any reason related to write_lines:. ```; java.io.FileNotFoundException: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageExceptions.getFileNotFoundException(GoogleCloudStorageExceptions.java:42) ~[gcsio-1.4.4.jar:na]; at com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel.getMetadata(GoogleCloudStorageReadChannel.java:579) ~[gcsio-1.4.4.jar:na]; .; .; .; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: persisting status of a2f to Failed.; 2016-06-07 10:39:03,194 cromwell-system-akka.actor.default-dispatcher-10 ERROR - WorkflowActor [UUID(1b7836f6)]: Item not found: cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/cromwell-dev/mlc-executions/write_lines/1b7836f6-841c-4eaa-8d63-8225f67d9507/call-a2f/a2f-stdout.log; 2016-06-07 10:39:03,207 cromwell-system-akka.actor.default-dispatcher-10 INFO - WorkflowActor [UUID(1b7836f6)]: Beginning transition from Running to Failed.; 2016-06-07 10:39:05,018 cromwell-system-akka.actor.default-dispatcher-12 INFO - WorkflowActor [UUID(1b7836f6)]: transitioning from Running to Failed.; ```. So AFAICT this workflow should be passing on develop.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/955#issuecomment-224306256
https://github.com/broadinstitute/cromwell/pull/961#issuecomment-224062615:0,Availability,Ping,Pinging,0,Pinging @cjllanwarne and @mcovarr for a hopefully quick review. Should fix `sbt test` when mysql is not setup.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/961#issuecomment-224062615
https://github.com/broadinstitute/cromwell/pull/961#issuecomment-224062615:80,Testability,test,test,80,Pinging @cjllanwarne and @mcovarr for a hopefully quick review. Should fix `sbt test` when mysql is not setup.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/961#issuecomment-224062615
https://github.com/broadinstitute/cromwell/issues/962#issuecomment-224111388:16,Testability,test,tests,16,All the Centaur tests I've tried fail for this reason. Can has prioritization?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/962#issuecomment-224111388
https://github.com/broadinstitute/cromwell/pull/965#issuecomment-224280285:132,Integrability,message,message,132,"ToL: I'm a little afraid of the arbitrary number 5... Is it at all easy to make the `WorkflowSummaryActor` send a `ExciseFromCache` message when it sees a status message for a workflow?. Otherwise, (and especially since this makes Centaur great again), 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/965/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/965#issuecomment-224280285
https://github.com/broadinstitute/cromwell/pull/965#issuecomment-224280285:162,Integrability,message,message,162,"ToL: I'm a little afraid of the arbitrary number 5... Is it at all easy to make the `WorkflowSummaryActor` send a `ExciseFromCache` message when it sees a status message for a workflow?. Otherwise, (and especially since this makes Centaur great again), 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/965/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/965#issuecomment-224280285
https://github.com/broadinstitute/cromwell/issues/967#issuecomment-230882303:0,Deployability,hotfix,hotfix,0,hotfix is in the past... 0.20+ is the future ;),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/967#issuecomment-230882303
https://github.com/broadinstitute/cromwell/pull/968#issuecomment-224376801:265,Modifiability,variab,variable,265,"Allows WDL code like:. ```; Array[Int] indexing_list = seq(20000). scatter (idx in indexing_list) {; call FileSpam { input: index = idx, width = 5 }; }; ```. it's also annoying that you can't just put the `seq(5)` inline and remove the intermediate `indexing_list` variable, but that's a separate, existing ticket",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/968#issuecomment-224376801
https://github.com/broadinstitute/cromwell/pull/968#issuecomment-224378806:57,Safety,avoid,avoid,57,@Horneth - after talking to @scottfrazer I was hoping to avoid this requiring a WDL4S change (i.e. and therefore let it be a Cromwell custom function rather than a core feature of the WDL spec),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/968#issuecomment-224378806
https://github.com/broadinstitute/cromwell/pull/968#issuecomment-224391153:49,Usability,simpl,simple,49,@cjllanwarne So is this like python's range? The simple form at least. If so I wonder if that'd be a more obvious name for it in terms of the primary wdl userbase,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/968#issuecomment-224391153
https://github.com/broadinstitute/cromwell/pull/970#issuecomment-224965904:118,Performance,perform,performance,118,"So I got the metadata processing from 30s to ~ 300ms, and instead of rebasing this, merging it, and then rebasing the performance branch again I'm gonna close this one and open a new PR with the better algorithm + those changes. Sorry for the reviewers :/",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/970#issuecomment-224965904
https://github.com/broadinstitute/cromwell/issues/972#issuecomment-224427067:106,Availability,down,down,106,I suspect that making outputs and inputs a toggle-able option will kick this particular can significantly down the road.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/972#issuecomment-224427067
https://github.com/broadinstitute/cromwell/issues/972#issuecomment-224427067:43,Deployability,toggle,toggle-able,43,I suspect that making outputs and inputs a toggle-able option will kick this particular can significantly down the road.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/972#issuecomment-224427067
https://github.com/broadinstitute/cromwell/pull/980#issuecomment-225589938:180,Integrability,interface,interface,180,"@sleongmgi this is very cool! I believe based off of the SGE backend?. Have you had a chance to see what's happening on our Develop branch? We'll soon have a new engine-to-backend interface and it'd be awesome if we could also bring this backend forward with us!. In any case, thanks for the contribution! :-D",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/980#issuecomment-225589938
https://github.com/broadinstitute/cromwell/pull/980#issuecomment-226338098:45,Usability,feedback,feedback,45,@sleongmgi Can you take a look at the review feedback and then we can merge this in. Thanks!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/980#issuecomment-226338098
https://github.com/broadinstitute/cromwell/pull/980#issuecomment-226547078:32,Usability,feedback,feedbacks,32,Thank you very much for all the feedbacks. I will go through them and make necessary changes.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/980#issuecomment-226547078
https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225329843:21,Availability,failure,failure,21,"Note that the travis failure is a good thing (in that the change is working, not that it's an awesome circumstance), as it was due to not all of the centaur tests passing",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225329843
https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225329843:157,Testability,test,tests,157,"Note that the travis failure is a good thing (in that the change is working, not that it's an awesome circumstance), as it was due to not all of the centaur tests passing",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225329843
https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225578420:143,Performance,scalab,scalability,143,"The centaur tests actually failed because `Futures timed out after 10000ms`. Since we're trying to check correctness rather than Local backend scalability performance here, can we run this using the script?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225578420
https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225578420:155,Performance,perform,performance,155,"The centaur tests actually failed because `Futures timed out after 10000ms`. Since we're trying to check correctness rather than Local backend scalability performance here, can we run this using the script?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225578420
https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225578420:12,Testability,test,tests,12,"The centaur tests actually failed because `Futures timed out after 10000ms`. Since we're trying to check correctness rather than Local backend scalability performance here, can we run this using the script?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225578420
https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225588220:331,Testability,test,testing,331,"It is using the script, but with 3-way parallel. Trying it with 1 but can't go any lower than that. The travis machines are jankier than what we normally run on, but IMO that's a good thing here. I'd also question (worth chatting about, as I don't even know what I think) if correctness vs parallel is really the right thing to be testing here.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/987#issuecomment-225588220
https://github.com/broadinstitute/cromwell/pull/992#issuecomment-225703509:28,Testability,test,test,28,whoops forgot to fix up the test... 😦,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/992#issuecomment-225703509
https://github.com/broadinstitute/cromwell/pull/992#issuecomment-225997411:57,Deployability,update,updated,57,@geoffjentry @Horneth this could use a re-review since I updated it a bunch,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/992#issuecomment-225997411
https://github.com/broadinstitute/cromwell/issues/999#issuecomment-225913678:34,Deployability,hotfix,hotfix,34,is there a similar ticket for not-hotfix?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/999#issuecomment-225913678
https://github.com/broadinstitute/cromwell/issues/999#issuecomment-225944359:105,Availability,recover,recover,105,@kcibul This problem doesn't exist in develop (that I can see) as we're not currently supporting restart/recover,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/999#issuecomment-225944359
https://github.com/broadinstitute/cromwell/issues/999#issuecomment-225944359:105,Safety,recover,recover,105,@kcibul This problem doesn't exist in develop (that I can see) as we're not currently supporting restart/recover,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/999#issuecomment-225944359
https://github.com/broadinstitute/cromwell/pull/1001#issuecomment-225972827:26,Security,access,accessible,26,the `context` is also not accessible if not in the `receive` thread ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1001#issuecomment-225972827
https://github.com/broadinstitute/cromwell/issues/1002#issuecomment-225974520:48,Testability,log,logs,48,"Specifically, I'm talking about the line in the logs:. ```; 2016-06-14 14:31:34,517 cromwell-system-akka.actor.default-dispatcher-50 INFO - Job Workflow.Task:NA:1 succeeded! Outputs: [..., ..., blah, blah, ...]; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1002#issuecomment-225974520
https://github.com/broadinstitute/cromwell/issues/1002#issuecomment-226487250:76,Testability,log,logs,76,@cjllanwarne @geoffjentry do we need to keep inputs/outputs in the Cromwell logs?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1002#issuecomment-226487250
https://github.com/broadinstitute/cromwell/issues/1002#issuecomment-226488532:122,Testability,log,logs,122,"I personally file that in the category of things which aren't useful often enough to warrant the bulk they take up in the logs. And as @cjllanwarne points out, it can actually be deleterious. See #778",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1002#issuecomment-226488532
https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226011933:134,Testability,log,logic,134,"As I mentioned in the original PR, inside an actor doesn't feel like a philosophically good place for this sort of Future-based retry logic (which has plenty of good uses elsewhere). And that's maybe why the two different `retry`s don't play nicely together",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226011933
https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226012998:92,Availability,fault,fault,92,"@cjllanwarne Really it's just that they were developed simultaneously, and it's probably my fault for not going back and cleaning the other one up. In retrospect I knew it existed, but probably just lost track of it. I certainly wouldn't disapprove of converting future-based logic in actors into a more actor-y solution but that's because IMO it's easier to reason about multiple actors (and their messages) than composed Futures. My stance isn't one which is universally held, however",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226012998
https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226012998:399,Integrability,message,messages,399,"@cjllanwarne Really it's just that they were developed simultaneously, and it's probably my fault for not going back and cleaning the other one up. In retrospect I knew it existed, but probably just lost track of it. I certainly wouldn't disapprove of converting future-based logic in actors into a more actor-y solution but that's because IMO it's easier to reason about multiple actors (and their messages) than composed Futures. My stance isn't one which is universally held, however",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226012998
https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226012998:276,Testability,log,logic,276,"@cjllanwarne Really it's just that they were developed simultaneously, and it's probably my fault for not going back and cleaning the other one up. In retrospect I knew it existed, but probably just lost track of it. I certainly wouldn't disapprove of converting future-based logic in actors into a more actor-y solution but that's because IMO it's easier to reason about multiple actors (and their messages) than composed Futures. My stance isn't one which is universally held, however",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226012998
https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226013751:96,Modifiability,refactor,refactor,96,@geoffjentry I agree and that was sort of the point of my pushback. Why make all this effort to refactor these retry's into a format which is still kind of horrible and difficult to follow!,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1004#issuecomment-226013751
https://github.com/broadinstitute/cromwell/issues/1005#issuecomment-245632780:52,Availability,failure,failure-mode,52,"If i run cromwell with `-Dworkflow-options.workflow-failure-mode=""ContinueWhilePossible""` it does not work. Also using `-Dconfig.file=application.conf` does not work. Only **workflow_failure_mode** option in JSON config works.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1005#issuecomment-245632780
https://github.com/broadinstitute/cromwell/issues/1005#issuecomment-245632780:213,Modifiability,config,config,213,"If i run cromwell with `-Dworkflow-options.workflow-failure-mode=""ContinueWhilePossible""` it does not work. Also using `-Dconfig.file=application.conf` does not work. Only **workflow_failure_mode** option in JSON config works.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1005#issuecomment-245632780
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925:0,Energy Efficiency,Monitor,Monitoring,0,"Monitoring.log file is created when monitoring_script WF option is used, but the log file is completely empty. It's possible that the correct outputs aren't copied over to the log file.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925:11,Testability,log,log,11,"Monitoring.log file is created when monitoring_script WF option is used, but the log file is completely empty. It's possible that the correct outputs aren't copied over to the log file.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925:81,Testability,log,log,81,"Monitoring.log file is created when monitoring_script WF option is used, but the log file is completely empty. It's possible that the correct outputs aren't copied over to the log file.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925:176,Testability,log,log,176,"Monitoring.log file is created when monitoring_script WF option is used, but the log file is completely empty. It's possible that the correct outputs aren't copied over to the log file.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226281925
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226287321:63,Energy Efficiency,monitor,monitoring,63,"Also, from a user perspective, it might be nice to include the monitoring script file path in the workflow metadata.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226287321
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:272,Availability,echo,echo,272,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:23,Energy Efficiency,monitor,monitoring,23,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:133,Energy Efficiency,monitor,monitoring,133,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:195,Energy Efficiency,monitor,monitoring,195,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:0,Integrability,Depend,Depending,0,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:206,Testability,log,log,206,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034:240,Testability,log,log,240,"Depending on what your monitoring script does and how long your command takes to run it's possible that the task finishes before the monitoring script had time to write / flush anything into the monitoring log.; I ran this and got an empty log . ```; task t {; command {; echo ""hey""; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```. but this gave me a non-empty one . ```; task t {; command {; sleep 5; }. runtime {; docker: ""ubuntu:latest""; }; }; workflow w {; call t; }; ```",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226331034
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:10,Energy Efficiency,monitor,monitoring,10,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:193,Energy Efficiency,monitor,monitoring,193,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:295,Energy Efficiency,monitor,monitoring,295,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:359,Energy Efficiency,monitor,monitoring,359,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:111,Testability,test,testable,111,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:154,Testability,test,test,154,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:204,Testability,log,log,204,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:306,Testability,log,log,306,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:320,Testability,test,test,320,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562:370,Testability,log,log,370,"TL;DR the monitoring script actually does work, but Cromwell and Centaur need a bit of tweaking for this to be testable. I added a `sleep` to the Centaur test per @Horneth's suggestion and the monitoring log does get written. However Cromwell never creates a metadata event with the path to the monitoring log. Also the test needs to know where to expect the monitoring log, which is actually a function of the workflow root which Centaur currently doesn't know. I'd like to fix this by publishing the workflow root as a metadata event and then making Centaur wise to it.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1006#issuecomment-226891562
https://github.com/broadinstitute/cromwell/issues/1007#issuecomment-226490409:32,Deployability,pipeline,pipeline,32,"@mcovarr I was running the GotC pipeline x 20. It was scattered quite wide at the time, I believe",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1007#issuecomment-226490409
https://github.com/broadinstitute/cromwell/issues/1007#issuecomment-227246197:62,Performance,concurren,concurrently,62,I'm having problems even trying to submit that many workflows concurrently. Cromwell starts taking a long time to respond to submissions from the Swagger page.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1007#issuecomment-227246197
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034:261,Integrability,message,message,261,"(ToL, of course). I _still_ don't always know where to draw the line between creating a new `akka..Actor` and using a `scala..Future`. Something does ""smell"" funny though about the way we:; - Queue of things-to-do is on the `ec: ExecutionContext`; - A mailbox `message: AnyRef` is received off the `ec` by the dispatcher and passed to our `actor: Actor`.; - Instead of running a `runnable: Runnable` bit of code immediately, the `actor` chooses to throws the `runnable` onto the back of the `ec` queue and then say ""done processing `message`"". That said, [this blog](https://www.chrisstucchio.com/blog/2013/actors_vs_futures.html) seems to say that `Actor` and `Future` can work together, but maybe something is off about how we're composing them in our `BackendLifecycleActor` interfaces.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034:533,Integrability,message,message,533,"(ToL, of course). I _still_ don't always know where to draw the line between creating a new `akka..Actor` and using a `scala..Future`. Something does ""smell"" funny though about the way we:; - Queue of things-to-do is on the `ec: ExecutionContext`; - A mailbox `message: AnyRef` is received off the `ec` by the dispatcher and passed to our `actor: Actor`.; - Instead of running a `runnable: Runnable` bit of code immediately, the `actor` chooses to throws the `runnable` onto the back of the `ec` queue and then say ""done processing `message`"". That said, [this blog](https://www.chrisstucchio.com/blog/2013/actors_vs_futures.html) seems to say that `Actor` and `Future` can work together, but maybe something is off about how we're composing them in our `BackendLifecycleActor` interfaces.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034:778,Integrability,interface,interfaces,778,"(ToL, of course). I _still_ don't always know where to draw the line between creating a new `akka..Actor` and using a `scala..Future`. Something does ""smell"" funny though about the way we:; - Queue of things-to-do is on the `ec: ExecutionContext`; - A mailbox `message: AnyRef` is received off the `ec` by the dispatcher and passed to our `actor: Actor`.; - Instead of running a `runnable: Runnable` bit of code immediately, the `actor` chooses to throws the `runnable` onto the back of the `ec` queue and then say ""done processing `message`"". That said, [this blog](https://www.chrisstucchio.com/blog/2013/actors_vs_futures.html) seems to say that `Actor` and `Future` can work together, but maybe something is off about how we're composing them in our `BackendLifecycleActor` interfaces.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034:192,Performance,Queue,Queue,192,"(ToL, of course). I _still_ don't always know where to draw the line between creating a new `akka..Actor` and using a `scala..Future`. Something does ""smell"" funny though about the way we:; - Queue of things-to-do is on the `ec: ExecutionContext`; - A mailbox `message: AnyRef` is received off the `ec` by the dispatcher and passed to our `actor: Actor`.; - Instead of running a `runnable: Runnable` bit of code immediately, the `actor` chooses to throws the `runnable` onto the back of the `ec` queue and then say ""done processing `message`"". That said, [this blog](https://www.chrisstucchio.com/blog/2013/actors_vs_futures.html) seems to say that `Actor` and `Future` can work together, but maybe something is off about how we're composing them in our `BackendLifecycleActor` interfaces.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034:496,Performance,queue,queue,496,"(ToL, of course). I _still_ don't always know where to draw the line between creating a new `akka..Actor` and using a `scala..Future`. Something does ""smell"" funny though about the way we:; - Queue of things-to-do is on the `ec: ExecutionContext`; - A mailbox `message: AnyRef` is received off the `ec` by the dispatcher and passed to our `actor: Actor`.; - Instead of running a `runnable: Runnable` bit of code immediately, the `actor` chooses to throws the `runnable` onto the back of the `ec` queue and then say ""done processing `message`"". That said, [this blog](https://www.chrisstucchio.com/blog/2013/actors_vs_futures.html) seems to say that `Actor` and `Future` can work together, but maybe something is off about how we're composing them in our `BackendLifecycleActor` interfaces.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226573034
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226577404:400,Integrability,message,messages,400,"@cjllanwarne There's nothing stopping you from submitting a future PR proposing the changes you describe. @kshakir Don't forget about akka streams, which sit in between futures and actors on the generalized concurrency spectrum. . I recognized the URL of that blog post, I'll say that it has surprisingly useful comments at the end as well. Personally I find it a lot easier to reason about actors & messages than futures but that's not true for everyone.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226577404
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226577404:207,Performance,concurren,concurrency,207,"@cjllanwarne There's nothing stopping you from submitting a future PR proposing the changes you describe. @kshakir Don't forget about akka streams, which sit in between futures and actors on the generalized concurrency spectrum. . I recognized the URL of that blog post, I'll say that it has surprisingly useful comments at the end as well. Personally I find it a lot easier to reason about actors & messages than futures but that's not true for everyone.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226577404
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226590779:193,Modifiability,refactor,refactoring,193,"I'm totally fine with using an actor rather than a floating Future here, that should allow for better concurrency management. But the structure of the code prior to this PR was the lowest-cost refactoring of the Olde Worlde JES backend to the New World, while this PR addressed the issue raised in #1004 that there was effectively a duplication of `Retry.withRetry`. If somebody wants to ticket replacing all the usages of `Retry.withRetry` with an Actor-based approach and lobby for that to be prioritized that's great, but making changes that broad seemed like more work than had been called for in this ticket. Or you could just submit a PR as @geoffjentry suggests. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226590779
https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226590779:102,Performance,concurren,concurrency,102,"I'm totally fine with using an actor rather than a floating Future here, that should allow for better concurrency management. But the structure of the code prior to this PR was the lowest-cost refactoring of the Olde Worlde JES backend to the New World, while this PR addressed the issue raised in #1004 that there was effectively a duplication of `Retry.withRetry`. If somebody wants to ticket replacing all the usages of `Retry.withRetry` with an Actor-based approach and lobby for that to be prioritized that's great, but making changes that broad seemed like more work than had been called for in this ticket. Or you could just submit a PR as @geoffjentry suggests. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1010#issuecomment-226590779
https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226627054:32,Testability,test,tests,32,"It turns out a fair few ""fixed"" tests were actually still testing OldeWorlde things. So IMO this is a useful exercise even if our ""test %"" drops a little bit",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226627054
https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226627054:58,Testability,test,testing,58,"It turns out a fair few ""fixed"" tests were actually still testing OldeWorlde things. So IMO this is a useful exercise even if our ""test %"" drops a little bit",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226627054
https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226627054:131,Testability,test,test,131,"It turns out a fair few ""fixed"" tests were actually still testing OldeWorlde things. So IMO this is a useful exercise even if our ""test %"" drops a little bit",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226627054
https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226878436:12,Testability,test,tests,12,All centaur tests passed! 💯 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/1013/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1013#issuecomment-226878436
https://github.com/broadinstitute/cromwell/pull/1014#issuecomment-226783657:3,Availability,echo,echo,3,"To echo @cjllanwarne - my interpretation of #972 isn't ""call level only"" but the whole enchilada",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1014#issuecomment-226783657
https://github.com/broadinstitute/cromwell/pull/1014#issuecomment-226841977:16,Usability,clear,clear,16,"It's not really clear from reading #972 what the scope of this ticket should be, but ""exclude"" seems like it would be useful and hopefully not difficult to add?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1014#issuecomment-226841977
https://github.com/broadinstitute/cromwell/issues/1015#issuecomment-229632978:79,Deployability,update,update,79,@mcovarr -- I think this is part of what you've done addressing #1065. Can you update here?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1015#issuecomment-229632978
https://github.com/broadinstitute/cromwell/pull/1018#issuecomment-226882674:13,Testability,log,log,13,Do the final log locations need to be metadata'd?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1018#issuecomment-226882674
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:1231,Availability,down,downstream,1231,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:1073,Deployability,release,releases-only,1073,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:1090,Deployability,release,releases-and-snapshots,1090,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:1149,Deployability,release,releases,1149,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:1295,Deployability,continuous,continuously,1295,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:1033,Integrability,depend,depending,1033,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208:202,Modifiability,plugin,plugin,202,"**TL;DR Use `sbt publish` to push all the non-fat jars, such as `cromwell-backend >>> _2.11-0.1 <<< .jar`, and do not custom upload the fat `cromwell-backend >>> -0.1 <<< .jar`.**. Via the sbt-assembly plugin [docs](https://github.com/sbt/sbt-assembly/tree/v0.14.1#publishing-not-recommended):. > Publishing fat JARs out to the world is discouraged because non-modular JARs cause much sadness. One might think non-modularity is convenience but it quickly turns into a headache the moment your users step outside of Hello World example code. The fat jars being generated for our sub-modules should ~~die in a fire~~ be removed via [`aggregate in assembly := false`](http://stackoverflow.com/a/30828390/3320205). Also be sure to clean out the proliferation in Settings.scala of `assemblyJarName in assembly` and the viral `val commonSettings = … ++ assemblySettings ++ …`. `assemblySettings` and `assemblyJarName` only belong in the `root`!. I have also buried the lede a bit. Our cromwell versioning is... _incomplete_ at the moment, depending on if ""Add backend jar"" means releases-only or releases-and-snapshots. While we could technically publish releases as is, we shouldn't really publish any snapshots until #645 is fixed, or downstream devs are gonna have a bad time as unhashed snapshots continuously change with each re-publish.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1019#issuecomment-227342208
https://github.com/broadinstitute/cromwell/pull/1020#issuecomment-227234967:150,Energy Efficiency,monitor,monitoring,150,For JES and Local backends:; - Workflow root; - Call root. JES backend only:; - Google project; - Execution bucket; - Endpoint URL; - GCS path to the monitoring log,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1020#issuecomment-227234967
https://github.com/broadinstitute/cromwell/pull/1020#issuecomment-227234967:161,Testability,log,log,161,For JES and Local backends:; - Workflow root; - Call root. JES backend only:; - Google project; - Execution bucket; - Endpoint URL; - GCS path to the monitoring log,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1020#issuecomment-227234967
https://github.com/broadinstitute/cromwell/issues/1021#issuecomment-227486473:58,Usability,feedback,feedback,58,"We discussed this at standup today and wanted to get some feedback from @dvoet before deciding how to proceed. Currently the query API in PBE Cromwell may lag the engine/raw metadata journal by some amount of time (currently the refresh interval is 2 seconds, plus the time to do the refresh work). So it's possible that a query soon after a workflow submission will not immediately turn up any results for legitimate workflow IDs.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1021#issuecomment-227486473
https://github.com/broadinstitute/cromwell/issues/1021#issuecomment-227521672:23,Availability,error,error,23,...and if there was an error.. they just retry later,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1021#issuecomment-227521672
https://github.com/broadinstitute/cromwell/issues/1024#issuecomment-227859555:66,Testability,test,tests,66,Be aware that #1052 is attempting to sneakily pushed some awkward tests into CromwellApiServiceSpec,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1024#issuecomment-227859555
https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-227755620:107,Testability,test,tests,107,The fate / purpose of the KeyValue service should be discussed first in order to make a decision about its tests.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-227755620
https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-227760284:137,Availability,recover,recovery,137,"Let's talk after standup. I think we're going to need it - IIRC there's already something incorrectly reading/writing from metadata, and recovery was the use case which informed it in the first place & that's incoming",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-227760284
https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-227760284:137,Safety,recover,recovery,137,"Let's talk after standup. I think we're going to need it - IIRC there's already something incorrectly reading/writing from metadata, and recovery was the use case which informed it in the first place & that's incoming",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-227760284
https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-233986007:40,Testability,test,test,40,"Talked about after stand-up: before the test is fixed, the KeyValue service API needs to be figured out.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1031#issuecomment-233986007
https://github.com/broadinstitute/cromwell/issues/1034#issuecomment-232369842:0,Integrability,Depend,Depends,0,Depends upon the completion on #1005,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1034#issuecomment-232369842
https://github.com/broadinstitute/cromwell/issues/1040#issuecomment-228485970:43,Integrability,depend,depend,43,"These tests are possibly valuable but will depend on having an engine database, so this should really be 0.21 and not 0.20.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1040#issuecomment-228485970
https://github.com/broadinstitute/cromwell/issues/1040#issuecomment-228485970:6,Testability,test,tests,6,"These tests are possibly valuable but will depend on having an engine database, so this should really be 0.21 and not 0.20.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1040#issuecomment-228485970
https://github.com/broadinstitute/cromwell/issues/1042#issuecomment-229734691:24,Safety,detect,detect,24,we are request that JES detect and terminate VMs that have zombie processes. The associated job should also be retried.,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1042#issuecomment-229734691
https://github.com/broadinstitute/cromwell/issues/1043#issuecomment-232402414:108,Deployability,upgrade,upgrade,108,"It's not really a dupe -- one ticket is about the README/swagger and one is; specifically about 0.19->0.20+ upgrade instructions (which could go in the; readme as one option!). ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Wed, Jul 13, 2016 at 11:46 AM, Ruchi notifications@github.com wrote:. > @kcibul https://github.com/kcibul since this is a duplicate, is it okay; > if we just close this issue?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/1043#issuecomment-232397729,; > or mute the thread; > https://github.com/notifications/unsubscribe/ABW4g2tMjutZYDtV_3n_DEN05wi6rjllks5qVQhjgaJpZM4I69py; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1043#issuecomment-232402414
https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413:254,Deployability,update,update,254,"@geoffjentry I want to resort to authority and say ""Zen of Akka""... . Reasons for my gut feeling: A mutable val makes it look and act more like a state machine, and reduces the risk of accidentally leaking the variable pointer to other threads which may update it out of band. Obviously not likely in this case, but as a muscle memory thing a-la `Some(constant)`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413
https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413:165,Energy Efficiency,reduce,reduces,165,"@geoffjentry I want to resort to authority and say ""Zen of Akka""... . Reasons for my gut feeling: A mutable val makes it look and act more like a state machine, and reduces the risk of accidentally leaking the variable pointer to other threads which may update it out of band. Obviously not likely in this case, but as a muscle memory thing a-la `Some(constant)`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413
https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413:210,Modifiability,variab,variable,210,"@geoffjentry I want to resort to authority and say ""Zen of Akka""... . Reasons for my gut feeling: A mutable val makes it look and act more like a state machine, and reduces the risk of accidentally leaking the variable pointer to other threads which may update it out of band. Obviously not likely in this case, but as a muscle memory thing a-la `Some(constant)`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413
https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413:177,Safety,risk,risk,177,"@geoffjentry I want to resort to authority and say ""Zen of Akka""... . Reasons for my gut feeling: A mutable val makes it look and act more like a state machine, and reduces the risk of accidentally leaking the variable pointer to other threads which may update it out of band. Obviously not likely in this case, but as a muscle memory thing a-la `Some(constant)`",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1044#issuecomment-227570413
https://github.com/broadinstitute/cromwell/pull/1045#issuecomment-227654083:195,Safety,timeout,timeouts,195,"Tried tracing through the latest `CromwellTestkitSpec`, but I'm not entirely sure which of the various `ask` are timing out. For now 👍 assuming Travis gets happy. I imagine the 10 second default timeouts are just on the cusp of the length of the `SingleToArrayCoercion` wdl runs, and may succeed just in time on a re-run. So maybe kick it a few times until one can go back (again) and figure out what we actually want for the various test durations and blocking within our future/actor/ask/retry soup?. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/1045/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1045#issuecomment-227654083
https://github.com/broadinstitute/cromwell/pull/1045#issuecomment-227654083:434,Testability,test,test,434,"Tried tracing through the latest `CromwellTestkitSpec`, but I'm not entirely sure which of the various `ask` are timing out. For now 👍 assuming Travis gets happy. I imagine the 10 second default timeouts are just on the cusp of the length of the `SingleToArrayCoercion` wdl runs, and may succeed just in time on a re-run. So maybe kick it a few times until one can go back (again) and figure out what we actually want for the various test durations and blocking within our future/actor/ask/retry soup?. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/1045/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1045#issuecomment-227654083
https://github.com/broadinstitute/cromwell/pull/1048#issuecomment-227777171:21,Testability,test,tests,21,"Are there any useful tests of the ServiceRegistry itself? Otherwise, might as well just delete the whole file",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1048#issuecomment-227777171
https://github.com/broadinstitute/cromwell/pull/1048#issuecomment-227777402:37,Testability,test,testing,37,"But, I agree with the concept of not testing KVP service in `ServiceRegistrySpec` 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/1048/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell)",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1048#issuecomment-227777402
https://github.com/broadinstitute/cromwell/pull/1050#issuecomment-228136691:189,Security,encrypt,encrypted,189,"@kshakir the 'where should stuff go' convo got clipped. Looking at your links, one could make an argument that the wdl should go in `src/it` (which still doesn't answer the question of the encrypted travis file). I don't really care where they go, so if you do just tell me where to stick 'em otherwise i'll leave them in src/main/resources",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1050#issuecomment-228136691
https://github.com/broadinstitute/cromwell/issues/1051#issuecomment-245964356:135,Availability,robust,robust,135,@kcibul It might not be. I made the same claim at one point and got a lot of hesitant looks from fellow Cromwellians. We're a lot more robust to storing this stuff but at some point it still needs to be gathered into a single array object,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1051#issuecomment-245964356
https://github.com/broadinstitute/cromwell/issues/1051#issuecomment-248052291:60,Testability,benchmark,benchmark,60,This is with a 5k scatter... let's verify with 20k and then benchmark how far it can go,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1051#issuecomment-248052291
https://github.com/broadinstitute/cromwell/pull/1056#issuecomment-228054076:28,Testability,test,tests,28,:+1: turning on a couple of tests diminishes coverage?. [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/1056/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1056#issuecomment-228054076
https://github.com/broadinstitute/cromwell/pull/1056#issuecomment-228054459:101,Energy Efficiency,green,green,101,"Yeah weird, I don't have that much trust in coverall honestly, because although it's -0.02 it's also green..",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1056#issuecomment-228054459
https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006:59,Integrability,message,message,59,"It was taking 12-14 seconds between the time the GetStatus message was received by the ServiceRegistryActor and the time it was received by the EngineMetadataServiceActor. All sorts of other test stuff was executing in the interim, but the timeout for status queries previously defaulted to 10 seconds so that wasn't going to work. Added an explicit ~~30~~ 60 second ~~dilated~~ timeout as in many other spots.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006
https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006:240,Safety,timeout,timeout,240,"It was taking 12-14 seconds between the time the GetStatus message was received by the ServiceRegistryActor and the time it was received by the EngineMetadataServiceActor. All sorts of other test stuff was executing in the interim, but the timeout for status queries previously defaulted to 10 seconds so that wasn't going to work. Added an explicit ~~30~~ 60 second ~~dilated~~ timeout as in many other spots.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006
https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006:379,Safety,timeout,timeout,379,"It was taking 12-14 seconds between the time the GetStatus message was received by the ServiceRegistryActor and the time it was received by the EngineMetadataServiceActor. All sorts of other test stuff was executing in the interim, but the timeout for status queries previously defaulted to 10 seconds so that wasn't going to work. Added an explicit ~~30~~ 60 second ~~dilated~~ timeout as in many other spots.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006
https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006:191,Testability,test,test,191,"It was taking 12-14 seconds between the time the GetStatus message was received by the ServiceRegistryActor and the time it was received by the EngineMetadataServiceActor. All sorts of other test stuff was executing in the interim, but the timeout for status queries previously defaulted to 10 seconds so that wasn't going to work. Added an explicit ~~30~~ 60 second ~~dilated~~ timeout as in many other spots.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-227978006
https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-228047119:81,Testability,test,tests,81,Should we also look into a way not to have the same ServiceRegistryActor for all tests ?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-228047119
https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-228048644:71,Testability,test,tests,71,"I'm not actually sure we do have the same ServiceRegistryActor for all tests, so we'd have to start looking into that first. 😄",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1057#issuecomment-228048644
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228096103:27,Performance,perform,perform,27,"@kcibul I believe GATK can perform incremental joint calling, so then you should be able to use a collection of Cromwells submissions to build it up. Would that work?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228096103
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228109757:135,Deployability,pipeline,pipeline,135,"It's really a question of time and cost efficiency, but since we've got the; actual GATK team and joint calling authors working on the pipeline we'll; definitely take advantage of all the features there are (and they'll write; the ones we need!). ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Thu, Jun 23, 2016 at 11:55 AM, Paul Grosu notifications@github.com; wrote:. > @kcibul https://github.com/kcibul I believe GATK can perform; > incremental joint calling, so then you should be able to use a collection; > of Cromwells submissions to build it up. Would that work?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228096103,; > or mute the thread; > https://github.com/notifications/unsubscribe/ABW4gxuO55o58LyKHTfSEVvS97Z1-7Nxks5qOqxWgaJpZM4I8rmu; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228109757
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228109757:520,Performance,perform,perform,520,"It's really a question of time and cost efficiency, but since we've got the; actual GATK team and joint calling authors working on the pipeline we'll; definitely take advantage of all the features there are (and they'll write; the ones we need!). ---. Kristian Cibulskis; Chief Architect, Data Sciences & Data Engineering; Broad Institute of MIT and Harvard; kcibul@broadinstitute.org. On Thu, Jun 23, 2016 at 11:55 AM, Paul Grosu notifications@github.com; wrote:. > @kcibul https://github.com/kcibul I believe GATK can perform; > incremental joint calling, so then you should be able to use a collection; > of Cromwells submissions to build it up. Would that work?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228096103,; > or mute the thread; > https://github.com/notifications/unsubscribe/ABW4gxuO55o58LyKHTfSEVvS97Z1-7Nxks5qOqxWgaJpZM4I8rmu; > .",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228109757
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:376,Deployability,Pipeline,Pipeline,376,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:487,Deployability,deploy,deployment-manager,487,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:579,Deployability,Pipeline,Pipelines,579,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:703,Deployability,deploy,deployment-manager,703,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:813,Deployability,pipeline,pipelines,813,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:841,Deployability,pipeline,pipeline,841,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:881,Deployability,pipeline,pipeline-data,881,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:200,Performance,cache,cached,200,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:178,Security,access,accessible,178,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:519,Usability,guid,guide,519,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605:735,Usability,guid,guide,735,"Hi Kristian,. I understand, but what you're asking is very possible - see my previous discussion here about creating 1 billion simultaneous connections, and anything that is not accessible can be pre-cached via buckets during idle periods (i.e. nightly):. https://github.com/googlegenomics/utils-java/issues/62#issuecomment-220444203. So you should be able to create your own Pipeline implementation very easily via `gloud create`, [VM metadata startup scripts](https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts) and/or Dataflow Pipelines, and mimic JES:. https://cloud.google.com/sdk/gcloud/reference/compute/instances/create. https://cloud.google.com/deployment-manager/step-by-step-guide/setting-metadata-and-startup-scripts. https://cloud.google.com/dataflow/pipelines/constructing-your-pipeline#applying-transforms-to-process-pipeline-data. If you look at the JES API, you'll notice most of it mirrors the `gcloud` commands and parameters:. https://www.googleapis.com/discovery/v1/apis/genomics/v1alpha2/rest. Again the concepts to speed up searches on dynamically streaming (processed) analysis results has a foundation via inverted indices, which search engines use all the time - I posted a couple of these here:. https://github.com/ga4gh/schemas/pull/253#issuecomment-97525342. https://github.com/ga4gh/schemas/issues/142#issuecomment-55518571. This way your searches are always fresh and would operate without any delay. Hope it helps,; Paul",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1058#issuecomment-228175605
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897:6,Performance,concurren,concurrent,6,"Hmm . concurrent tests =>; concurrent ServiceRegistryActors =>; concurrent EngineMetadataServiceActors =>; concurrent MetadataSummaryRefreshActors. The system was meant to have only a single MetadataSummaryRefreshActor running, so this might introduce weirdness.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897:27,Performance,concurren,concurrent,27,"Hmm . concurrent tests =>; concurrent ServiceRegistryActors =>; concurrent EngineMetadataServiceActors =>; concurrent MetadataSummaryRefreshActors. The system was meant to have only a single MetadataSummaryRefreshActor running, so this might introduce weirdness.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897:64,Performance,concurren,concurrent,64,"Hmm . concurrent tests =>; concurrent ServiceRegistryActors =>; concurrent EngineMetadataServiceActors =>; concurrent MetadataSummaryRefreshActors. The system was meant to have only a single MetadataSummaryRefreshActor running, so this might introduce weirdness.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897:107,Performance,concurren,concurrent,107,"Hmm . concurrent tests =>; concurrent ServiceRegistryActors =>; concurrent EngineMetadataServiceActors =>; concurrent MetadataSummaryRefreshActors. The system was meant to have only a single MetadataSummaryRefreshActor running, so this might introduce weirdness.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897:17,Testability,test,tests,17,"Hmm . concurrent tests =>; concurrent ServiceRegistryActors =>; concurrent EngineMetadataServiceActors =>; concurrent MetadataSummaryRefreshActors. The system was meant to have only a single MetadataSummaryRefreshActor running, so this might introduce weirdness.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228141897
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228143719:167,Safety,timeout,timeout,167,"To be clear I'm not 💩 💩 ing the multiple ServiceRegistryActor idea, just pointing out one potential gotcha I can see. I have reservations about my hacky ""crank up the timeout"" ""solution"" in the #1057 PR and would definitely like to look at other options like this.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228143719
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228143719:6,Usability,clear,clear,6,"To be clear I'm not 💩 💩 ing the multiple ServiceRegistryActor idea, just pointing out one potential gotcha I can see. I have reservations about my hacky ""crank up the timeout"" ""solution"" in the #1057 PR and would definitely like to look at other options like this.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228143719
https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228145223:205,Testability,test,test,205,"Hmm ok, I was just curious to see what it would do honestly more than advocating for it, but I didn't think about the MetadataSummaryRefreshActor. I still think it's weird to build different WMA for every test but have them all pointing to the same ServiceActor.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1060#issuecomment-228145223
https://github.com/broadinstitute/cromwell/issues/1063#issuecomment-241831506:11,Testability,test,test,11,There is a test case for this already that is disabled (MWDActorSpec),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1063#issuecomment-241831506
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:413,Availability,error,error,413,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:464,Availability,Error,Error,464,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:12,Energy Efficiency,Green,Green,12,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:897,Integrability,rout,routinely,897,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:748,Modifiability,variab,variable,748,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:699,Performance,load,load,699,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075:716,Performance,load,load,716,"Quoth Dave: Green Team launched 50 workflows and could initially query the API despite some slowness. After they’ve been running for 45 mins or so, hitting the API is only intermittently successful:. ```; https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/query; Ooops! The server was not able to produce a timely response to your request.; Please try again in a short while!; ```. ```; Unexpected error while awaiting Cromwell Workflow completion: Error hitting REST API: https://cromwell.gotc-staging.broadinstitute.org/api/workflows/v1/5296889b-8b88-41db-a5fa-d1071ac22a... => Unexpected response code: 502; ```. Just trying to get to the swagger page takes a couple of minutes to load or fails to load altogether. This is highly variable - about 2 hours in we still have 50 workflows running and API queries are coming back very quickly. In production using Cromwell 0.19, GotC routinely runs ~200-500 workflows simultaneously.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228405075
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228409579:45,Testability,test,testing,45,@dshiga is this how you ran the 50 before in testing? Are they 50 simultaneous submissions?,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228409579
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228411072:47,Deployability,release,release,47,"Yes, we ran the 50 the same way for a previous release and did not notice any slowness. I'm not sure we checked on it as much during the first couple of hours last time though. About 3 hours in now, it seems back to normal, no slowness. The submissions are as close to simultaneous as we can get, meaning as fast as Cromwell will accept submissions from our script. Cromwell doesn't respond right away for each submission, so it takes about 5 minutes to submit 50.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228411072
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772:602,Availability,down,down,602,"Had a brief chat w/ @dshiga - I was wondering if all slowness was directly tied to reading from metadata or general slowness and it was the latter (not that it couldn't be _caused_ by reading from MD, but it's across the board slowness). Three thoughts:; - We were talking yesterday about how someone not named me should try setting up typesafe monitor and use it to debug/profile/analyze. No time like the present!; - I can't find the ticket (@kcibul - do you know the right string to search for?) but we should look into the thread pools/dispatchers. This could be a case where something is bringing down the whole system but bulkheading would keep everything else responsive; - A while back we talked about streamlining submission such that WF submissions get a ""Submitted"" status but aren't necessarily immediately launched, and the system would pull them - allowing us to tune the rate at which we pull. Perhaps time to resurrect this one?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772:345,Energy Efficiency,monitor,monitor,345,"Had a brief chat w/ @dshiga - I was wondering if all slowness was directly tied to reading from metadata or general slowness and it was the latter (not that it couldn't be _caused_ by reading from MD, but it's across the board slowness). Three thoughts:; - We were talking yesterday about how someone not named me should try setting up typesafe monitor and use it to debug/profile/analyze. No time like the present!; - I can't find the ticket (@kcibul - do you know the right string to search for?) but we should look into the thread pools/dispatchers. This could be a case where something is bringing down the whole system but bulkheading would keep everything else responsive; - A while back we talked about streamlining submission such that WF submissions get a ""Submitted"" status but aren't necessarily immediately launched, and the system would pull them - allowing us to tune the rate at which we pull. Perhaps time to resurrect this one?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772:877,Performance,tune,tune,877,"Had a brief chat w/ @dshiga - I was wondering if all slowness was directly tied to reading from metadata or general slowness and it was the latter (not that it couldn't be _caused_ by reading from MD, but it's across the board slowness). Three thoughts:; - We were talking yesterday about how someone not named me should try setting up typesafe monitor and use it to debug/profile/analyze. No time like the present!; - I can't find the ticket (@kcibul - do you know the right string to search for?) but we should look into the thread pools/dispatchers. This could be a case where something is bringing down the whole system but bulkheading would keep everything else responsive; - A while back we talked about streamlining submission such that WF submissions get a ""Submitted"" status but aren't necessarily immediately launched, and the system would pull them - allowing us to tune the rate at which we pull. Perhaps time to resurrect this one?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772:667,Usability,responsiv,responsive,667,"Had a brief chat w/ @dshiga - I was wondering if all slowness was directly tied to reading from metadata or general slowness and it was the latter (not that it couldn't be _caused_ by reading from MD, but it's across the board slowness). Three thoughts:; - We were talking yesterday about how someone not named me should try setting up typesafe monitor and use it to debug/profile/analyze. No time like the present!; - I can't find the ticket (@kcibul - do you know the right string to search for?) but we should look into the thread pools/dispatchers. This could be a case where something is bringing down the whole system but bulkheading would keep everything else responsive; - A while back we talked about streamlining submission such that WF submissions get a ""Submitted"" status but aren't necessarily immediately launched, and the system would pull them - allowing us to tune the rate at which we pull. Perhaps time to resurrect this one?",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228412772
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:404,Performance,concurren,concurrent,404,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:462,Performance,concurren,concurrent,462,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:532,Performance,concurren,concurrent,532,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:649,Performance,concurren,concurrent,649,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:758,Performance,concurren,concurrent,758,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:862,Performance,concurren,concurrent,862,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:948,Performance,concurren,concurrent,948,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:320,Safety,Unsafe,Unsafe,320,"Stack traces show lots of threads on the default dispatcher backed up creating Google credentials like so:. ```; ""cromwell-system-akka.actor.default-dispatcher-49"" #236 prio=5 os_prio=31 tid=0x00007faafe1ff800 nid=0x12903 waiting on condition [0x0000000133659000]; java.lang.Thread.State: WAITING (parking); at sun.misc.Unsafe.park(Native Method); - parking to wait for <0x00000007bb5f1698> (a java.util.concurrent.locks.ReentrantLock$NonfairSync); at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:1447,Security,validat,validateCredentials,1447,ncurrent.locks.LockSupport.park(LockSupport.java:175); at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem(package.scala:26); at cromwell.backend.impl.jes.JesWorkflowPaths.<init>(JesWorkflowPaths.scala:18); at cromwell.backend.impl.jes.JesInitializationActor.<init>(JesInitializationActor.scala:43); at cromwell.backend.impl.jes.JesInitializationActor$$anonfun$props$1.apply(JesInitializationActor.scala:22); at cromwell.backend.impl.jes.JesInitializationActor$$anonfun$props$1.apply(JesInitializationActor.scala:22); ```. The two problem actors here are JesAsyncBackend,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:1544,Security,validat,validateCredentials,1544,edSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870); at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199); at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209); at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285); at com.google.api.client.auth.oauth2.Credential.refreshToken(Credential.java:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem(package.scala:26); at cromwell.backend.impl.jes.JesWorkflowPaths.<init>(JesWorkflowPaths.scala:18); at cromwell.backend.impl.jes.JesInitializationActor.<init>(JesInitializationActor.scala:43); at cromwell.backend.impl.jes.JesInitializationActor$$anonfun$props$1.apply(JesInitializationActor.scala:22); at cromwell.backend.impl.jes.JesInitializationActor$$anonfun$props$1.apply(JesInitializationActor.scala:22); ```. The two problem actors here are JesAsyncBackendJobExecutionActor and JesInitializationActor. JobPreparationActor also triggers a similar stack t,MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798:3049,Security,validat,validating,3049,"a:486); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply$mcZ$sp(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.GoogleAuthMode$$anonfun$1.apply(GoogleAuthMode.scala:79); at scala.util.Try$.apply(Try.scala:192); at cromwell.filesystems.gcs.GoogleAuthMode$class.validateCredentials(GoogleAuthMode.scala:79); at cromwell.filesystems.gcs.ApplicationDefaultMode.validateCredentials(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.credential(GoogleAuthMode.scala:64); at cromwell.filesystems.gcs.ApplicationDefaultMode.credential(GoogleAuthMode.scala:138); at cromwell.filesystems.gcs.GoogleAuthMode$class.buildStorage(GoogleAuthMode.scala:95); at cromwell.filesystems.gcs.ApplicationDefaultMode.buildStorage(GoogleAuthMode.scala:138); at cromwell.backend.impl.jes.io.package$.buildFilesystem(package.scala:26); at cromwell.backend.impl.jes.JesWorkflowPaths.<init>(JesWorkflowPaths.scala:18); at cromwell.backend.impl.jes.JesInitializationActor.<init>(JesInitializationActor.scala:43); at cromwell.backend.impl.jes.JesInitializationActor$$anonfun$props$1.apply(JesInitializationActor.scala:22); at cromwell.backend.impl.jes.JesInitializationActor$$anonfun$props$1.apply(JesInitializationActor.scala:22); ```. The two problem actors here are JesAsyncBackendJobExecutionActor and JesInitializationActor. JobPreparationActor also triggers a similar stack trace, but it's using the slow-actor-dispatcher so this doesn't adversely impact submissions. Moving JesAsyncBackendJobExecutionActor and JesInitializationActor to slow-actor-dispatcher as well enabled me to submit up to 50 workflows immediately (I didn't try any more beyond this). The auth / filesystem code was heavily reworked in #702 after 0.19_hotfix was branched. There's a known issue with GCS filesystems not being reused #813 and it looks like there could be another issue with validating credentials excessively.",MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/issues/1065#issuecomment-228816798
https://github.com/broadinstitute/cromwell/pull/1069#issuecomment-229430040:51,Testability,test,tests,51,I'll leave the existential dilemmas of some of the tests up to you. Otherwise 👍 . [![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/broadinstitute/cromwell/pull-request/1069/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=broadinstitute/cromwell),MatchSource.ISSUE_COMMENT,broadinstitute,cromwell,87,https://cromwell.readthedocs.io/en/latest/,https://github.com/broadinstitute/cromwell/pull/1069#issuecomment-229430040
